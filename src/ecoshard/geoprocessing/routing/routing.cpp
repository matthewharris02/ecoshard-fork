/* Generated by Cython 0.29.23 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_23"
#define CYTHON_HEX_VERSION 0x001D17F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ecoshard__geoprocessing__routing__routing
#define __PYX_HAVE_API__ecoshard__geoprocessing__routing__routing
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <stddef.h>
#include <time.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <deque>
#include <list>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include "LRUCache.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "src\\geoprocessing\\routing\\routing.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_StreamConnectivityPoint;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FinishType;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_GreaterPixel;

/* "src/geoprocessing/routing/routing.pyx":114
 * 
 * # this is the class type that'll get stored in the priority queue
 * cdef struct PixelType:             # <<<<<<<<<<<<<<
 *     double value  # pixel value
 *     int xi  # pixel x coordinate in the raster
 */
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType {
  double value;
  int xi;
  int yi;
  int priority;
};

/* "src/geoprocessing/routing/routing.pyx":122
 * # this struct is used to record an intermediate flow pixel's last calculated
 * # direction and the flow accumulation value so far
 * cdef struct FlowPixelType:             # <<<<<<<<<<<<<<
 *     int xi
 *     int yi
 */
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType {
  int xi;
  int yi;
  int last_flow_dir;
  double value;
};

/* "src/geoprocessing/routing/routing.pyx":132
 * # d8 flow direction to walk and the source_id indicates the source stream it
 * # spawned from
 * cdef struct StreamConnectivityPoint:             # <<<<<<<<<<<<<<
 *     int xi
 *     int yi
 */
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_StreamConnectivityPoint {
  int xi;
  int yi;
  int upstream_d8_dir;
  int source_id;
};

/* "src/geoprocessing/routing/routing.pyx":139
 * 
 * # used to record x/y locations as needed
 * cdef struct CoordinateType:             # <<<<<<<<<<<<<<
 *     int xi
 *     int yi
 */
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType {
  int xi;
  int yi;
};

/* "src/geoprocessing/routing/routing.pyx":144
 * 
 * 
 * cdef struct FinishType:             # <<<<<<<<<<<<<<
 *     int xi
 *     int yi
 */
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FinishType {
  int xi;
  int yi;
  int n_pushed;
};

/* "src/geoprocessing/routing/routing.pyx":151
 * # this ctype is used to store the block ID and the block buffer as one object
 * # inside Managed Raster
 * ctypedef pair[int, double*] BlockBufferPair             # <<<<<<<<<<<<<<
 * 
 * # this type is used to create a priority queue on the custom Pixel tpye
 */
typedef std::pair<int,double *>  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_BlockBufferPair;

/* "src/geoprocessing/routing/routing.pyx":154
 * 
 * # this type is used to create a priority queue on the custom Pixel tpye
 * ctypedef priority_queue[             # <<<<<<<<<<<<<<
 *     PixelType, deque[PixelType], GreaterPixel] PitPriorityQueueType
 * 
 */
typedef std::priority_queue<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType,std::deque<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType> ,__pyx_t_8ecoshard_13geoprocessing_7routing_7routing_GreaterPixel>  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PitPriorityQueueType;

/* "src/geoprocessing/routing/routing.pyx":158
 * 
 * # this queue is used to record flow directions
 * ctypedef queue[int] IntQueueType             # <<<<<<<<<<<<<<
 * 
 * # type used to store x/y coordinates and a queue to put them in
 */
typedef std::queue<int>  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_IntQueueType;

/* "src/geoprocessing/routing/routing.pyx":161
 * 
 * # type used to store x/y coordinates and a queue to put them in
 * ctypedef queue[CoordinateType] CoordinateQueueType             # <<<<<<<<<<<<<<
 * 
 * # functor for priority queue of pixels
 */
typedef std::queue<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType>  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType;
struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_GreaterPixel {
  virtual int operator()(struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType &, struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType &);
  virtual ~__pyx_t_8ecoshard_13geoprocessing_7routing_7routing_GreaterPixel() {

    /* "src/geoprocessing/routing/routing.pyx":164
 * 
 * # functor for priority queue of pixels
 * cdef cppclass GreaterPixel nogil:             # <<<<<<<<<<<<<<
 *     bint get "operator()"(PixelType& lhs, PixelType& rhs):
 *         # lhs is > than rhs if its value is greater or if it's equal if
 */
  }
};

/* "src/geoprocessing/routing/routing.pyx":180
 * # a class to allow fast random per-pixel access to a raster for both setting
 * # and reading pixels.
 * cdef class _ManagedRaster:             # <<<<<<<<<<<<<<
 *     cdef LRUCache[int, double*]* lru_cache
 *     cdef cset[int] dirty_blocks
 */
struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster {
  PyObject_HEAD
  struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_vtab;
  LRUCache<int,double *>  *lru_cache;
  std::set<int>  dirty_blocks;
  int block_xsize;
  int block_ysize;
  int block_xmod;
  int block_ymod;
  int block_xbits;
  int block_ybits;
  int raster_x_size;
  int raster_y_size;
  int block_nx;
  int block_ny;
  int write_mode;
  PyObject *raster_path;
  int band_id;
  int closed;
};



struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster {
  void (*set)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int, double);
  double (*get)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int);
  void (*_load_block)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int);
  void (*flush)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *);
};
static struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_vtabptr_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster;
static CYTHON_INLINE void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int, double);
static CYTHON_INLINE double __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* None.proto */
static CYTHON_INLINE int __Pyx_div_int(int, int);

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi, double __pyx_v_value); /* proto*/
static CYTHON_INLINE double __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi); /* proto*/
static void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster__load_block(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, int __pyx_v_block_index); /* proto*/
static void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_flush(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'libc.time' */

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.stack' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'ecoshard.geoprocessing.routing.routing' */
static PyTypeObject *__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster = 0;
static float __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD;
static int __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS;
static int __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_MANAGED_RASTER_N_BLOCKS;
static double __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;
static double __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2;
static double __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV;
static int *__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET;
static int *__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET;
static int *__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION;
static int __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(double, double, double, double); /*proto*/
static void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__diagonal_fill_step(int, int, int, long, long, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, long, PyObject *); /*proto*/
static int __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__in_watershed(int, int, int, int, int, int, int, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, long); /*proto*/
static PyObject *__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__calculate_stream_geometry(int, int, int, PyObject *, int, int, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t = { "uint8_t", NULL, sizeof(__pyx_t_5numpy_uint8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint8_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_int32 = { "npy_int32", NULL, sizeof(npy_int32), { 0 }, 0, IS_UNSIGNED(npy_int32) ? 'U' : 'I', IS_UNSIGNED(npy_int32), 0 };
#define __Pyx_MODULE_NAME "ecoshard.geoprocessing.routing.routing"
extern int __pyx_module_is_main_ecoshard__geoprocessing__routing__routing;
int __pyx_module_is_main_ecoshard__geoprocessing__routing__routing = 0;

/* Implementation of 'ecoshard.geoprocessing.routing.routing' */
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_[] = ", ";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_1f[] = ".1f";
static const char __pyx_k_ID[] = "ID";
static const char __pyx_k_d8[] = "d8";
static const char __pyx_k_g0[] = "g0";
static const char __pyx_k_g1[] = "g1";
static const char __pyx_k_g2[] = "g2";
static const char __pyx_k_g3[] = "g3";
static const char __pyx_k_g4[] = "g4";
static const char __pyx_k_g5[] = "g5";
static const char __pyx_k_of[] = " of ";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_xa[] = "xa";
static const char __pyx_k_xb[] = "xb";
static const char __pyx_k_xi[] = "xi";
static const char __pyx_k_ya[] = "ya";
static const char __pyx_k_yb[] = "yb";
static const char __pyx_k_yi[] = "yi";
static const char __pyx_k__33[] = "_";
static const char __pyx_k_d_n[] = "d_n";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_fid[] = "fid";
static const char __pyx_k_i_n[] = "i_n";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_mfd[] = "mfd";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_ogr[] = "ogr";
static const char __pyx_k_ops[] = "ops";
static const char __pyx_k_osr[] = "osr";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_wkb[] = "wkb";
static const char __pyx_k_x_f[] = "x_f";
static const char __pyx_k_x_l[] = "x_l";
static const char __pyx_k_x_n[] = "x_n";
static const char __pyx_k_x_p[] = "x_p";
static const char __pyx_k_x_u[] = "x_u";
static const char __pyx_k_y_f[] = "y_f";
static const char __pyx_k_y_l[] = "y_l";
static const char __pyx_k_y_n[] = "y_n";
static const char __pyx_k_y_p[] = "y_p";
static const char __pyx_k_y_u[] = "y_u";
static const char __pyx_k_GPKG[] = "GPKG";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_ds_x[] = "ds_x";
static const char __pyx_k_ds_y[] = "ds_y";
static const char __pyx_k_gdal[] = "gdal";
static const char __pyx_k_i_sn[] = "i_sn";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_log2[] = "log2";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_us_x[] = "us_x";
static const char __pyx_k_us_y[] = "us_y";
static const char __pyx_k_xi_n[] = "xi_n";
static const char __pyx_k_xi_q[] = "xi_q";
static const char __pyx_k_xoff[] = "xoff";
static const char __pyx_k_yi_n[] = "yi_n";
static const char __pyx_k_yi_q[] = "yi_q";
static const char __pyx_k_yoff[] = "yoff";
static const char __pyx_k_GTiff[] = "GTiff";
static const char __pyx_k_Union[] = "Union";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_ds_fa[] = "ds_fa";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_n_dir[] = "n_dir";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_osgeo[] = "osgeo";
static const char __pyx_k_p_val[] = "p_val";
static const char __pyx_k_pixel[] = "pixel";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_scipy[] = "scipy";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_stats[] = "stats";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_us_fa[] = "us_fa";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_xi_bn[] = "xi_bn";
static const char __pyx_k_xi_sn[] = "xi_sn";
static const char __pyx_k_yi_bn[] = "yi_bn";
static const char __pyx_k_yi_sn[] = "yi_sn";
static const char __pyx_k_Create[] = "Create";
static const char __pyx_k_GetFID[] = "GetFID";
static const char __pyx_k_LOGGER[] = "LOGGER";
static const char __pyx_k_OpenEx[] = "OpenEx";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_ds_x_1[] = "ds_x_1";
static const char __pyx_k_ds_y_1[] = "ds_y_1";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_finish[] = "finish";
static const char __pyx_k_gmtime[] = "gmtime";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_n_cols[] = "n_cols";
static const char __pyx_k_n_rows[] = "n_rows";
static const char __pyx_k_nodata[] = "nodata";
static const char __pyx_k_outlet[] = "outlet";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_proj_x[] = "proj_x";
static const char __pyx_k_proj_y[] = "proj_y";
static const char __pyx_k_raster[] = " raster.";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_rmtree[] = "rmtree";
static const char __pyx_k_shutil[] = "shutil";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_suffix[] = "suffix";
static const char __pyx_k_Feature[] = "Feature";
static const char __pyx_k_OFTReal[] = "OFTReal";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_bak_tif[] = "_bak.tif";
static const char __pyx_k_band_id[] = "band_id";
static const char __pyx_k_delta_x[] = "delta_x";
static const char __pyx_k_delta_y[] = "delta_y";
static const char __pyx_k_dirname[] = "dirname";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_left_in[] = "left_in";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_mkdtemp[] = "mkdtemp";
static const char __pyx_k_n_bands[] = "n_bands";
static const char __pyx_k_n_slope[] = "n_slope";
static const char __pyx_k_n_steps[] = "n_steps";
static const char __pyx_k_next_id[] = "next_id";
static const char __pyx_k_opening[] = "opening ";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_order_1[] = "\"order\"=1";
static const char __pyx_k_out_dir[] = "out_dir";
static const char __pyx_k_payload[] = "payload";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_shapely[] = "shapely";
static const char __pyx_k_tmp_dir[] = "tmp_dir";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_xi_root[] = "xi_root";
static const char __pyx_k_yi_root[] = "yi_root";
static const char __pyx_k_AddPoint[] = "AddPoint";
static const char __pyx_k_GDT_Byte[] = "GDT_Byte";
static const char __pyx_k_Geometry[] = "Geometry";
static const char __pyx_k_GetField[] = "GetField";
static const char __pyx_k_GetLayer[] = "GetLayer";
static const char __pyx_k_SetField[] = "SetField";
static const char __pyx_k_basename[] = "basename";
static const char __pyx_k_complete[] = "% complete";
static const char __pyx_k_copyfile[] = "copyfile";
static const char __pyx_k_datatype[] = "datatype";
static const char __pyx_k_dem_band[] = "dem_band";
static const char __pyx_k_edge_dir[] = "edge_dir";
static const char __pyx_k_flow_dir[] = "flow_dir";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_drain[] = "is_drain";
static const char __pyx_k_makedirs[] = "makedirs";
static const char __pyx_k_n_height[] = "n_height";
static const char __pyx_k_n_pixels[] = "n_pixels";
static const char __pyx_k_n_points[] = "n_points";
static const char __pyx_k_n_pushed[] = "n_pushed";
static const char __pyx_k_open_set[] = "open_set";
static const char __pyx_k_outlet_1[] = "\"outlet\"=1";
static const char __pyx_k_outlet_x[] = "outlet_x";
static const char __pyx_k_outlet_y[] = "outlet_y";
static const char __pyx_k_priority[] = "priority";
static const char __pyx_k_retrying[] = ", retrying...";
static const char __pyx_k_right_in[] = "right_in";
static const char __pyx_k_river_id[] = "river_id";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_splitext[] = "splitext";
static const char __pyx_k_strftime[] = "strftime";
static const char __pyx_k_tempfile[] = "tempfile";
static const char __pyx_k_test_dir[] = "test_dir";
static const char __pyx_k_wkbPoint[] = "wkbPoint";
static const char __pyx_k_FieldDefn[] = "FieldDefn";
static const char __pyx_k_GA_Update[] = "GA_Update";
static const char __pyx_k_GDT_Int32[] = "GDT_Int32";
static const char __pyx_k_OF_RASTER[] = "OF_RASTER";
static const char __pyx_k_OF_VECTOR[] = "OF_VECTOR";
static const char __pyx_k_TILED_YES[] = "TILED=YES";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_discovery[] = "discovery";
static const char __pyx_k_edge_side[] = "edge_side";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_equal_var[] = "equal_var";
static const char __pyx_k_exception[] = "exception";
static const char __pyx_k_fill_pits[] = "(fill pits): ";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_is_outlet[] = "is_outlet";
static const char __pyx_k_linemerge[] = "linemerge";
static const char __pyx_k_min_p_val[] = "min_p_val";
static const char __pyx_k_pit_queue[] = "pit_queue";
static const char __pyx_k_pixel_val[] = "pixel_val";
static const char __pyx_k_preempted[] = "preempted";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_source_id[] = "source_id";
static const char __pyx_k_stream_mr[] = "stream_mr";
static const char __pyx_k_thresh_fa[] = "thresh_fa";
static const char __pyx_k_ttest_ind[] = "ttest_ind";
static const char __pyx_k_win_xsize[] = "win_xsize";
static const char __pyx_k_win_ysize[] = "win_ysize";
static const char __pyx_k_CreateCopy[] = "CreateCopy";
static const char __pyx_k_FlushCache[] = "FlushCache";
static const char __pyx_k_GetFeature[] = "GetFeature";
static const char __pyx_k_OFTInteger[] = "OFTInteger";
static const char __pyx_k_SetFeature[] = "SetFeature";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_WriteArray[] = "WriteArray";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_boundary_x[] = "boundary_x";
static const char __pyx_k_boundary_y[] = "boundary_y";
static const char __pyx_k_center_val[] = "center_val";
static const char __pyx_k_complete_2[] = " complete";
static const char __pyx_k_dem_nodata[] = "dem_nodata";
static const char __pyx_k_dem_raster[] = "dem_raster";
static const char __pyx_k_feature_id[] = "feature_id";
static const char __pyx_k_fill_queue[] = "fill_queue";
static const char __pyx_k_finish_tif[] = "finish.tif";
static const char __pyx_k_flow_accum[] = "flow_accum";
static const char __pyx_k_flow_dir_n[] = "flow_dir_n";
static const char __pyx_k_flow_pixel[] = "flow_pixel";
static const char __pyx_k_iterblocks[] = "iterblocks";
static const char __pyx_k_more_times[] = " more times.";
static const char __pyx_k_multi_line[] = "multi_line";
static const char __pyx_k_n_distance[] = "n_distance";
static const char __pyx_k_n_x_blocks[] = "n_x_blocks";
static const char __pyx_k_outlet_fid[] = "outlet_fid";
static const char __pyx_k_pour_point[] = "pour_point";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_raster_srs[] = "raster_srs";
static const char __pyx_k_sink_pixel[] = "sink_pixel";
static const char __pyx_k_stream_fid[] = "stream_fid";
static const char __pyx_k_stream_val[] = "stream_val";
static const char __pyx_k_test_order[] = "test_order";
static const char __pyx_k_weight_val[] = "weight_val";
static const char __pyx_k_wkbPolygon[] = "wkbPolygon";
static const char __pyx_k_write_mode[] = "write_mode";
static const char __pyx_k_1f_complete[] = "%.1f%% complete";
static const char __pyx_k_AddGeometry[] = "AddGeometry";
static const char __pyx_k_BIGTIFF_YES[] = "BIGTIFF=YES";
static const char __pyx_k_CreateField[] = "CreateField";
static const char __pyx_k_CreateLayer[] = "CreateLayer";
static const char __pyx_k_DeleteField[] = "DeleteField";
static const char __pyx_k_ExportToWkb[] = "ExportToWkb";
static const char __pyx_k_GDT_Float64[] = "GDT_Float64";
static const char __pyx_k_GDT_Unknown[] = "GDT_Unknown";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_ReadAsArray[] = "ReadAsArray";
static const char __pyx_k_SetGeometry[] = "SetGeometry";
static const char __pyx_k_all_defined[] = "all_defined";
static const char __pyx_k_base_nodata[] = "base_nodata";
static const char __pyx_k_block_array[] = "block_array";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_deleted_set[] = "deleted_set";
static const char __pyx_k_drain_pixel[] = "drain_pixel";
static const char __pyx_k_drain_queue[] = "drain_queue";
static const char __pyx_k_fill_height[] = "fill_height";
static const char __pyx_k_fill_pits_2[] = "fill_pits";
static const char __pyx_k_flow_dir_d8[] = "(flow dir d8): ";
static const char __pyx_k_flow_nodata[] = "flow_nodata";
static const char __pyx_k_for_writing[] = " for writing";
static const char __pyx_k_gpkg_driver[] = "gpkg_driver";
static const char __pyx_k_infer_sinks[] = "(infer_sinks): ";
static const char __pyx_k_joined_line[] = "joined_line";
static const char __pyx_k_mask_nodata[] = "mask_nodata";
static const char __pyx_k_n_processed[] = "n_processed";
static const char __pyx_k_offset_dict[] = "offset_dict";
static const char __pyx_k_offset_info[] = "offset_info";
static const char __pyx_k_offset_only[] = "offset_only";
static const char __pyx_k_order_count[] = "order_count";
static const char __pyx_k_outflow_dir[] = "outflow_dir";
static const char __pyx_k_pixel_count[] = "pixel_count";
static const char __pyx_k_raster_info[] = "raster_info";
static const char __pyx_k_raster_path[] = "raster_path";
static const char __pyx_k_raster_size[] = "raster_size";
static const char __pyx_k_river_order[] = "river_order";
static const char __pyx_k_root_height[] = "root_height";
static const char __pyx_k_scipy_stats[] = "scipy.stats";
static const char __pyx_k_shapely_ops[] = "shapely.ops";
static const char __pyx_k_shapely_wkb[] = "shapely.wkb";
static const char __pyx_k_stream_band[] = "stream_band";
static const char __pyx_k_stream_line[] = "stream_line";
static const char __pyx_k_upstream_id[] = "upstream_id";
static const char __pyx_k_visit_count[] = "visit_count";
static const char __pyx_k_visited_tif[] = "visited.tif";
static const char __pyx_k_working_dir[] = "working_dir";
static const char __pyx_k_working_fid[] = "working_fid";
static const char __pyx_k_BLOCKXSIZE_d[] = "BLOCKXSIZE=%d";
static const char __pyx_k_BLOCKYSIZE_d[] = "BLOCKYSIZE=%d";
static const char __pyx_k_COMPRESS_LZW[] = "COMPRESS=LZW";
static const char __pyx_k_GetLayerDefn[] = "GetLayerDefn";
static const char __pyx_k_OFTInteger64[] = "OFTInteger64";
static const char __pyx_k_ResetReading[] = "ResetReading";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_cell_to_test[] = "cell_to_test";
static const char __pyx_k_channel_band[] = "channel_band";
static const char __pyx_k_fid_to_order[] = "fid_to_order";
static const char __pyx_k_fill_pits__s[] = "fill_pits_%s_";
static const char __pyx_k_finish_stack[] = "finish_stack";
static const char __pyx_k_flow_dir_mfd[] = "flow_dir_mfd";
static const char __pyx_k_flow_dir_srs[] = "flow_dir_srs";
static const char __pyx_k_geotransform[] = "geotransform";
static const char __pyx_k_is_a_channel[] = "is_a_channel";
static const char __pyx_k_mfd_flow_dir[] = "mfd_flow_dir_";
static const char __pyx_k_n_iterations[] = "n_iterations";
static const char __pyx_k_outlet_index[] = "outlet_index";
static const char __pyx_k_outlet_layer[] = "outlet_layer";
static const char __pyx_k_outlet_point[] = "outlet_point";
static const char __pyx_k_pit_mask_tif[] = "pit_mask.tif";
static const char __pyx_k_pixel_drains[] = "pixel_drains";
static const char __pyx_k_raster_coord[] = "raster_coord";
static const char __pyx_k_search_queue[] = "search_queue";
static const char __pyx_k_search_stack[] = "search_stack";
static const char __pyx_k_search_steps[] = "search_steps";
static const char __pyx_k_stream_array[] = "stream_array";
static const char __pyx_k_stream_layer[] = "stream_layer";
static const char __pyx_k_stream_order[] = "stream_order";
static const char __pyx_k_tmp_dir_root[] = "tmp_dir_root";
static const char __pyx_k_tmp_work_dir[] = "tmp_work_dir";
static const char __pyx_k_upstream_dem[] = "upstream_dem";
static const char __pyx_k_upstream_fid[] = "upstream_fid";
static const char __pyx_k_working_geom[] = "working_geom";
static const char __pyx_k_x_off_border[] = "x_off_border";
static const char __pyx_k_y_off_border[] = "y_off_border";
static const char __pyx_k_CreateFeature[] = "CreateFeature";
static const char __pyx_k_DeleteFeature[] = "DeleteFeature";
static const char __pyx_k_GetRasterBand[] = "GetRasterBand";
static const char __pyx_k_ImportFromWkt[] = "ImportFromWkt";
static const char __pyx_k_ManagedRaster[] = "_ManagedRaster";
static const char __pyx_k_backtrace_set[] = "backtrace_set";
static const char __pyx_k_base_datatype[] = "base_datatype";
static const char __pyx_k_block_offsets[] = "block_offsets";
static const char __pyx_k_boundary_list[] = "boundary_list";
static const char __pyx_k_connected_fid[] = "connected_fid";
static const char __pyx_k_current_pixel[] = "current_pixel";
static const char __pyx_k_discovery_srs[] = "discovery_srs";
static const char __pyx_k_discovery_tif[] = "discovery.tif";
static const char __pyx_k_drop_distance[] = "drop_distance";
static const char __pyx_k_flow_accum_mr[] = "flow_accum_mr";
static const char __pyx_k_flow_dir_band[] = "flow_dir_band";
static const char __pyx_k_flow_dir_d8_2[] = "flow_dir_d8";
static const char __pyx_k_flow_dir_info[] = "flow_dir_info";
static const char __pyx_k_flow_dir_type[] = "flow_dir_type";
static const char __pyx_k_largest_block[] = "largest_block";
static const char __pyx_k_largest_slope[] = "largest_slope";
static const char __pyx_k_last_flow_dir[] = "last_flow_dir";
static const char __pyx_k_last_log_time[] = "last_log_time";
static const char __pyx_k_outlet_vector[] = "outlet_vector";
static const char __pyx_k_pit_mask_path[] = "pit_mask_path";
static const char __pyx_k_raster_driver[] = "raster_driver";
static const char __pyx_k_raster_x_size[] = "raster_x_size";
static const char __pyx_k_raster_y_size[] = "raster_y_size";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_single_outlet[] = "single_outlet";
static const char __pyx_k_stream_nodata[] = "stream_nodata";
static const char __pyx_k_stream_raster[] = "stream_raster";
static const char __pyx_k_stream_vector[] = "stream_vector";
static const char __pyx_k_upstream_dirs[] = "upstream_dirs";
static const char __pyx_k_upstream_fids[] = "upstream_fids";
static const char __pyx_k_weight_nodata[] = "weight_nodata";
static const char __pyx_k_weight_raster[] = "weight_raster";
static const char __pyx_k_wkbLineString[] = "wkbLineString";
static const char __pyx_k_wkbLinearRing[] = "wkbLinearRing";
static const char __pyx_k_working_order[] = "working_order";
static const char __pyx_k_working_stack[] = "working_stack";
static const char __pyx_k_workspace_dir[] = "workspace_dir";
static const char __pyx_k_100_0_complete[] = "100.0% complete";
static const char __pyx_k_FindFieldIndex[] = "FindFieldIndex";
static const char __pyx_k_GetGeometryRef[] = "GetGeometryRef";
static const char __pyx_k_SPARSE_OK_TRUE[] = "SPARSE_OK=TRUE";
static const char __pyx_k_Y_m_d__H__M__S[] = "%Y-%m-%d_%H_%M_%S";
static const char __pyx_k_channel_raster[] = "channel_raster";
static const char __pyx_k_connected_fids[] = "connected_fids";
static const char __pyx_k_could_not_open[] = "could not open ";
static const char __pyx_k_delete_feature[] = "_delete_feature";
static const char __pyx_k_detect_outlets[] = "detect_outlets";
static const char __pyx_k_discovery_info[] = "discovery_info";
static const char __pyx_k_downstream_dem[] = "downstream_dem";
static const char __pyx_k_downstream_fid[] = "downstream_fid";
static const char __pyx_k_drain_distance[] = "drain_distance";
static const char __pyx_k_flow_dir_block[] = "flow_dir_block";
static const char __pyx_k_flow_dir_d8__s[] = "flow_dir_d8_%s_";
static const char __pyx_k_flow_threshold[] = "flow_threshold";
static const char __pyx_k_outet_basename[] = "outet_basename";
static const char __pyx_k_outlet_feature[] = "outlet_feature";
static const char __pyx_k_projection_wkt[] = "projection_wkt";
static const char __pyx_k_stream_feature[] = "stream_feature";
static const char __pyx_k_unable_to_open[] = "unable to open ";
static const char __pyx_k_upstream_coord[] = "upstream_coord";
static const char __pyx_k_upstream_count[] = "upstream_count";
static const char __pyx_k_upstream_index[] = "upstream_index";
static const char __pyx_k_upstream_order[] = "upstream_order";
static const char __pyx_k_upstream_stack[] = "upstream_stack";
static const char __pyx_k_GetDriverByName[] = "GetDriverByName";
static const char __pyx_k_dem_block_xsize[] = "dem_block_xsize";
static const char __pyx_k_dem_block_ysize[] = "dem_block_ysize";
static const char __pyx_k_dem_raster_info[] = "dem_raster_info";
static const char __pyx_k_diagonal_nodata[] = "diagonal_nodata";
static const char __pyx_k_discovery_count[] = "discovery_count";
static const char __pyx_k_discovery_stack[] = "discovery_stack";
static const char __pyx_k_distance_nodata[] = "distance_nodata";
static const char __pyx_k_downstream_geom[] = "downstream_geom";
static const char __pyx_k_fill_value_list[] = "fill_value_list";
static const char __pyx_k_filled_dem_band[] = "filled_dem_band";
static const char __pyx_k_flow_accum_info[] = "flow_accum_info";
static const char __pyx_k_flow_dir_mfd_mr[] = "flow_dir_mfd_mr";
static const char __pyx_k_flow_dir_nodata[] = "flow_dir_nodata";
static const char __pyx_k_flow_dir_raster[] = "flow_dir_raster";
static const char __pyx_k_flow_dir_weight[] = "flow_dir_weight";
static const char __pyx_k_get_raster_info[] = "get_raster_info";
static const char __pyx_k_i_upstream_flow[] = "i_upstream_flow";
static const char __pyx_k_nodata_neighbor[] = "nodata_neighbor";
static const char __pyx_k_outlet_fid_list[] = "outlet_fid_list";
static const char __pyx_k_pixels_complete[] = " pixels complete";
static const char __pyx_k_processed_nodes[] = "processed_nodes";
static const char __pyx_k_pygeoprocessing[] = "pygeoprocessing";
static const char __pyx_k_s_is_not_a_file[] = "%s is not a file.";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_starting_search[] = "starting search";
static const char __pyx_k_stream_basename[] = "stream_basename";
static const char __pyx_k_upstream_d8_dir[] = "upstream_d8_dir";
static const char __pyx_k_watershed_layer[] = "watershed_layer";
static const char __pyx_k_working_feature[] = "working_feature";
static const char __pyx_k_SpatialReference[] = "SpatialReference";
static const char __pyx_k_StartTransaction[] = "StartTransaction";
static const char __pyx_k_d8_flow_dir_mode[] = "d8_flow_dir_mode";
static const char __pyx_k_dem_buffer_array[] = "dem_buffer_array";
static const char __pyx_k_discovery_nodata[] = "discovery_nodata";
static const char __pyx_k_downstream_order[] = "downstream_order";
static const char __pyx_k_local_flow_accum[] = "local_flow_accum";
static const char __pyx_k_n_drain_distance[] = "n_drain_distance";
static const char __pyx_k_out_dir_increase[] = "out_dir_increase";
static const char __pyx_k_outlet_detection[] = "outlet detection: ";
static const char __pyx_k_outlets_complete[] = " outlets complete";
static const char __pyx_k_raster_path_band[] = "raster_path_band";
static const char __pyx_k_streams_by_order[] = "streams_by_order";
static const char __pyx_k_terminated_early[] = "terminated_early";
static const char __pyx_k_upstream_feature[] = "upstream_feature";
static const char __pyx_k_upstream_fid_map[] = "upstream_fid_map";
static const char __pyx_k_upstream_id_list[] = "upstream_id_list";
static const char __pyx_k_watershed_vector[] = "watershed_vector";
static const char __pyx_k_win_xsize_border[] = "win_xsize_border";
static const char __pyx_k_win_ysize_border[] = "win_ysize_border";
static const char __pyx_k_working_dir_path[] = "working_dir_path";
static const char __pyx_k_working_river_id[] = "working_river_id";
static const char __pyx_k_ApplyGeoTransform[] = "ApplyGeoTransform";
static const char __pyx_k_CommitTransaction[] = "CommitTransaction";
static const char __pyx_k_downhill_neighbor[] = "downhill_neighbor";
static const char __pyx_k_filled_dem_raster[] = "filled_dem_raster";
static const char __pyx_k_finish_coordinate[] = "finish_coordinate";
static const char __pyx_k_flow_accum_nodata[] = "flow_accum_nodata";
static const char __pyx_k_flow_dir_mfd_band[] = "flow_dir_mfd_band";
static const char __pyx_k_largest_slope_dir[] = "largest_slope_dir";
static const char __pyx_k_out_of_bounds_for[] = " out of bounds for ";
static const char __pyx_k_raw_weight_nodata[] = "raw_weight_nodata";
static const char __pyx_k_segments_complete[] = " segments complete";
static const char __pyx_k_stream_order_list[] = "stream_order_list";
static const char __pyx_k_streams_to_retest[] = "streams_to_retest";
static const char __pyx_k_upstream_fid_list[] = "upstream_fid_list";
static const char __pyx_k_upstream_flow_dir[] = "upstream_flow_dir";
static const char __pyx_k_visit_order_stack[] = "visit_order_stack";
static const char __pyx_k_watershed_feature[] = "watershed_feature";
static const char __pyx_k_watershed_polygon[] = "watershed_polygon";
static const char __pyx_k_x_out_of_bounds_s[] = "x out of bounds %s";
static const char __pyx_k_y_out_of_bounds_s[] = "y out of bounds %s";
static const char __pyx_k_SetAttributeFilter[] = "SetAttributeFilter";
static const char __pyx_k_base_feature_count[] = "base_feature_count";
static const char __pyx_k_block_offsets_list[] = "block_offsets_list";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_compatable_dem_tif[] = "compatable_dem.tif";
static const char __pyx_k_dem_managed_raster[] = "dem_managed_raster";
static const char __pyx_k_downstream_feature[] = "downstream_feature";
static const char __pyx_k_drain_search_queue[] = "drain_search_queue";
static const char __pyx_k_fill_pits_complete[] = "(fill pits): complete";
static const char __pyx_k_geoprocessing_core[] = "geoprocessing_core";
static const char __pyx_k_lowest_sink_height[] = "lowest_sink_height";
static const char __pyx_k_nodata_drain_queue[] = "nodata_drain_queue";
static const char __pyx_k_processed_segments[] = "processed_segments";
static const char __pyx_k_source_point_stack[] = "source_point_stack";
static const char __pyx_k_streams_to_process[] = "streams_to_process";
static const char __pyx_k_target_offset_dict[] = "target_offset_dict";
static const char __pyx_k_watershed_basename[] = "watershed_basename";
static const char __pyx_k_watershed_boundary[] = "watershed_boundary";
static const char __pyx_k_compressed_flow_dir[] = "compressed_flow_dir";
static const char __pyx_k_coord_to_stream_ids[] = "coord_to_stream_ids";
static const char __pyx_k_extract_streams_mfd[] = "extract_streams_mfd";
static const char __pyx_k_flow_dir_mfd_raster[] = "flow_dir_mfd_raster";
static const char __pyx_k_lowest_drain_height[] = "lowest_drain_height";
static const char __pyx_k_segments_to_process[] = "segments_to_process";
static const char __pyx_k_single_outlet_tuple[] = "single_outlet_tuple";
static const char __pyx_k_source_stream_point[] = "source_stream_point";
static const char __pyx_k_sum_of_flow_weights[] = "sum_of_flow_weights";
static const char __pyx_k_tmp_flow_dir_nodata[] = "tmp_flow_dir_nodata";
static const char __pyx_k_upstream_flow_accum[] = "upstream_flow_accum";
static const char __pyx_k_visited_raster_path[] = "visited_raster_path";
static const char __pyx_k_channel_buffer_array[] = "channel_buffer_array";
static const char __pyx_k_dem_raster_path_band[] = "dem_raster_path_band";
static const char __pyx_k_distance_drain_queue[] = "distance_drain_queue";
static const char __pyx_k_downhill_slope_array[] = "downhill_slope_array";
static const char __pyx_k_flat_region_mask_tif[] = "flat_region_mask.tif";
static const char __pyx_k_flow_accumulation_d8[] = "flow_accumulation_d8";
static const char __pyx_k_flow_dir_d8_complete[] = "(flow dir d8): complete";
static const char __pyx_k_flow_dir_raster_info[] = "flow_dir_raster_info";
static const char __pyx_k_generate_read_bounds[] = "_generate_read_bounds";
static const char __pyx_k_max_pixel_fill_count[] = "max_pixel_fill_count";
static const char __pyx_k_modified_offset_dict[] = "modified_offset_dict";
static const char __pyx_k_natural_drain_exists[] = "natural_drain_exists";
static const char __pyx_k_new_raster_from_base[] = "new_raster_from_base";
static const char __pyx_k_outlet_at_confluence[] = "outlet_at_confluence";
static const char __pyx_k_plateau_distance_tif[] = "plateau_distance.tif";
static const char __pyx_k_sum_of_slope_weights[] = "sum_of_slope_weights";
static const char __pyx_k_target_flow_dir_path[] = "target_flow_dir_path";
static const char __pyx_k_trace_flow_threshold[] = "trace_flow_threshold";
static const char __pyx_k_upstream_all_defined[] = "upstream_all_defined";
static const char __pyx_k_upstream_flow_weight[] = "upstream_flow_weight";
static const char __pyx_k_CreateGeometryFromWkb[] = "CreateGeometryFromWkb";
static const char __pyx_k_direction_drain_queue[] = "direction_drain_queue";
static const char __pyx_k_finish_managed_raster[] = "finish_managed_raster";
static const char __pyx_k_flat_region_mask_path[] = "flat_region_mask_path";
static const char __pyx_k_flow_accumulation_mfd[] = "flow_accumulation_mfd";
static const char __pyx_k_flow_dir_buffer_array[] = "flow_dir_buffer_array";
static const char __pyx_k_nodata_flow_dir_queue[] = "nodata_flow_dir_queue";
static const char __pyx_k_outlet_detection_done[] = "outlet detection: done";
static const char __pyx_k_plateau_distance_path[] = "plateau_distance_path";
static const char __pyx_k_plateu_drain_mask_tif[] = "plateu_drain_mask.tif";
static const char __pyx_k_upstream_flow_dir_sum[] = "upstream_flow_dir_sum";
static const char __pyx_k_SetAxisMappingStrategy[] = "SetAxisMappingStrategy";
static const char __pyx_k_channel_managed_raster[] = "channel_managed_raster";
static const char __pyx_k_distance_to_channel_d8[] = "distance_to_channel_d8";
static const char __pyx_k_flow_dir_mfd_path_band[] = "flow_dir_mfd_path_band";
static const char __pyx_k_in_ManagedRaster_flush[] = " in ManagedRaster.flush";
static const char __pyx_k_plateu_drain_mask_path[] = "plateu_drain_mask_path";
static const char __pyx_k_source_points_complete[] = " source points complete";
static const char __pyx_k_sum_of_downhill_slopes[] = "sum_of_downhill_slopes";
static const char __pyx_k_visited_managed_raster[] = "visited_managed_raster";
static const char __pyx_k_compatible_dem_complete[] = "compatible dem complete";
static const char __pyx_k_connected_upstream_fids[] = "connected_upstream_fids";
static const char __pyx_k_distance_to_channel_mfd[] = "distance_to_channel_mfd";
static const char __pyx_k_finish_time_raster_path[] = "finish_time_raster_path";
static const char __pyx_k_flow_dir_managed_raster[] = "flow_dir_managed_raster";
static const char __pyx_k_max_steps_per_watershed[] = "max_steps_per_watershed";
static const char __pyx_k_max_upstream_flow_accum[] = "max_upstream_flow_accum";
static const char __pyx_k_pit_mask_managed_raster[] = "pit_mask_managed_raster";
static const char __pyx_k_plateau_distance_nodata[] = "plateau_distance_nodata";
static const char __pyx_k_quitting_too_many_steps[] = "quitting, too many steps";
static const char __pyx_k_resulted_in_null_trying[] = " resulted in null, trying ";
static const char __pyx_k_weight_raster_path_band[] = "weight_raster_path_band";
static const char __pyx_k_channel_raster_path_band[] = "channel_raster_path_band";
static const char __pyx_k_couldn_t_remove_temp_dir[] = "couldn't remove temp dir";
static const char __pyx_k_discovery_managed_raster[] = "discovery_managed_raster";
static const char __pyx_k_drop_distance_collection[] = "drop_distance_collection";
static const char __pyx_k_min_flow_accum_threshold[] = "min_flow_accum_threshold";
static const char __pyx_k_sorted_stream_order_list[] = "sorted_stream_order_list";
static const char __pyx_k_compressed_integer_slopes[] = "compressed_integer_slopes";
static const char __pyx_k_discovery_time_processing[] = "(discovery time processing): ";
static const char __pyx_k_distance_to_channel_stack[] = "distance_to_channel_stack";
static const char __pyx_k_filled_dem_managed_raster[] = "filled_dem_managed_raster";
static const char __pyx_k_flow_accum_managed_raster[] = "flow_accum_managed_raster";
static const char __pyx_k_flow_dir_mfd_buffer_array[] = "flow_dir_mfd_buffer_array";
static const char __pyx_k_flow_dir_raster_path_band[] = "flow_dir_raster_path_band";
static const char __pyx_k_osr_axis_mapping_strategy[] = "osr_axis_mapping_strategy";
static const char __pyx_k_stream_fragments_complete[] = " stream fragments complete";
static const char __pyx_k_target_finish_raster_path[] = "target_finish_raster_path";
static const char __pyx_k_target_outlet_vector_path[] = "target_outlet_vector_path";
static const char __pyx_k_target_stream_raster_path[] = "target_stream_raster_path";
static const char __pyx_k_target_stream_vector_path[] = "target_stream_vector_path";
static const char __pyx_k_upstream_to_downstream_id[] = "upstream_to_downstream_id";
static const char __pyx_k_autotune_flow_accumulation[] = "autotune_flow_accumulation";
static const char __pyx_k_d8_flow_dir_managed_raster[] = "d8_flow_dir_managed_raster";
static const char __pyx_k_discovery_time_raster_path[] = "discovery_time_raster_path";
static const char __pyx_k_downstream_to_upstream_ids[] = "downstream_to_upstream_ids";
static const char __pyx_k_flow_dir_d8_managed_raster[] = "flow_dir_d8_managed_raster";
static const char __pyx_k_mfd_flow_accum_1f_complete[] = "mfd flow accum %.1f%% complete";
static const char __pyx_k_trace_threshold_proportion[] = "trace_threshold_proportion";
static const char __pyx_k_working_downhill_slope_sum[] = "working_downhill_slope_sum";
static const char __pyx_k_extract_strahler_streams_d8[] = "extract_strahler_streams_d8";
static const char __pyx_k_flow_accum_raster_path_band[] = "flow_accum_raster_path_band";
static const char __pyx_k_flow_dir_mfd_managed_raster[] = "flow_dir_mfd_managed_raster";
static const char __pyx_k_int_max_steps_per_watershed[] = "_int_max_steps_per_watershed";
static const char __pyx_k_nodata_distance_drain_queue[] = "nodata_distance_drain_queue";
static const char __pyx_k_nodata_downhill_slope_array[] = "nodata_downhill_slope_array";
static const char __pyx_k_outlet_detection_0_complete[] = "outlet detection: 0% complete";
static const char __pyx_k_strahler_stream_vector_path[] = "strahler_stream_vector_path";
static const char __pyx_k_sum_of_nodata_slope_weights[] = "sum_of_nodata_slope_weights";
static const char __pyx_k_compressed_upstream_flow_dir[] = "compressed_upstream_flow_dir";
static const char __pyx_k_d8_flow_dir_raster_path_band[] = "d8_flow_dir_raster_path_band";
static const char __pyx_k_detect_lowest_drain_and_sink[] = "detect_lowest_drain_and_sink";
static const char __pyx_k_dist_to_channel_mfd_work_dir[] = "dist_to_channel_mfd_work_dir";
static const char __pyx_k_flow_dir_d8_raster_path_band[] = "flow_dir_d8_raster_path_band";
static const char __pyx_k_raster_driver_creation_tuple[] = "raster_driver_creation_tuple";
static const char __pyx_k_target_discovery_raster_path[] = "target_discovery_raster_path";
static const char __pyx_k_working_downhill_slope_array[] = "working_downhill_slope_array";
static const char __pyx_k_working_flow_accum_threshold[] = "working_flow_accum_threshold";
static const char __pyx_k_creating_visited_raster_layer[] = "creating visited raster layer";
static const char __pyx_k_flow_dir_mfd_raster_path_band[] = "flow_dir_mfd_raster_path_band";
static const char __pyx_k_flow_dir_multiple_flow_dir__s[] = "flow_dir_multiple_flow_dir_%s_";
static const char __pyx_k_is_raster_path_band_formatted[] = "_is_raster_path_band_formatted";
static const char __pyx_k_target_filled_dem_raster_path[] = "target_filled_dem_raster_path";
static const char __pyx_k_target_flow_accum_raster_path[] = "target_flow_accum_raster_path";
static const char __pyx_k_build_discovery_finish_rasters[] = "_build_discovery_finish_rasters";
static const char __pyx_k_Error_Block_size_is_not_a_power[] = "Error: Block size is not a power of two: block_xsize: ";
static const char __pyx_k_Provides_PyGeprocessing_Routing[] = "\nProvides PyGeprocessing Routing functionality.\n\nUnless otherwise specified, all internal computation of rasters are done in\na float64 space. The only possible loss of precision could occur when an\nincoming DEM type is an int64 type and values in that dem exceed 2^52 but GDAL\ndoes not support int64 rasters so no precision loss is possible with a\nfloat64.\n\nD8 float direction conventions follow TauDEM where each flow direction\nis encoded as::\n\n     3 2 1\n     4 x 0\n     5 6 7\n";
static const char __pyx_k_This_exception_is_happeningin_C[] = ". This exception is happeningin Cython, so it will cause a hard seg-fault, but it'sotherwise meant to be a ValueError.";
static const char __pyx_k_calculate_subwatershed_boundary[] = "calculate_subwatershed_boundary_workspace_";
static const char __pyx_k_compatable_dem_raster_path_band[] = "compatable_dem_raster_path_band";
static const char __pyx_k_exists_removing_before_creating[] = " exists, removing before creating a new one.";
static const char __pyx_k_extract_strahler_streams_d8_all[] = "(extract_strahler_streams_d8): all done";
static const char __pyx_k_extract_strahler_streams_d8_com[] = "(extract_strahler_streams_d8): commit transaction due to stream joining";
static const char __pyx_k_extract_strahler_streams_d8_det[] = "(extract_strahler_streams_d8): determining stream order";
static const char __pyx_k_extract_strahler_streams_d8_dra[] = "(extract_strahler_streams_d8): drain seeding ";
static const char __pyx_k_extract_strahler_streams_d8_fin[] = "(extract_strahler_streams_d8): final pass on stream order and geometry";
static const char __pyx_k_extract_strahler_streams_d8_flo[] = "(extract_strahler_streams_d8): flow accumulation adjustment ";
static const char __pyx_k_extract_strahler_streams_d8_see[] = "(extract_strahler_streams_d8): seed the drains";
static const char __pyx_k_extract_strahler_streams_d8_sta[] = "(extract_strahler_streams_d8): starting upstream walk";
static const char __pyx_k_extract_strahler_streams_d8_str[] = "(extract_strahler_streams_d8): stream segment creation ";
static const char __pyx_k_filter_out_incomplete_divergent[] = "filter out incomplete divergent streams";
static const char __pyx_k_flat_region_mask_managed_raster[] = "flat_region_mask_managed_raster";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_plateau_distance_managed_raster[] = "plateau_distance_managed_raster";
static const char __pyx_k_s_is_supposed_to_be_a_raster_ba[] = "%s is supposed to be a raster band tuple but it's not.";
static const char __pyx_k_DEFAULT_GTIFF_CREATION_TUPLE_OPT[] = "DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS";
static const char __pyx_k_DEFAULT_OSR_AXIS_MAPPING_STRATEG[] = "DEFAULT_OSR_AXIS_MAPPING_STRATEGY";
static const char __pyx_k_Error_band_ID_s_is_not_a_valid_b[] = "Error: band ID (%s) is not a valid band number. This exception is happening in Cython, so it will cause a hard seg-fault, but it's otherwise meant to be a ValueError.";
static const char __pyx_k_creating_target_flow_accum_raste[] = "creating target flow accum raster layer";
static const char __pyx_k_dem_is_not_a_power_of_2_creating[] = "dem is not a power of 2, creating a copy that is.";
static const char __pyx_k_distance_to_channel_managed_rast[] = "distance_to_channel_managed_raster";
static const char __pyx_k_ecoshard_geoprocessing_routing_r[] = "ecoshard.geoprocessing.routing.routing";
static const char __pyx_k_exceeded_max_pixel_fill_count_wh[] = "exceeded max pixel fill count when searching for plateau drain";
static const char __pyx_k_expected_flow_dir_type_of_either[] = "expected flow dir type of either d8 or mfd but got ";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_outlet_detection_100_complete_co[] = "outlet detection: 100% complete -- committing transaction";
static const char __pyx_k_plateau_drain_mask_managed_raste[] = "plateau_drain_mask_managed_raster";
static const char __pyx_k_src_geoprocessing_routing_routin[] = "src\\geoprocessing\\routing\\routing.pyx";
static const char __pyx_k_target_distance_to_channel_raste[] = "target_distance_to_channel_raster_path";
static const char __pyx_k_target_watershed_boundary_vector[] = "target_watershed_boundary_vector_path";
static const char __pyx_k_trace_threshold_proportion_shoul[] = "trace_threshold_proportion should be in the range [0.0, 1.0] actual value is: %s";
static const char __pyx_k_calculate_subwatershed_boundary_2[] = "(calculate_subwatershed_boundary): watershed building ";
static const char __pyx_k_calculate_subwatershed_boundary_3[] = "(calculate_subwatershed_boundary): watershed building 100% complete";
static const char __pyx_k_calculate_subwatershed_boundary_4[] = "calculate_subwatershed_boundary";
static const char __pyx_k_extract_strahler_streams_d8_det_2[] = "(extract_strahler_streams_d8): determine rivers";
static const char __pyx_k_extract_strahler_streams_d8_dra_2[] = "(extract_strahler_streams_d8): drain seeding complete";
static const char __pyx_k_extract_strahler_streams_d8_fin_2[] = "(extract_strahler_streams_d8): final pass on stream order ";
static const char __pyx_k_extract_strahler_streams_d8_fin_3[] = "(extract_strahler_streams_d8): final pass on stream order complete";
static const char __pyx_k_extract_strahler_streams_d8_flo_2[] = "(extract_strahler_streams_d8): flow accumulation adjustment complete";
static const char __pyx_k_extract_strahler_streams_d8_str_2[] = "(extract_strahler_streams_d8): stream segment creation complete";
static const char __pyx_k_extract_strahler_streams_d8_str_3[] = "(extract_strahler_streams_d8): stream order processing: ";
static const char __pyx_k_extract_strahler_streams_d8_str_4[] = "(extract_strahler_streams_d8): stream order processing complete";
static const char __pyx_k_exceeded_max_pixel_fill_count_wh_2[] = "exceeded max pixel fill count when searching for pour point";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_100_0_complete;
static PyObject *__pyx_kp_u_1f;
static PyObject *__pyx_kp_u_1f_complete;
static PyObject *__pyx_n_s_AddGeometry;
static PyObject *__pyx_n_s_AddPoint;
static PyObject *__pyx_n_s_ApplyGeoTransform;
static PyObject *__pyx_kp_u_BIGTIFF_YES;
static PyObject *__pyx_kp_u_BLOCKXSIZE_d;
static PyObject *__pyx_kp_u_BLOCKYSIZE_d;
static PyObject *__pyx_kp_u_COMPRESS_LZW;
static PyObject *__pyx_n_s_CommitTransaction;
static PyObject *__pyx_n_s_Create;
static PyObject *__pyx_n_s_CreateCopy;
static PyObject *__pyx_n_s_CreateFeature;
static PyObject *__pyx_n_s_CreateField;
static PyObject *__pyx_n_s_CreateGeometryFromWkb;
static PyObject *__pyx_n_s_CreateLayer;
static PyObject *__pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT;
static PyObject *__pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG;
static PyObject *__pyx_n_s_DeleteFeature;
static PyObject *__pyx_n_s_DeleteField;
static PyObject *__pyx_kp_u_Error_Block_size_is_not_a_power;
static PyObject *__pyx_kp_u_Error_band_ID_s_is_not_a_valid_b;
static PyObject *__pyx_n_s_ExportToWkb;
static PyObject *__pyx_n_s_Feature;
static PyObject *__pyx_n_s_FieldDefn;
static PyObject *__pyx_n_s_FindFieldIndex;
static PyObject *__pyx_n_s_FlushCache;
static PyObject *__pyx_n_s_GA_Update;
static PyObject *__pyx_n_s_GDT_Byte;
static PyObject *__pyx_n_s_GDT_Float64;
static PyObject *__pyx_n_s_GDT_Int32;
static PyObject *__pyx_n_s_GDT_Unknown;
static PyObject *__pyx_n_u_GPKG;
static PyObject *__pyx_n_u_GTiff;
static PyObject *__pyx_n_s_Geometry;
static PyObject *__pyx_n_s_GetDriverByName;
static PyObject *__pyx_n_s_GetFID;
static PyObject *__pyx_n_s_GetFeature;
static PyObject *__pyx_n_s_GetField;
static PyObject *__pyx_n_s_GetGeometryRef;
static PyObject *__pyx_n_s_GetLayer;
static PyObject *__pyx_n_s_GetLayerDefn;
static PyObject *__pyx_n_s_GetRasterBand;
static PyObject *__pyx_n_u_ID;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_ImportFromWkt;
static PyObject *__pyx_n_s_LOGGER;
static PyObject *__pyx_n_s_ManagedRaster;
static PyObject *__pyx_n_s_OFTInteger;
static PyObject *__pyx_n_s_OFTInteger64;
static PyObject *__pyx_n_s_OFTReal;
static PyObject *__pyx_n_s_OF_RASTER;
static PyObject *__pyx_n_s_OF_VECTOR;
static PyObject *__pyx_n_s_OSError;
static PyObject *__pyx_n_s_OpenEx;
static PyObject *__pyx_n_s_ReadAsArray;
static PyObject *__pyx_n_s_ResetReading;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_u_SPARSE_OK_TRUE;
static PyObject *__pyx_n_s_SetAttributeFilter;
static PyObject *__pyx_n_s_SetAxisMappingStrategy;
static PyObject *__pyx_n_s_SetFeature;
static PyObject *__pyx_n_s_SetField;
static PyObject *__pyx_n_s_SetGeometry;
static PyObject *__pyx_n_s_SpatialReference;
static PyObject *__pyx_n_s_StartTransaction;
static PyObject *__pyx_kp_u_TILED_YES;
static PyObject *__pyx_kp_u_This_exception_is_happeningin_C;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Union;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WriteArray;
static PyObject *__pyx_kp_u_Y_m_d__H__M__S;
static PyObject *__pyx_n_s__33;
static PyObject *__pyx_n_s_all_defined;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_autotune_flow_accumulation;
static PyObject *__pyx_n_s_backtrace_set;
static PyObject *__pyx_kp_u_bak_tif;
static PyObject *__pyx_n_s_band_id;
static PyObject *__pyx_n_s_base_datatype;
static PyObject *__pyx_n_s_base_feature_count;
static PyObject *__pyx_n_s_base_nodata;
static PyObject *__pyx_n_s_basename;
static PyObject *__pyx_n_s_block_array;
static PyObject *__pyx_n_s_block_offsets;
static PyObject *__pyx_n_s_block_offsets_list;
static PyObject *__pyx_n_u_block_size;
static PyObject *__pyx_n_s_boundary_list;
static PyObject *__pyx_n_s_boundary_x;
static PyObject *__pyx_n_s_boundary_y;
static PyObject *__pyx_n_s_build_discovery_finish_rasters;
static PyObject *__pyx_n_u_calculate_subwatershed_boundary;
static PyObject *__pyx_kp_u_calculate_subwatershed_boundary_2;
static PyObject *__pyx_kp_u_calculate_subwatershed_boundary_3;
static PyObject *__pyx_n_s_calculate_subwatershed_boundary_4;
static PyObject *__pyx_n_s_cell_to_test;
static PyObject *__pyx_n_s_center_val;
static PyObject *__pyx_n_s_channel_band;
static PyObject *__pyx_n_s_channel_buffer_array;
static PyObject *__pyx_n_s_channel_managed_raster;
static PyObject *__pyx_n_s_channel_raster;
static PyObject *__pyx_n_s_channel_raster_path_band;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_compatable_dem_raster_path_band;
static PyObject *__pyx_kp_u_compatable_dem_tif;
static PyObject *__pyx_kp_u_compatible_dem_complete;
static PyObject *__pyx_kp_u_complete;
static PyObject *__pyx_kp_u_complete_2;
static PyObject *__pyx_n_s_compressed_flow_dir;
static PyObject *__pyx_n_s_compressed_integer_slopes;
static PyObject *__pyx_n_s_compressed_upstream_flow_dir;
static PyObject *__pyx_n_s_connected_fid;
static PyObject *__pyx_n_s_connected_fids;
static PyObject *__pyx_n_s_connected_upstream_fids;
static PyObject *__pyx_n_s_coord_to_stream_ids;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_copyfile;
static PyObject *__pyx_kp_u_could_not_open;
static PyObject *__pyx_kp_u_couldn_t_remove_temp_dir;
static PyObject *__pyx_kp_u_creating_target_flow_accum_raste;
static PyObject *__pyx_kp_u_creating_visited_raster_layer;
static PyObject *__pyx_n_s_current_pixel;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_u_d8;
static PyObject *__pyx_n_s_d8_flow_dir_managed_raster;
static PyObject *__pyx_n_s_d8_flow_dir_mode;
static PyObject *__pyx_n_s_d8_flow_dir_raster_path_band;
static PyObject *__pyx_n_s_d_n;
static PyObject *__pyx_n_u_datatype;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_delete_feature;
static PyObject *__pyx_n_s_deleted_set;
static PyObject *__pyx_n_s_delta_x;
static PyObject *__pyx_n_s_delta_y;
static PyObject *__pyx_n_s_dem_band;
static PyObject *__pyx_n_s_dem_block_xsize;
static PyObject *__pyx_n_s_dem_block_ysize;
static PyObject *__pyx_n_s_dem_buffer_array;
static PyObject *__pyx_kp_u_dem_is_not_a_power_of_2_creating;
static PyObject *__pyx_n_s_dem_managed_raster;
static PyObject *__pyx_n_s_dem_nodata;
static PyObject *__pyx_n_s_dem_raster;
static PyObject *__pyx_n_s_dem_raster_info;
static PyObject *__pyx_n_s_dem_raster_path_band;
static PyObject *__pyx_n_s_detect_lowest_drain_and_sink;
static PyObject *__pyx_n_s_detect_outlets;
static PyObject *__pyx_n_s_diagonal_nodata;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_direction_drain_queue;
static PyObject *__pyx_n_s_dirname;
static PyObject *__pyx_n_s_discovery;
static PyObject *__pyx_n_s_discovery_count;
static PyObject *__pyx_n_s_discovery_info;
static PyObject *__pyx_n_s_discovery_managed_raster;
static PyObject *__pyx_n_s_discovery_nodata;
static PyObject *__pyx_n_s_discovery_srs;
static PyObject *__pyx_n_s_discovery_stack;
static PyObject *__pyx_kp_u_discovery_tif;
static PyObject *__pyx_kp_u_discovery_time_processing;
static PyObject *__pyx_n_s_discovery_time_raster_path;
static PyObject *__pyx_n_u_dist_to_channel_mfd_work_dir;
static PyObject *__pyx_n_s_distance_drain_queue;
static PyObject *__pyx_n_s_distance_nodata;
static PyObject *__pyx_n_s_distance_to_channel_d8;
static PyObject *__pyx_n_s_distance_to_channel_managed_rast;
static PyObject *__pyx_n_s_distance_to_channel_mfd;
static PyObject *__pyx_n_s_distance_to_channel_stack;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_downhill_neighbor;
static PyObject *__pyx_n_s_downhill_slope_array;
static PyObject *__pyx_n_s_downstream_dem;
static PyObject *__pyx_n_s_downstream_feature;
static PyObject *__pyx_n_s_downstream_fid;
static PyObject *__pyx_n_s_downstream_geom;
static PyObject *__pyx_n_s_downstream_order;
static PyObject *__pyx_n_s_downstream_to_upstream_ids;
static PyObject *__pyx_n_s_drain_distance;
static PyObject *__pyx_n_s_drain_pixel;
static PyObject *__pyx_n_s_drain_queue;
static PyObject *__pyx_n_s_drain_search_queue;
static PyObject *__pyx_n_s_drop_distance;
static PyObject *__pyx_n_u_drop_distance;
static PyObject *__pyx_n_s_drop_distance_collection;
static PyObject *__pyx_n_u_ds_fa;
static PyObject *__pyx_n_s_ds_x;
static PyObject *__pyx_n_u_ds_x;
static PyObject *__pyx_n_s_ds_x_1;
static PyObject *__pyx_n_u_ds_x_1;
static PyObject *__pyx_n_s_ds_y;
static PyObject *__pyx_n_u_ds_y;
static PyObject *__pyx_n_s_ds_y_1;
static PyObject *__pyx_n_u_ds_y_1;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_ecoshard_geoprocessing_routing_r;
static PyObject *__pyx_n_s_edge_dir;
static PyObject *__pyx_n_s_edge_side;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_equal_var;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_kp_u_exceeded_max_pixel_fill_count_wh;
static PyObject *__pyx_kp_u_exceeded_max_pixel_fill_count_wh_2;
static PyObject *__pyx_n_s_exception;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_kp_u_exists_removing_before_creating;
static PyObject *__pyx_kp_u_expected_flow_dir_type_of_either;
static PyObject *__pyx_n_s_extract_strahler_streams_d8;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_all;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_com;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_det;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_det_2;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_dra;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_dra_2;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_fin;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_fin_2;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_fin_3;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_flo;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_flo_2;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_see;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_sta;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_str;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_str_2;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_str_3;
static PyObject *__pyx_kp_u_extract_strahler_streams_d8_str_4;
static PyObject *__pyx_n_s_extract_streams_mfd;
static PyObject *__pyx_n_s_feature_id;
static PyObject *__pyx_n_s_fid;
static PyObject *__pyx_n_s_fid_to_order;
static PyObject *__pyx_n_s_fill_height;
static PyObject *__pyx_kp_u_fill_pits;
static PyObject *__pyx_n_s_fill_pits_2;
static PyObject *__pyx_kp_u_fill_pits__s;
static PyObject *__pyx_kp_u_fill_pits_complete;
static PyObject *__pyx_n_s_fill_queue;
static PyObject *__pyx_n_s_fill_value_list;
static PyObject *__pyx_n_s_filled_dem_band;
static PyObject *__pyx_n_s_filled_dem_managed_raster;
static PyObject *__pyx_n_s_filled_dem_raster;
static PyObject *__pyx_kp_u_filter_out_incomplete_divergent;
static PyObject *__pyx_n_s_finish;
static PyObject *__pyx_n_s_finish_coordinate;
static PyObject *__pyx_n_s_finish_managed_raster;
static PyObject *__pyx_n_s_finish_stack;
static PyObject *__pyx_kp_u_finish_tif;
static PyObject *__pyx_n_s_finish_time_raster_path;
static PyObject *__pyx_n_s_flat_region_mask_managed_raster;
static PyObject *__pyx_n_s_flat_region_mask_path;
static PyObject *__pyx_kp_u_flat_region_mask_tif;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_flow_accum;
static PyObject *__pyx_n_s_flow_accum_info;
static PyObject *__pyx_n_s_flow_accum_managed_raster;
static PyObject *__pyx_n_s_flow_accum_mr;
static PyObject *__pyx_n_s_flow_accum_nodata;
static PyObject *__pyx_n_s_flow_accum_raster_path_band;
static PyObject *__pyx_n_s_flow_accumulation_d8;
static PyObject *__pyx_n_s_flow_accumulation_mfd;
static PyObject *__pyx_n_s_flow_dir;
static PyObject *__pyx_n_s_flow_dir_band;
static PyObject *__pyx_n_s_flow_dir_block;
static PyObject *__pyx_n_s_flow_dir_buffer_array;
static PyObject *__pyx_kp_u_flow_dir_d8;
static PyObject *__pyx_n_s_flow_dir_d8_2;
static PyObject *__pyx_kp_u_flow_dir_d8__s;
static PyObject *__pyx_kp_u_flow_dir_d8_complete;
static PyObject *__pyx_n_s_flow_dir_d8_managed_raster;
static PyObject *__pyx_n_s_flow_dir_d8_raster_path_band;
static PyObject *__pyx_n_s_flow_dir_info;
static PyObject *__pyx_n_s_flow_dir_managed_raster;
static PyObject *__pyx_n_s_flow_dir_mfd;
static PyObject *__pyx_n_s_flow_dir_mfd_band;
static PyObject *__pyx_n_s_flow_dir_mfd_buffer_array;
static PyObject *__pyx_n_s_flow_dir_mfd_managed_raster;
static PyObject *__pyx_n_s_flow_dir_mfd_mr;
static PyObject *__pyx_n_s_flow_dir_mfd_path_band;
static PyObject *__pyx_n_s_flow_dir_mfd_raster;
static PyObject *__pyx_n_s_flow_dir_mfd_raster_path_band;
static PyObject *__pyx_kp_u_flow_dir_multiple_flow_dir__s;
static PyObject *__pyx_n_s_flow_dir_n;
static PyObject *__pyx_n_s_flow_dir_nodata;
static PyObject *__pyx_n_s_flow_dir_raster;
static PyObject *__pyx_n_s_flow_dir_raster_info;
static PyObject *__pyx_n_s_flow_dir_raster_path_band;
static PyObject *__pyx_n_s_flow_dir_srs;
static PyObject *__pyx_n_s_flow_dir_type;
static PyObject *__pyx_n_s_flow_dir_weight;
static PyObject *__pyx_n_s_flow_nodata;
static PyObject *__pyx_n_s_flow_pixel;
static PyObject *__pyx_n_s_flow_threshold;
static PyObject *__pyx_kp_u_for_writing;
static PyObject *__pyx_n_s_g0;
static PyObject *__pyx_n_s_g1;
static PyObject *__pyx_n_s_g2;
static PyObject *__pyx_n_s_g3;
static PyObject *__pyx_n_s_g4;
static PyObject *__pyx_n_s_g5;
static PyObject *__pyx_n_s_gdal;
static PyObject *__pyx_n_s_generate_read_bounds;
static PyObject *__pyx_n_s_geoprocessing_core;
static PyObject *__pyx_n_s_geotransform;
static PyObject *__pyx_n_u_geotransform;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_raster_info;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gmtime;
static PyObject *__pyx_n_s_gpkg_driver;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_u_i;
static PyObject *__pyx_n_s_i_n;
static PyObject *__pyx_n_s_i_sn;
static PyObject *__pyx_n_s_i_upstream_flow;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_u_in_ManagedRaster_flush;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_kp_u_infer_sinks;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_int_max_steps_per_watershed;
static PyObject *__pyx_n_s_is_a_channel;
static PyObject *__pyx_n_s_is_drain;
static PyObject *__pyx_n_s_is_outlet;
static PyObject *__pyx_n_s_is_raster_path_band_formatted;
static PyObject *__pyx_n_s_isfile;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_iterblocks;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_u_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_joined_line;
static PyObject *__pyx_n_s_largest_block;
static PyObject *__pyx_n_s_largest_slope;
static PyObject *__pyx_n_s_largest_slope_dir;
static PyObject *__pyx_n_s_last_flow_dir;
static PyObject *__pyx_n_s_last_log_time;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_left_in;
static PyObject *__pyx_n_s_linemerge;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_local_flow_accum;
static PyObject *__pyx_n_s_log2;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_lowest_drain_height;
static PyObject *__pyx_n_s_lowest_sink_height;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_makedirs;
static PyObject *__pyx_n_s_mask_nodata;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_pixel_fill_count;
static PyObject *__pyx_n_s_max_steps_per_watershed;
static PyObject *__pyx_n_s_max_upstream_flow_accum;
static PyObject *__pyx_n_u_mfd;
static PyObject *__pyx_kp_u_mfd_flow_accum_1f_complete;
static PyObject *__pyx_n_u_mfd_flow_dir;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_min_flow_accum_threshold;
static PyObject *__pyx_n_s_min_p_val;
static PyObject *__pyx_n_s_mkdtemp;
static PyObject *__pyx_n_s_modified_offset_dict;
static PyObject *__pyx_kp_u_more_times;
static PyObject *__pyx_n_s_multi_line;
static PyObject *__pyx_n_u_n_bands;
static PyObject *__pyx_n_s_n_cols;
static PyObject *__pyx_n_s_n_dir;
static PyObject *__pyx_n_s_n_distance;
static PyObject *__pyx_n_s_n_drain_distance;
static PyObject *__pyx_n_s_n_height;
static PyObject *__pyx_n_s_n_iterations;
static PyObject *__pyx_n_s_n_pixels;
static PyObject *__pyx_n_s_n_points;
static PyObject *__pyx_n_s_n_processed;
static PyObject *__pyx_n_s_n_pushed;
static PyObject *__pyx_n_s_n_rows;
static PyObject *__pyx_n_s_n_slope;
static PyObject *__pyx_n_s_n_steps;
static PyObject *__pyx_n_s_n_x_blocks;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_natural_drain_exists;
static PyObject *__pyx_n_s_new_raster_from_base;
static PyObject *__pyx_n_s_next_id;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_u_nodata;
static PyObject *__pyx_n_s_nodata_distance_drain_queue;
static PyObject *__pyx_n_s_nodata_downhill_slope_array;
static PyObject *__pyx_n_s_nodata_drain_queue;
static PyObject *__pyx_n_s_nodata_flow_dir_queue;
static PyObject *__pyx_n_s_nodata_neighbor;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_kp_u_of;
static PyObject *__pyx_n_s_offset_dict;
static PyObject *__pyx_n_s_offset_info;
static PyObject *__pyx_n_s_offset_only;
static PyObject *__pyx_n_s_ogr;
static PyObject *__pyx_n_s_open_set;
static PyObject *__pyx_kp_u_opening;
static PyObject *__pyx_n_s_ops;
static PyObject *__pyx_n_s_options;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_u_order;
static PyObject *__pyx_kp_u_order_1;
static PyObject *__pyx_n_s_order_count;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_osgeo;
static PyObject *__pyx_n_s_osr;
static PyObject *__pyx_n_s_osr_axis_mapping_strategy;
static PyObject *__pyx_n_s_out_dir;
static PyObject *__pyx_n_s_out_dir_increase;
static PyObject *__pyx_kp_u_out_of_bounds_for;
static PyObject *__pyx_n_s_outet_basename;
static PyObject *__pyx_n_s_outflow_dir;
static PyObject *__pyx_n_u_outlet;
static PyObject *__pyx_kp_u_outlet_1;
static PyObject *__pyx_n_s_outlet_at_confluence;
static PyObject *__pyx_kp_u_outlet_detection;
static PyObject *__pyx_kp_u_outlet_detection_0_complete;
static PyObject *__pyx_kp_u_outlet_detection_100_complete_co;
static PyObject *__pyx_kp_u_outlet_detection_done;
static PyObject *__pyx_n_s_outlet_feature;
static PyObject *__pyx_n_s_outlet_fid;
static PyObject *__pyx_n_s_outlet_fid_list;
static PyObject *__pyx_n_s_outlet_index;
static PyObject *__pyx_n_s_outlet_layer;
static PyObject *__pyx_n_s_outlet_point;
static PyObject *__pyx_n_s_outlet_vector;
static PyObject *__pyx_n_s_outlet_x;
static PyObject *__pyx_n_u_outlet_x;
static PyObject *__pyx_n_s_outlet_y;
static PyObject *__pyx_n_u_outlet_y;
static PyObject *__pyx_kp_u_outlets_complete;
static PyObject *__pyx_n_s_p_val;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_payload;
static PyObject *__pyx_n_s_pit_mask_managed_raster;
static PyObject *__pyx_n_s_pit_mask_path;
static PyObject *__pyx_kp_u_pit_mask_tif;
static PyObject *__pyx_n_s_pit_queue;
static PyObject *__pyx_n_s_pixel;
static PyObject *__pyx_n_s_pixel_count;
static PyObject *__pyx_n_s_pixel_drains;
static PyObject *__pyx_n_s_pixel_val;
static PyObject *__pyx_kp_u_pixels_complete;
static PyObject *__pyx_n_s_plateau_distance_managed_raster;
static PyObject *__pyx_n_s_plateau_distance_nodata;
static PyObject *__pyx_n_s_plateau_distance_path;
static PyObject *__pyx_kp_u_plateau_distance_tif;
static PyObject *__pyx_n_s_plateau_drain_mask_managed_raste;
static PyObject *__pyx_n_s_plateu_drain_mask_path;
static PyObject *__pyx_kp_u_plateu_drain_mask_tif;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_pour_point;
static PyObject *__pyx_n_s_preempted;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_priority;
static PyObject *__pyx_n_s_processed_nodes;
static PyObject *__pyx_n_s_processed_segments;
static PyObject *__pyx_n_s_proj_x;
static PyObject *__pyx_n_s_proj_y;
static PyObject *__pyx_n_u_projection_wkt;
static PyObject *__pyx_n_s_pygeoprocessing;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_u_quitting_too_many_steps;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_u_raster;
static PyObject *__pyx_n_s_raster_coord;
static PyObject *__pyx_n_s_raster_driver;
static PyObject *__pyx_n_s_raster_driver_creation_tuple;
static PyObject *__pyx_n_s_raster_info;
static PyObject *__pyx_n_s_raster_path;
static PyObject *__pyx_n_s_raster_path_band;
static PyObject *__pyx_n_u_raster_size;
static PyObject *__pyx_n_s_raster_srs;
static PyObject *__pyx_n_s_raster_x_size;
static PyObject *__pyx_n_s_raster_y_size;
static PyObject *__pyx_n_s_raw_weight_nodata;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_kp_u_resulted_in_null_trying;
static PyObject *__pyx_kp_u_retrying;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_right_in;
static PyObject *__pyx_n_u_river_id;
static PyObject *__pyx_n_s_river_order;
static PyObject *__pyx_n_s_rmtree;
static PyObject *__pyx_n_s_root_height;
static PyObject *__pyx_kp_u_s_is_not_a_file;
static PyObject *__pyx_kp_u_s_is_supposed_to_be_a_raster_ba;
static PyObject *__pyx_n_s_scipy;
static PyObject *__pyx_n_s_scipy_stats;
static PyObject *__pyx_n_s_search_queue;
static PyObject *__pyx_n_s_search_stack;
static PyObject *__pyx_n_s_search_steps;
static PyObject *__pyx_kp_u_segments_complete;
static PyObject *__pyx_n_s_segments_to_process;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shapely;
static PyObject *__pyx_n_s_shapely_ops;
static PyObject *__pyx_n_s_shapely_wkb;
static PyObject *__pyx_n_s_shutil;
static PyObject *__pyx_n_s_single_outlet;
static PyObject *__pyx_n_s_single_outlet_tuple;
static PyObject *__pyx_n_s_sink_pixel;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_sorted_stream_order_list;
static PyObject *__pyx_n_s_source_id;
static PyObject *__pyx_n_s_source_point_stack;
static PyObject *__pyx_kp_u_source_points_complete;
static PyObject *__pyx_n_s_source_stream_point;
static PyObject *__pyx_n_s_splitext;
static PyObject *__pyx_kp_s_src_geoprocessing_routing_routin;
static PyObject *__pyx_kp_u_starting_search;
static PyObject *__pyx_n_s_stats;
static PyObject *__pyx_n_s_strahler_stream_vector_path;
static PyObject *__pyx_n_s_stream_array;
static PyObject *__pyx_n_s_stream_band;
static PyObject *__pyx_n_s_stream_basename;
static PyObject *__pyx_n_s_stream_feature;
static PyObject *__pyx_n_s_stream_fid;
static PyObject *__pyx_n_u_stream_fid;
static PyObject *__pyx_kp_u_stream_fragments_complete;
static PyObject *__pyx_n_s_stream_layer;
static PyObject *__pyx_n_s_stream_line;
static PyObject *__pyx_n_s_stream_mr;
static PyObject *__pyx_n_s_stream_nodata;
static PyObject *__pyx_n_s_stream_order;
static PyObject *__pyx_n_s_stream_order_list;
static PyObject *__pyx_n_s_stream_raster;
static PyObject *__pyx_n_s_stream_val;
static PyObject *__pyx_n_s_stream_vector;
static PyObject *__pyx_n_s_streams_by_order;
static PyObject *__pyx_n_s_streams_to_process;
static PyObject *__pyx_n_s_streams_to_retest;
static PyObject *__pyx_n_s_strftime;
static PyObject *__pyx_n_s_suffix;
static PyObject *__pyx_n_s_sum_of_downhill_slopes;
static PyObject *__pyx_n_s_sum_of_flow_weights;
static PyObject *__pyx_n_s_sum_of_nodata_slope_weights;
static PyObject *__pyx_n_s_sum_of_slope_weights;
static PyObject *__pyx_n_s_target_discovery_raster_path;
static PyObject *__pyx_n_s_target_distance_to_channel_raste;
static PyObject *__pyx_n_s_target_filled_dem_raster_path;
static PyObject *__pyx_n_s_target_finish_raster_path;
static PyObject *__pyx_n_s_target_flow_accum_raster_path;
static PyObject *__pyx_n_s_target_flow_dir_path;
static PyObject *__pyx_n_s_target_offset_dict;
static PyObject *__pyx_n_s_target_outlet_vector_path;
static PyObject *__pyx_n_s_target_stream_raster_path;
static PyObject *__pyx_n_s_target_stream_vector_path;
static PyObject *__pyx_n_s_target_watershed_boundary_vector;
static PyObject *__pyx_n_s_tempfile;
static PyObject *__pyx_n_s_terminated_early;
static PyObject *__pyx_n_u_terminated_early;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_dir;
static PyObject *__pyx_n_s_test_order;
static PyObject *__pyx_n_u_thresh_fa;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_tmp_dir;
static PyObject *__pyx_n_s_tmp_dir_root;
static PyObject *__pyx_n_s_tmp_flow_dir_nodata;
static PyObject *__pyx_n_s_tmp_work_dir;
static PyObject *__pyx_n_s_trace_flow_threshold;
static PyObject *__pyx_n_s_trace_threshold_proportion;
static PyObject *__pyx_kp_u_trace_threshold_proportion_shoul;
static PyObject *__pyx_n_s_ttest_ind;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_kp_u_unable_to_open;
static PyObject *__pyx_n_s_upstream_all_defined;
static PyObject *__pyx_n_s_upstream_coord;
static PyObject *__pyx_n_s_upstream_count;
static PyObject *__pyx_n_s_upstream_d8_dir;
static PyObject *__pyx_n_u_upstream_d8_dir;
static PyObject *__pyx_n_s_upstream_dem;
static PyObject *__pyx_n_s_upstream_dirs;
static PyObject *__pyx_n_s_upstream_feature;
static PyObject *__pyx_n_s_upstream_fid;
static PyObject *__pyx_n_s_upstream_fid_list;
static PyObject *__pyx_n_s_upstream_fid_map;
static PyObject *__pyx_n_s_upstream_fids;
static PyObject *__pyx_n_s_upstream_flow_accum;
static PyObject *__pyx_n_s_upstream_flow_dir;
static PyObject *__pyx_n_s_upstream_flow_dir_sum;
static PyObject *__pyx_n_s_upstream_flow_weight;
static PyObject *__pyx_n_s_upstream_id;
static PyObject *__pyx_n_s_upstream_id_list;
static PyObject *__pyx_n_s_upstream_index;
static PyObject *__pyx_n_s_upstream_order;
static PyObject *__pyx_n_s_upstream_stack;
static PyObject *__pyx_n_s_upstream_to_downstream_id;
static PyObject *__pyx_n_u_us_fa;
static PyObject *__pyx_n_s_us_x;
static PyObject *__pyx_n_u_us_x;
static PyObject *__pyx_n_s_us_y;
static PyObject *__pyx_n_u_us_y;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_visit_count;
static PyObject *__pyx_n_s_visit_order_stack;
static PyObject *__pyx_n_s_visited_managed_raster;
static PyObject *__pyx_n_s_visited_raster_path;
static PyObject *__pyx_kp_u_visited_tif;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_watershed_basename;
static PyObject *__pyx_n_s_watershed_boundary;
static PyObject *__pyx_n_s_watershed_feature;
static PyObject *__pyx_n_s_watershed_layer;
static PyObject *__pyx_n_s_watershed_polygon;
static PyObject *__pyx_n_s_watershed_vector;
static PyObject *__pyx_n_s_weight_nodata;
static PyObject *__pyx_n_s_weight_raster;
static PyObject *__pyx_n_s_weight_raster_path_band;
static PyObject *__pyx_n_s_weight_val;
static PyObject *__pyx_n_s_win_xsize;
static PyObject *__pyx_n_u_win_xsize;
static PyObject *__pyx_n_s_win_xsize_border;
static PyObject *__pyx_n_s_win_ysize;
static PyObject *__pyx_n_u_win_ysize;
static PyObject *__pyx_n_s_win_ysize_border;
static PyObject *__pyx_n_s_wkb;
static PyObject *__pyx_n_s_wkbLineString;
static PyObject *__pyx_n_s_wkbLinearRing;
static PyObject *__pyx_n_s_wkbPoint;
static PyObject *__pyx_n_s_wkbPolygon;
static PyObject *__pyx_n_s_working_dir;
static PyObject *__pyx_n_s_working_dir_path;
static PyObject *__pyx_n_s_working_downhill_slope_array;
static PyObject *__pyx_n_s_working_downhill_slope_sum;
static PyObject *__pyx_n_s_working_feature;
static PyObject *__pyx_n_s_working_fid;
static PyObject *__pyx_n_s_working_flow_accum_threshold;
static PyObject *__pyx_n_s_working_geom;
static PyObject *__pyx_n_s_working_order;
static PyObject *__pyx_n_s_working_river_id;
static PyObject *__pyx_n_s_working_stack;
static PyObject *__pyx_n_s_workspace_dir;
static PyObject *__pyx_n_s_write_mode;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_u_x;
static PyObject *__pyx_n_s_x_f;
static PyObject *__pyx_n_s_x_l;
static PyObject *__pyx_n_s_x_n;
static PyObject *__pyx_n_s_x_off_border;
static PyObject *__pyx_kp_u_x_out_of_bounds_s;
static PyObject *__pyx_n_s_x_p;
static PyObject *__pyx_n_s_x_u;
static PyObject *__pyx_n_s_xa;
static PyObject *__pyx_n_s_xb;
static PyObject *__pyx_n_s_xi;
static PyObject *__pyx_n_s_xi_bn;
static PyObject *__pyx_n_s_xi_n;
static PyObject *__pyx_n_s_xi_q;
static PyObject *__pyx_n_s_xi_root;
static PyObject *__pyx_n_s_xi_sn;
static PyObject *__pyx_n_s_xoff;
static PyObject *__pyx_n_u_xoff;
static PyObject *__pyx_n_s_y_f;
static PyObject *__pyx_n_s_y_l;
static PyObject *__pyx_n_s_y_n;
static PyObject *__pyx_n_s_y_off_border;
static PyObject *__pyx_kp_u_y_out_of_bounds_s;
static PyObject *__pyx_n_s_y_p;
static PyObject *__pyx_n_s_y_u;
static PyObject *__pyx_n_s_ya;
static PyObject *__pyx_n_s_yb;
static PyObject *__pyx_n_s_yi;
static PyObject *__pyx_n_s_yi_bn;
static PyObject *__pyx_n_s_yi_n;
static PyObject *__pyx_n_s_yi_q;
static PyObject *__pyx_n_s_yi_root;
static PyObject *__pyx_n_s_yi_sn;
static PyObject *__pyx_n_s_yoff;
static PyObject *__pyx_n_u_yoff;
static int __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster___cinit__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, PyObject *__pyx_v_raster_path, PyObject *__pyx_v_band_id, PyObject *__pyx_v_write_mode); /* proto */
static void __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_2__dealloc__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_4close(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing__generate_read_bounds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_offset_dict, PyObject *__pyx_v_raster_x_size, PyObject *__pyx_v_raster_y_size); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_2fill_pits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_filled_dem_raster_path, PyObject *__pyx_v_working_dir, PY_LONG_LONG __pyx_v_max_pixel_fill_count, PyObject *__pyx_v_single_outlet_tuple, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_4flow_dir_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_flow_dir_path, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_6flow_accumulation_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_raster_path_band, PyObject *__pyx_v_target_flow_accum_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_8flow_dir_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_flow_dir_path, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_10flow_accumulation_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_mfd_raster_path_band, PyObject *__pyx_v_target_flow_accum_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_12distance_to_channel_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_d8_raster_path_band, PyObject *__pyx_v_channel_raster_path_band, PyObject *__pyx_v_target_distance_to_channel_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14distance_to_channel_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_mfd_raster_path_band, PyObject *__pyx_v_channel_raster_path_band, PyObject *__pyx_v_target_distance_to_channel_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_16extract_streams_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_accum_raster_path_band, PyObject *__pyx_v_flow_dir_mfd_path_band, double __pyx_v_flow_threshold, PyObject *__pyx_v_target_stream_raster_path, double __pyx_v_trace_threshold_proportion, PyObject *__pyx_v_raster_driver_creation_tuple); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_18_is_raster_path_band_formatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_20extract_strahler_streams_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_d8_raster_path_band, PyObject *__pyx_v_flow_accum_raster_path_band, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_stream_vector_path, long __pyx_v_min_flow_accum_threshold, int __pyx_v_river_order, float __pyx_v_min_p_val, PyObject *__pyx_v_autotune_flow_accumulation, PyObject *__pyx_v_osr_axis_mapping_strategy); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_22_build_discovery_finish_rasters(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_d8_raster_path_band, PyObject *__pyx_v_target_discovery_raster_path, PyObject *__pyx_v_target_finish_raster_path); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_24calculate_subwatershed_boundary(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d8_flow_dir_raster_path_band, PyObject *__pyx_v_strahler_stream_vector_path, PyObject *__pyx_v_target_watershed_boundary_vector_path, PyObject *__pyx_v_max_steps_per_watershed, PyObject *__pyx_v_outlet_at_confluence); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_26detect_lowest_drain_and_sink(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_28detect_outlets(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_raster_path_band, PyObject *__pyx_v_flow_dir_type, PyObject *__pyx_v_target_outlet_vector_path); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_30_delete_feature(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_stream_feature, PyObject *__pyx_v_stream_layer, PyObject *__pyx_v_upstream_to_downstream_id, PyObject *__pyx_v_downstream_to_upstream_ids); /* proto */
static PyObject *__pyx_tp_new_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_float_0_2;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_25;
static PyObject *__pyx_float_100_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_1000000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__7;
static PyObject *__pyx_k__9;
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
/* Late includes */

/* "src/geoprocessing/routing/routing.pyx":165
 * # functor for priority queue of pixels
 * cdef cppclass GreaterPixel nogil:
 *     bint get "operator()"(PixelType& lhs, PixelType& rhs):             # <<<<<<<<<<<<<<
 *         # lhs is > than rhs if its value is greater or if it's equal if
 *         # the priority is >.
 */

int __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_GreaterPixel::operator()(struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType &__pyx_v_lhs, struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType &__pyx_v_rhs) {
  int __pyx_r;
  int __pyx_t_1;

  /* "src/geoprocessing/routing/routing.pyx":168
 *         # lhs is > than rhs if its value is greater or if it's equal if
 *         # the priority is >.
 *         if lhs.value > rhs.value:             # <<<<<<<<<<<<<<
 *             return 1
 *         if lhs.value == rhs.value:
 */
  __pyx_t_1 = ((__pyx_v_lhs.value > __pyx_v_rhs.value) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":169
 *         # the priority is >.
 *         if lhs.value > rhs.value:
 *             return 1             # <<<<<<<<<<<<<<
 *         if lhs.value == rhs.value:
 *             if lhs.priority > rhs.priority:
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":168
 *         # lhs is > than rhs if its value is greater or if it's equal if
 *         # the priority is >.
 *         if lhs.value > rhs.value:             # <<<<<<<<<<<<<<
 *             return 1
 *         if lhs.value == rhs.value:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":170
 *         if lhs.value > rhs.value:
 *             return 1
 *         if lhs.value == rhs.value:             # <<<<<<<<<<<<<<
 *             if lhs.priority > rhs.priority:
 *                 return 1
 */
  __pyx_t_1 = ((__pyx_v_lhs.value == __pyx_v_rhs.value) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":171
 *             return 1
 *         if lhs.value == rhs.value:
 *             if lhs.priority > rhs.priority:             # <<<<<<<<<<<<<<
 *                 return 1
 *         return 0
 */
    __pyx_t_1 = ((__pyx_v_lhs.priority > __pyx_v_rhs.priority) != 0);
    if (__pyx_t_1) {

      /* "src/geoprocessing/routing/routing.pyx":172
 *         if lhs.value == rhs.value:
 *             if lhs.priority > rhs.priority:
 *                 return 1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "src/geoprocessing/routing/routing.pyx":171
 *             return 1
 *         if lhs.value == rhs.value:
 *             if lhs.priority > rhs.priority:             # <<<<<<<<<<<<<<
 *                 return 1
 *         return 0
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":170
 *         if lhs.value > rhs.value:
 *             return 1
 *         if lhs.value == rhs.value:             # <<<<<<<<<<<<<<
 *             if lhs.priority > rhs.priority:
 *                 return 1
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":173
 *             if lhs.priority > rhs.priority:
 *                 return 1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int _is_close(double x, double y, double abs_delta, double rel_delta):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":165
 * # functor for priority queue of pixels
 * cdef cppclass GreaterPixel nogil:
 *     bint get "operator()"(PixelType& lhs, PixelType& rhs):             # <<<<<<<<<<<<<<
 *         # lhs is > than rhs if its value is greater or if it's equal if
 *         # the priority is >.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":175
 *         return 0
 * 
 * cdef int _is_close(double x, double y, double abs_delta, double rel_delta):             # <<<<<<<<<<<<<<
 *     return abs(x-y) <= (abs_delta+rel_delta*abs(y))
 * 
 */

static int __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(double __pyx_v_x, double __pyx_v_y, double __pyx_v_abs_delta, double __pyx_v_rel_delta) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_close", 0);

  /* "src/geoprocessing/routing/routing.pyx":176
 * 
 * cdef int _is_close(double x, double y, double abs_delta, double rel_delta):
 *     return abs(x-y) <= (abs_delta+rel_delta*abs(y))             # <<<<<<<<<<<<<<
 * 
 * # a class to allow fast random per-pixel access to a raster for both setting
 */
  __pyx_r = (fabs((__pyx_v_x - __pyx_v_y)) <= (__pyx_v_abs_delta + (__pyx_v_rel_delta * fabs(__pyx_v_y))));
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":175
 *         return 0
 * 
 * cdef int _is_close(double x, double y, double abs_delta, double rel_delta):             # <<<<<<<<<<<<<<
 *     return abs(x-y) <= (abs_delta+rel_delta*abs(y))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":198
 *     cdef int closed
 * 
 *     def __cinit__(self, raster_path, band_id, write_mode):             # <<<<<<<<<<<<<<
 *         """Create new instance of Managed Raster.
 * 
 */

/* Python wrapper */
static int __pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_raster_path = 0;
  PyObject *__pyx_v_band_id = 0;
  PyObject *__pyx_v_write_mode = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_raster_path,&__pyx_n_s_band_id,&__pyx_n_s_write_mode,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_write_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 198, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 198, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_raster_path = values[0];
    __pyx_v_band_id = values[1];
    __pyx_v_write_mode = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster___cinit__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self), __pyx_v_raster_path, __pyx_v_band_id, __pyx_v_write_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster___cinit__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, PyObject *__pyx_v_raster_path, PyObject *__pyx_v_band_id, PyObject *__pyx_v_write_mode) {
  PyObject *__pyx_v_raster_info = NULL;
  PyObject *__pyx_v_err_msg = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  long __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/geoprocessing/routing/routing.pyx":213
 *             None.
 *         """
 *         if not os.path.isfile(raster_path):             # <<<<<<<<<<<<<<
 *             LOGGER.error("%s is not a file.", raster_path)
 *             return
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_raster_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":214
 *         """
 *         if not os.path.isfile(raster_path):
 *             LOGGER.error("%s is not a file.", raster_path)             # <<<<<<<<<<<<<<
 *             return
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_u_s_is_not_a_file, __pyx_v_raster_path};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_u_s_is_not_a_file, __pyx_v_raster_path};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_u_s_is_not_a_file);
      __Pyx_GIVEREF(__pyx_kp_u_s_is_not_a_file);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_kp_u_s_is_not_a_file);
      __Pyx_INCREF(__pyx_v_raster_path);
      __Pyx_GIVEREF(__pyx_v_raster_path);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_raster_path);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":215
 *         if not os.path.isfile(raster_path):
 *             LOGGER.error("%s is not a file.", raster_path)
 *             return             # <<<<<<<<<<<<<<
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":213
 *             None.
 *         """
 *         if not os.path.isfile(raster_path):             # <<<<<<<<<<<<<<
 *             LOGGER.error("%s is not a file.", raster_path)
 *             return
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":216
 *             LOGGER.error("%s is not a file.", raster_path)
 *             return
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)             # <<<<<<<<<<<<<<
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_v_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_raster_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_raster_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":217
 *             return
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']             # <<<<<<<<<<<<<<
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 *         self.block_xmod = self.block_xsize-1
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 217, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_7 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 217, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->raster_x_size = __pyx_t_6;
  __pyx_v_self->raster_y_size = __pyx_t_9;

  /* "src/geoprocessing/routing/routing.pyx":218
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 *         self.block_xsize, self.block_ysize = raster_info['block_size']             # <<<<<<<<<<<<<<
 *         self.block_xmod = self.block_xsize-1
 *         self.block_ymod = self.block_ysize-1
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_block_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L7_unpacking_done;
    __pyx_L6_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 218, __pyx_L1_error)
    __pyx_L7_unpacking_done:;
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->block_xsize = __pyx_t_9;
  __pyx_v_self->block_ysize = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":219
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 *         self.block_xmod = self.block_xsize-1             # <<<<<<<<<<<<<<
 *         self.block_ymod = self.block_ysize-1
 * 
 */
  __pyx_v_self->block_xmod = (__pyx_v_self->block_xsize - 1);

  /* "src/geoprocessing/routing/routing.pyx":220
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 *         self.block_xmod = self.block_xsize-1
 *         self.block_ymod = self.block_ysize-1             # <<<<<<<<<<<<<<
 * 
 *         if not (1 <= band_id <= raster_info['n_bands']):
 */
  __pyx_v_self->block_ymod = (__pyx_v_self->block_ysize - 1);

  /* "src/geoprocessing/routing/routing.pyx":222
 *         self.block_ymod = self.block_ysize-1
 * 
 *         if not (1 <= band_id <= raster_info['n_bands']):             # <<<<<<<<<<<<<<
 *             err_msg = (
 *                 "Error: band ID (%s) is not a valid band number. "
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_int_1, __pyx_v_band_id, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_1)) {
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_n_bands); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_band_id, __pyx_t_7, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((!__pyx_t_5) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "src/geoprocessing/routing/routing.pyx":227
 *                 "This exception is happening in Cython, so it will cause a "
 *                 "hard seg-fault, but it's otherwise meant to be a "
 *                 "ValueError." % (band_id))             # <<<<<<<<<<<<<<
 *             print(err_msg)
 *             raise ValueError(err_msg)
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Error_band_ID_s_is_not_a_valid_b, __pyx_v_band_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_err_msg = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":228
 *                 "hard seg-fault, but it's otherwise meant to be a "
 *                 "ValueError." % (band_id))
 *             print(err_msg)             # <<<<<<<<<<<<<<
 *             raise ValueError(err_msg)
 *         self.band_id = band_id
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_err_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":229
 *                 "ValueError." % (band_id))
 *             print(err_msg)
 *             raise ValueError(err_msg)             # <<<<<<<<<<<<<<
 *         self.band_id = band_id
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_err_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 229, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":222
 *         self.block_ymod = self.block_ysize-1
 * 
 *         if not (1 <= band_id <= raster_info['n_bands']):             # <<<<<<<<<<<<<<
 *             err_msg = (
 *                 "Error: band ID (%s) is not a valid band number. "
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":230
 *             print(err_msg)
 *             raise ValueError(err_msg)
 *         self.band_id = band_id             # <<<<<<<<<<<<<<
 * 
 *         if (self.block_xsize & (self.block_xsize - 1) != 0) or (
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_band_id); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_v_self->band_id = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":232
 *         self.band_id = band_id
 * 
 *         if (self.block_xsize & (self.block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *                 self.block_ysize & (self.block_ysize - 1) != 0):
 *             # If inputs are not a power of two, this will at least print
 */
  __pyx_t_5 = (((__pyx_v_self->block_xsize & (__pyx_v_self->block_xsize - 1)) != 0) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L10_bool_binop_done;
  }

  /* "src/geoprocessing/routing/routing.pyx":233
 * 
 *         if (self.block_xsize & (self.block_xsize - 1) != 0) or (
 *                 self.block_ysize & (self.block_ysize - 1) != 0):             # <<<<<<<<<<<<<<
 *             # If inputs are not a power of two, this will at least print
 *             # an error message. Unfortunately with Cython, the exception will
 */
  __pyx_t_5 = (((__pyx_v_self->block_ysize & (__pyx_v_self->block_ysize - 1)) != 0) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L10_bool_binop_done:;

  /* "src/geoprocessing/routing/routing.pyx":232
 *         self.band_id = band_id
 * 
 *         if (self.block_xsize & (self.block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *                 self.block_ysize & (self.block_ysize - 1) != 0):
 *             # If inputs are not a power of two, this will at least print
 */
  if (unlikely(__pyx_t_4)) {

    /* "src/geoprocessing/routing/routing.pyx":239
 *             # ValueError in here at least for readability.
 *             err_msg = (
 *                 "Error: Block size is not a power of two: "             # <<<<<<<<<<<<<<
 *                 "block_xsize: %d, %d, %s. This exception is happening"
 *                 "in Cython, so it will cause a hard seg-fault, but it's"
 */
    __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = 0;
    __pyx_t_11 = 127;
    __Pyx_INCREF(__pyx_kp_u_Error_Block_size_is_not_a_power);
    __pyx_t_10 += 54;
    __Pyx_GIVEREF(__pyx_kp_u_Error_Block_size_is_not_a_power);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Error_Block_size_is_not_a_power);

    /* "src/geoprocessing/routing/routing.pyx":243
 *                 "in Cython, so it will cause a hard seg-fault, but it's"
 *                 "otherwise meant to be a ValueError." % (
 *                     self.block_xsize, self.block_ysize, raster_path))             # <<<<<<<<<<<<<<
 *             print(err_msg)
 *             raise ValueError(err_msg)
 */
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->block_xsize, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_10 += 2;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->block_ysize, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_10 += 2;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_raster_path), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_11;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_This_exception_is_happeningin_C);
    __pyx_t_10 += 118;
    __Pyx_GIVEREF(__pyx_kp_u_This_exception_is_happeningin_C);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_This_exception_is_happeningin_C);

    /* "src/geoprocessing/routing/routing.pyx":239
 *             # ValueError in here at least for readability.
 *             err_msg = (
 *                 "Error: Block size is not a power of two: "             # <<<<<<<<<<<<<<
 *                 "block_xsize: %d, %d, %s. This exception is happening"
 *                 "in Cython, so it will cause a hard seg-fault, but it's"
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_err_msg = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":244
 *                 "otherwise meant to be a ValueError." % (
 *                     self.block_xsize, self.block_ysize, raster_path))
 *             print(err_msg)             # <<<<<<<<<<<<<<
 *             raise ValueError(err_msg)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_err_msg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":245
 *                     self.block_xsize, self.block_ysize, raster_path))
 *             print(err_msg)
 *             raise ValueError(err_msg)             # <<<<<<<<<<<<<<
 * 
 *         self.block_xbits = numpy.log2(self.block_xsize)
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_err_msg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 245, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":232
 *         self.band_id = band_id
 * 
 *         if (self.block_xsize & (self.block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *                 self.block_ysize & (self.block_ysize - 1) != 0):
 *             # If inputs are not a power of two, this will at least print
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":247
 *             raise ValueError(err_msg)
 * 
 *         self.block_xbits = numpy.log2(self.block_xsize)             # <<<<<<<<<<<<<<
 *         self.block_ybits = numpy.log2(self.block_ysize)
 *         self.block_nx = (
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_log2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->block_xbits = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":248
 * 
 *         self.block_xbits = numpy.log2(self.block_xsize)
 *         self.block_ybits = numpy.log2(self.block_ysize)             # <<<<<<<<<<<<<<
 *         self.block_nx = (
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->block_ybits = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":250
 *         self.block_ybits = numpy.log2(self.block_ysize)
 *         self.block_nx = (
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize             # <<<<<<<<<<<<<<
 *         self.block_ny = (
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize
 */
  __pyx_t_12 = ((__pyx_v_self->raster_x_size + __pyx_v_self->block_xsize) - 1);
  if (unlikely(__pyx_v_self->block_xsize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 250, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_xsize == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_12))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 250, __pyx_L1_error)
  }

  /* "src/geoprocessing/routing/routing.pyx":249
 *         self.block_xbits = numpy.log2(self.block_xsize)
 *         self.block_ybits = numpy.log2(self.block_ysize)
 *         self.block_nx = (             # <<<<<<<<<<<<<<
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 *         self.block_ny = (
 */
  __pyx_v_self->block_nx = __Pyx_div_long(__pyx_t_12, __pyx_v_self->block_xsize);

  /* "src/geoprocessing/routing/routing.pyx":252
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 *         self.block_ny = (
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *         self.lru_cache = new LRUCache[int, double*](MANAGED_RASTER_N_BLOCKS)
 */
  __pyx_t_12 = ((__pyx_v_self->raster_y_size + __pyx_v_self->block_ysize) - 1);
  if (unlikely(__pyx_v_self->block_ysize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 252, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_ysize == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_12))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 252, __pyx_L1_error)
  }

  /* "src/geoprocessing/routing/routing.pyx":251
 *         self.block_nx = (
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 *         self.block_ny = (             # <<<<<<<<<<<<<<
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize
 * 
 */
  __pyx_v_self->block_ny = __Pyx_div_long(__pyx_t_12, __pyx_v_self->block_ysize);

  /* "src/geoprocessing/routing/routing.pyx":254
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize
 * 
 *         self.lru_cache = new LRUCache[int, double*](MANAGED_RASTER_N_BLOCKS)             # <<<<<<<<<<<<<<
 *         self.raster_path = <bytes> raster_path
 *         self.write_mode = write_mode
 */
  __pyx_v_self->lru_cache = new LRUCache<int,double *> (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_MANAGED_RASTER_N_BLOCKS);

  /* "src/geoprocessing/routing/routing.pyx":255
 * 
 *         self.lru_cache = new LRUCache[int, double*](MANAGED_RASTER_N_BLOCKS)
 *         self.raster_path = <bytes> raster_path             # <<<<<<<<<<<<<<
 *         self.write_mode = write_mode
 *         self.closed = 0
 */
  __pyx_t_7 = __pyx_v_raster_path;
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->raster_path);
  __Pyx_DECREF(__pyx_v_self->raster_path);
  __pyx_v_self->raster_path = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":256
 *         self.lru_cache = new LRUCache[int, double*](MANAGED_RASTER_N_BLOCKS)
 *         self.raster_path = <bytes> raster_path
 *         self.write_mode = write_mode             # <<<<<<<<<<<<<<
 *         self.closed = 0
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_write_mode); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_v_self->write_mode = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":257
 *         self.raster_path = <bytes> raster_path
 *         self.write_mode = write_mode
 *         self.closed = 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->closed = 0;

  /* "src/geoprocessing/routing/routing.pyx":198
 *     cdef int closed
 * 
 *     def __cinit__(self, raster_path, band_id, write_mode):             # <<<<<<<<<<<<<<
 *         """Create new instance of Managed Raster.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raster_info);
  __Pyx_XDECREF(__pyx_v_err_msg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":259
 *         self.closed = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Deallocate _ManagedRaster.
 * 
 */

/* Python wrapper */
static void __pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_2__dealloc__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_2__dealloc__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/geoprocessing/routing/routing.pyx":265
 *         dirty memory blocks back to the raster if `self.write_mode` is True.
 *         """
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":259
 *         self.closed = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Deallocate _ManagedRaster.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.routing._ManagedRaster.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "src/geoprocessing/routing/routing.pyx":267
 *         self.close()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         """Close the _ManagedRaster and free up resources.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_5close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_4close[] = "Close the _ManagedRaster and free up resources.\n\n            This call writes any dirty blocks to disk, frees up the memory\n            allocated as part of the cache, and frees all GDAL references.\n\n            Any subsequent calls to any other functions in _ManagedRaster will\n            have undefined behavior.\n        ";
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_5close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_4close(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_4close(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self) {
  int __pyx_v_xi_copy;
  int __pyx_v_yi_copy;
  PyArrayObject *__pyx_v_block_array = 0;
  double *__pyx_v_double_buffer;
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_7routing_BlockBufferPair> ::iterator __pyx_v_it;
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_7routing_BlockBufferPair> ::iterator __pyx_v_end;
  PyObject *__pyx_v_raster = NULL;
  PyObject *__pyx_v_raster_band = NULL;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  PyObject *__pyx_v_block_index = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_block_array;
  __Pyx_Buffer __pyx_pybuffer_block_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  __pyx_pybuffer_block_array.pybuffer.buf = NULL;
  __pyx_pybuffer_block_array.refcount = 0;
  __pyx_pybuffernd_block_array.data = NULL;
  __pyx_pybuffernd_block_array.rcbuffer = &__pyx_pybuffer_block_array;

  /* "src/geoprocessing/routing/routing.pyx":276
 *             have undefined behavior.
 *         """
 *         if self.closed:             # <<<<<<<<<<<<<<
 *             return
 *         self.closed = 1
 */
  __pyx_t_1 = (__pyx_v_self->closed != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":277
 *         """
 *         if self.closed:
 *             return             # <<<<<<<<<<<<<<
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":276
 *             have undefined behavior.
 *         """
 *         if self.closed:             # <<<<<<<<<<<<<<
 *             return
 *         self.closed = 1
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":278
 *         if self.closed:
 *             return
 *         self.closed = 1             # <<<<<<<<<<<<<<
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[double, ndim=2] block_array = numpy.empty(
 */
  __pyx_v_self->closed = 1;

  /* "src/geoprocessing/routing/routing.pyx":280
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[double, ndim=2] block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize))
 *         cdef double *double_buffer
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":281
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[double, ndim=2] block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize))             # <<<<<<<<<<<<<<
 *         cdef double *double_buffer
 *         cdef int block_xi
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":280
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[double, ndim=2] block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize))
 *         cdef double *double_buffer
 */
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_block_array = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 280, __pyx_L1_error)
    } else {__pyx_pybuffernd_block_array.diminfo[0].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_block_array.diminfo[0].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_block_array.diminfo[1].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_block_array.diminfo[1].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_block_array = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":294
 *         cdef int yoff
 * 
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()             # <<<<<<<<<<<<<<
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:
 */
  __pyx_v_it = __pyx_v_self->lru_cache->begin();

  /* "src/geoprocessing/routing/routing.pyx":295
 * 
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()             # <<<<<<<<<<<<<<
 *         if not self.write_mode:
 *             while it != end:
 */
  __pyx_v_end = __pyx_v_self->lru_cache->end();

  /* "src/geoprocessing/routing/routing.pyx":296
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:             # <<<<<<<<<<<<<<
 *             while it != end:
 *                 # write the changed value back if desired
 */
  __pyx_t_1 = ((!(__pyx_v_self->write_mode != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":297
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:
 *             while it != end:             # <<<<<<<<<<<<<<
 *                 # write the changed value back if desired
 *                 PyMem_Free(deref(it).second)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_it != __pyx_v_end) != 0);
      if (!__pyx_t_1) break;

      /* "src/geoprocessing/routing/routing.pyx":299
 *             while it != end:
 *                 # write the changed value back if desired
 *                 PyMem_Free(deref(it).second)             # <<<<<<<<<<<<<<
 *                 inc(it)
 *             return
 */
      PyMem_Free((*__pyx_v_it).second);

      /* "src/geoprocessing/routing/routing.pyx":300
 *                 # write the changed value back if desired
 *                 PyMem_Free(deref(it).second)
 *                 inc(it)             # <<<<<<<<<<<<<<
 *             return
 * 
 */
      (void)((++__pyx_v_it));
    }

    /* "src/geoprocessing/routing/routing.pyx":301
 *                 PyMem_Free(deref(it).second)
 *                 inc(it)
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raster = gdal.OpenEx(
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":296
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:             # <<<<<<<<<<<<<<
 *             while it != end:
 *                 # write the changed value back if desired
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":303
 *             return
 * 
 *         raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *             self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":304
 * 
 *         raster = gdal.OpenEx(
 *             self.raster_path, gdal.GA_Update | gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *         raster_band = raster.GetRasterBand(self.band_id)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Or(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self->raster_path, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self->raster_path, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_v_self->raster_path);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_raster = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":305
 *         raster = gdal.OpenEx(
 *             self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 * 
 *         # if we get here, we're in write_mode
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_raster_band = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":309
 *         # if we get here, we're in write_mode
 *         cdef cset[int].iterator dirty_itr
 *         while it != end:             # <<<<<<<<<<<<<<
 *             double_buffer = deref(it).second
 *             block_index = deref(it).first
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_end) != 0);
    if (!__pyx_t_1) break;

    /* "src/geoprocessing/routing/routing.pyx":310
 *         cdef cset[int].iterator dirty_itr
 *         while it != end:
 *             double_buffer = deref(it).second             # <<<<<<<<<<<<<<
 *             block_index = deref(it).first
 * 
 */
    __pyx_t_9 = (*__pyx_v_it).second;
    __pyx_v_double_buffer = __pyx_t_9;

    /* "src/geoprocessing/routing/routing.pyx":311
 *         while it != end:
 *             double_buffer = deref(it).second
 *             block_index = deref(it).first             # <<<<<<<<<<<<<<
 * 
 *             # write to disk if block is dirty
 */
    __pyx_t_2 = __Pyx_PyInt_From_int((*__pyx_v_it).first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_block_index, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":314
 * 
 *             # write to disk if block is dirty
 *             dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *             if dirty_itr != self.dirty_blocks.end():
 *                 self.dirty_blocks.erase(dirty_itr)
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_block_index); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_t_8);

    /* "src/geoprocessing/routing/routing.pyx":315
 *             # write to disk if block is dirty
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx
 */
    __pyx_t_1 = ((__pyx_v_dirty_itr != __pyx_v_self->dirty_blocks.end()) != 0);
    if (__pyx_t_1) {

      /* "src/geoprocessing/routing/routing.pyx":316
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr != self.dirty_blocks.end():
 *                 self.dirty_blocks.erase(dirty_itr)             # <<<<<<<<<<<<<<
 *                 block_xi = block_index % self.block_nx
 *                 block_yi = block_index / self.block_nx
 */
      (void)(__pyx_v_self->dirty_blocks.erase(__pyx_v_dirty_itr));

      /* "src/geoprocessing/routing/routing.pyx":317
 *             if dirty_itr != self.dirty_blocks.end():
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *                 block_yi = block_index / self.block_nx
 * 
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->block_nx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyNumber_Remainder(__pyx_v_block_index, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_block_xi = __pyx_t_8;

      /* "src/geoprocessing/routing/routing.pyx":318
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx
 *                 block_yi = block_index / self.block_nx             # <<<<<<<<<<<<<<
 * 
 *                 # we need the offsets to subtract from global indexes for
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->block_nx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_block_index, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_block_yi = __pyx_t_8;

      /* "src/geoprocessing/routing/routing.pyx":322
 *                 # we need the offsets to subtract from global indexes for
 *                 # cached array
 *                 xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *                 yoff = block_yi << self.block_ybits
 * 
 */
      __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

      /* "src/geoprocessing/routing/routing.pyx":323
 *                 # cached array
 *                 xoff = block_xi << self.block_xbits
 *                 yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *                 win_xsize = self.block_xsize
 */
      __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

      /* "src/geoprocessing/routing/routing.pyx":325
 *                 yoff = block_yi << self.block_ybits
 * 
 *                 win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *                 win_ysize = self.block_ysize
 * 
 */
      __pyx_t_8 = __pyx_v_self->block_xsize;
      __pyx_v_win_xsize = __pyx_t_8;

      /* "src/geoprocessing/routing/routing.pyx":326
 * 
 *                 win_xsize = self.block_xsize
 *                 win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *                 # clip window sizes if necessary
 */
      __pyx_t_8 = __pyx_v_self->block_ysize;
      __pyx_v_win_ysize = __pyx_t_8;

      /* "src/geoprocessing/routing/routing.pyx":329
 * 
 *                 # clip window sizes if necessary
 *                 if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 */
      __pyx_t_1 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
      if (__pyx_t_1) {

        /* "src/geoprocessing/routing/routing.pyx":330
 *                 # clip window sizes if necessary
 *                 if xoff+win_xsize > self.raster_x_size:
 *                     win_xsize = win_xsize - (             # <<<<<<<<<<<<<<
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:
 */
        __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

        /* "src/geoprocessing/routing/routing.pyx":329
 * 
 *                 # clip window sizes if necessary
 *                 if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":332
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                     win_ysize = win_ysize - (
 *                         yoff+win_ysize - self.raster_y_size)
 */
      __pyx_t_1 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
      if (__pyx_t_1) {

        /* "src/geoprocessing/routing/routing.pyx":333
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:
 *                     win_ysize = win_ysize - (             # <<<<<<<<<<<<<<
 *                         yoff+win_ysize - self.raster_y_size)
 * 
 */
        __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

        /* "src/geoprocessing/routing/routing.pyx":332
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                     win_ysize = win_ysize - (
 *                         yoff+win_ysize - self.raster_y_size)
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":336
 *                         yoff+win_ysize - self.raster_y_size)
 * 
 *                 for xi_copy in range(win_xsize):             # <<<<<<<<<<<<<<
 *                     for yi_copy in range(win_ysize):
 *                         block_array[yi_copy, xi_copy] = (
 */
      __pyx_t_8 = __pyx_v_win_xsize;
      __pyx_t_10 = __pyx_t_8;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_xi_copy = __pyx_t_11;

        /* "src/geoprocessing/routing/routing.pyx":337
 * 
 *                 for xi_copy in range(win_xsize):
 *                     for yi_copy in range(win_ysize):             # <<<<<<<<<<<<<<
 *                         block_array[yi_copy, xi_copy] = (
 *                             double_buffer[
 */
        __pyx_t_12 = __pyx_v_win_ysize;
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_yi_copy = __pyx_t_14;

          /* "src/geoprocessing/routing/routing.pyx":338
 *                 for xi_copy in range(win_xsize):
 *                     for yi_copy in range(win_ysize):
 *                         block_array[yi_copy, xi_copy] = (             # <<<<<<<<<<<<<<
 *                             double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 */
          __pyx_t_15 = __pyx_v_yi_copy;
          __pyx_t_16 = __pyx_v_xi_copy;
          __pyx_t_17 = -1;
          if (__pyx_t_15 < 0) {
            __pyx_t_15 += __pyx_pybuffernd_block_array.diminfo[0].shape;
            if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
          } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_block_array.diminfo[0].shape)) __pyx_t_17 = 0;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_block_array.diminfo[1].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_block_array.diminfo[1].shape)) __pyx_t_17 = 1;
          if (unlikely(__pyx_t_17 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_17);
            __PYX_ERR(0, 338, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_block_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_block_array.diminfo[1].strides) = (__pyx_v_double_buffer[((__pyx_v_yi_copy << __pyx_v_self->block_xbits) + __pyx_v_xi_copy)]);
        }
      }

      /* "src/geoprocessing/routing/routing.pyx":341
 *                             double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "src/geoprocessing/routing/routing.pyx":342
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(
 *                     block_array[0:win_ysize, 0:win_xsize],             # <<<<<<<<<<<<<<
 *                     xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PySlice_New(__pyx_int_0, __pyx_t_6, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PySlice_New(__pyx_int_0, __pyx_t_6, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_block_array), __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "src/geoprocessing/routing/routing.pyx":341
 *                             double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":343
 *                 raster_band.WriteArray(
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)             # <<<<<<<<<<<<<<
 *             PyMem_Free(double_buffer)
 *             inc(it)
 */
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_xoff, __pyx_t_5) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_yoff, __pyx_t_5) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "src/geoprocessing/routing/routing.pyx":341
 *                             double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "src/geoprocessing/routing/routing.pyx":315
 *             # write to disk if block is dirty
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":344
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)             # <<<<<<<<<<<<<<
 *             inc(it)
 *         raster_band.FlushCache()
 */
    PyMem_Free(__pyx_v_double_buffer);

    /* "src/geoprocessing/routing/routing.pyx":345
 *                     xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)
 *             inc(it)             # <<<<<<<<<<<<<<
 *         raster_band.FlushCache()
 *         raster_band = None
 */
    (void)((++__pyx_v_it));
  }

  /* "src/geoprocessing/routing/routing.pyx":346
 *             PyMem_Free(double_buffer)
 *             inc(it)
 *         raster_band.FlushCache()             # <<<<<<<<<<<<<<
 *         raster_band = None
 *         raster = None
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_FlushCache); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":347
 *             inc(it)
 *         raster_band.FlushCache()
 *         raster_band = None             # <<<<<<<<<<<<<<
 *         raster = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":348
 *         raster_band.FlushCache()
 *         raster_band = None
 *         raster = None             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void set(self, int xi, int yi, double value):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":267
 *         self.close()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         """Close the _ManagedRaster and free up resources.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_block_array);
  __Pyx_XDECREF(__pyx_v_raster);
  __Pyx_XDECREF(__pyx_v_raster_band);
  __Pyx_XDECREF(__pyx_v_block_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":350
 *         raster = None
 * 
 *     cdef inline void set(self, int xi, int yi, double value):             # <<<<<<<<<<<<<<
 *         """Set the pixel at `xi,yi` to `value`."""
 *         if xi < 0 or xi >= self.raster_x_size:
 */

static CYTHON_INLINE void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi, double __pyx_v_value) {
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_block_index;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 0);

  /* "src/geoprocessing/routing/routing.pyx":352
 *     cdef inline void set(self, int xi, int yi, double value):
 *         """Set the pixel at `xi,yi` to `value`."""
 *         if xi < 0 or xi >= self.raster_x_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:
 */
  __pyx_t_2 = ((__pyx_v_xi < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_xi >= __pyx_v_self->raster_x_size) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":353
 *         """Set the pixel at `xi,yi` to `value`."""
 *         if xi < 0 or xi >= self.raster_x_size:
 *             LOGGER.error("x out of bounds %s" % xi)             # <<<<<<<<<<<<<<
 *         if yi < 0 or yi >= self.raster_y_size:
 *             LOGGER.error("y out of bounds %s" % yi)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_xi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_x_out_of_bounds_s, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":352
 *     cdef inline void set(self, int xi, int yi, double value):
 *         """Set the pixel at `xi,yi` to `value`."""
 *         if xi < 0 or xi >= self.raster_x_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":354
 *         if xi < 0 or xi >= self.raster_x_size:
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits
 */
  __pyx_t_2 = ((__pyx_v_yi < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_yi >= __pyx_v_self->raster_y_size) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":355
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:
 *             LOGGER.error("y out of bounds %s" % yi)             # <<<<<<<<<<<<<<
 *         cdef int block_xi = xi >> self.block_xbits
 *         cdef int block_yi = yi >> self.block_ybits
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_yi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_y_out_of_bounds_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":354
 *         if xi < 0 or xi >= self.raster_x_size:
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":356
 *         if yi < 0 or yi >= self.raster_y_size:
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits             # <<<<<<<<<<<<<<
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 */
  __pyx_v_block_xi = (__pyx_v_xi >> __pyx_v_self->block_xbits);

  /* "src/geoprocessing/routing/routing.pyx":357
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits
 *         cdef int block_yi = yi >> self.block_ybits             # <<<<<<<<<<<<<<
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 */
  __pyx_v_block_yi = (__pyx_v_yi >> __pyx_v_self->block_ybits);

  /* "src/geoprocessing/routing/routing.pyx":359
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi             # <<<<<<<<<<<<<<
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)
 */
  __pyx_v_block_index = ((__pyx_v_block_yi * __pyx_v_self->block_nx) + __pyx_v_block_xi);

  /* "src/geoprocessing/routing/routing.pyx":360
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         self.lru_cache.get(
 */
  __pyx_t_1 = ((!(__pyx_v_self->lru_cache->exist(__pyx_v_block_index) != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":361
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)             # <<<<<<<<<<<<<<
 *         self.lru_cache.get(
 *             block_index)[
 */
    ((struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self->__pyx_vtab)->_load_block(__pyx_v_self, __pyx_v_block_index); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":360
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         self.lru_cache.get(
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":364
 *         self.lru_cache.get(
 *             block_index)[
 *                 ((yi & (self.block_ymod)) << self.block_xbits) +             # <<<<<<<<<<<<<<
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:
 */
  (__pyx_v_self->lru_cache->get(__pyx_v_block_index)[(((__pyx_v_yi & __pyx_v_self->block_ymod) << __pyx_v_self->block_xbits) + (__pyx_v_xi & __pyx_v_self->block_xmod))]) = __pyx_v_value;

  /* "src/geoprocessing/routing/routing.pyx":366
 *                 ((yi & (self.block_ymod)) << self.block_xbits) +
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():
 */
  __pyx_t_1 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":367
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:
 *             dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *             if dirty_itr == self.dirty_blocks.end():
 *                 self.dirty_blocks.insert(block_index)
 */
    __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_v_block_index);

    /* "src/geoprocessing/routing/routing.pyx":368
 *         if self.write_mode:
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.insert(block_index)
 * 
 */
    __pyx_t_1 = ((__pyx_v_dirty_itr == __pyx_v_self->dirty_blocks.end()) != 0);
    if (__pyx_t_1) {

      /* "src/geoprocessing/routing/routing.pyx":369
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():
 *                 self.dirty_blocks.insert(block_index)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline double get(self, int xi, int yi):
 */
      try {
        __pyx_v_self->dirty_blocks.insert(__pyx_v_block_index);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 369, __pyx_L1_error)
      }

      /* "src/geoprocessing/routing/routing.pyx":368
 *         if self.write_mode:
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.insert(block_index)
 * 
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":366
 *                 ((yi & (self.block_ymod)) << self.block_xbits) +
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":350
 *         raster = None
 * 
 *     cdef inline void set(self, int xi, int yi, double value):             # <<<<<<<<<<<<<<
 *         """Set the pixel at `xi,yi` to `value`."""
 *         if xi < 0 or xi >= self.raster_x_size:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.routing._ManagedRaster.set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "src/geoprocessing/routing/routing.pyx":371
 *                 self.dirty_blocks.insert(block_index)
 * 
 *     cdef inline double get(self, int xi, int yi):             # <<<<<<<<<<<<<<
 *         """Return the value of the pixel at `xi,yi`."""
 *         if xi < 0 or xi >= self.raster_x_size:
 */

static CYTHON_INLINE double __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi) {
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_block_index;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "src/geoprocessing/routing/routing.pyx":373
 *     cdef inline double get(self, int xi, int yi):
 *         """Return the value of the pixel at `xi,yi`."""
 *         if xi < 0 or xi >= self.raster_x_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:
 */
  __pyx_t_2 = ((__pyx_v_xi < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_xi >= __pyx_v_self->raster_x_size) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":374
 *         """Return the value of the pixel at `xi,yi`."""
 *         if xi < 0 or xi >= self.raster_x_size:
 *             LOGGER.error("x out of bounds %s" % xi)             # <<<<<<<<<<<<<<
 *         if yi < 0 or yi >= self.raster_y_size:
 *             LOGGER.error("y out of bounds %s" % yi)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_xi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_x_out_of_bounds_s, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":373
 *     cdef inline double get(self, int xi, int yi):
 *         """Return the value of the pixel at `xi,yi`."""
 *         if xi < 0 or xi >= self.raster_x_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":375
 *         if xi < 0 or xi >= self.raster_x_size:
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits
 */
  __pyx_t_2 = ((__pyx_v_yi < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_yi >= __pyx_v_self->raster_y_size) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":376
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:
 *             LOGGER.error("y out of bounds %s" % yi)             # <<<<<<<<<<<<<<
 *         cdef int block_xi = xi >> self.block_xbits
 *         cdef int block_yi = yi >> self.block_ybits
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_yi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_y_out_of_bounds_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":375
 *         if xi < 0 or xi >= self.raster_x_size:
 *             LOGGER.error("x out of bounds %s" % xi)
 *         if yi < 0 or yi >= self.raster_y_size:             # <<<<<<<<<<<<<<
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":377
 *         if yi < 0 or yi >= self.raster_y_size:
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits             # <<<<<<<<<<<<<<
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 */
  __pyx_v_block_xi = (__pyx_v_xi >> __pyx_v_self->block_xbits);

  /* "src/geoprocessing/routing/routing.pyx":378
 *             LOGGER.error("y out of bounds %s" % yi)
 *         cdef int block_xi = xi >> self.block_xbits
 *         cdef int block_yi = yi >> self.block_ybits             # <<<<<<<<<<<<<<
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 */
  __pyx_v_block_yi = (__pyx_v_yi >> __pyx_v_self->block_ybits);

  /* "src/geoprocessing/routing/routing.pyx":380
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi             # <<<<<<<<<<<<<<
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)
 */
  __pyx_v_block_index = ((__pyx_v_block_yi * __pyx_v_self->block_nx) + __pyx_v_block_xi);

  /* "src/geoprocessing/routing/routing.pyx":381
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         return self.lru_cache.get(
 */
  __pyx_t_1 = ((!(__pyx_v_self->lru_cache->exist(__pyx_v_block_index) != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":382
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)             # <<<<<<<<<<<<<<
 *         return self.lru_cache.get(
 *             block_index)[
 */
    ((struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self->__pyx_vtab)->_load_block(__pyx_v_self, __pyx_v_block_index); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":381
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         return self.lru_cache.get(
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":384
 *             self._load_block(block_index)
 *         return self.lru_cache.get(
 *             block_index)[             # <<<<<<<<<<<<<<
 *                 ((yi & (self.block_ymod)) << self.block_xbits) +
 *                 (xi & (self.block_xmod))]
 */
  __pyx_r = (__pyx_v_self->lru_cache->get(__pyx_v_block_index)[(((__pyx_v_yi & __pyx_v_self->block_ymod) << __pyx_v_self->block_xbits) + (__pyx_v_xi & __pyx_v_self->block_xmod))]);
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":371
 *                 self.dirty_blocks.insert(block_index)
 * 
 *     cdef inline double get(self, int xi, int yi):             # <<<<<<<<<<<<<<
 *         """Return the value of the pixel at `xi,yi`."""
 *         if xi < 0 or xi >= self.raster_x_size:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.routing._ManagedRaster.get", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":388
 *                 (xi & (self.block_xmod))]
 * 
 *     cdef void _load_block(self, int block_index) except *:             # <<<<<<<<<<<<<<
 *         cdef int block_xi = block_index % self.block_nx
 *         cdef int block_yi = block_index // self.block_nx
 */

static void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster__load_block(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, int __pyx_v_block_index) {
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_xi_copy;
  int __pyx_v_yi_copy;
  PyArrayObject *__pyx_v_block_array = 0;
  double *__pyx_v_double_buffer;
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_7routing_BlockBufferPair>  __pyx_v_removed_value_list;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  PyObject *__pyx_v_raster = NULL;
  PyObject *__pyx_v_raster_band = NULL;
  PyObject *__pyx_v_n_attempts = NULL;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_block_array;
  __Pyx_Buffer __pyx_pybuffer_block_array;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_UCS4 __pyx_t_22;
  double *__pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_block", 0);
  __pyx_pybuffer_block_array.pybuffer.buf = NULL;
  __pyx_pybuffer_block_array.refcount = 0;
  __pyx_pybuffernd_block_array.data = NULL;
  __pyx_pybuffernd_block_array.rcbuffer = &__pyx_pybuffer_block_array;

  /* "src/geoprocessing/routing/routing.pyx":389
 * 
 *     cdef void _load_block(self, int block_index) except *:
 *         cdef int block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *         cdef int block_yi = block_index // self.block_nx
 * 
 */
  if (unlikely(__pyx_v_self->block_nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 389, __pyx_L1_error)
  }
  __pyx_v_block_xi = __Pyx_mod_int(__pyx_v_block_index, __pyx_v_self->block_nx);

  /* "src/geoprocessing/routing/routing.pyx":390
 *     cdef void _load_block(self, int block_index) except *:
 *         cdef int block_xi = block_index % self.block_nx
 *         cdef int block_yi = block_index // self.block_nx             # <<<<<<<<<<<<<<
 * 
 *         # we need the offsets to subtract from global indexes for cached array
 */
  if (unlikely(__pyx_v_self->block_nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 390, __pyx_L1_error)
  }
  else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_nx == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_block_index))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 390, __pyx_L1_error)
  }
  __pyx_v_block_yi = __Pyx_div_int(__pyx_v_block_index, __pyx_v_self->block_nx);

  /* "src/geoprocessing/routing/routing.pyx":393
 * 
 *         # we need the offsets to subtract from global indexes for cached array
 *         cdef int xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *         cdef int yoff = block_yi << self.block_ybits
 * 
 */
  __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

  /* "src/geoprocessing/routing/routing.pyx":394
 *         # we need the offsets to subtract from global indexes for cached array
 *         cdef int xoff = block_xi << self.block_xbits
 *         cdef int yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *         cdef int xi_copy, yi_copy
 */
  __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

  /* "src/geoprocessing/routing/routing.pyx":405
 *         # initially the win size is the same as the block size unless
 *         # we're at the edge of a raster
 *         cdef int win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *         cdef int win_ysize = self.block_ysize
 * 
 */
  __pyx_t_1 = __pyx_v_self->block_xsize;
  __pyx_v_win_xsize = __pyx_t_1;

  /* "src/geoprocessing/routing/routing.pyx":406
 *         # we're at the edge of a raster
 *         cdef int win_xsize = self.block_xsize
 *         cdef int win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *         # load a new block
 */
  __pyx_t_1 = __pyx_v_self->block_ysize;
  __pyx_v_win_ysize = __pyx_t_1;

  /* "src/geoprocessing/routing/routing.pyx":409
 * 
 *         # load a new block
 *         if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:
 */
  __pyx_t_2 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":410
 *         # load a new block
 *         if xoff+win_xsize > self.raster_x_size:
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)             # <<<<<<<<<<<<<<
 *         if yoff+win_ysize > self.raster_y_size:
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 */
    __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

    /* "src/geoprocessing/routing/routing.pyx":409
 * 
 *         # load a new block
 *         if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":411
 *         if xoff+win_xsize > self.raster_x_size:
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 * 
 */
  __pyx_t_2 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":412
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)             # <<<<<<<<<<<<<<
 * 
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 */
    __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

    /* "src/geoprocessing/routing/routing.pyx":411
 *         if xoff+win_xsize > self.raster_x_size:
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 * 
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":414
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 * 
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_v_self->raster_path);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_raster = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":415
 * 
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_raster_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":416
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(numpy.float64)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "src/geoprocessing/routing/routing.pyx":417
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,             # <<<<<<<<<<<<<<
 *             win_ysize=win_ysize).astype(numpy.float64)
 *         raster_band = None
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_xoff, __pyx_t_6) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_yoff, __pyx_t_6) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_win_xsize, __pyx_t_6) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":418
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(numpy.float64)             # <<<<<<<<<<<<<<
 *         raster_band = None
 *         raster = None
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_win_ysize, __pyx_t_6) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":416
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(numpy.float64)
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":418
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(numpy.float64)             # <<<<<<<<<<<<<<
 *         raster_band = None
 *         raster = None
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_block_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_block_array.diminfo[0].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_block_array.diminfo[0].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_block_array.diminfo[1].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_block_array.diminfo[1].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 416, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_block_array = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":419
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(numpy.float64)
 *         raster_band = None             # <<<<<<<<<<<<<<
 *         raster = None
 *         double_buffer = <double*>PyMem_Malloc(
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":420
 *             win_ysize=win_ysize).astype(numpy.float64)
 *         raster_band = None
 *         raster = None             # <<<<<<<<<<<<<<
 *         double_buffer = <double*>PyMem_Malloc(
 *             (sizeof(double) << self.block_xbits) * win_ysize)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":421
 *         raster_band = None
 *         raster = None
 *         double_buffer = <double*>PyMem_Malloc(             # <<<<<<<<<<<<<<
 *             (sizeof(double) << self.block_xbits) * win_ysize)
 *         for xi_copy in range(win_xsize):
 */
  __pyx_v_double_buffer = ((double *)PyMem_Malloc((((sizeof(double)) << __pyx_v_self->block_xbits) * __pyx_v_win_ysize)));

  /* "src/geoprocessing/routing/routing.pyx":423
 *         double_buffer = <double*>PyMem_Malloc(
 *             (sizeof(double) << self.block_xbits) * win_ysize)
 *         for xi_copy in range(win_xsize):             # <<<<<<<<<<<<<<
 *             for yi_copy in range(win_ysize):
 *                 double_buffer[(yi_copy << self.block_xbits)+xi_copy] = (
 */
  __pyx_t_1 = __pyx_v_win_xsize;
  __pyx_t_12 = __pyx_t_1;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_xi_copy = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":424
 *             (sizeof(double) << self.block_xbits) * win_ysize)
 *         for xi_copy in range(win_xsize):
 *             for yi_copy in range(win_ysize):             # <<<<<<<<<<<<<<
 *                 double_buffer[(yi_copy << self.block_xbits)+xi_copy] = (
 *                     block_array[yi_copy, xi_copy])
 */
    __pyx_t_14 = __pyx_v_win_ysize;
    __pyx_t_15 = __pyx_t_14;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_yi_copy = __pyx_t_16;

      /* "src/geoprocessing/routing/routing.pyx":426
 *             for yi_copy in range(win_ysize):
 *                 double_buffer[(yi_copy << self.block_xbits)+xi_copy] = (
 *                     block_array[yi_copy, xi_copy])             # <<<<<<<<<<<<<<
 *         self.lru_cache.put(
 *             <int>block_index, <double*>double_buffer, removed_value_list)
 */
      __pyx_t_17 = __pyx_v_yi_copy;
      __pyx_t_18 = __pyx_v_xi_copy;
      __pyx_t_19 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_block_array.diminfo[0].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_19 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_block_array.diminfo[0].shape)) __pyx_t_19 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_block_array.diminfo[1].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_19 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_block_array.diminfo[1].shape)) __pyx_t_19 = 1;
      if (unlikely(__pyx_t_19 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_19);
        __PYX_ERR(0, 426, __pyx_L1_error)
      }

      /* "src/geoprocessing/routing/routing.pyx":425
 *         for xi_copy in range(win_xsize):
 *             for yi_copy in range(win_ysize):
 *                 double_buffer[(yi_copy << self.block_xbits)+xi_copy] = (             # <<<<<<<<<<<<<<
 *                     block_array[yi_copy, xi_copy])
 *         self.lru_cache.put(
 */
      (__pyx_v_double_buffer[((__pyx_v_yi_copy << __pyx_v_self->block_xbits) + __pyx_v_xi_copy)]) = (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_block_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_block_array.diminfo[1].strides));
    }
  }

  /* "src/geoprocessing/routing/routing.pyx":427
 *                 double_buffer[(yi_copy << self.block_xbits)+xi_copy] = (
 *                     block_array[yi_copy, xi_copy])
 *         self.lru_cache.put(             # <<<<<<<<<<<<<<
 *             <int>block_index, <double*>double_buffer, removed_value_list)
 * 
 */
  __pyx_v_self->lru_cache->put(((int)__pyx_v_block_index), ((double *)__pyx_v_double_buffer), __pyx_v_removed_value_list);

  /* "src/geoprocessing/routing/routing.pyx":430
 *             <int>block_index, <double*>double_buffer, removed_value_list)
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             n_attempts = 5
 *             while True:
 */
  __pyx_t_2 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":431
 * 
 *         if self.write_mode:
 *             n_attempts = 5             # <<<<<<<<<<<<<<
 *             while True:
 *                 raster = gdal.OpenEx(
 */
    __Pyx_INCREF(__pyx_int_5);
    __pyx_v_n_attempts = __pyx_int_5;

    /* "src/geoprocessing/routing/routing.pyx":432
 *         if self.write_mode:
 *             n_attempts = 5
 *             while True:             # <<<<<<<<<<<<<<
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 */
    while (1) {

      /* "src/geoprocessing/routing/routing.pyx":433
 *             n_attempts = 5
 *             while True:
 *                 raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/routing.pyx":434
 *             while True:
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *                 if raster is None:
 *                     if n_attempts == 0:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Or(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_1 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_1 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 433, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_self->raster_path);
        __Pyx_GIVEREF(__pyx_v_self->raster_path);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_v_self->raster_path);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_raster, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":435
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:             # <<<<<<<<<<<<<<
 *                     if n_attempts == 0:
 *                         raise RuntimeError(
 */
      __pyx_t_2 = (__pyx_v_raster == Py_None);
      __pyx_t_20 = (__pyx_t_2 != 0);
      if (__pyx_t_20) {

        /* "src/geoprocessing/routing/routing.pyx":436
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:
 *                     if n_attempts == 0:             # <<<<<<<<<<<<<<
 *                         raise RuntimeError(
 *                             f'could not open {self.raster_path} for writing')
 */
        __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_n_attempts, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(__pyx_t_20)) {

          /* "src/geoprocessing/routing/routing.pyx":438
 *                     if n_attempts == 0:
 *                         raise RuntimeError(
 *                             f'could not open {self.raster_path} for writing')             # <<<<<<<<<<<<<<
 *                     LOGGER.warning(
 *                         f'opening {self.raster_path} resulted in null, '
 */
          __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_21 = 0;
          __pyx_t_22 = 127;
          __Pyx_INCREF(__pyx_kp_u_could_not_open);
          __pyx_t_21 += 15;
          __Pyx_GIVEREF(__pyx_kp_u_could_not_open);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_could_not_open);
          __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_self->raster_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_22;
          __pyx_t_21 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_INCREF(__pyx_kp_u_for_writing);
          __pyx_t_21 += 12;
          __Pyx_GIVEREF(__pyx_kp_u_for_writing);
          PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_for_writing);
          __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_21, __pyx_t_22); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "src/geoprocessing/routing/routing.pyx":437
 *                 if raster is None:
 *                     if n_attempts == 0:
 *                         raise RuntimeError(             # <<<<<<<<<<<<<<
 *                             f'could not open {self.raster_path} for writing')
 *                     LOGGER.warning(
 */
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_Raise(__pyx_t_3, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __PYX_ERR(0, 437, __pyx_L1_error)

          /* "src/geoprocessing/routing/routing.pyx":436
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:
 *                     if n_attempts == 0:             # <<<<<<<<<<<<<<
 *                         raise RuntimeError(
 *                             f'could not open {self.raster_path} for writing')
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":439
 *                         raise RuntimeError(
 *                             f'could not open {self.raster_path} for writing')
 *                     LOGGER.warning(             # <<<<<<<<<<<<<<
 *                         f'opening {self.raster_path} resulted in null, '
 *                         f'trying {n_attempts} more times.')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/geoprocessing/routing/routing.pyx":440
 *                             f'could not open {self.raster_path} for writing')
 *                     LOGGER.warning(
 *                         f'opening {self.raster_path} resulted in null, '             # <<<<<<<<<<<<<<
 *                         f'trying {n_attempts} more times.')
 *                     n_attempts -= 1
 */
        __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_21 = 0;
        __pyx_t_22 = 127;
        __Pyx_INCREF(__pyx_kp_u_opening);
        __pyx_t_21 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_opening);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_opening);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_self->raster_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_22;
        __pyx_t_21 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_resulted_in_null_trying);
        __pyx_t_21 += 26;
        __Pyx_GIVEREF(__pyx_kp_u_resulted_in_null_trying);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_resulted_in_null_trying);

        /* "src/geoprocessing/routing/routing.pyx":441
 *                     LOGGER.warning(
 *                         f'opening {self.raster_path} resulted in null, '
 *                         f'trying {n_attempts} more times.')             # <<<<<<<<<<<<<<
 *                     n_attempts -= 1
 *                     time.sleep(0.5)
 */
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_n_attempts, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_22;
        __pyx_t_21 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_more_times);
        __pyx_t_21 += 12;
        __Pyx_GIVEREF(__pyx_kp_u_more_times);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_more_times);

        /* "src/geoprocessing/routing/routing.pyx":440
 *                             f'could not open {self.raster_path} for writing')
 *                     LOGGER.warning(
 *                         f'opening {self.raster_path} resulted in null, '             # <<<<<<<<<<<<<<
 *                         f'trying {n_attempts} more times.')
 *                     n_attempts -= 1
 */
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_21, __pyx_t_22); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":442
 *                         f'opening {self.raster_path} resulted in null, '
 *                         f'trying {n_attempts} more times.')
 *                     n_attempts -= 1             # <<<<<<<<<<<<<<
 *                     time.sleep(0.5)
 *                 raster_band = raster.GetRasterBand(self.band_id)
 */
        __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_n_attempts, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_n_attempts, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":443
 *                         f'trying {n_attempts} more times.')
 *                     n_attempts -= 1
 *                     time.sleep(0.5)             # <<<<<<<<<<<<<<
 *                 raster_band = raster.GetRasterBand(self.band_id)
 *                 break
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sleep); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_float_0_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_float_0_5);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":435
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:             # <<<<<<<<<<<<<<
 *                     if n_attempts == 0:
 *                         raise RuntimeError(
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":444
 *                     n_attempts -= 1
 *                     time.sleep(0.5)
 *                 raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_raster_band, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":445
 *                     time.sleep(0.5)
 *                 raster_band = raster.GetRasterBand(self.band_id)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         block_array = numpy.empty(
 */
      goto __pyx_L11_break;
    }
    __pyx_L11_break:;

    /* "src/geoprocessing/routing/routing.pyx":430
 *             <int>block_index, <double*>double_buffer, removed_value_list)
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             n_attempts = 5
 *             while True:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":447
 *                 break
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":448
 * 
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)             # <<<<<<<<<<<<<<
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":447
 *                 break
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":448
 * 
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)             # <<<<<<<<<<<<<<
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":447
 *                 break
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 447, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_block_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_block_array.diminfo[0].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_block_array.diminfo[0].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_block_array.diminfo[1].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_block_array.diminfo[1].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 447, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_block_array, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":449
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():             # <<<<<<<<<<<<<<
 *             # write the changed value back if desired
 *             double_buffer = removed_value_list.front().second
 */
  while (1) {
    __pyx_t_20 = ((!(__pyx_v_removed_value_list.empty() != 0)) != 0);
    if (!__pyx_t_20) break;

    /* "src/geoprocessing/routing/routing.pyx":451
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 *             double_buffer = removed_value_list.front().second             # <<<<<<<<<<<<<<
 * 
 *             if self.write_mode:
 */
    __pyx_t_23 = __pyx_v_removed_value_list.front().second;
    __pyx_v_double_buffer = __pyx_t_23;

    /* "src/geoprocessing/routing/routing.pyx":453
 *             double_buffer = removed_value_list.front().second
 * 
 *             if self.write_mode:             # <<<<<<<<<<<<<<
 *                 block_index = removed_value_list.front().first
 * 
 */
    __pyx_t_20 = (__pyx_v_self->write_mode != 0);
    if (__pyx_t_20) {

      /* "src/geoprocessing/routing/routing.pyx":454
 * 
 *             if self.write_mode:
 *                 block_index = removed_value_list.front().first             # <<<<<<<<<<<<<<
 * 
 *                 # write back the block if it's dirty
 */
      __pyx_t_1 = __pyx_v_removed_value_list.front().first;
      __pyx_v_block_index = __pyx_t_1;

      /* "src/geoprocessing/routing/routing.pyx":457
 * 
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *                 if dirty_itr != self.dirty_blocks.end():
 *                     self.dirty_blocks.erase(dirty_itr)
 */
      __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_v_block_index);

      /* "src/geoprocessing/routing/routing.pyx":458
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 */
      __pyx_t_20 = ((__pyx_v_dirty_itr != __pyx_v_self->dirty_blocks.end()) != 0);
      if (__pyx_t_20) {

        /* "src/geoprocessing/routing/routing.pyx":459
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():
 *                     self.dirty_blocks.erase(dirty_itr)             # <<<<<<<<<<<<<<
 * 
 *                     block_xi = block_index % self.block_nx
 */
        (void)(__pyx_v_self->dirty_blocks.erase(__pyx_v_dirty_itr));

        /* "src/geoprocessing/routing/routing.pyx":461
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 *                     block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *                     block_yi = block_index // self.block_nx
 * 
 */
        if (unlikely(__pyx_v_self->block_nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 461, __pyx_L1_error)
        }
        __pyx_v_block_xi = __Pyx_mod_int(__pyx_v_block_index, __pyx_v_self->block_nx);

        /* "src/geoprocessing/routing/routing.pyx":462
 * 
 *                     block_xi = block_index % self.block_nx
 *                     block_yi = block_index // self.block_nx             # <<<<<<<<<<<<<<
 * 
 *                     xoff = block_xi << self.block_xbits
 */
        if (unlikely(__pyx_v_self->block_nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 462, __pyx_L1_error)
        }
        else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_nx == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_block_index))) {
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          __PYX_ERR(0, 462, __pyx_L1_error)
        }
        __pyx_v_block_yi = __Pyx_div_int(__pyx_v_block_index, __pyx_v_self->block_nx);

        /* "src/geoprocessing/routing/routing.pyx":464
 *                     block_yi = block_index // self.block_nx
 * 
 *                     xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *                     yoff = block_yi << self.block_ybits
 * 
 */
        __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

        /* "src/geoprocessing/routing/routing.pyx":465
 * 
 *                     xoff = block_xi << self.block_xbits
 *                     yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *                     win_xsize = self.block_xsize
 */
        __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

        /* "src/geoprocessing/routing/routing.pyx":467
 *                     yoff = block_yi << self.block_ybits
 * 
 *                     win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *                     win_ysize = self.block_ysize
 * 
 */
        __pyx_t_1 = __pyx_v_self->block_xsize;
        __pyx_v_win_xsize = __pyx_t_1;

        /* "src/geoprocessing/routing/routing.pyx":468
 * 
 *                     win_xsize = self.block_xsize
 *                     win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *                     if xoff+win_xsize > self.raster_x_size:
 */
        __pyx_t_1 = __pyx_v_self->block_ysize;
        __pyx_v_win_ysize = __pyx_t_1;

        /* "src/geoprocessing/routing/routing.pyx":470
 *                     win_ysize = self.block_ysize
 * 
 *                     if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 */
        __pyx_t_20 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
        if (__pyx_t_20) {

          /* "src/geoprocessing/routing/routing.pyx":471
 * 
 *                     if xoff+win_xsize > self.raster_x_size:
 *                         win_xsize = win_xsize - (             # <<<<<<<<<<<<<<
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:
 */
          __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

          /* "src/geoprocessing/routing/routing.pyx":470
 *                     win_ysize = self.block_ysize
 * 
 *                     if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":473
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                         win_ysize = win_ysize - (
 *                             yoff+win_ysize - self.raster_y_size)
 */
        __pyx_t_20 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
        if (__pyx_t_20) {

          /* "src/geoprocessing/routing/routing.pyx":474
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:
 *                         win_ysize = win_ysize - (             # <<<<<<<<<<<<<<
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 */
          __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

          /* "src/geoprocessing/routing/routing.pyx":473
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                         win_ysize = win_ysize - (
 *                             yoff+win_ysize - self.raster_y_size)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":477
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 *                     for xi_copy in range(win_xsize):             # <<<<<<<<<<<<<<
 *                         for yi_copy in range(win_ysize):
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 */
        __pyx_t_1 = __pyx_v_win_xsize;
        __pyx_t_12 = __pyx_t_1;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_xi_copy = __pyx_t_13;

          /* "src/geoprocessing/routing/routing.pyx":478
 * 
 *                     for xi_copy in range(win_xsize):
 *                         for yi_copy in range(win_ysize):             # <<<<<<<<<<<<<<
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 */
          __pyx_t_14 = __pyx_v_win_ysize;
          __pyx_t_15 = __pyx_t_14;
          for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
            __pyx_v_yi_copy = __pyx_t_16;

            /* "src/geoprocessing/routing/routing.pyx":479
 *                     for xi_copy in range(win_xsize):
 *                         for yi_copy in range(win_ysize):
 *                             block_array[yi_copy, xi_copy] = double_buffer[             # <<<<<<<<<<<<<<
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(
 */
            __pyx_t_18 = __pyx_v_yi_copy;
            __pyx_t_17 = __pyx_v_xi_copy;
            __pyx_t_19 = -1;
            if (__pyx_t_18 < 0) {
              __pyx_t_18 += __pyx_pybuffernd_block_array.diminfo[0].shape;
              if (unlikely(__pyx_t_18 < 0)) __pyx_t_19 = 0;
            } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_block_array.diminfo[0].shape)) __pyx_t_19 = 0;
            if (__pyx_t_17 < 0) {
              __pyx_t_17 += __pyx_pybuffernd_block_array.diminfo[1].shape;
              if (unlikely(__pyx_t_17 < 0)) __pyx_t_19 = 1;
            } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_block_array.diminfo[1].shape)) __pyx_t_19 = 1;
            if (unlikely(__pyx_t_19 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_19);
              __PYX_ERR(0, 479, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_block_array.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_block_array.diminfo[1].strides) = (__pyx_v_double_buffer[((__pyx_v_yi_copy << __pyx_v_self->block_xbits) + __pyx_v_xi_copy)]);
          }
        }

        /* "src/geoprocessing/routing/routing.pyx":481
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "src/geoprocessing/routing/routing.pyx":482
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],             # <<<<<<<<<<<<<<
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)
 */
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySlice_New(__pyx_int_0, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PySlice_New(__pyx_int_0, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_block_array), __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/geoprocessing/routing/routing.pyx":481
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":483
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)             # <<<<<<<<<<<<<<
 *             PyMem_Free(double_buffer)
 *             removed_value_list.pop_front()
 */
        __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_xoff, __pyx_t_6) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_yoff, __pyx_t_6) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "src/geoprocessing/routing/routing.pyx":481
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "src/geoprocessing/routing/routing.pyx":458
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":453
 *             double_buffer = removed_value_list.front().second
 * 
 *             if self.write_mode:             # <<<<<<<<<<<<<<
 *                 block_index = removed_value_list.front().first
 * 
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":484
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)             # <<<<<<<<<<<<<<
 *             removed_value_list.pop_front()
 * 
 */
    PyMem_Free(__pyx_v_double_buffer);

    /* "src/geoprocessing/routing/routing.pyx":485
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)
 *             removed_value_list.pop_front()             # <<<<<<<<<<<<<<
 * 
 *         if self.write_mode:
 */
    __pyx_v_removed_value_list.pop_front();
  }

  /* "src/geoprocessing/routing/routing.pyx":487
 *             removed_value_list.pop_front()
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster_band = None
 *             raster = None
 */
  __pyx_t_20 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_20) {

    /* "src/geoprocessing/routing/routing.pyx":488
 * 
 *         if self.write_mode:
 *             raster_band = None             # <<<<<<<<<<<<<<
 *             raster = None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":489
 *         if self.write_mode:
 *             raster_band = None
 *             raster = None             # <<<<<<<<<<<<<<
 * 
 *     cdef void flush(self) except *:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":487
 *             removed_value_list.pop_front()
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster_band = None
 *             raster = None
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":388
 *                 (xi & (self.block_xmod))]
 * 
 *     cdef void _load_block(self, int block_index) except *:             # <<<<<<<<<<<<<<
 *         cdef int block_xi = block_index % self.block_nx
 *         cdef int block_yi = block_index // self.block_nx
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster._load_block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_block_array);
  __Pyx_XDECREF(__pyx_v_raster);
  __Pyx_XDECREF(__pyx_v_raster_band);
  __Pyx_XDECREF(__pyx_v_n_attempts);
  __Pyx_RefNannyFinishContext();
}

/* "src/geoprocessing/routing/routing.pyx":491
 *             raster = None
 * 
 *     cdef void flush(self) except *:             # <<<<<<<<<<<<<<
 *         cdef clist[BlockBufferPair] removed_value_list
 *         cdef double *double_buffer
 */

static void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_flush(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self) {
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_7routing_BlockBufferPair>  __pyx_v_removed_value_list;
  double *__pyx_v_double_buffer;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  int __pyx_v_block_index;
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  PyObject *__pyx_v_raster_band = NULL;
  PyObject *__pyx_v_max_retries = NULL;
  PyObject *__pyx_v_raster = NULL;
  PyObject *__pyx_v_block_array = NULL;
  PyObject *__pyx_v_xi_copy = NULL;
  PyObject *__pyx_v_yi_copy = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  double *__pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flush", 0);

  /* "src/geoprocessing/routing/routing.pyx":498
 *         cdef int xoff, yoff, win_xsize, win_ysize
 * 
 *         self.lru_cache.clean(removed_value_list, self.lru_cache.size())             # <<<<<<<<<<<<<<
 * 
 *         raster_band = None
 */
  __pyx_v_self->lru_cache->clean(__pyx_v_removed_value_list, __pyx_v_self->lru_cache->size());

  /* "src/geoprocessing/routing/routing.pyx":500
 *         self.lru_cache.clean(removed_value_list, self.lru_cache.size())
 * 
 *         raster_band = None             # <<<<<<<<<<<<<<
 *         if self.write_mode:
 *             max_retries = 5
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_raster_band = Py_None;

  /* "src/geoprocessing/routing/routing.pyx":501
 * 
 *         raster_band = None
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             max_retries = 5
 *             while max_retries > 0:
 */
  __pyx_t_1 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":502
 *         raster_band = None
 *         if self.write_mode:
 *             max_retries = 5             # <<<<<<<<<<<<<<
 *             while max_retries > 0:
 *                 raster = gdal.OpenEx(
 */
    __Pyx_INCREF(__pyx_int_5);
    __pyx_v_max_retries = __pyx_int_5;

    /* "src/geoprocessing/routing/routing.pyx":503
 *         if self.write_mode:
 *             max_retries = 5
 *             while max_retries > 0:             # <<<<<<<<<<<<<<
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 */
    while (1) {
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_max_retries, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!__pyx_t_1) break;

      /* "src/geoprocessing/routing/routing.pyx":504
 *             max_retries = 5
 *             while max_retries > 0:
 *                 raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":505
 *             while max_retries > 0:
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *                 if raster is None:
 *                     max_retries -= 1
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Or(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_self->raster_path, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_self->raster_path, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_v_self->raster_path);
        __Pyx_GIVEREF(__pyx_v_self->raster_path);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_self->raster_path);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_raster, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":506
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:             # <<<<<<<<<<<<<<
 *                     max_retries -= 1
 *                     LOGGER.error(
 */
      __pyx_t_1 = (__pyx_v_raster == Py_None);
      __pyx_t_8 = (__pyx_t_1 != 0);
      if (__pyx_t_8) {

        /* "src/geoprocessing/routing/routing.pyx":507
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:
 *                     max_retries -= 1             # <<<<<<<<<<<<<<
 *                     LOGGER.error(
 *                         f'unable to open {self.raster_path}, retrying...')
 */
        __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_max_retries, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF_SET(__pyx_v_max_retries, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "src/geoprocessing/routing/routing.pyx":508
 *                 if raster is None:
 *                     max_retries -= 1
 *                     LOGGER.error(             # <<<<<<<<<<<<<<
 *                         f'unable to open {self.raster_path}, retrying...')
 *                     time.sleep(0.2)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "src/geoprocessing/routing/routing.pyx":509
 *                     max_retries -= 1
 *                     LOGGER.error(
 *                         f'unable to open {self.raster_path}, retrying...')             # <<<<<<<<<<<<<<
 *                     time.sleep(0.2)
 *                     continue
 */
        __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u_unable_to_open);
        __pyx_t_9 += 15;
        __Pyx_GIVEREF(__pyx_kp_u_unable_to_open);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_unable_to_open);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_self->raster_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_retrying);
        __pyx_t_9 += 13;
        __Pyx_GIVEREF(__pyx_kp_u_retrying);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_retrying);
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/geoprocessing/routing/routing.pyx":510
 *                     LOGGER.error(
 *                         f'unable to open {self.raster_path}, retrying...')
 *                     time.sleep(0.2)             # <<<<<<<<<<<<<<
 *                     continue
 *                 break
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sleep); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_float_0_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_float_0_2);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/geoprocessing/routing/routing.pyx":511
 *                         f'unable to open {self.raster_path}, retrying...')
 *                     time.sleep(0.2)
 *                     continue             # <<<<<<<<<<<<<<
 *                 break
 *             if max_retries == 0:
 */
        goto __pyx_L4_continue;

        /* "src/geoprocessing/routing/routing.pyx":506
 *                 raster = gdal.OpenEx(
 *                     self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *                 if raster is None:             # <<<<<<<<<<<<<<
 *                     max_retries -= 1
 *                     LOGGER.error(
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":512
 *                     time.sleep(0.2)
 *                     continue
 *                 break             # <<<<<<<<<<<<<<
 *             if max_retries == 0:
 *                 raise ValueError(
 */
      goto __pyx_L5_break;
      __pyx_L4_continue:;
    }
    __pyx_L5_break:;

    /* "src/geoprocessing/routing/routing.pyx":513
 *                     continue
 *                 break
 *             if max_retries == 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     f'unable to open {self.raster_path} in '
 */
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_max_retries, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_8)) {

      /* "src/geoprocessing/routing/routing.pyx":515
 *             if max_retries == 0:
 *                 raise ValueError(
 *                     f'unable to open {self.raster_path} in '             # <<<<<<<<<<<<<<
 *                     'ManagedRaster.flush')
 *             raster_band = raster.GetRasterBand(self.band_id)
 */
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_unable_to_open);
      __pyx_t_9 += 15;
      __Pyx_GIVEREF(__pyx_kp_u_unable_to_open);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_unable_to_open);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_self->raster_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_in_ManagedRaster_flush);
      __pyx_t_9 += 23;
      __Pyx_GIVEREF(__pyx_kp_u_in_ManagedRaster_flush);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_in_ManagedRaster_flush);
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":514
 *                 break
 *             if max_retries == 0:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     f'unable to open {self.raster_path} in '
 *                     'ManagedRaster.flush')
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 514, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":513
 *                     continue
 *                 break
 *             if max_retries == 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     f'unable to open {self.raster_path} in '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":517
 *                     f'unable to open {self.raster_path} in '
 *                     'ManagedRaster.flush')
 *             raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 * 
 *         block_array = numpy.empty(
 */
    if (unlikely(!__pyx_v_raster)) { __Pyx_RaiseUnboundLocalError("raster"); __PYX_ERR(0, 517, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_raster_band, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":501
 * 
 *         raster_band = None
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             max_retries = 5
 *             while max_retries > 0:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":519
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":520
 * 
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)             # <<<<<<<<<<<<<<
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":519
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":520
 * 
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)             # <<<<<<<<<<<<<<
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":519
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_array = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":521
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.double)
 *         while not removed_value_list.empty():             # <<<<<<<<<<<<<<
 *             # write the changed value back if desired
 *             double_buffer = removed_value_list.front().second
 */
  while (1) {
    __pyx_t_8 = ((!(__pyx_v_removed_value_list.empty() != 0)) != 0);
    if (!__pyx_t_8) break;

    /* "src/geoprocessing/routing/routing.pyx":523
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 *             double_buffer = removed_value_list.front().second             # <<<<<<<<<<<<<<
 * 
 *             if self.write_mode:
 */
    __pyx_t_11 = __pyx_v_removed_value_list.front().second;
    __pyx_v_double_buffer = __pyx_t_11;

    /* "src/geoprocessing/routing/routing.pyx":525
 *             double_buffer = removed_value_list.front().second
 * 
 *             if self.write_mode:             # <<<<<<<<<<<<<<
 *                 block_index = removed_value_list.front().first
 * 
 */
    __pyx_t_8 = (__pyx_v_self->write_mode != 0);
    if (__pyx_t_8) {

      /* "src/geoprocessing/routing/routing.pyx":526
 * 
 *             if self.write_mode:
 *                 block_index = removed_value_list.front().first             # <<<<<<<<<<<<<<
 * 
 *                 # write back the block if it's dirty
 */
      __pyx_t_7 = __pyx_v_removed_value_list.front().first;
      __pyx_v_block_index = __pyx_t_7;

      /* "src/geoprocessing/routing/routing.pyx":529
 * 
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *                 if dirty_itr != self.dirty_blocks.end():
 *                     self.dirty_blocks.erase(dirty_itr)
 */
      __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_v_block_index);

      /* "src/geoprocessing/routing/routing.pyx":530
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 */
      __pyx_t_8 = ((__pyx_v_dirty_itr != __pyx_v_self->dirty_blocks.end()) != 0);
      if (__pyx_t_8) {

        /* "src/geoprocessing/routing/routing.pyx":531
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():
 *                     self.dirty_blocks.erase(dirty_itr)             # <<<<<<<<<<<<<<
 * 
 *                     block_xi = block_index % self.block_nx
 */
        (void)(__pyx_v_self->dirty_blocks.erase(__pyx_v_dirty_itr));

        /* "src/geoprocessing/routing/routing.pyx":533
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 *                     block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *                     block_yi = block_index // self.block_nx
 * 
 */
        if (unlikely(__pyx_v_self->block_nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 533, __pyx_L1_error)
        }
        __pyx_v_block_xi = __Pyx_mod_int(__pyx_v_block_index, __pyx_v_self->block_nx);

        /* "src/geoprocessing/routing/routing.pyx":534
 * 
 *                     block_xi = block_index % self.block_nx
 *                     block_yi = block_index // self.block_nx             # <<<<<<<<<<<<<<
 * 
 *                     xoff = block_xi << self.block_xbits
 */
        if (unlikely(__pyx_v_self->block_nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 534, __pyx_L1_error)
        }
        else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_nx == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_block_index))) {
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          __PYX_ERR(0, 534, __pyx_L1_error)
        }
        __pyx_v_block_yi = __Pyx_div_int(__pyx_v_block_index, __pyx_v_self->block_nx);

        /* "src/geoprocessing/routing/routing.pyx":536
 *                     block_yi = block_index // self.block_nx
 * 
 *                     xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *                     yoff = block_yi << self.block_ybits
 * 
 */
        __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

        /* "src/geoprocessing/routing/routing.pyx":537
 * 
 *                     xoff = block_xi << self.block_xbits
 *                     yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *                     win_xsize = self.block_xsize
 */
        __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

        /* "src/geoprocessing/routing/routing.pyx":539
 *                     yoff = block_yi << self.block_ybits
 * 
 *                     win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *                     win_ysize = self.block_ysize
 * 
 */
        __pyx_t_7 = __pyx_v_self->block_xsize;
        __pyx_v_win_xsize = __pyx_t_7;

        /* "src/geoprocessing/routing/routing.pyx":540
 * 
 *                     win_xsize = self.block_xsize
 *                     win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *                     if xoff+win_xsize > self.raster_x_size:
 */
        __pyx_t_7 = __pyx_v_self->block_ysize;
        __pyx_v_win_ysize = __pyx_t_7;

        /* "src/geoprocessing/routing/routing.pyx":542
 *                     win_ysize = self.block_ysize
 * 
 *                     if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 */
        __pyx_t_8 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
        if (__pyx_t_8) {

          /* "src/geoprocessing/routing/routing.pyx":543
 * 
 *                     if xoff+win_xsize > self.raster_x_size:
 *                         win_xsize = win_xsize - (             # <<<<<<<<<<<<<<
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:
 */
          __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

          /* "src/geoprocessing/routing/routing.pyx":542
 *                     win_ysize = self.block_ysize
 * 
 *                     if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":545
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                         win_ysize = win_ysize - (
 *                             yoff+win_ysize - self.raster_y_size)
 */
        __pyx_t_8 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
        if (__pyx_t_8) {

          /* "src/geoprocessing/routing/routing.pyx":546
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:
 *                         win_ysize = win_ysize - (             # <<<<<<<<<<<<<<
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 */
          __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

          /* "src/geoprocessing/routing/routing.pyx":545
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                         win_ysize = win_ysize - (
 *                             yoff+win_ysize - self.raster_y_size)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":549
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 *                     for xi_copy in range(win_xsize):             # <<<<<<<<<<<<<<
 *                         for yi_copy in range(win_ysize):
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 549, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
          __pyx_t_12 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 549, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_12 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 549, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_12)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 549, __pyx_L1_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 549, __pyx_L1_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_12(__pyx_t_6);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 549, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_xi_copy, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":550
 * 
 *                     for xi_copy in range(win_xsize):
 *                         for yi_copy in range(win_ysize):             # <<<<<<<<<<<<<<
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 */
          __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
            __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_13 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_13 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 550, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 550, __pyx_L1_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              } else {
                if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 550, __pyx_L1_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              }
            } else {
              __pyx_t_5 = __pyx_t_14(__pyx_t_4);
              if (unlikely(!__pyx_t_5)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 550, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_5);
            }
            __Pyx_XDECREF_SET(__pyx_v_yi_copy, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "src/geoprocessing/routing/routing.pyx":552
 *                         for yi_copy in range(win_ysize):
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]             # <<<<<<<<<<<<<<
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->block_xbits); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = PyNumber_Lshift(__pyx_v_yi_copy, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_v_xi_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "src/geoprocessing/routing/routing.pyx":551
 *                     for xi_copy in range(win_xsize):
 *                         for yi_copy in range(win_ysize):
 *                             block_array[yi_copy, xi_copy] = double_buffer[             # <<<<<<<<<<<<<<
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(
 */
            __pyx_t_5 = PyFloat_FromDouble((__pyx_v_double_buffer[__pyx_t_15])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_v_yi_copy);
            __Pyx_GIVEREF(__pyx_v_yi_copy);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_yi_copy);
            __Pyx_INCREF(__pyx_v_xi_copy);
            __Pyx_GIVEREF(__pyx_v_xi_copy);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_xi_copy);
            if (unlikely(PyObject_SetItem(__pyx_v_block_array, __pyx_t_3, __pyx_t_5) < 0)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "src/geoprocessing/routing/routing.pyx":550
 * 
 *                     for xi_copy in range(win_xsize):
 *                         for yi_copy in range(win_ysize):             # <<<<<<<<<<<<<<
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 */
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":549
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 *                     for xi_copy in range(win_xsize):             # <<<<<<<<<<<<<<
 *                         for yi_copy in range(win_ysize):
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "src/geoprocessing/routing/routing.pyx":553
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 553, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "src/geoprocessing/routing/routing.pyx":554
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],             # <<<<<<<<<<<<<<
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)
 */
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySlice_New(__pyx_int_0, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PySlice_New(__pyx_int_0, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
        __pyx_t_5 = 0;
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_block_array, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "src/geoprocessing/routing/routing.pyx":553
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":555
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)             # <<<<<<<<<<<<<<
 *             PyMem_Free(double_buffer)
 *             removed_value_list.pop_front()
 */
        __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_xoff, __pyx_t_5) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_yoff, __pyx_t_5) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/geoprocessing/routing/routing.pyx":553
 *                             block_array[yi_copy, xi_copy] = double_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/geoprocessing/routing/routing.pyx":530
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":525
 *             double_buffer = removed_value_list.front().second
 * 
 *             if self.write_mode:             # <<<<<<<<<<<<<<
 *                 block_index = removed_value_list.front().first
 * 
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":556
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)             # <<<<<<<<<<<<<<
 *             removed_value_list.pop_front()
 * 
 */
    PyMem_Free(__pyx_v_double_buffer);

    /* "src/geoprocessing/routing/routing.pyx":557
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(double_buffer)
 *             removed_value_list.pop_front()             # <<<<<<<<<<<<<<
 * 
 *         if self.write_mode:
 */
    __pyx_v_removed_value_list.pop_front();
  }

  /* "src/geoprocessing/routing/routing.pyx":559
 *             removed_value_list.pop_front()
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster_band = None
 *             raster = None
 */
  __pyx_t_8 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_8) {

    /* "src/geoprocessing/routing/routing.pyx":560
 * 
 *         if self.write_mode:
 *             raster_band = None             # <<<<<<<<<<<<<<
 *             raster = None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":561
 *         if self.write_mode:
 *             raster_band = None
 *             raster = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_XDECREF_SET(__pyx_v_raster, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":559
 *             removed_value_list.pop_front()
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster_band = None
 *             raster = None
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":491
 *             raster = None
 * 
 *     cdef void flush(self) except *:             # <<<<<<<<<<<<<<
 *         cdef clist[BlockBufferPair] removed_value_list
 *         cdef double *double_buffer
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster.flush", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raster_band);
  __Pyx_XDECREF(__pyx_v_max_retries);
  __Pyx_XDECREF(__pyx_v_raster);
  __Pyx_XDECREF(__pyx_v_block_array);
  __Pyx_XDECREF(__pyx_v_xi_copy);
  __Pyx_XDECREF(__pyx_v_yi_copy);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_6__reduce_cython__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_8__setstate_cython__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._ManagedRaster.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":564
 * 
 * 
 * def _generate_read_bounds(offset_dict, raster_x_size, raster_y_size):             # <<<<<<<<<<<<<<
 *     """Helper function to expand GDAL memory block read bound by 1 pixel.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_1_generate_read_bounds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing__generate_read_bounds[] = "Helper function to expand GDAL memory block read bound by 1 pixel.\n\n    This function is used in the context of reading a memory block on a GDAL\n    raster plus an additional 1 pixel boundary if it fits into an existing\n    numpy array of size (2+offset_dict['y_size'], 2+offset_dict['x_size']).\n\n    Parameters:\n        offset_dict (dict): dictionary that has values for 'win_xsize',\n            'win_ysize', 'xoff', and 'yoff' to describe the bounding box\n            to read from the raster.\n        raster_x_size, raster_y_size (int): these are the global x/y sizes\n            of the raster that's being read.\n\n    Returns:\n        (xa, xb, ya, yb) (tuple of int): bounds that can be used to slice a\n            numpy array of size\n                (2+offset_dict['y_size'], 2+offset_dict['x_size'])\n        modified_offset_dict (dict): a copy of `offset_dict` with the\n            `win_*size` keys expanded if the modified bounding box will still\n            fit on the array.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_1_generate_read_bounds = {"_generate_read_bounds", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_1_generate_read_bounds, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing__generate_read_bounds};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_1_generate_read_bounds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_offset_dict = 0;
  PyObject *__pyx_v_raster_x_size = 0;
  PyObject *__pyx_v_raster_y_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_generate_read_bounds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offset_dict,&__pyx_n_s_raster_x_size,&__pyx_n_s_raster_y_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_x_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_generate_read_bounds", 1, 3, 3, 1); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_y_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_generate_read_bounds", 1, 3, 3, 2); __PYX_ERR(0, 564, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_generate_read_bounds") < 0)) __PYX_ERR(0, 564, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_offset_dict = values[0];
    __pyx_v_raster_x_size = values[1];
    __pyx_v_raster_y_size = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_generate_read_bounds", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 564, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._generate_read_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing__generate_read_bounds(__pyx_self, __pyx_v_offset_dict, __pyx_v_raster_x_size, __pyx_v_raster_y_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing__generate_read_bounds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_offset_dict, PyObject *__pyx_v_raster_x_size, PyObject *__pyx_v_raster_y_size) {
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_target_offset_dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_generate_read_bounds", 0);

  /* "src/geoprocessing/routing/routing.pyx":586
 *             fit on the array.
 *     """
 *     xa = 1             # <<<<<<<<<<<<<<
 *     xb = -1
 *     ya = 1
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_xa = __pyx_int_1;

  /* "src/geoprocessing/routing/routing.pyx":587
 *     """
 *     xa = 1
 *     xb = -1             # <<<<<<<<<<<<<<
 *     ya = 1
 *     yb = -1
 */
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_v_xb = __pyx_int_neg_1;

  /* "src/geoprocessing/routing/routing.pyx":588
 *     xa = 1
 *     xb = -1
 *     ya = 1             # <<<<<<<<<<<<<<
 *     yb = -1
 *     target_offset_dict = offset_dict.copy()
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_ya = __pyx_int_1;

  /* "src/geoprocessing/routing/routing.pyx":589
 *     xb = -1
 *     ya = 1
 *     yb = -1             # <<<<<<<<<<<<<<
 *     target_offset_dict = offset_dict.copy()
 *     if offset_dict['xoff'] > 0:
 */
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_v_yb = __pyx_int_neg_1;

  /* "src/geoprocessing/routing/routing.pyx":590
 *     ya = 1
 *     yb = -1
 *     target_offset_dict = offset_dict.copy()             # <<<<<<<<<<<<<<
 *     if offset_dict['xoff'] > 0:
 *         xa = None
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_offset_dict, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_target_offset_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":591
 *     yb = -1
 *     target_offset_dict = offset_dict.copy()
 *     if offset_dict['xoff'] > 0:             # <<<<<<<<<<<<<<
 *         xa = None
 *         target_offset_dict['xoff'] -= 1
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "src/geoprocessing/routing/routing.pyx":592
 *     target_offset_dict = offset_dict.copy()
 *     if offset_dict['xoff'] > 0:
 *         xa = None             # <<<<<<<<<<<<<<
 *         target_offset_dict['xoff'] -= 1
 *         target_offset_dict['win_xsize'] += 1
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_xa, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":593
 *     if offset_dict['xoff'] > 0:
 *         xa = None
 *         target_offset_dict['xoff'] -= 1             # <<<<<<<<<<<<<<
 *         target_offset_dict['win_xsize'] += 1
 *     if offset_dict['yoff'] > 0:
 */
    __Pyx_INCREF(__pyx_n_u_xoff);
    __pyx_t_5 = __pyx_n_u_xoff;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_target_offset_dict, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_target_offset_dict, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":594
 *         xa = None
 *         target_offset_dict['xoff'] -= 1
 *         target_offset_dict['win_xsize'] += 1             # <<<<<<<<<<<<<<
 *     if offset_dict['yoff'] > 0:
 *         ya = None
 */
    __Pyx_INCREF(__pyx_n_u_win_xsize);
    __pyx_t_5 = __pyx_n_u_win_xsize;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_target_offset_dict, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_target_offset_dict, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":591
 *     yb = -1
 *     target_offset_dict = offset_dict.copy()
 *     if offset_dict['xoff'] > 0:             # <<<<<<<<<<<<<<
 *         xa = None
 *         target_offset_dict['xoff'] -= 1
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":595
 *         target_offset_dict['xoff'] -= 1
 *         target_offset_dict['win_xsize'] += 1
 *     if offset_dict['yoff'] > 0:             # <<<<<<<<<<<<<<
 *         ya = None
 *         target_offset_dict['yoff'] -= 1
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "src/geoprocessing/routing/routing.pyx":596
 *         target_offset_dict['win_xsize'] += 1
 *     if offset_dict['yoff'] > 0:
 *         ya = None             # <<<<<<<<<<<<<<
 *         target_offset_dict['yoff'] -= 1
 *         target_offset_dict['win_ysize'] += 1
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_ya, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":597
 *     if offset_dict['yoff'] > 0:
 *         ya = None
 *         target_offset_dict['yoff'] -= 1             # <<<<<<<<<<<<<<
 *         target_offset_dict['win_ysize'] += 1
 *     if (offset_dict['xoff'] + offset_dict['win_xsize'] < raster_x_size):
 */
    __Pyx_INCREF(__pyx_n_u_yoff);
    __pyx_t_5 = __pyx_n_u_yoff;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_target_offset_dict, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_target_offset_dict, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":598
 *         ya = None
 *         target_offset_dict['yoff'] -= 1
 *         target_offset_dict['win_ysize'] += 1             # <<<<<<<<<<<<<<
 *     if (offset_dict['xoff'] + offset_dict['win_xsize'] < raster_x_size):
 *         xb = None
 */
    __Pyx_INCREF(__pyx_n_u_win_ysize);
    __pyx_t_5 = __pyx_n_u_win_ysize;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_target_offset_dict, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_target_offset_dict, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":595
 *         target_offset_dict['xoff'] -= 1
 *         target_offset_dict['win_xsize'] += 1
 *     if offset_dict['yoff'] > 0:             # <<<<<<<<<<<<<<
 *         ya = None
 *         target_offset_dict['yoff'] -= 1
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":599
 *         target_offset_dict['yoff'] -= 1
 *         target_offset_dict['win_ysize'] += 1
 *     if (offset_dict['xoff'] + offset_dict['win_xsize'] < raster_x_size):             # <<<<<<<<<<<<<<
 *         xb = None
 *         target_offset_dict['win_xsize'] += 1
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_raster_x_size, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "src/geoprocessing/routing/routing.pyx":600
 *         target_offset_dict['win_ysize'] += 1
 *     if (offset_dict['xoff'] + offset_dict['win_xsize'] < raster_x_size):
 *         xb = None             # <<<<<<<<<<<<<<
 *         target_offset_dict['win_xsize'] += 1
 *     if (offset_dict['yoff'] + offset_dict['win_ysize'] < raster_y_size):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_xb, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":601
 *     if (offset_dict['xoff'] + offset_dict['win_xsize'] < raster_x_size):
 *         xb = None
 *         target_offset_dict['win_xsize'] += 1             # <<<<<<<<<<<<<<
 *     if (offset_dict['yoff'] + offset_dict['win_ysize'] < raster_y_size):
 *         yb = None
 */
    __Pyx_INCREF(__pyx_n_u_win_xsize);
    __pyx_t_5 = __pyx_n_u_win_xsize;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_target_offset_dict, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_target_offset_dict, __pyx_t_5, __pyx_t_3) < 0)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":599
 *         target_offset_dict['yoff'] -= 1
 *         target_offset_dict['win_ysize'] += 1
 *     if (offset_dict['xoff'] + offset_dict['win_xsize'] < raster_x_size):             # <<<<<<<<<<<<<<
 *         xb = None
 *         target_offset_dict['win_xsize'] += 1
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":602
 *         xb = None
 *         target_offset_dict['win_xsize'] += 1
 *     if (offset_dict['yoff'] + offset_dict['win_ysize'] < raster_y_size):             # <<<<<<<<<<<<<<
 *         yb = None
 *         target_offset_dict['win_ysize'] += 1
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_raster_y_size, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "src/geoprocessing/routing/routing.pyx":603
 *         target_offset_dict['win_xsize'] += 1
 *     if (offset_dict['yoff'] + offset_dict['win_ysize'] < raster_y_size):
 *         yb = None             # <<<<<<<<<<<<<<
 *         target_offset_dict['win_ysize'] += 1
 *     return (xa, xb, ya, yb), target_offset_dict
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_yb, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":604
 *     if (offset_dict['yoff'] + offset_dict['win_ysize'] < raster_y_size):
 *         yb = None
 *         target_offset_dict['win_ysize'] += 1             # <<<<<<<<<<<<<<
 *     return (xa, xb, ya, yb), target_offset_dict
 * 
 */
    __Pyx_INCREF(__pyx_n_u_win_ysize);
    __pyx_t_5 = __pyx_n_u_win_ysize;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_target_offset_dict, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_target_offset_dict, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":602
 *         xb = None
 *         target_offset_dict['win_xsize'] += 1
 *     if (offset_dict['yoff'] + offset_dict['win_ysize'] < raster_y_size):             # <<<<<<<<<<<<<<
 *         yb = None
 *         target_offset_dict['win_ysize'] += 1
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":605
 *         yb = None
 *         target_offset_dict['win_ysize'] += 1
 *     return (xa, xb, ya, yb), target_offset_dict             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_xa);
  __Pyx_GIVEREF(__pyx_v_xa);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_xa);
  __Pyx_INCREF(__pyx_v_xb);
  __Pyx_GIVEREF(__pyx_v_xb);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_xb);
  __Pyx_INCREF(__pyx_v_ya);
  __Pyx_GIVEREF(__pyx_v_ya);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_ya);
  __Pyx_INCREF(__pyx_v_yb);
  __Pyx_GIVEREF(__pyx_v_yb);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_yb);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_target_offset_dict);
  __Pyx_GIVEREF(__pyx_v_target_offset_dict);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_target_offset_dict);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":564
 * 
 * 
 * def _generate_read_bounds(offset_dict, raster_x_size, raster_y_size):             # <<<<<<<<<<<<<<
 *     """Helper function to expand GDAL memory block read bound by 1 pixel.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._generate_read_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_target_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":608
 * 
 * 
 * def fill_pits(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_filled_dem_raster_path,
 *         working_dir=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_3fill_pits(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_2fill_pits[] = "Fill the pits in a DEM.\n\n    This function defines pits as hydrologically connected regions that do\n    not drain to the edge of the raster or a nodata pixel. After the call\n    pits are filled to the height of the lowest pour point.\n\n    Parameters:\n        dem_raster_path_band (tuple): a path, band number tuple indicating the\n            DEM calculate flow direction.\n        target_filled_dem_raster_path (str): path the pit filled dem,\n            that's created by a call to this function. It is functionally a\n            single band copy of ``dem_raster_path_band`` with the pit pixels\n            raised to the pour point. For runtime efficiency, this raster is\n            tiled and its blocksize is set to (``1<<BLOCK_BITS``,\n            ``1<<BLOCK_BITS``)\n            even if ``dem_raster_path_band[0]`` was not tiled or a different\n            block size.\n        working_dir (str): If not None, indicates where temporary files\n            should be created during this run. If this directory doesn't exist\n            it is created by this call. If None, a temporary directory is\n            created by tempdir.mkdtemp which is removed after the function\n            call completes successfully.\n        max_pixel_fill_count (int): maximum number of pixels to fill a pit\n            before leaving as a depression. Useful if there are natural\n            large depressions. Value of -1 fills the raster with no search\n            limit.\n        single_outlet_tuple (tuple): If not None, this is an x/y tuple in\n            raster coordinates indicating the only pixel that can be\n            considered a drain. If None then any pixel that would drain to\n            the edge of the raster or a nodata hole will be considered a\n            drain.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a G""Tiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_3fill_pits = {"fill_pits", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_3fill_pits, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_2fill_pits};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_3fill_pits(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dem_raster_path_band = 0;
  PyObject *__pyx_v_target_filled_dem_raster_path = 0;
  PyObject *__pyx_v_working_dir = 0;
  PY_LONG_LONG __pyx_v_max_pixel_fill_count;
  PyObject *__pyx_v_single_outlet_tuple = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_pits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dem_raster_path_band,&__pyx_n_s_target_filled_dem_raster_path,&__pyx_n_s_working_dir,&__pyx_n_s_max_pixel_fill_count,&__pyx_n_s_single_outlet_tuple,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":610
 * def fill_pits(
 *         dem_raster_path_band, target_filled_dem_raster_path,
 *         working_dir=None,             # <<<<<<<<<<<<<<
 *         long long max_pixel_fill_count=-1,
 *         single_outlet_tuple=None,
 */
    values[2] = ((PyObject *)Py_None);

    /* "src/geoprocessing/routing/routing.pyx":612
 *         working_dir=None,
 *         long long max_pixel_fill_count=-1,
 *         single_outlet_tuple=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """Fill the pits in a DEM.
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = __pyx_k__4;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dem_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_filled_dem_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_pits", 0, 2, 6, 1); __PYX_ERR(0, 608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_pixel_fill_count);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_single_outlet_tuple);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_pits") < 0)) __PYX_ERR(0, 608, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dem_raster_path_band = values[0];
    __pyx_v_target_filled_dem_raster_path = values[1];
    __pyx_v_working_dir = values[2];
    if (values[3]) {
      __pyx_v_max_pixel_fill_count = __Pyx_PyInt_As_PY_LONG_LONG(values[3]); if (unlikely((__pyx_v_max_pixel_fill_count == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
    } else {
      __pyx_v_max_pixel_fill_count = ((PY_LONG_LONG)-1LL);
    }
    __pyx_v_single_outlet_tuple = values[4];
    __pyx_v_raster_driver_creation_tuple = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_pits", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 608, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.fill_pits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_2fill_pits(__pyx_self, __pyx_v_dem_raster_path_band, __pyx_v_target_filled_dem_raster_path, __pyx_v_working_dir, __pyx_v_max_pixel_fill_count, __pyx_v_single_outlet_tuple, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":608
 * 
 * 
 * def fill_pits(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_filled_dem_raster_path,
 *         working_dir=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_2fill_pits(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_filled_dem_raster_path, PyObject *__pyx_v_working_dir, PY_LONG_LONG __pyx_v_max_pixel_fill_count, PyObject *__pyx_v_single_outlet_tuple, PyObject *__pyx_v_raster_driver_creation_tuple) {
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_q;
  int __pyx_v_yi_q;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  int __pyx_v_downhill_neighbor;
  int __pyx_v_nodata_neighbor;
  int __pyx_v_natural_drain_exists;
  PY_LONG_LONG __pyx_v_search_steps;
  std::queue<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType>  __pyx_v_search_queue;
  std::queue<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType>  __pyx_v_fill_queue;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType __pyx_v_pixel;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PitPriorityQueueType __pyx_v_pit_queue;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  int __pyx_v_n_x_blocks;
  double __pyx_v_center_val;
  double __pyx_v_dem_nodata;
  double __pyx_v_fill_height;
  int __pyx_v_feature_id;
  int __pyx_v_single_outlet;
  int __pyx_v_outlet_x;
  int __pyx_v_outlet_y;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_dem_raster_info = NULL;
  PyObject *__pyx_v_base_nodata = NULL;
  long __pyx_v_mask_nodata;
  PyObject *__pyx_v_working_dir_path = NULL;
  PyObject *__pyx_v_flat_region_mask_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flat_region_mask_managed_raster = NULL;
  PyObject *__pyx_v_pit_mask_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_pit_mask_managed_raster = NULL;
  PyObject *__pyx_v_base_datatype = NULL;
  PyObject *__pyx_v_filled_dem_raster = NULL;
  PyObject *__pyx_v_filled_dem_band = NULL;
  PyObject *__pyx_v_offset_info = NULL;
  PyObject *__pyx_v_block_array = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_filled_dem_managed_raster = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  int __pyx_v_current_pixel;
  double __pyx_v_n_height;
  long __pyx_v_pour_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  Py_ssize_t __pyx_t_19;
  Py_UCS4 __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType __pyx_t_26;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType __pyx_t_27;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PitPriorityQueueType __pyx_t_28;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_pits", 0);

  /* "src/geoprocessing/routing/routing.pyx":704
 * 
 *     # used to handle the case for single outlet mode
 *     cdef int single_outlet=0, outlet_x=-1, outlet_y=-1             # <<<<<<<<<<<<<<
 *     if single_outlet_tuple is not None:
 *         single_outlet = 1
 */
  __pyx_v_single_outlet = 0;
  __pyx_v_outlet_x = -1;
  __pyx_v_outlet_y = -1;

  /* "src/geoprocessing/routing/routing.pyx":705
 *     # used to handle the case for single outlet mode
 *     cdef int single_outlet=0, outlet_x=-1, outlet_y=-1
 *     if single_outlet_tuple is not None:             # <<<<<<<<<<<<<<
 *         single_outlet = 1
 *         outlet_x, outlet_y = single_outlet_tuple
 */
  __pyx_t_1 = (__pyx_v_single_outlet_tuple != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":706
 *     cdef int single_outlet=0, outlet_x=-1, outlet_y=-1
 *     if single_outlet_tuple is not None:
 *         single_outlet = 1             # <<<<<<<<<<<<<<
 *         outlet_x, outlet_y = single_outlet_tuple
 * 
 */
    __pyx_v_single_outlet = 1;

    /* "src/geoprocessing/routing/routing.pyx":707
 *     if single_outlet_tuple is not None:
 *         single_outlet = 1
 *         outlet_x, outlet_y = single_outlet_tuple             # <<<<<<<<<<<<<<
 * 
 *     # used for time-delayed logging
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_single_outlet_tuple))) || (PyList_CheckExact(__pyx_v_single_outlet_tuple))) {
      PyObject* sequence = __pyx_v_single_outlet_tuple;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 707, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_single_outlet_tuple); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 707, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 707, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_outlet_x = __pyx_t_7;
    __pyx_v_outlet_y = __pyx_t_8;

    /* "src/geoprocessing/routing/routing.pyx":705
 *     # used to handle the case for single outlet mode
 *     cdef int single_outlet=0, outlet_x=-1, outlet_y=-1
 *     if single_outlet_tuple is not None:             # <<<<<<<<<<<<<<
 *         single_outlet = 1
 *         outlet_x, outlet_y = single_outlet_tuple
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":711
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     # determine dem nodata in the working type, or set an improbable value
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":715
 *     # determine dem nodata in the working type, or set an improbable value
 *     # if one can't be determined
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dem_raster_info = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":716
 *     # if one can't be determined
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *     if base_nodata is not None:
 *         # cast to a float64 since that's our operating array type
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_base_nodata = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":717
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:             # <<<<<<<<<<<<<<
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)
 */
  __pyx_t_2 = (__pyx_v_base_nodata != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":719
 *     if base_nodata is not None:
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)             # <<<<<<<<<<<<<<
 *     else:
 *         # pick some very improbable value since it's hard to deal with NaNs
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_base_nodata) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_base_nodata);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dem_nodata = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":717
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:             # <<<<<<<<<<<<<<
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)
 */
    goto __pyx_L6;
  }

  /* "src/geoprocessing/routing/routing.pyx":722
 *     else:
 *         # pick some very improbable value since it's hard to deal with NaNs
 *         dem_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     # these are used to determine if a sample is within the raster
 */
  /*else*/ {
    __pyx_v_dem_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;
  }
  __pyx_L6:;

  /* "src/geoprocessing/routing/routing.pyx":725
 * 
 *     # these are used to determine if a sample is within the raster
 *     raster_x_size, raster_y_size = dem_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     # this is the nodata value for all the flat region and pit masks
 */
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 725, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_9 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_9)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_6(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_9), 2) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L8_unpacking_done;
    __pyx_L7_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 725, __pyx_L1_error)
    __pyx_L8_unpacking_done:;
  }
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_raster_x_size = __pyx_t_8;
  __pyx_v_raster_y_size = __pyx_t_7;

  /* "src/geoprocessing/routing/routing.pyx":728
 * 
 *     # this is the nodata value for all the flat region and pit masks
 *     mask_nodata = 0             # <<<<<<<<<<<<<<
 * 
 *     # set up the working dir for the mask rasters
 */
  __pyx_v_mask_nodata = 0;

  /* "src/geoprocessing/routing/routing.pyx":731
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "src/geoprocessing/routing/routing.pyx":732
 *     # set up the working dir for the mask rasters
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      __pyx_t_1 = (__pyx_v_working_dir != Py_None);
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "src/geoprocessing/routing/routing.pyx":733
 *     try:
 *         if working_dir is not None:
 *             os.makedirs(working_dir)             # <<<<<<<<<<<<<<
 *     except OSError:
 *         pass
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_working_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_working_dir);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 733, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/geoprocessing/routing/routing.pyx":732
 *     # set up the working dir for the mask rasters
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":731
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    }
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L14_try_end;
    __pyx_L9_error:;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":734
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 *     except OSError:             # <<<<<<<<<<<<<<
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_7) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L10_exception_handled;
    }
    goto __pyx_L11_except_error;
    __pyx_L11_except_error:;

    /* "src/geoprocessing/routing/routing.pyx":731
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L10_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    __pyx_L14_try_end:;
  }

  /* "src/geoprocessing/routing/routing.pyx":736
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir, prefix='fill_pits_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":737
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='fill_pits_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dir, __pyx_v_working_dir) < 0) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_time); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_strftime); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":738
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='fill_pits_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))             # <<<<<<<<<<<<<<
 * 
 *     # this raster is used to keep track of what pixels have been searched for
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_gmtime); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
    }
  }
  __pyx_t_9 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_9};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_9};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_16) {
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __pyx_t_16 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_kp_u_Y_m_d__H__M__S);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_7, __pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":737
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='fill_pits_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_14 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_fill_pits__s, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_prefix, __pyx_t_14) < 0) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":736
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir, prefix='fill_pits_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_working_dir_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":743
 *     # a plateau or pit. if a pixel is set, it means it is part of a locally
 *     # undrained area
 *     flat_region_mask_path = os.path.join(             # <<<<<<<<<<<<<<
 *         working_dir_path, 'flat_region_mask.tif')
 *     n_x_blocks = raster_x_size >> BLOCK_BITS + 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":744
 *     # undrained area
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')             # <<<<<<<<<<<<<<
 *     n_x_blocks = raster_x_size >> BLOCK_BITS + 1
 * 
 */
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_working_dir_path, __pyx_kp_u_flat_region_mask_tif};
    __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_working_dir_path, __pyx_kp_u_flat_region_mask_tif};
    __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_7, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_flat_region_mask_tif);
    __Pyx_GIVEREF(__pyx_kp_u_flat_region_mask_tif);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_7, __pyx_kp_u_flat_region_mask_tif);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flat_region_mask_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":745
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     n_x_blocks = raster_x_size >> BLOCK_BITS + 1             # <<<<<<<<<<<<<<
 * 
 *     pygeoprocessing.new_raster_from_base(
 */
  __pyx_v_n_x_blocks = (__pyx_v_raster_x_size >> (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS + 1));

  /* "src/geoprocessing/routing/routing.pyx":747
 *     n_x_blocks = raster_x_size >> BLOCK_BITS + 1
 * 
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":748
 * 
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,             # <<<<<<<<<<<<<<
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":749
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flat_region_mask_managed_raster = _ManagedRaster(
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_mask_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":747
 *     n_x_blocks = raster_x_size >> BLOCK_BITS + 1
 * 
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_v_flat_region_mask_path);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_15);
  __pyx_t_14 = 0;
  __pyx_t_4 = 0;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":750
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     flat_region_mask_managed_raster = _ManagedRaster(
 *         flat_region_mask_path, 1, 1)
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 750, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":747
 *     n_x_blocks = raster_x_size >> BLOCK_BITS + 1
 * 
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":751
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flat_region_mask_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flat_region_mask_path, 1, 1)
 * 
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_v_flat_region_mask_path);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_flat_region_mask_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_int_1);
  __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_4, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flat_region_mask_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":757
 *     # been searched as part of the search for a pour point for pit number
 *     # `feature_id`
 *     pit_mask_path = os.path.join(working_dir_path, 'pit_mask.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_working_dir_path, __pyx_kp_u_pit_mask_tif};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_working_dir_path, __pyx_kp_u_pit_mask_tif};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_pit_mask_tif);
    __Pyx_GIVEREF(__pyx_kp_u_pit_mask_tif);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_kp_u_pit_mask_tif);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pit_mask_path = __pyx_t_15;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":758
 *     # `feature_id`
 *     pit_mask_path = os.path.join(working_dir_path, 'pit_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,
 *         [mask_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":759
 *     pit_mask_path = os.path.join(working_dir_path, 'pit_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,             # <<<<<<<<<<<<<<
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GDT_Int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":760
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,
 *         [mask_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     pit_mask_managed_raster = _ManagedRaster(
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_mask_nodata); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":758
 *     # `feature_id`
 *     pit_mask_path = os.path.join(working_dir_path, 'pit_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,
 *         [mask_nodata],
 */
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_pit_mask_path);
  __Pyx_GIVEREF(__pyx_v_pit_mask_path);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_pit_mask_path);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_14);
  __pyx_t_15 = 0;
  __pyx_t_3 = 0;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":761
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     pit_mask_managed_raster = _ManagedRaster(
 *         pit_mask_path, 1, 1)
 */
  __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 761, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":758
 *     # `feature_id`
 *     pit_mask_path = os.path.join(working_dir_path, 'pit_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], pit_mask_path, gdal.GDT_Int32,
 *         [mask_nodata],
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":762
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     pit_mask_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         pit_mask_path, 1, 1)
 * 
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_pit_mask_path);
  __Pyx_GIVEREF(__pyx_v_pit_mask_path);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pit_mask_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
  __pyx_t_14 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pit_mask_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":766
 * 
 *     # copy the base DEM to the target and set up for writing
 *     base_datatype = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0])['datatype']
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":767
 *     # copy the base DEM to the target and set up for writing
 *     base_datatype = pygeoprocessing.get_raster_info(
 *         dem_raster_path_band[0])['datatype']             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_filled_dem_raster_path,
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_14 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_14, __pyx_n_u_datatype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_base_datatype = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":768
 *     base_datatype = pygeoprocessing.get_raster_info(
 *         dem_raster_path_band[0])['datatype']
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_filled_dem_raster_path,
 *         base_datatype, [dem_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":769
 *         dem_raster_path_band[0])['datatype']
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_filled_dem_raster_path,             # <<<<<<<<<<<<<<
 *         base_datatype, [dem_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "src/geoprocessing/routing/routing.pyx":770
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_filled_dem_raster_path,
 *         base_datatype, [dem_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     filled_dem_raster = gdal.OpenEx(
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_dem_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":768
 *     base_datatype = pygeoprocessing.get_raster_info(
 *         dem_raster_path_band[0])['datatype']
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_filled_dem_raster_path,
 *         base_datatype, [dem_nodata],
 */
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_target_filled_dem_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_filled_dem_raster_path);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_target_filled_dem_raster_path);
  __Pyx_INCREF(__pyx_v_base_datatype);
  __Pyx_GIVEREF(__pyx_v_base_datatype);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_base_datatype);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":771
 *         dem_raster_path_band[0], target_filled_dem_raster_path,
 *         base_datatype, [dem_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     filled_dem_raster = gdal.OpenEx(
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 771, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":768
 *     base_datatype = pygeoprocessing.get_raster_info(
 *         dem_raster_path_band[0])['datatype']
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_filled_dem_raster_path,
 *         base_datatype, [dem_nodata],
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":772
 *         base_datatype, [dem_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     filled_dem_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":773
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     filled_dem_raster = gdal.OpenEx(
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)
 *     for offset_info, block_array in pygeoprocessing.iterblocks(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Or(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_target_filled_dem_raster_path, __pyx_t_4};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_target_filled_dem_raster_path, __pyx_t_4};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_15) {
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_15); __pyx_t_15 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target_filled_dem_raster_path);
    __Pyx_GIVEREF(__pyx_v_target_filled_dem_raster_path);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_v_target_filled_dem_raster_path);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_filled_dem_raster = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":774
 *     filled_dem_raster = gdal.OpenEx(
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     for offset_info, block_array in pygeoprocessing.iterblocks(
 *                 dem_raster_path_band):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_filled_dem_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_14, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_1);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_filled_dem_band = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":775
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)
 *     for offset_info, block_array in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *                 dem_raster_path_band):
 *         filled_dem_band.WriteArray(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":776
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)
 *     for offset_info, block_array in pygeoprocessing.iterblocks(
 *                 dem_raster_path_band):             # <<<<<<<<<<<<<<
 *         filled_dem_band.WriteArray(
 *             block_array, xoff=offset_info['xoff'], yoff=offset_info['yoff'])
 */
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_3, __pyx_v_dem_raster_path_band) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_dem_raster_path_band);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":775
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)
 *     for offset_info, block_array in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *                 dem_raster_path_band):
 *         filled_dem_band.WriteArray(
 */
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_14 = __pyx_t_5; __Pyx_INCREF(__pyx_t_14); __pyx_t_17 = 0;
    __pyx_t_18 = NULL;
  } else {
    __pyx_t_17 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_18 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 775, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_18)) {
      if (likely(PyList_CheckExact(__pyx_t_14))) {
        if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_5); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_5); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_18(__pyx_t_14);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 775, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 775, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_15); if (unlikely(!__pyx_t_3)) goto __pyx_L18_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_15); if (unlikely(!__pyx_t_4)) goto __pyx_L18_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_15), 2) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L19_unpacking_done;
      __pyx_L18_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 775, __pyx_L1_error)
      __pyx_L19_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_info, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_block_array, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":777
 *     for offset_info, block_array in pygeoprocessing.iterblocks(
 *                 dem_raster_path_band):
 *         filled_dem_band.WriteArray(             # <<<<<<<<<<<<<<
 *             block_array, xoff=offset_info['xoff'], yoff=offset_info['yoff'])
 *     filled_dem_band.FlushCache()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_filled_dem_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "src/geoprocessing/routing/routing.pyx":778
 *                 dem_raster_path_band):
 *         filled_dem_band.WriteArray(
 *             block_array, xoff=offset_info['xoff'], yoff=offset_info['yoff'])             # <<<<<<<<<<<<<<
 *     filled_dem_band.FlushCache()
 *     filled_dem_raster.FlushCache()
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_block_array);
    __Pyx_GIVEREF(__pyx_v_block_array);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_block_array);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_info, __pyx_n_u_xoff); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_xoff, __pyx_t_15) < 0) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_info, __pyx_n_u_yoff); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_yoff, __pyx_t_15) < 0) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":777
 *     for offset_info, block_array in pygeoprocessing.iterblocks(
 *                 dem_raster_path_band):
 *         filled_dem_band.WriteArray(             # <<<<<<<<<<<<<<
 *             block_array, xoff=offset_info['xoff'], yoff=offset_info['yoff'])
 *     filled_dem_band.FlushCache()
 */
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":775
 *         target_filled_dem_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     filled_dem_band = filled_dem_raster.GetRasterBand(1)
 *     for offset_info, block_array in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *                 dem_raster_path_band):
 *         filled_dem_band.WriteArray(
 */
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":779
 *         filled_dem_band.WriteArray(
 *             block_array, xoff=offset_info['xoff'], yoff=offset_info['yoff'])
 *     filled_dem_band.FlushCache()             # <<<<<<<<<<<<<<
 *     filled_dem_raster.FlushCache()
 *     filled_dem_band = None
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_filled_dem_band, __pyx_n_s_FlushCache); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_14 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":780
 *             block_array, xoff=offset_info['xoff'], yoff=offset_info['yoff'])
 *     filled_dem_band.FlushCache()
 *     filled_dem_raster.FlushCache()             # <<<<<<<<<<<<<<
 *     filled_dem_band = None
 *     filled_dem_raster = None
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_filled_dem_raster, __pyx_n_s_FlushCache); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_14 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":781
 *     filled_dem_band.FlushCache()
 *     filled_dem_raster.FlushCache()
 *     filled_dem_band = None             # <<<<<<<<<<<<<<
 *     filled_dem_raster = None
 *     filled_dem_managed_raster = _ManagedRaster(
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_filled_dem_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":782
 *     filled_dem_raster.FlushCache()
 *     filled_dem_band = None
 *     filled_dem_raster = None             # <<<<<<<<<<<<<<
 *     filled_dem_managed_raster = _ManagedRaster(
 *         target_filled_dem_raster_path, 1, 1)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_filled_dem_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":783
 *     filled_dem_band = None
 *     filled_dem_raster = None
 *     filled_dem_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_filled_dem_raster_path, 1, 1)
 * 
 */
  __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_v_target_filled_dem_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_filled_dem_raster_path);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_target_filled_dem_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_int_1);
  __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_14, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_filled_dem_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":787
 * 
 *     # feature_id will start at 1 since the mask nodata is 0.
 *     feature_id = 0             # <<<<<<<<<<<<<<
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 */
  __pyx_v_feature_id = 0;

  /* "src/geoprocessing/routing/routing.pyx":790
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":791
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             dem_raster_path_band, offset_only=True, largest_block=0):             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
  __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_v_dem_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_dem_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_dem_raster_path_band);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 791, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":790
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_15, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_17 = 0;
    __pyx_t_18 = NULL;
  } else {
    __pyx_t_17 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_18 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 790, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_18)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_17); __Pyx_INCREF(__pyx_t_4); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 790, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_17); __Pyx_INCREF(__pyx_t_4); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 790, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_18(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 790, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":792
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_win_xsize = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":793
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_win_ysize = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":794
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_xoff = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":795
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_yoff = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":797
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_2 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_2) {

      /* "src/geoprocessing/routing/routing.pyx":798
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":799
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(fill pits): '
 */
      __pyx_v_current_pixel = (__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size));

      /* "src/geoprocessing/routing/routing.pyx":800
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(fill pits): '
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_info); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "src/geoprocessing/routing/routing.pyx":801
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 *                 '(fill pits): '             # <<<<<<<<<<<<<<
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '
 *                 'pixels complete')
 */
      __pyx_t_15 = PyTuple_New(5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_19 = 0;
      __pyx_t_20 = 127;
      __Pyx_INCREF(__pyx_kp_u_fill_pits);
      __pyx_t_19 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_fill_pits);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_u_fill_pits);

      /* "src/geoprocessing/routing/routing.pyx":802
 *             LOGGER.info(
 *                 '(fill pits): '
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '             # <<<<<<<<<<<<<<
 *                 'pixels complete')
 * 
 */
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_current_pixel, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_19 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_kp_u_of);
      __pyx_t_5 = __Pyx_PyUnicode_From_int((__pyx_v_raster_x_size * __pyx_v_raster_y_size), 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_pixels_complete);
      __pyx_t_19 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_pixels_complete);
      PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_kp_u_pixels_complete);

      /* "src/geoprocessing/routing/routing.pyx":801
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 *                 '(fill pits): '             # <<<<<<<<<<<<<<
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '
 *                 'pixels complete')
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_15, 5, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":797
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":806
 * 
 *         # search block for locally undrained pixels
 *         for yi in range(win_ysize):             # <<<<<<<<<<<<<<
 *             yi_root = yi+yoff
 *             for xi in range(win_xsize):
 */
    __pyx_t_7 = __pyx_v_win_ysize;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_8; __pyx_t_21+=1) {
      __pyx_v_yi = __pyx_t_21;

      /* "src/geoprocessing/routing/routing.pyx":807
 *         # search block for locally undrained pixels
 *         for yi in range(win_ysize):
 *             yi_root = yi+yoff             # <<<<<<<<<<<<<<
 *             for xi in range(win_xsize):
 *                 xi_root = xi+xoff
 */
      __pyx_v_yi_root = (__pyx_v_yi + __pyx_v_yoff);

      /* "src/geoprocessing/routing/routing.pyx":808
 *         for yi in range(win_ysize):
 *             yi_root = yi+yoff
 *             for xi in range(win_xsize):             # <<<<<<<<<<<<<<
 *                 xi_root = xi+xoff
 *                 # this value is set in case it turns out to be the root of a
 */
      __pyx_t_22 = __pyx_v_win_xsize;
      __pyx_t_23 = __pyx_t_22;
      for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
        __pyx_v_xi = __pyx_t_24;

        /* "src/geoprocessing/routing/routing.pyx":809
 *             yi_root = yi+yoff
 *             for xi in range(win_xsize):
 *                 xi_root = xi+xoff             # <<<<<<<<<<<<<<
 *                 # this value is set in case it turns out to be the root of a
 *                 # pit, we'll start the fill from this pixel in the last phase
 */
        __pyx_v_xi_root = (__pyx_v_xi + __pyx_v_xoff);

        /* "src/geoprocessing/routing/routing.pyx":813
 *                 # pit, we'll start the fill from this pixel in the last phase
 *                 # of the algorithm
 *                 center_val = filled_dem_managed_raster.get(xi_root, yi_root)             # <<<<<<<<<<<<<<
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):
 *                     continue
 */
        __pyx_v_center_val = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root);

        /* "src/geoprocessing/routing/routing.pyx":814
 *                 # of the algorithm
 *                 center_val = filled_dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_2 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_center_val, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/routing.pyx":815
 *                 center_val = filled_dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if flat_region_mask_managed_raster.get(
 */
          goto __pyx_L25_continue;

          /* "src/geoprocessing/routing/routing.pyx":814
 *                 # of the algorithm
 *                 center_val = filled_dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":818
 * 
 *                 if flat_region_mask_managed_raster.get(
 *                         xi_root, yi_root) != mask_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_2 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root) != __pyx_v_mask_nodata) != 0);

        /* "src/geoprocessing/routing/routing.pyx":817
 *                     continue
 * 
 *                 if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root) != mask_nodata:
 *                     continue
 */
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/routing.pyx":819
 *                 if flat_region_mask_managed_raster.get(
 *                         xi_root, yi_root) != mask_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # a single outlet trivially drains
 */
          goto __pyx_L25_continue;

          /* "src/geoprocessing/routing/routing.pyx":817
 *                     continue
 * 
 *                 if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root) != mask_nodata:
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":822
 * 
 *                 # a single outlet trivially drains
 *                 if (single_outlet and             # <<<<<<<<<<<<<<
 *                         xi_root == outlet_x and
 *                         yi_root == outlet_y):
 */
        __pyx_t_1 = (__pyx_v_single_outlet != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_2 = __pyx_t_1;
          goto __pyx_L30_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":823
 *                 # a single outlet trivially drains
 *                 if (single_outlet and
 *                         xi_root == outlet_x and             # <<<<<<<<<<<<<<
 *                         yi_root == outlet_y):
 *                     continue
 */
        __pyx_t_1 = ((__pyx_v_xi_root == __pyx_v_outlet_x) != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_2 = __pyx_t_1;
          goto __pyx_L30_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":824
 *                 if (single_outlet and
 *                         xi_root == outlet_x and
 *                         yi_root == outlet_y):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_1 = ((__pyx_v_yi_root == __pyx_v_outlet_y) != 0);
        __pyx_t_2 = __pyx_t_1;
        __pyx_L30_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":822
 * 
 *                 # a single outlet trivially drains
 *                 if (single_outlet and             # <<<<<<<<<<<<<<
 *                         xi_root == outlet_x and
 *                         yi_root == outlet_y):
 */
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/routing.pyx":825
 *                         xi_root == outlet_x and
 *                         yi_root == outlet_y):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # search neighbors for downhill or nodata
 */
          goto __pyx_L25_continue;

          /* "src/geoprocessing/routing/routing.pyx":822
 * 
 *                 # a single outlet trivially drains
 *                 if (single_outlet and             # <<<<<<<<<<<<<<
 *                         xi_root == outlet_x and
 *                         yi_root == outlet_y):
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":828
 * 
 *                 # search neighbors for downhill or nodata
 *                 downhill_neighbor = 0             # <<<<<<<<<<<<<<
 *                 nodata_neighbor = 0
 *                 for i_n in range(8):
 */
        __pyx_v_downhill_neighbor = 0;

        /* "src/geoprocessing/routing/routing.pyx":829
 *                 # search neighbors for downhill or nodata
 *                 downhill_neighbor = 0
 *                 nodata_neighbor = 0             # <<<<<<<<<<<<<<
 *                 for i_n in range(8):
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 */
        __pyx_v_nodata_neighbor = 0;

        /* "src/geoprocessing/routing/routing.pyx":830
 *                 downhill_neighbor = 0
 *                 nodata_neighbor = 0
 *                 for i_n in range(8):             # <<<<<<<<<<<<<<
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 */
        for (__pyx_t_25 = 0; __pyx_t_25 < 8; __pyx_t_25+=1) {
          __pyx_v_i_n = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":831
 *                 nodata_neighbor = 0
 *                 for i_n in range(8):
 *                     xi_n = xi_root+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 */
          __pyx_v_xi_n = (__pyx_v_xi_root + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":832
 *                 for i_n in range(8):
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 */
          __pyx_v_yi_n = (__pyx_v_yi_root + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":834
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         if not single_outlet:
 */
          __pyx_t_1 = ((__pyx_v_xi_n < 0) != 0);
          if (!__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L36_bool_binop_done;
          }
          __pyx_t_1 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
          if (!__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L36_bool_binop_done;
          }

          /* "src/geoprocessing/routing/routing.pyx":835
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 *                             yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                         if not single_outlet:
 *                             # it'll drain off the edge of the raster
 */
          __pyx_t_1 = ((__pyx_v_yi_n < 0) != 0);
          if (!__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L36_bool_binop_done;
          }
          __pyx_t_1 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
          __pyx_t_2 = __pyx_t_1;
          __pyx_L36_bool_binop_done:;

          /* "src/geoprocessing/routing/routing.pyx":834
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         if not single_outlet:
 */
          if (__pyx_t_2) {

            /* "src/geoprocessing/routing/routing.pyx":836
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         if not single_outlet:             # <<<<<<<<<<<<<<
 *                             # it'll drain off the edge of the raster
 *                             nodata_neighbor = 1
 */
            __pyx_t_2 = ((!(__pyx_v_single_outlet != 0)) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":838
 *                         if not single_outlet:
 *                             # it'll drain off the edge of the raster
 *                             nodata_neighbor = 1             # <<<<<<<<<<<<<<
 *                             break
 *                         else:
 */
              __pyx_v_nodata_neighbor = 1;

              /* "src/geoprocessing/routing/routing.pyx":839
 *                             # it'll drain off the edge of the raster
 *                             nodata_neighbor = 1
 *                             break             # <<<<<<<<<<<<<<
 *                         else:
 *                             # continue so we don't access out of bounds
 */
              goto __pyx_L34_break;

              /* "src/geoprocessing/routing/routing.pyx":836
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         if not single_outlet:             # <<<<<<<<<<<<<<
 *                             # it'll drain off the edge of the raster
 *                             nodata_neighbor = 1
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":842
 *                         else:
 *                             # continue so we don't access out of bounds
 *                             continue             # <<<<<<<<<<<<<<
 *                     n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
            /*else*/ {
              goto __pyx_L33_continue;
            }

            /* "src/geoprocessing/routing/routing.pyx":834
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         if not single_outlet:
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":843
 *                             # continue so we don't access out of bounds
 *                             continue
 *                     n_height = filled_dem_managed_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         if not single_outlet:
 */
          __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

          /* "src/geoprocessing/routing/routing.pyx":844
 *                             continue
 *                     n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         if not single_outlet:
 *                             # it'll drain to nodata
 */
          __pyx_t_2 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
          if (__pyx_t_2) {

            /* "src/geoprocessing/routing/routing.pyx":845
 *                     n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         if not single_outlet:             # <<<<<<<<<<<<<<
 *                             # it'll drain to nodata
 *                             nodata_neighbor = 1
 */
            __pyx_t_2 = ((!(__pyx_v_single_outlet != 0)) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":847
 *                         if not single_outlet:
 *                             # it'll drain to nodata
 *                             nodata_neighbor = 1             # <<<<<<<<<<<<<<
 *                             break
 *                         else:
 */
              __pyx_v_nodata_neighbor = 1;

              /* "src/geoprocessing/routing/routing.pyx":848
 *                             # it'll drain to nodata
 *                             nodata_neighbor = 1
 *                             break             # <<<<<<<<<<<<<<
 *                         else:
 *                             # skip the rest so it doesn't drain downhill
 */
              goto __pyx_L34_break;

              /* "src/geoprocessing/routing/routing.pyx":845
 *                     n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         if not single_outlet:             # <<<<<<<<<<<<<<
 *                             # it'll drain to nodata
 *                             nodata_neighbor = 1
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":851
 *                         else:
 *                             # skip the rest so it doesn't drain downhill
 *                             continue             # <<<<<<<<<<<<<<
 *                     if n_height < center_val:
 *                         # it'll drain downhill
 */
            /*else*/ {
              goto __pyx_L33_continue;
            }

            /* "src/geoprocessing/routing/routing.pyx":844
 *                             continue
 *                     n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         if not single_outlet:
 *                             # it'll drain to nodata
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":852
 *                             # skip the rest so it doesn't drain downhill
 *                             continue
 *                     if n_height < center_val:             # <<<<<<<<<<<<<<
 *                         # it'll drain downhill
 *                         downhill_neighbor = 1
 */
          __pyx_t_2 = ((__pyx_v_n_height < __pyx_v_center_val) != 0);
          if (__pyx_t_2) {

            /* "src/geoprocessing/routing/routing.pyx":854
 *                     if n_height < center_val:
 *                         # it'll drain downhill
 *                         downhill_neighbor = 1             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
            __pyx_v_downhill_neighbor = 1;

            /* "src/geoprocessing/routing/routing.pyx":855
 *                         # it'll drain downhill
 *                         downhill_neighbor = 1
 *                         break             # <<<<<<<<<<<<<<
 * 
 *                 if downhill_neighbor or nodata_neighbor:
 */
            goto __pyx_L34_break;

            /* "src/geoprocessing/routing/routing.pyx":852
 *                             # skip the rest so it doesn't drain downhill
 *                             continue
 *                     if n_height < center_val:             # <<<<<<<<<<<<<<
 *                         # it'll drain downhill
 *                         downhill_neighbor = 1
 */
          }
          __pyx_L33_continue:;
        }
        __pyx_L34_break:;

        /* "src/geoprocessing/routing/routing.pyx":857
 *                         break
 * 
 *                 if downhill_neighbor or nodata_neighbor:             # <<<<<<<<<<<<<<
 *                     # it drains, so skip
 *                     continue
 */
        __pyx_t_1 = (__pyx_v_downhill_neighbor != 0);
        if (!__pyx_t_1) {
        } else {
          __pyx_t_2 = __pyx_t_1;
          goto __pyx_L45_bool_binop_done;
        }
        __pyx_t_1 = (__pyx_v_nodata_neighbor != 0);
        __pyx_t_2 = __pyx_t_1;
        __pyx_L45_bool_binop_done:;
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/routing.pyx":859
 *                 if downhill_neighbor or nodata_neighbor:
 *                     # it drains, so skip
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # otherwise, this pixel doesn't drain locally, search to see
 */
          goto __pyx_L25_continue;

          /* "src/geoprocessing/routing/routing.pyx":857
 *                         break
 * 
 *                 if downhill_neighbor or nodata_neighbor:             # <<<<<<<<<<<<<<
 *                     # it drains, so skip
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":863
 *                 # otherwise, this pixel doesn't drain locally, search to see
 *                 # if it's a pit or plateau
 *                 search_queue.push(CoordinateType(xi_root, yi_root))             # <<<<<<<<<<<<<<
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)
 *                 natural_drain_exists = 0
 */
        __pyx_t_26.xi = __pyx_v_xi_root;
        __pyx_t_26.yi = __pyx_v_yi_root;
        __pyx_v_search_queue.push(__pyx_t_26);

        /* "src/geoprocessing/routing/routing.pyx":864
 *                 # if it's a pit or plateau
 *                 search_queue.push(CoordinateType(xi_root, yi_root))
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)             # <<<<<<<<<<<<<<
 *                 natural_drain_exists = 0
 * 
 */
        __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, 1.0);

        /* "src/geoprocessing/routing/routing.pyx":865
 *                 search_queue.push(CoordinateType(xi_root, yi_root))
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)
 *                 natural_drain_exists = 0             # <<<<<<<<<<<<<<
 * 
 *                 # this loop does a BFS starting at this pixel to all pixels
 */
        __pyx_v_natural_drain_exists = 0;

        /* "src/geoprocessing/routing/routing.pyx":873
 *                 # it can be entirely marked as processed and not re-accessed
 *                 # on later iterations
 *                 search_steps = 0             # <<<<<<<<<<<<<<
 *                 while not search_queue.empty():
 *                     xi_q = search_queue.front().xi
 */
        __pyx_v_search_steps = 0;

        /* "src/geoprocessing/routing/routing.pyx":874
 *                 # on later iterations
 *                 search_steps = 0
 *                 while not search_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = search_queue.front().xi
 *                     yi_q = search_queue.front().yi
 */
        while (1) {
          __pyx_t_2 = ((!(__pyx_v_search_queue.empty() != 0)) != 0);
          if (!__pyx_t_2) break;

          /* "src/geoprocessing/routing/routing.pyx":875
 *                 search_steps = 0
 *                 while not search_queue.empty():
 *                     xi_q = search_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()
 */
          __pyx_t_25 = __pyx_v_search_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":876
 *                 while not search_queue.empty():
 *                     xi_q = search_queue.front().xi
 *                     yi_q = search_queue.front().yi             # <<<<<<<<<<<<<<
 *                     search_queue.pop()
 *                     if (max_pixel_fill_count > 0 and
 */
          __pyx_t_25 = __pyx_v_search_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":877
 *                     xi_q = search_queue.front().xi
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()             # <<<<<<<<<<<<<<
 *                     if (max_pixel_fill_count > 0 and
 *                             search_steps > max_pixel_fill_count):
 */
          __pyx_v_search_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":878
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()
 *                     if (max_pixel_fill_count > 0 and             # <<<<<<<<<<<<<<
 *                             search_steps > max_pixel_fill_count):
 *                         # clear the search queue and quit
 */
          __pyx_t_1 = ((__pyx_v_max_pixel_fill_count > 0) != 0);
          if (__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L50_bool_binop_done;
          }

          /* "src/geoprocessing/routing/routing.pyx":879
 *                     search_queue.pop()
 *                     if (max_pixel_fill_count > 0 and
 *                             search_steps > max_pixel_fill_count):             # <<<<<<<<<<<<<<
 *                         # clear the search queue and quit
 *                         LOGGER.debug(
 */
          __pyx_t_1 = ((__pyx_v_search_steps > __pyx_v_max_pixel_fill_count) != 0);
          __pyx_t_2 = __pyx_t_1;
          __pyx_L50_bool_binop_done:;

          /* "src/geoprocessing/routing/routing.pyx":878
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()
 *                     if (max_pixel_fill_count > 0 and             # <<<<<<<<<<<<<<
 *                             search_steps > max_pixel_fill_count):
 *                         # clear the search queue and quit
 */
          if (__pyx_t_2) {

            /* "src/geoprocessing/routing/routing.pyx":881
 *                             search_steps > max_pixel_fill_count):
 *                         # clear the search queue and quit
 *                         LOGGER.debug(             # <<<<<<<<<<<<<<
 *                             'exceeded max pixel fill count when searching '
 *                             'for plateau drain')
 */
            __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 881, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_debug); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 881, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_4 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_kp_u_exceeded_max_pixel_fill_count_wh) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_exceeded_max_pixel_fill_count_wh);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 881, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "src/geoprocessing/routing/routing.pyx":884
 *                             'exceeded max pixel fill count when searching '
 *                             'for plateau drain')
 *                         while not search_queue.empty():             # <<<<<<<<<<<<<<
 *                             search_queue.pop()
 *                         natural_drain_exists = 1
 */
            while (1) {
              __pyx_t_2 = ((!(__pyx_v_search_queue.empty() != 0)) != 0);
              if (!__pyx_t_2) break;

              /* "src/geoprocessing/routing/routing.pyx":885
 *                             'for plateau drain')
 *                         while not search_queue.empty():
 *                             search_queue.pop()             # <<<<<<<<<<<<<<
 *                         natural_drain_exists = 1
 *                         break
 */
              __pyx_v_search_queue.pop();
            }

            /* "src/geoprocessing/routing/routing.pyx":886
 *                         while not search_queue.empty():
 *                             search_queue.pop()
 *                         natural_drain_exists = 1             # <<<<<<<<<<<<<<
 *                         break
 *                     search_steps += 1
 */
            __pyx_v_natural_drain_exists = 1;

            /* "src/geoprocessing/routing/routing.pyx":887
 *                             search_queue.pop()
 *                         natural_drain_exists = 1
 *                         break             # <<<<<<<<<<<<<<
 *                     search_steps += 1
 * 
 */
            goto __pyx_L48_break;

            /* "src/geoprocessing/routing/routing.pyx":878
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()
 *                     if (max_pixel_fill_count > 0 and             # <<<<<<<<<<<<<<
 *                             search_steps > max_pixel_fill_count):
 *                         # clear the search queue and quit
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":888
 *                         natural_drain_exists = 1
 *                         break
 *                     search_steps += 1             # <<<<<<<<<<<<<<
 * 
 *                     for i_n in range(8):
 */
          __pyx_v_search_steps = (__pyx_v_search_steps + 1);

          /* "src/geoprocessing/routing/routing.pyx":890
 *                     search_steps += 1
 * 
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_25 = 0; __pyx_t_25 < 8; __pyx_t_25+=1) {
            __pyx_v_i_n = __pyx_t_25;

            /* "src/geoprocessing/routing/routing.pyx":891
 * 
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":892
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":894
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             if not single_outlet:
 */
            __pyx_t_1 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L57_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L57_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":895
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1
 */
            __pyx_t_1 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L57_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L57_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":894
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             if not single_outlet:
 */
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":896
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 natural_drain_exists = 1
 *                             continue
 */
              __pyx_t_2 = ((!(__pyx_v_single_outlet != 0)) != 0);
              if (__pyx_t_2) {

                /* "src/geoprocessing/routing/routing.pyx":897
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
                __pyx_v_natural_drain_exists = 1;

                /* "src/geoprocessing/routing/routing.pyx":896
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 natural_drain_exists = 1
 *                             continue
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":898
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         n_height = filled_dem_managed_raster.get(
 */
              goto __pyx_L54_continue;

              /* "src/geoprocessing/routing/routing.pyx":894
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             if not single_outlet:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":900
 *                             continue
 * 
 *                         n_height = filled_dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *                             xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
            __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

            /* "src/geoprocessing/routing/routing.pyx":902
 *                         n_height = filled_dem_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1
 */
            __pyx_t_2 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":903
 *                             xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 natural_drain_exists = 1
 *                             continue
 */
              __pyx_t_2 = ((!(__pyx_v_single_outlet != 0)) != 0);
              if (__pyx_t_2) {

                /* "src/geoprocessing/routing/routing.pyx":904
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_height < center_val:
 */
                __pyx_v_natural_drain_exists = 1;

                /* "src/geoprocessing/routing/routing.pyx":903
 *                             xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 natural_drain_exists = 1
 *                             continue
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":905
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_height < center_val:
 *                             natural_drain_exists = 1
 */
              goto __pyx_L54_continue;

              /* "src/geoprocessing/routing/routing.pyx":902
 *                         n_height = filled_dem_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             if not single_outlet:
 *                                 natural_drain_exists = 1
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":906
 *                                 natural_drain_exists = 1
 *                             continue
 *                         if n_height < center_val:             # <<<<<<<<<<<<<<
 *                             natural_drain_exists = 1
 *                             continue
 */
            __pyx_t_2 = ((__pyx_v_n_height < __pyx_v_center_val) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":907
 *                             continue
 *                         if n_height < center_val:
 *                             natural_drain_exists = 1             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
              __pyx_v_natural_drain_exists = 1;

              /* "src/geoprocessing/routing/routing.pyx":908
 *                         if n_height < center_val:
 *                             natural_drain_exists = 1
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         if flat_region_mask_managed_raster.get(
 */
              goto __pyx_L54_continue;

              /* "src/geoprocessing/routing/routing.pyx":906
 *                                 natural_drain_exists = 1
 *                             continue
 *                         if n_height < center_val:             # <<<<<<<<<<<<<<
 *                             natural_drain_exists = 1
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":911
 * 
 *                         if flat_region_mask_managed_raster.get(
 *                                 xi_n, yi_n) == 1:             # <<<<<<<<<<<<<<
 *                             # been set before on a previous iteration, skip
 *                             continue
 */
            __pyx_t_2 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == 1.0) != 0);

            /* "src/geoprocessing/routing/routing.pyx":910
 *                             continue
 * 
 *                         if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n) == 1:
 *                             # been set before on a previous iteration, skip
 */
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":913
 *                                 xi_n, yi_n) == 1:
 *                             # been set before on a previous iteration, skip
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_height == center_val:
 *                             # only grow if it's at the same level and not
 */
              goto __pyx_L54_continue;

              /* "src/geoprocessing/routing/routing.pyx":910
 *                             continue
 * 
 *                         if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n) == 1:
 *                             # been set before on a previous iteration, skip
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":914
 *                             # been set before on a previous iteration, skip
 *                             continue
 *                         if n_height == center_val:             # <<<<<<<<<<<<<<
 *                             # only grow if it's at the same level and not
 *                             # previously visited
 */
            __pyx_t_2 = ((__pyx_v_n_height == __pyx_v_center_val) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":918
 *                             # previously visited
 *                             search_queue.push(
 *                                 CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *                             flat_region_mask_managed_raster.set(
 *                                 xi_n, yi_n, 1)
 */
              __pyx_t_26.xi = __pyx_v_xi_n;
              __pyx_t_26.yi = __pyx_v_yi_n;

              /* "src/geoprocessing/routing/routing.pyx":917
 *                             # only grow if it's at the same level and not
 *                             # previously visited
 *                             search_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_n, yi_n))
 *                             flat_region_mask_managed_raster.set(
 */
              __pyx_v_search_queue.push(__pyx_t_26);

              /* "src/geoprocessing/routing/routing.pyx":919
 *                             search_queue.push(
 *                                 CoordinateType(xi_n, yi_n))
 *                             flat_region_mask_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n, 1)
 * 
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, 1.0);

              /* "src/geoprocessing/routing/routing.pyx":914
 *                             # been set before on a previous iteration, skip
 *                             continue
 *                         if n_height == center_val:             # <<<<<<<<<<<<<<
 *                             # only grow if it's at the same level and not
 *                             # previously visited
 */
            }
            __pyx_L54_continue:;
          }
        }
        __pyx_L48_break:;

        /* "src/geoprocessing/routing/routing.pyx":922
 *                                 xi_n, yi_n, 1)
 * 
 *                 if not natural_drain_exists:             # <<<<<<<<<<<<<<
 *                     # this space does not naturally drain, so fill it
 *                     pixel = PixelType(
 */
        __pyx_t_2 = ((!(__pyx_v_natural_drain_exists != 0)) != 0);
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/routing.pyx":925
 *                     # this space does not naturally drain, so fill it
 *                     pixel = PixelType(
 *                         center_val, xi_root, yi_root, (             # <<<<<<<<<<<<<<
 *                             n_x_blocks * (yi_root >> BLOCK_BITS) +
 *                             xi_root >> BLOCK_BITS))
 */
          __pyx_t_27.value = __pyx_v_center_val;
          __pyx_t_27.xi = __pyx_v_xi_root;
          __pyx_t_27.yi = __pyx_v_yi_root;

          /* "src/geoprocessing/routing/routing.pyx":927
 *                         center_val, xi_root, yi_root, (
 *                             n_x_blocks * (yi_root >> BLOCK_BITS) +
 *                             xi_root >> BLOCK_BITS))             # <<<<<<<<<<<<<<
 *                     feature_id += 1
 *                     pit_mask_managed_raster.set(
 */
          __pyx_t_27.priority = (((__pyx_v_n_x_blocks * (__pyx_v_yi_root >> __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS)) + __pyx_v_xi_root) >> __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS);
          __pyx_v_pixel = __pyx_t_27;

          /* "src/geoprocessing/routing/routing.pyx":928
 *                             n_x_blocks * (yi_root >> BLOCK_BITS) +
 *                             xi_root >> BLOCK_BITS))
 *                     feature_id += 1             # <<<<<<<<<<<<<<
 *                     pit_mask_managed_raster.set(
 *                         xi_root, yi_root, feature_id)
 */
          __pyx_v_feature_id = (__pyx_v_feature_id + 1);

          /* "src/geoprocessing/routing/routing.pyx":929
 *                             xi_root >> BLOCK_BITS))
 *                     feature_id += 1
 *                     pit_mask_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root, feature_id)
 *                     pit_queue.push(pixel)
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_pit_mask_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, __pyx_v_feature_id);

          /* "src/geoprocessing/routing/routing.pyx":931
 *                     pit_mask_managed_raster.set(
 *                         xi_root, yi_root, feature_id)
 *                     pit_queue.push(pixel)             # <<<<<<<<<<<<<<
 * 
 *                 # this loop visits pixels in increasing height order, so the
 */
          __pyx_v_pit_queue.push(__pyx_v_pixel);

          /* "src/geoprocessing/routing/routing.pyx":922
 *                                 xi_n, yi_n, 1)
 * 
 *                 if not natural_drain_exists:             # <<<<<<<<<<<<<<
 *                     # this space does not naturally drain, so fill it
 *                     pixel = PixelType(
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":936
 *                 # first non-processed pixel that's < pixel.height or nodata
 *                 # will be the lowest pour point
 *                 pour_point = 0             # <<<<<<<<<<<<<<
 *                 fill_height = dem_nodata
 *                 search_steps = 0
 */
        __pyx_v_pour_point = 0;

        /* "src/geoprocessing/routing/routing.pyx":937
 *                 # will be the lowest pour point
 *                 pour_point = 0
 *                 fill_height = dem_nodata             # <<<<<<<<<<<<<<
 *                 search_steps = 0
 *                 while not pit_queue.empty():
 */
        __pyx_v_fill_height = __pyx_v_dem_nodata;

        /* "src/geoprocessing/routing/routing.pyx":938
 *                 pour_point = 0
 *                 fill_height = dem_nodata
 *                 search_steps = 0             # <<<<<<<<<<<<<<
 *                 while not pit_queue.empty():
 *                     pixel = pit_queue.top()
 */
        __pyx_v_search_steps = 0;

        /* "src/geoprocessing/routing/routing.pyx":939
 *                 fill_height = dem_nodata
 *                 search_steps = 0
 *                 while not pit_queue.empty():             # <<<<<<<<<<<<<<
 *                     pixel = pit_queue.top()
 *                     pit_queue.pop()
 */
        while (1) {
          __pyx_t_2 = ((!(__pyx_v_pit_queue.empty() != 0)) != 0);
          if (!__pyx_t_2) break;

          /* "src/geoprocessing/routing/routing.pyx":940
 *                 search_steps = 0
 *                 while not pit_queue.empty():
 *                     pixel = pit_queue.top()             # <<<<<<<<<<<<<<
 *                     pit_queue.pop()
 *                     xi_q = pixel.xi
 */
          __pyx_v_pixel = __pyx_v_pit_queue.top();

          /* "src/geoprocessing/routing/routing.pyx":941
 *                 while not pit_queue.empty():
 *                     pixel = pit_queue.top()
 *                     pit_queue.pop()             # <<<<<<<<<<<<<<
 *                     xi_q = pixel.xi
 *                     yi_q = pixel.yi
 */
          __pyx_v_pit_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":942
 *                     pixel = pit_queue.top()
 *                     pit_queue.pop()
 *                     xi_q = pixel.xi             # <<<<<<<<<<<<<<
 *                     yi_q = pixel.yi
 * 
 */
          __pyx_t_25 = __pyx_v_pixel.xi;
          __pyx_v_xi_q = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":943
 *                     pit_queue.pop()
 *                     xi_q = pixel.xi
 *                     yi_q = pixel.yi             # <<<<<<<<<<<<<<
 * 
 *                     # search to see if the fill has gone on too long
 */
          __pyx_t_25 = __pyx_v_pixel.yi;
          __pyx_v_yi_q = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":946
 * 
 *                     # search to see if the fill has gone on too long
 *                     if (max_pixel_fill_count > 0 and             # <<<<<<<<<<<<<<
 *                             search_steps > max_pixel_fill_count):
 *                         # clear pit_queue and quit
 */
          __pyx_t_1 = ((__pyx_v_max_pixel_fill_count > 0) != 0);
          if (__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L71_bool_binop_done;
          }

          /* "src/geoprocessing/routing/routing.pyx":947
 *                     # search to see if the fill has gone on too long
 *                     if (max_pixel_fill_count > 0 and
 *                             search_steps > max_pixel_fill_count):             # <<<<<<<<<<<<<<
 *                         # clear pit_queue and quit
 *                         LOGGER.debug(
 */
          __pyx_t_1 = ((__pyx_v_search_steps > __pyx_v_max_pixel_fill_count) != 0);
          __pyx_t_2 = __pyx_t_1;
          __pyx_L71_bool_binop_done:;

          /* "src/geoprocessing/routing/routing.pyx":946
 * 
 *                     # search to see if the fill has gone on too long
 *                     if (max_pixel_fill_count > 0 and             # <<<<<<<<<<<<<<
 *                             search_steps > max_pixel_fill_count):
 *                         # clear pit_queue and quit
 */
          if (__pyx_t_2) {

            /* "src/geoprocessing/routing/routing.pyx":949
 *                             search_steps > max_pixel_fill_count):
 *                         # clear pit_queue and quit
 *                         LOGGER.debug(             # <<<<<<<<<<<<<<
 *                             'exceeded max pixel fill count when searching '
 *                             'for pour point')
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_debug); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
              }
            }
            __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_5, __pyx_kp_u_exceeded_max_pixel_fill_count_wh_2) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_kp_u_exceeded_max_pixel_fill_count_wh_2);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 949, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "src/geoprocessing/routing/routing.pyx":952
 *                             'exceeded max pixel fill count when searching '
 *                             'for pour point')
 *                         pit_queue = PitPriorityQueueType()             # <<<<<<<<<<<<<<
 *                         natural_drain_exists = 1
 *                         break
 */
            try {
              __pyx_t_28 = __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PitPriorityQueueType();
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 952, __pyx_L1_error)
            }
            __pyx_v_pit_queue = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":953
 *                             'for pour point')
 *                         pit_queue = PitPriorityQueueType()
 *                         natural_drain_exists = 1             # <<<<<<<<<<<<<<
 *                         break
 *                     search_steps += 1
 */
            __pyx_v_natural_drain_exists = 1;

            /* "src/geoprocessing/routing/routing.pyx":954
 *                         pit_queue = PitPriorityQueueType()
 *                         natural_drain_exists = 1
 *                         break             # <<<<<<<<<<<<<<
 *                     search_steps += 1
 * 
 */
            goto __pyx_L69_break;

            /* "src/geoprocessing/routing/routing.pyx":946
 * 
 *                     # search to see if the fill has gone on too long
 *                     if (max_pixel_fill_count > 0 and             # <<<<<<<<<<<<<<
 *                             search_steps > max_pixel_fill_count):
 *                         # clear pit_queue and quit
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":955
 *                         natural_drain_exists = 1
 *                         break
 *                     search_steps += 1             # <<<<<<<<<<<<<<
 * 
 *                     # this is the potential fill height if pixel is pour point
 */
          __pyx_v_search_steps = (__pyx_v_search_steps + 1);

          /* "src/geoprocessing/routing/routing.pyx":958
 * 
 *                     # this is the potential fill height if pixel is pour point
 *                     fill_height = pixel.value             # <<<<<<<<<<<<<<
 * 
 *                     for i_n in range(8):
 */
          __pyx_t_10 = __pyx_v_pixel.value;
          __pyx_v_fill_height = __pyx_t_10;

          /* "src/geoprocessing/routing/routing.pyx":960
 *                     fill_height = pixel.value
 * 
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_25 = 0; __pyx_t_25 < 8; __pyx_t_25+=1) {
            __pyx_v_i_n = __pyx_t_25;

            /* "src/geoprocessing/routing/routing.pyx":961
 * 
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":962
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":964
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # drain off the edge of the raster
 */
            __pyx_t_1 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L76_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L76_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":965
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             # drain off the edge of the raster
 *                             if not single_outlet:
 */
            __pyx_t_1 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L76_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L76_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":964
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # drain off the edge of the raster
 */
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":967
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # drain off the edge of the raster
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 pour_point = 1
 *                                 break
 */
              __pyx_t_2 = ((!(__pyx_v_single_outlet != 0)) != 0);
              if (__pyx_t_2) {

                /* "src/geoprocessing/routing/routing.pyx":968
 *                             # drain off the edge of the raster
 *                             if not single_outlet:
 *                                 pour_point = 1             # <<<<<<<<<<<<<<
 *                                 break
 *                             else:
 */
                __pyx_v_pour_point = 1;

                /* "src/geoprocessing/routing/routing.pyx":969
 *                             if not single_outlet:
 *                                 pour_point = 1
 *                                 break             # <<<<<<<<<<<<<<
 *                             else:
 *                                 continue
 */
                goto __pyx_L74_break;

                /* "src/geoprocessing/routing/routing.pyx":967
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # drain off the edge of the raster
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 pour_point = 1
 *                                 break
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":971
 *                                 break
 *                             else:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                         if pit_mask_managed_raster.get(
 */
              /*else*/ {
                goto __pyx_L73_continue;
              }

              /* "src/geoprocessing/routing/routing.pyx":964
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # drain off the edge of the raster
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":974
 * 
 *                         if pit_mask_managed_raster.get(
 *                                 xi_n, yi_n) == feature_id:             # <<<<<<<<<<<<<<
 *                             # this cell has already been processed
 *                             continue
 */
            __pyx_t_2 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_pit_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == __pyx_v_feature_id) != 0);

            /* "src/geoprocessing/routing/routing.pyx":973
 *                                 continue
 * 
 *                         if pit_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n) == feature_id:
 *                             # this cell has already been processed
 */
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":976
 *                                 xi_n, yi_n) == feature_id:
 *                             # this cell has already been processed
 *                             continue             # <<<<<<<<<<<<<<
 *                         # mark as visited in the search for pour point
 *                         pit_mask_managed_raster.set(xi_n, yi_n, feature_id)
 */
              goto __pyx_L73_continue;

              /* "src/geoprocessing/routing/routing.pyx":973
 *                                 continue
 * 
 *                         if pit_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n) == feature_id:
 *                             # this cell has already been processed
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":978
 *                             continue
 *                         # mark as visited in the search for pour point
 *                         pit_mask_managed_raster.set(xi_n, yi_n, feature_id)             # <<<<<<<<<<<<<<
 * 
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_pit_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, __pyx_v_feature_id);

            /* "src/geoprocessing/routing/routing.pyx":980
 *                         pit_mask_managed_raster.set(xi_n, yi_n, feature_id)
 * 
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                         if (single_outlet and xi_n == outlet_x
 *                                 and yi_n == outlet_y):
 */
            __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

            /* "src/geoprocessing/routing/routing.pyx":981
 * 
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if (single_outlet and xi_n == outlet_x             # <<<<<<<<<<<<<<
 *                                 and yi_n == outlet_y):
 *                             fill_height = n_height
 */
            __pyx_t_1 = (__pyx_v_single_outlet != 0);
            if (__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L83_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":982
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if (single_outlet and xi_n == outlet_x
 *                                 and yi_n == outlet_y):             # <<<<<<<<<<<<<<
 *                             fill_height = n_height
 *                             pour_point = 1
 */
            __pyx_t_1 = ((__pyx_v_xi_n == __pyx_v_outlet_x) != 0);
            if (__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L83_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_yi_n == __pyx_v_outlet_y) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L83_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":981
 * 
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if (single_outlet and xi_n == outlet_x             # <<<<<<<<<<<<<<
 *                                 and yi_n == outlet_y):
 *                             fill_height = n_height
 */
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":983
 *                         if (single_outlet and xi_n == outlet_x
 *                                 and yi_n == outlet_y):
 *                             fill_height = n_height             # <<<<<<<<<<<<<<
 *                             pour_point = 1
 *                             break
 */
              __pyx_v_fill_height = __pyx_v_n_height;

              /* "src/geoprocessing/routing/routing.pyx":984
 *                                 and yi_n == outlet_y):
 *                             fill_height = n_height
 *                             pour_point = 1             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
              __pyx_v_pour_point = 1;

              /* "src/geoprocessing/routing/routing.pyx":985
 *                             fill_height = n_height
 *                             pour_point = 1
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
              goto __pyx_L74_break;

              /* "src/geoprocessing/routing/routing.pyx":981
 * 
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if (single_outlet and xi_n == outlet_x             # <<<<<<<<<<<<<<
 *                                 and yi_n == outlet_y):
 *                             fill_height = n_height
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":987
 *                             break
 * 
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             # we encounter a neighbor not processed that
 *                             # is nodata
 */
            __pyx_t_2 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":990
 *                             # we encounter a neighbor not processed that
 *                             # is nodata
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 # it's only a pour point if we aren't in
 *                                 # single outlet mode
 */
              __pyx_t_2 = ((!(__pyx_v_single_outlet != 0)) != 0);
              if (__pyx_t_2) {

                /* "src/geoprocessing/routing/routing.pyx":993
 *                                 # it's only a pour point if we aren't in
 *                                 # single outlet mode
 *                                 pour_point = 1             # <<<<<<<<<<<<<<
 *                             # skip so we don't go negative
 *                             continue
 */
                __pyx_v_pour_point = 1;

                /* "src/geoprocessing/routing/routing.pyx":990
 *                             # we encounter a neighbor not processed that
 *                             # is nodata
 *                             if not single_outlet:             # <<<<<<<<<<<<<<
 *                                 # it's only a pour point if we aren't in
 *                                 # single outlet mode
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":995
 *                                 pour_point = 1
 *                             # skip so we don't go negative
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_height < fill_height:
 *                             # we encounter a neighbor not processed that is
 */
              goto __pyx_L73_continue;

              /* "src/geoprocessing/routing/routing.pyx":987
 *                             break
 * 
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             # we encounter a neighbor not processed that
 *                             # is nodata
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":996
 *                             # skip so we don't go negative
 *                             continue
 *                         if n_height < fill_height:             # <<<<<<<<<<<<<<
 *                             # we encounter a neighbor not processed that is
 *                             # lower than the current pixel
 */
            __pyx_t_2 = ((__pyx_v_n_height < __pyx_v_fill_height) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":999
 *                             # we encounter a neighbor not processed that is
 *                             # lower than the current pixel
 *                             pour_point = 1             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
              __pyx_v_pour_point = 1;

              /* "src/geoprocessing/routing/routing.pyx":1000
 *                             # lower than the current pixel
 *                             pour_point = 1
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                         # push onto queue, set the priority to be the block
 */
              goto __pyx_L74_break;

              /* "src/geoprocessing/routing/routing.pyx":996
 *                             # skip so we don't go negative
 *                             continue
 *                         if n_height < fill_height:             # <<<<<<<<<<<<<<
 *                             # we encounter a neighbor not processed that is
 *                             # lower than the current pixel
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1005
 *                         # index
 *                         pixel = PixelType(
 *                             n_height, xi_n, yi_n, (             # <<<<<<<<<<<<<<
 *                                 n_x_blocks * (yi_n >> BLOCK_BITS) +
 *                                 xi_n >> BLOCK_BITS))
 */
            __pyx_t_27.value = __pyx_v_n_height;
            __pyx_t_27.xi = __pyx_v_xi_n;
            __pyx_t_27.yi = __pyx_v_yi_n;

            /* "src/geoprocessing/routing/routing.pyx":1007
 *                             n_height, xi_n, yi_n, (
 *                                 n_x_blocks * (yi_n >> BLOCK_BITS) +
 *                                 xi_n >> BLOCK_BITS))             # <<<<<<<<<<<<<<
 *                         pit_queue.push(pixel)
 * 
 */
            __pyx_t_27.priority = (((__pyx_v_n_x_blocks * (__pyx_v_yi_n >> __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS)) + __pyx_v_xi_n) >> __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS);
            __pyx_v_pixel = __pyx_t_27;

            /* "src/geoprocessing/routing/routing.pyx":1008
 *                                 n_x_blocks * (yi_n >> BLOCK_BITS) +
 *                                 xi_n >> BLOCK_BITS))
 *                         pit_queue.push(pixel)             # <<<<<<<<<<<<<<
 * 
 *                     if pour_point:
 */
            __pyx_v_pit_queue.push(__pyx_v_pixel);
            __pyx_L73_continue:;
          }
          __pyx_L74_break:;

          /* "src/geoprocessing/routing/routing.pyx":1010
 *                         pit_queue.push(pixel)
 * 
 *                     if pour_point:             # <<<<<<<<<<<<<<
 *                         # found a pour point, clear the queue
 *                         pit_queue = PitPriorityQueueType()
 */
          __pyx_t_2 = (__pyx_v_pour_point != 0);
          if (__pyx_t_2) {

            /* "src/geoprocessing/routing/routing.pyx":1012
 *                     if pour_point:
 *                         # found a pour point, clear the queue
 *                         pit_queue = PitPriorityQueueType()             # <<<<<<<<<<<<<<
 * 
 *                         # start from original pit seed rather than pour point
 */
            try {
              __pyx_t_28 = __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PitPriorityQueueType();
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 1012, __pyx_L1_error)
            }
            __pyx_v_pit_queue = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":1020
 *                         # differentiate the pixels on the inside of the pit
 *                         # and the outside.
 *                         fill_queue.push(CoordinateType(xi_root, yi_root))             # <<<<<<<<<<<<<<
 *                         filled_dem_managed_raster.set(
 *                             xi_root, yi_root, fill_height)
 */
            __pyx_t_26.xi = __pyx_v_xi_root;
            __pyx_t_26.yi = __pyx_v_yi_root;
            __pyx_v_fill_queue.push(__pyx_t_26);

            /* "src/geoprocessing/routing/routing.pyx":1021
 *                         # and the outside.
 *                         fill_queue.push(CoordinateType(xi_root, yi_root))
 *                         filled_dem_managed_raster.set(             # <<<<<<<<<<<<<<
 *                             xi_root, yi_root, fill_height)
 * 
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, __pyx_v_fill_height);

            /* "src/geoprocessing/routing/routing.pyx":1010
 *                         pit_queue.push(pixel)
 * 
 *                     if pour_point:             # <<<<<<<<<<<<<<
 *                         # found a pour point, clear the queue
 *                         pit_queue = PitPriorityQueueType()
 */
          }
        }
        __pyx_L69_break:;

        /* "src/geoprocessing/routing/routing.pyx":1025
 * 
 *                 # this loop does a BFS to set all DEM pixels to `fill_height`
 *                 while not fill_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = fill_queue.front().xi
 *                     yi_q = fill_queue.front().yi
 */
        while (1) {
          __pyx_t_2 = ((!(__pyx_v_fill_queue.empty() != 0)) != 0);
          if (!__pyx_t_2) break;

          /* "src/geoprocessing/routing/routing.pyx":1026
 *                 # this loop does a BFS to set all DEM pixels to `fill_height`
 *                 while not fill_queue.empty():
 *                     xi_q = fill_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = fill_queue.front().yi
 *                     fill_queue.pop()
 */
          __pyx_t_25 = __pyx_v_fill_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":1027
 *                 while not fill_queue.empty():
 *                     xi_q = fill_queue.front().xi
 *                     yi_q = fill_queue.front().yi             # <<<<<<<<<<<<<<
 *                     fill_queue.pop()
 * 
 */
          __pyx_t_25 = __pyx_v_fill_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_25;

          /* "src/geoprocessing/routing/routing.pyx":1028
 *                     xi_q = fill_queue.front().xi
 *                     yi_q = fill_queue.front().yi
 *                     fill_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                     for i_n in range(8):
 */
          __pyx_v_fill_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":1030
 *                     fill_queue.pop()
 * 
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_25 = 0; __pyx_t_25 < 8; __pyx_t_25+=1) {
            __pyx_v_i_n = __pyx_t_25;

            /* "src/geoprocessing/routing/routing.pyx":1031
 * 
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1032
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1033
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            __pyx_t_1 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L95_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L95_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1034
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 */
            __pyx_t_1 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L95_bool_binop_done;
            }
            __pyx_t_1 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L95_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1033
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":1035
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
              goto __pyx_L92_continue;

              /* "src/geoprocessing/routing/routing.pyx":1033
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1036
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             continue
 */
            __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

            /* "src/geoprocessing/routing/routing.pyx":1037
 *                             continue
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_height < fill_height:
 */
            __pyx_t_2 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":1038
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_height < fill_height:
 *                             filled_dem_managed_raster.set(
 */
              goto __pyx_L92_continue;

              /* "src/geoprocessing/routing/routing.pyx":1037
 *                             continue
 *                         n_height = filled_dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_height < fill_height:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1039
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             continue
 *                         if n_height < fill_height:             # <<<<<<<<<<<<<<
 *                             filled_dem_managed_raster.set(
 *                                 xi_n, yi_n, fill_height)
 */
            __pyx_t_2 = ((__pyx_v_n_height < __pyx_v_fill_height) != 0);
            if (__pyx_t_2) {

              /* "src/geoprocessing/routing/routing.pyx":1040
 *                             continue
 *                         if n_height < fill_height:
 *                             filled_dem_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n, fill_height)
 *                             fill_queue.push(CoordinateType(xi_n, yi_n))
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_filled_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, __pyx_v_fill_height);

              /* "src/geoprocessing/routing/routing.pyx":1042
 *                             filled_dem_managed_raster.set(
 *                                 xi_n, yi_n, fill_height)
 *                             fill_queue.push(CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 * 
 *     pit_mask_managed_raster.close()
 */
              __pyx_t_26.xi = __pyx_v_xi_n;
              __pyx_t_26.yi = __pyx_v_yi_n;
              __pyx_v_fill_queue.push(__pyx_t_26);

              /* "src/geoprocessing/routing/routing.pyx":1039
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             continue
 *                         if n_height < fill_height:             # <<<<<<<<<<<<<<
 *                             filled_dem_managed_raster.set(
 *                                 xi_n, yi_n, fill_height)
 */
            }
            __pyx_L92_continue:;
          }
        }
        __pyx_L25_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":790
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1044
 *                             fill_queue.push(CoordinateType(xi_n, yi_n))
 * 
 *     pit_mask_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flat_region_mask_managed_raster.close()
 *     shutil.rmtree(working_dir_path)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pit_mask_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1045
 * 
 *     pit_mask_managed_raster.close()
 *     flat_region_mask_managed_raster.close()             # <<<<<<<<<<<<<<
 *     shutil.rmtree(working_dir_path)
 *     LOGGER.info('(fill pits): complete')
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flat_region_mask_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1046
 *     pit_mask_managed_raster.close()
 *     flat_region_mask_managed_raster.close()
 *     shutil.rmtree(working_dir_path)             # <<<<<<<<<<<<<<
 *     LOGGER.info('(fill pits): complete')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_shutil); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_4, __pyx_v_working_dir_path) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1047
 *     flat_region_mask_managed_raster.close()
 *     shutil.rmtree(working_dir_path)
 *     LOGGER.info('(fill pits): complete')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_14, __pyx_kp_u_fill_pits_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_fill_pits_complete);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":608
 * 
 * 
 * def fill_pits(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_filled_dem_raster_path,
 *         working_dir=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.fill_pits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dem_raster_info);
  __Pyx_XDECREF(__pyx_v_base_nodata);
  __Pyx_XDECREF(__pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_v_flat_region_mask_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_flat_region_mask_managed_raster);
  __Pyx_XDECREF(__pyx_v_pit_mask_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_pit_mask_managed_raster);
  __Pyx_XDECREF(__pyx_v_base_datatype);
  __Pyx_XDECREF(__pyx_v_filled_dem_raster);
  __Pyx_XDECREF(__pyx_v_filled_dem_band);
  __Pyx_XDECREF(__pyx_v_offset_info);
  __Pyx_XDECREF(__pyx_v_block_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_filled_dem_managed_raster);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":1050
 * 
 * 
 * def flow_dir_d8(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_5flow_dir_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_4flow_dir_d8[] = "D8 flow direction.\n\n    Parameters:\n        dem_raster_path_band (tuple): a path, band number tuple indicating the\n            DEM calculate flow direction. This DEM must not have hydrological\n            pits or else the target flow direction is undefined.\n        target_flow_dir_path (str): path to a byte raster created by this\n            call of same dimensions as ``dem_raster_path_band`` that has a value\n            indicating the direction of downhill flow. Values are defined as\n            pointing to one of the eight neighbors with the following\n            convention::\n\n                3 2 1\n                4 x 0\n                5 6 7\n\n        working_dir (str): If not None, indicates where temporary files\n            should be created during this run. If this directory doesn't exist\n            it is created by this call.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_5flow_dir_d8 = {"flow_dir_d8", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_5flow_dir_d8, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_4flow_dir_d8};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_5flow_dir_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dem_raster_path_band = 0;
  PyObject *__pyx_v_target_flow_dir_path = 0;
  PyObject *__pyx_v_working_dir = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_dir_d8 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dem_raster_path_band,&__pyx_n_s_target_flow_dir_path,&__pyx_n_s_working_dir,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[4] = {0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":1052
 * def flow_dir_d8(
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """D8 flow direction.
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = __pyx_k__5;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dem_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_flow_dir_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_dir_d8", 0, 2, 4, 1); __PYX_ERR(0, 1050, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_dir_d8") < 0)) __PYX_ERR(0, 1050, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dem_raster_path_band = values[0];
    __pyx_v_target_flow_dir_path = values[1];
    __pyx_v_working_dir = values[2];
    __pyx_v_raster_driver_creation_tuple = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_dir_d8", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1050, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_dir_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_4flow_dir_d8(__pyx_self, __pyx_v_dem_raster_path_band, __pyx_v_target_flow_dir_path, __pyx_v_working_dir, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":1050
 * 
 * 
 * def flow_dir_d8(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_4flow_dir_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_flow_dir_path, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyArrayObject *__pyx_v_dem_buffer_array = 0;
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_q;
  int __pyx_v_yi_q;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  double __pyx_v_root_height;
  double __pyx_v_n_height;
  double __pyx_v_dem_nodata;
  double __pyx_v_drain_distance;
  double __pyx_v_n_drain_distance;
  int __pyx_v_diagonal_nodata;
  std::queue<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType>  __pyx_v_search_queue;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_drain_queue;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_nodata_drain_queue;
  std::queue<int>  __pyx_v_nodata_flow_dir_queue;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_dem_raster_info = NULL;
  PyObject *__pyx_v_base_nodata = NULL;
  long __pyx_v_mask_nodata;
  PyObject *__pyx_v_working_dir_path = NULL;
  PyObject *__pyx_v_flat_region_mask_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flat_region_mask_managed_raster = NULL;
  long __pyx_v_flow_dir_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  PyObject *__pyx_v_plateau_distance_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_plateau_distance_managed_raster = NULL;
  PyObject *__pyx_v_compatable_dem_raster_path_band = NULL;
  PyObject *__pyx_v_dem_block_xsize = NULL;
  PyObject *__pyx_v_dem_block_ysize = NULL;
  PyObject *__pyx_v_raster_driver = NULL;
  PyObject *__pyx_v_dem_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_dem_managed_raster = NULL;
  PyObject *__pyx_v_dem_band = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  int __pyx_v_current_pixel;
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_modified_offset_dict = NULL;
  long __pyx_v_largest_slope_dir;
  double __pyx_v_largest_slope;
  double __pyx_v_n_slope;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_dem_buffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  Py_ssize_t __pyx_t_19;
  Py_UCS4 __pyx_t_20;
  PyArrayObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType __pyx_t_32;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_IntQueueType __pyx_t_33;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_t_34;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flow_dir_d8", 0);
  __pyx_pybuffer_dem_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_buffer_array.refcount = 0;
  __pyx_pybuffernd_dem_buffer_array.data = NULL;
  __pyx_pybuffernd_dem_buffer_array.rcbuffer = &__pyx_pybuffer_dem_buffer_array;

  /* "src/geoprocessing/routing/routing.pyx":1126
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     # determine dem nodata in the working type, or set an improbable value
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":1130
 *     # determine dem nodata in the working type, or set an improbable value
 *     # if one can't be determined
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_raster_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1131
 *     # if one can't be determined
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *     if base_nodata is not None:
 *         # cast to a float64 since that's our operating array type
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_base_nodata = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1132
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:             # <<<<<<<<<<<<<<
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)
 */
  __pyx_t_5 = (__pyx_v_base_nodata != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "src/geoprocessing/routing/routing.pyx":1134
 *     if base_nodata is not None:
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)             # <<<<<<<<<<<<<<
 *     else:
 *         # pick some very improbable value since it's hard to deal with NaNs
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_base_nodata) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_base_nodata);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dem_nodata = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":1132
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:             # <<<<<<<<<<<<<<
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)
 */
    goto __pyx_L3;
  }

  /* "src/geoprocessing/routing/routing.pyx":1137
 *     else:
 *         # pick some very improbable value since it's hard to deal with NaNs
 *         dem_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     # these are used to determine if a sample is within the raster
 */
  /*else*/ {
    __pyx_v_dem_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;
  }
  __pyx_L3:;

  /* "src/geoprocessing/routing/routing.pyx":1140
 * 
 *     # these are used to determine if a sample is within the raster
 *     raster_x_size, raster_y_size = dem_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     # this is the nodata value for all the flat region and pit masks
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1140, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1140, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_raster_x_size = __pyx_t_9;
  __pyx_v_raster_y_size = __pyx_t_10;

  /* "src/geoprocessing/routing/routing.pyx":1143
 * 
 *     # this is the nodata value for all the flat region and pit masks
 *     mask_nodata = 0             # <<<<<<<<<<<<<<
 * 
 *     # set up the working dir for the mask rasters
 */
  __pyx_v_mask_nodata = 0;

  /* "src/geoprocessing/routing/routing.pyx":1146
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "src/geoprocessing/routing/routing.pyx":1147
 *     # set up the working dir for the mask rasters
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      __pyx_t_6 = (__pyx_v_working_dir != Py_None);
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/routing.pyx":1148
 *     try:
 *         if working_dir is not None:
 *             os.makedirs(working_dir)             # <<<<<<<<<<<<<<
 *     except OSError:
 *         pass
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1148, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_working_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_working_dir);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1148, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":1147
 *     # set up the working dir for the mask rasters
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":1146
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    }
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L11_try_end;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1149
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 *     except OSError:             # <<<<<<<<<<<<<<
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_10) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L7_exception_handled;
    }
    goto __pyx_L8_except_error;
    __pyx_L8_except_error:;

    /* "src/geoprocessing/routing/routing.pyx":1146
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L7_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    __pyx_L11_try_end:;
  }

  /* "src/geoprocessing/routing/routing.pyx":1151
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir, prefix='flow_dir_d8_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1152
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='flow_dir_d8_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dir, __pyx_v_working_dir) < 0) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_strftime); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1153
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='flow_dir_d8_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))             # <<<<<<<<<<<<<<
 * 
 *     # this raster is used to keep track of what pixels have been searched for
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_gmtime); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
    }
  }
  __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_16) {
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __pyx_t_16 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_kp_u_Y_m_d__H__M__S);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_10, __pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1152
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='flow_dir_d8_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_14 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_flow_dir_d8__s, __pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefix, __pyx_t_14) < 0) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1151
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir, prefix='flow_dir_d8_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_working_dir_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1158
 *     # a plateau. if a pixel is set, it means it is part of a locally
 *     # undrained area
 *     flat_region_mask_path = os.path.join(             # <<<<<<<<<<<<<<
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1159
 *     # undrained area
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 */
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_working_dir_path, __pyx_kp_u_flat_region_mask_tif};
    __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_working_dir_path, __pyx_kp_u_flat_region_mask_tif};
    __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_10, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_flat_region_mask_tif);
    __Pyx_GIVEREF(__pyx_kp_u_flat_region_mask_tif);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_10, __pyx_kp_u_flat_region_mask_tif);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flat_region_mask_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1160
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1161
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,             # <<<<<<<<<<<<<<
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1162
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flat_region_mask_managed_raster = _ManagedRaster(
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_mask_nodata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1160
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_v_flat_region_mask_path);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_15);
  __pyx_t_14 = 0;
  __pyx_t_1 = 0;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1163
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     flat_region_mask_managed_raster = _ManagedRaster(
 *         flat_region_mask_path, 1, 1)
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1163, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1160
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1164
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flat_region_mask_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flat_region_mask_path, 1, 1)
 * 
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_v_flat_region_mask_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_flat_region_mask_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_1);
  __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flat_region_mask_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1167
 *         flat_region_mask_path, 1, 1)
 * 
 *     flow_dir_nodata = 128             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,
 */
  __pyx_v_flow_dir_nodata = 0x80;

  /* "src/geoprocessing/routing/routing.pyx":1168
 * 
 *     flow_dir_nodata = 128
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,
 *         [flow_dir_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1169
 *     flow_dir_nodata = 128
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,             # <<<<<<<<<<<<<<
 *         [flow_dir_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1170
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,
 *         [flow_dir_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1168
 * 
 *     flow_dir_nodata = 128
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,
 *         [flow_dir_nodata],
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_target_flow_dir_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_dir_path);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_target_flow_dir_path);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_14);
  __pyx_t_15 = 0;
  __pyx_t_3 = 0;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1171
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,
 *         [flow_dir_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)
 * 
 */
  __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1168
 * 
 *     flow_dir_nodata = 128
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Byte,
 *         [flow_dir_nodata],
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1172
 *         [flow_dir_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)             # <<<<<<<<<<<<<<
 * 
 *     # this creates a raster that's used for a dynamic programming solution to
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_target_flow_dir_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_dir_path);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_target_flow_dir_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
  __pyx_t_14 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1178
 *     # raster_x_size * raster_y_size as a distance that's greater than the
 *     # longest plateau drain distance possible for this raster.
 *     plateau_distance_path = os.path.join(             # <<<<<<<<<<<<<<
 *         working_dir_path, 'plateau_distance.tif')
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1179
 *     # longest plateau drain distance possible for this raster.
 *     plateau_distance_path = os.path.join(
 *         working_dir_path, 'plateau_distance.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 */
  __pyx_t_2 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_working_dir_path, __pyx_kp_u_plateau_distance_tif};
    __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_working_dir_path, __pyx_kp_u_plateau_distance_tif};
    __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_plateau_distance_tif);
    __Pyx_GIVEREF(__pyx_kp_u_plateau_distance_tif);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_kp_u_plateau_distance_tif);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_plateau_distance_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1180
 *     plateau_distance_path = os.path.join(
 *         working_dir_path, 'plateau_distance.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1181
 *         working_dir_path, 'plateau_distance.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,             # <<<<<<<<<<<<<<
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1182
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_distance_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_neg_1);

  /* "src/geoprocessing/routing/routing.pyx":1180
 *     plateau_distance_path = os.path.join(
 *         working_dir_path, 'plateau_distance.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],
 */
  __pyx_t_15 = PyTuple_New(4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_plateau_distance_path);
  __Pyx_GIVEREF(__pyx_v_plateau_distance_path);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_v_plateau_distance_path);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_1);
  __pyx_t_14 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1182
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_distance_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_raster_x_size * __pyx_v_raster_y_size)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fill_value_list, __pyx_t_14) < 0) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1183
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     plateau_distance_managed_raster = _ManagedRaster(
 *         plateau_distance_path, 1, 1)
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1182, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1180
 *     plateau_distance_path = os.path.join(
 *         working_dir_path, 'plateau_distance.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_15, __pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1184
 *         [-1], fill_value_list=[raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_distance_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         plateau_distance_path, 1, 1)
 * 
 */
  __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_v_plateau_distance_path);
  __Pyx_GIVEREF(__pyx_v_plateau_distance_path);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_plateau_distance_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_int_1);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_plateau_distance_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1189
 *     # this raster is for random access of the DEM
 * 
 *     compatable_dem_raster_path_band = None             # <<<<<<<<<<<<<<
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_compatable_dem_raster_path_band = Py_None;

  /* "src/geoprocessing/routing/routing.pyx":1190
 * 
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']             # <<<<<<<<<<<<<<
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_block_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1190, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_14 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_t_15);
    #else
    __pyx_t_14 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_14 = __pyx_t_8(__pyx_t_3); if (unlikely(!__pyx_t_14)) goto __pyx_L13_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_14);
    index = 1; __pyx_t_15 = __pyx_t_8(__pyx_t_3); if (unlikely(!__pyx_t_15)) goto __pyx_L13_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_15);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_3), 2) < 0) __PYX_ERR(0, 1190, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L14_unpacking_done;
    __pyx_L13_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1190, __pyx_L1_error)
    __pyx_L14_unpacking_done:;
  }
  __pyx_v_dem_block_xsize = __pyx_t_14;
  __pyx_t_14 = 0;
  __pyx_v_dem_block_ysize = __pyx_t_15;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1191
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 */
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_dem_block_xsize, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyNumber_And(__pyx_v_dem_block_xsize, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_t_15, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L16_bool_binop_done;
  }

  /* "src/geoprocessing/routing/routing.pyx":1192
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):             # <<<<<<<<<<<<<<
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 *         compatable_dem_raster_path_band = (
 */
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_dem_block_ysize, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyNumber_And(__pyx_v_dem_block_ysize, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_t_15, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L16_bool_binop_done:;

  /* "src/geoprocessing/routing/routing.pyx":1191
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 */
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":1193
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_warning); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_kp_u_dem_is_not_a_power_of_2_creating) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_kp_u_dem_is_not_a_power_of_2_creating);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1195
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),             # <<<<<<<<<<<<<<
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_os); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_path); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_join); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_working_dir_path, __pyx_kp_u_compatable_dem_tif};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_working_dir_path, __pyx_kp_u_compatable_dem_tif};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_15) {
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_15); __pyx_t_15 = NULL;
      }
      __Pyx_INCREF(__pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_v_working_dir_path);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_working_dir_path);
      __Pyx_INCREF(__pyx_kp_u_compatable_dem_tif);
      __Pyx_GIVEREF(__pyx_kp_u_compatable_dem_tif);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_kp_u_compatable_dem_tif);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1196
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),
 *             dem_raster_path_band[1])             # <<<<<<<<<<<<<<
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 */
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);

    /* "src/geoprocessing/routing/routing.pyx":1195
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),             # <<<<<<<<<<<<<<
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_14);
    __pyx_t_1 = 0;
    __pyx_t_14 = 0;
    __Pyx_DECREF_SET(__pyx_v_compatable_dem_raster_path_band, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1197
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])             # <<<<<<<<<<<<<<
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_gdal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_raster_driver_creation_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_15, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_14);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_raster_driver = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1198
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *         raster_driver.CreateCopy(
 *             compatable_dem_raster_path_band[0], dem_raster,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_gdal); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_1, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_1, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_15) {
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15); __pyx_t_15 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_dem_raster = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1199
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_driver, __pyx_n_s_CreateCopy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "src/geoprocessing/routing/routing.pyx":1200
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(
 *             compatable_dem_raster_path_band[0], dem_raster,             # <<<<<<<<<<<<<<
 *             options=raster_driver_creation_tuple[1])
 *         dem_raster = None
 */
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);

    /* "src/geoprocessing/routing/routing.pyx":1199
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14);
    __Pyx_INCREF(__pyx_v_dem_raster);
    __Pyx_GIVEREF(__pyx_v_dem_raster);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_dem_raster);
    __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1201
 *         raster_driver.CreateCopy(
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])             # <<<<<<<<<<<<<<
 *         dem_raster = None
 *         LOGGER.info("compatible dem complete")
 */
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_raster_driver_creation_tuple, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_options, __pyx_t_2) < 0) __PYX_ERR(0, 1201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1199
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1202
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 *         dem_raster = None             # <<<<<<<<<<<<<<
 *         LOGGER.info("compatible dem complete")
 *     else:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_dem_raster, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":1203
 *             options=raster_driver_creation_tuple[1])
 *         dem_raster = None
 *         LOGGER.info("compatible dem complete")             # <<<<<<<<<<<<<<
 *     else:
 *         compatable_dem_raster_path_band = dem_raster_path_band
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_14, __pyx_kp_u_compatible_dem_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_compatible_dem_complete);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1191
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 */
    goto __pyx_L15;
  }

  /* "src/geoprocessing/routing/routing.pyx":1205
 *         LOGGER.info("compatible dem complete")
 *     else:
 *         compatable_dem_raster_path_band = dem_raster_path_band             # <<<<<<<<<<<<<<
 *     dem_managed_raster = _ManagedRaster(
 *         compatable_dem_raster_path_band[0],
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_dem_raster_path_band);
    __Pyx_DECREF_SET(__pyx_v_compatable_dem_raster_path_band, __pyx_v_dem_raster_path_band);
  }
  __pyx_L15:;

  /* "src/geoprocessing/routing/routing.pyx":1207
 *         compatable_dem_raster_path_band = dem_raster_path_band
 *     dem_managed_raster = _ManagedRaster(
 *         compatable_dem_raster_path_band[0],             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[1], 0)
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":1208
 *     dem_managed_raster = _ManagedRaster(
 *         compatable_dem_raster_path_band[0],
 *         compatable_dem_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     # and this raster is for efficient block-by-block reading of the dem
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":1206
 *     else:
 *         compatable_dem_raster_path_band = dem_raster_path_band
 *     dem_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[0],
 *         compatable_dem_raster_path_band[1], 0)
 */
  __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_dem_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1211
 * 
 *     # and this raster is for efficient block-by-block reading of the dem
 *     dem_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)
 *     dem_band = dem_raster.GetRasterBand(compatable_dem_raster_path_band[1])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_gdal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1212
 *     # and this raster is for efficient block-by-block reading of the dem
 *     dem_raster = gdal.OpenEx(
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     dem_band = dem_raster.GetRasterBand(compatable_dem_raster_path_band[1])
 * 
 */
  __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_14, __pyx_t_1};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_14, __pyx_t_1};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_10, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_10, __pyx_t_1);
    __pyx_t_14 = 0;
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XDECREF_SET(__pyx_v_dem_raster, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1213
 *     dem_raster = gdal.OpenEx(
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)
 *     dem_band = dem_raster.GetRasterBand(compatable_dem_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_15);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dem_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1216
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1217
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             compatable_dem_raster_path_band, offset_only=True,             # <<<<<<<<<<<<<<
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_compatable_dem_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_compatable_dem_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_compatable_dem_raster_path_band);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1216
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_15 = __pyx_t_1; __Pyx_INCREF(__pyx_t_15); __pyx_t_17 = 0;
    __pyx_t_18 = NULL;
  } else {
    __pyx_t_17 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_18 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1216, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_18)) {
      if (likely(PyList_CheckExact(__pyx_t_15))) {
        if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_15)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1216, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1216, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_18(__pyx_t_15);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1216, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1219
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_win_xsize = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1220
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_win_ysize = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1221
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_xoff = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1222
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1222, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_yoff = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1224
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":1225
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":1226
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(flow dir d8): '
 */
      __pyx_v_current_pixel = (__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size));

      /* "src/geoprocessing/routing/routing.pyx":1227
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(flow dir d8): '
 *                 f'{current_pixel} of {raster_x_size*raster_y_size} '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":1228
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 *                 '(flow dir d8): '             # <<<<<<<<<<<<<<
 *                 f'{current_pixel} of {raster_x_size*raster_y_size} '
 *                 f'pixels complete')
 */
      __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_19 = 0;
      __pyx_t_20 = 127;
      __Pyx_INCREF(__pyx_kp_u_flow_dir_d8);
      __pyx_t_19 += 15;
      __Pyx_GIVEREF(__pyx_kp_u_flow_dir_d8);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_flow_dir_d8);

      /* "src/geoprocessing/routing/routing.pyx":1229
 *             LOGGER.info(
 *                 '(flow dir d8): '
 *                 f'{current_pixel} of {raster_x_size*raster_y_size} '             # <<<<<<<<<<<<<<
 *                 f'pixels complete')
 * 
 */
      __pyx_t_14 = __Pyx_PyUnicode_From_int(__pyx_v_current_pixel, 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_19 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_of);
      __pyx_t_14 = __Pyx_PyUnicode_From_int((__pyx_v_raster_x_size * __pyx_v_raster_y_size), 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_pixels_complete);
      __pyx_t_19 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_pixels_complete);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_pixels_complete);

      /* "src/geoprocessing/routing/routing.pyx":1228
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 *                 '(flow dir d8): '             # <<<<<<<<<<<<<<
 *                 f'{current_pixel} of {raster_x_size*raster_y_size} '
 *                 f'pixels complete')
 */
      __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":1224
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":1233
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1234
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.float64)
 *         dem_buffer_array[:] = dem_nodata
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __pyx_t_14 = 0;
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1233
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1235
 *         dem_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)             # <<<<<<<<<<<<<<
 *         dem_buffer_array[:] = dem_nodata
 * 
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_numpy); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1233
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1233, __pyx_L1_error)
    __pyx_t_21 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer);
      __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_21, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_10 < 0)) {
        PyErr_Fetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_dem_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
        }
        __pyx_t_13 = __pyx_t_12 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_dem_buffer_array.diminfo[0].strides = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_buffer_array.diminfo[1].strides = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1233, __pyx_L1_error)
    }
    __pyx_t_21 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dem_buffer_array, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1236
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 *         dem_buffer_array[:] = dem_nodata             # <<<<<<<<<<<<<<
 * 
 *         # attempt to expand read block by a pixel boundary
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_dem_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_dem_buffer_array), __pyx_slice__6, __pyx_t_3) < 0)) __PYX_ERR(0, 1236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1239
 * 
 *         # attempt to expand read block by a pixel boundary
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_generate_read_bounds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":1240
 *         # attempt to expand read block by a pixel boundary
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)             # <<<<<<<<<<<<<<
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.float64)
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_raster_x_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_raster_y_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_offset_dict, __pyx_t_4, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_offset_dict, __pyx_t_4, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_INCREF(__pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_v_offset_dict);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_10, __pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_10, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_10, __pyx_t_2);
      __pyx_t_4 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1239, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_16);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_16 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_16)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1239, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L22_unpacking_done;
      __pyx_L21_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1239, __pyx_L1_error)
      __pyx_L22_unpacking_done:;
    }

    /* "src/geoprocessing/routing/routing.pyx":1239
 * 
 *         # attempt to expand read block by a pixel boundary
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 */
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1239, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_22 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_22 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_22);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_4,&__pyx_t_14,&__pyx_t_22};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1239, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_4,&__pyx_t_14,&__pyx_t_22};
      __pyx_t_23 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_23)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_8(__pyx_t_23); if (unlikely(!item)) goto __pyx_L23_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_23), 4) < 0) __PYX_ERR(0, 1239, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      goto __pyx_L24_unpacking_done;
      __pyx_L23_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1239, __pyx_L1_error)
      __pyx_L24_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xa, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xb, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ya, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_XDECREF_SET(__pyx_v_yb, __pyx_t_22);
    __pyx_t_22 = 0;
    __Pyx_XDECREF_SET(__pyx_v_modified_offset_dict, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1241
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.float64)
 * 
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);

    /* "src/geoprocessing/routing/routing.pyx":1242
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.float64)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 1242, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_1 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_1 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }

    /* "src/geoprocessing/routing/routing.pyx":1241
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.float64)
 * 
 */
    __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1242
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.float64)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_22, __pyx_n_s_numpy); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_float64); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_22)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_22);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_22, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_16);
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1241
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.float64)
 * 
 */
    __pyx_t_1 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_16);
    __pyx_t_1 = 0;
    __pyx_t_16 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_dem_buffer_array), __pyx_t_22, __pyx_t_3) < 0)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1245
 * 
 *         # ensure these are set for the complier
 *         xi_n = -1             # <<<<<<<<<<<<<<
 *         yi_n = -1
 * 
 */
    __pyx_v_xi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":1246
 *         # ensure these are set for the complier
 *         xi_n = -1
 *         yi_n = -1             # <<<<<<<<<<<<<<
 * 
 *         # search block for to set flow direction
 */
    __pyx_v_yi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":1249
 * 
 *         # search block for to set flow direction
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]
 */
    __pyx_t_24 = (__pyx_v_win_ysize + 1);
    __pyx_t_25 = __pyx_t_24;
    for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_25; __pyx_t_10+=1) {
      __pyx_v_yi = __pyx_t_10;

      /* "src/geoprocessing/routing/routing.pyx":1250
 *         # search block for to set flow direction
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):
 */
      __pyx_t_26 = (__pyx_v_win_xsize + 1);
      __pyx_t_27 = __pyx_t_26;
      for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_27; __pyx_t_9+=1) {
        __pyx_v_xi = __pyx_t_9;

        /* "src/geoprocessing/routing/routing.pyx":1251
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]             # <<<<<<<<<<<<<<
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):
 *                     continue
 */
        __pyx_t_28 = __pyx_v_yi;
        __pyx_t_29 = __pyx_v_xi;
        __pyx_t_30 = -1;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_30 = 0;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape)) __pyx_t_30 = 0;
        if (__pyx_t_29 < 0) {
          __pyx_t_29 += __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_30 = 1;
        } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape)) __pyx_t_30 = 1;
        if (unlikely(__pyx_t_30 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_30);
          __PYX_ERR(0, 1251, __pyx_L1_error)
        }
        __pyx_v_root_height = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_dem_buffer_array.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_dem_buffer_array.diminfo[1].strides));

        /* "src/geoprocessing/routing/routing.pyx":1252
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_root_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1253
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # this value is set in case it turns out to be the root of a
 */
          goto __pyx_L27_continue;

          /* "src/geoprocessing/routing/routing.pyx":1252
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1258
 *                 # pit, we'll start the fill from this pixel in the last phase
 *                 # of the algorithm
 *                 xi_root = xi-1+xoff             # <<<<<<<<<<<<<<
 *                 yi_root = yi-1+yoff
 * 
 */
        __pyx_v_xi_root = ((__pyx_v_xi - 1) + __pyx_v_xoff);

        /* "src/geoprocessing/routing/routing.pyx":1259
 *                 # of the algorithm
 *                 xi_root = xi-1+xoff
 *                 yi_root = yi-1+yoff             # <<<<<<<<<<<<<<
 * 
 *                 if flow_dir_managed_raster.get(
 */
        __pyx_v_yi_root = ((__pyx_v_yi - 1) + __pyx_v_yoff);

        /* "src/geoprocessing/routing/routing.pyx":1262
 * 
 *                 if flow_dir_managed_raster.get(
 *                         xi_root, yi_root) != flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     # already been defined
 *                     continue
 */
        __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root) != __pyx_v_flow_dir_nodata) != 0);

        /* "src/geoprocessing/routing/routing.pyx":1261
 *                 yi_root = yi-1+yoff
 * 
 *                 if flow_dir_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root) != flow_dir_nodata:
 *                     # already been defined
 */
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1264
 *                         xi_root, yi_root) != flow_dir_nodata:
 *                     # already been defined
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # initialize variables to indicate the largest slope_dir is
 */
          goto __pyx_L27_continue;

          /* "src/geoprocessing/routing/routing.pyx":1261
 *                 yi_root = yi-1+yoff
 * 
 *                 if flow_dir_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root) != flow_dir_nodata:
 *                     # already been defined
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1269
 *                 # undefined, the largest slope seen so far is flat, and the
 *                 # largest nodata is at least a diagonal away
 *                 largest_slope_dir = -1             # <<<<<<<<<<<<<<
 *                 largest_slope = 0.0
 * 
 */
        __pyx_v_largest_slope_dir = -1L;

        /* "src/geoprocessing/routing/routing.pyx":1270
 *                 # largest nodata is at least a diagonal away
 *                 largest_slope_dir = -1
 *                 largest_slope = 0.0             # <<<<<<<<<<<<<<
 * 
 *                 for i_n in range(8):
 */
        __pyx_v_largest_slope = 0.0;

        /* "src/geoprocessing/routing/routing.pyx":1272
 *                 largest_slope = 0.0
 * 
 *                 for i_n in range(8):             # <<<<<<<<<<<<<<
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]
 */
        for (__pyx_t_30 = 0; __pyx_t_30 < 8; __pyx_t_30+=1) {
          __pyx_v_i_n = __pyx_t_30;

          /* "src/geoprocessing/routing/routing.pyx":1273
 * 
 *                 for i_n in range(8):
 *                     xi_n = xi+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 */
          __pyx_v_xi_n = (__pyx_v_xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":1274
 *                 for i_n in range(8):
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
          __pyx_v_yi_n = (__pyx_v_yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":1275
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]             # <<<<<<<<<<<<<<
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         continue
 */
          __pyx_t_29 = __pyx_v_yi_n;
          __pyx_t_28 = __pyx_v_xi_n;
          __pyx_t_31 = -1;
          if (__pyx_t_29 < 0) {
            __pyx_t_29 += __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape;
            if (unlikely(__pyx_t_29 < 0)) __pyx_t_31 = 0;
          } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape)) __pyx_t_31 = 0;
          if (__pyx_t_28 < 0) {
            __pyx_t_28 += __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape;
            if (unlikely(__pyx_t_28 < 0)) __pyx_t_31 = 1;
          } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape)) __pyx_t_31 = 1;
          if (unlikely(__pyx_t_31 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_31);
            __PYX_ERR(0, 1275, __pyx_L1_error)
          }
          __pyx_v_n_height = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_dem_buffer_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_dem_buffer_array.diminfo[1].strides));

          /* "src/geoprocessing/routing/routing.pyx":1276
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         continue
 *                     n_slope = root_height - n_height
 */
          __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1277
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         continue             # <<<<<<<<<<<<<<
 *                     n_slope = root_height - n_height
 *                     if i_n & 1:
 */
            goto __pyx_L31_continue;

            /* "src/geoprocessing/routing/routing.pyx":1276
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         continue
 *                     n_slope = root_height - n_height
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":1278
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         continue
 *                     n_slope = root_height - n_height             # <<<<<<<<<<<<<<
 *                     if i_n & 1:
 *                         # if diagonal, adjust the slope
 */
          __pyx_v_n_slope = (__pyx_v_root_height - __pyx_v_n_height);

          /* "src/geoprocessing/routing/routing.pyx":1279
 *                         continue
 *                     n_slope = root_height - n_height
 *                     if i_n & 1:             # <<<<<<<<<<<<<<
 *                         # if diagonal, adjust the slope
 *                         n_slope *= SQRT2_INV
 */
          __pyx_t_5 = ((__pyx_v_i_n & 1) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1281
 *                     if i_n & 1:
 *                         # if diagonal, adjust the slope
 *                         n_slope *= SQRT2_INV             # <<<<<<<<<<<<<<
 *                     if n_slope > largest_slope:
 *                         largest_slope_dir = i_n
 */
            __pyx_v_n_slope = (__pyx_v_n_slope * __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV);

            /* "src/geoprocessing/routing/routing.pyx":1279
 *                         continue
 *                     n_slope = root_height - n_height
 *                     if i_n & 1:             # <<<<<<<<<<<<<<
 *                         # if diagonal, adjust the slope
 *                         n_slope *= SQRT2_INV
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":1282
 *                         # if diagonal, adjust the slope
 *                         n_slope *= SQRT2_INV
 *                     if n_slope > largest_slope:             # <<<<<<<<<<<<<<
 *                         largest_slope_dir = i_n
 *                         largest_slope = n_slope
 */
          __pyx_t_5 = ((__pyx_v_n_slope > __pyx_v_largest_slope) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1283
 *                         n_slope *= SQRT2_INV
 *                     if n_slope > largest_slope:
 *                         largest_slope_dir = i_n             # <<<<<<<<<<<<<<
 *                         largest_slope = n_slope
 * 
 */
            __pyx_v_largest_slope_dir = __pyx_v_i_n;

            /* "src/geoprocessing/routing/routing.pyx":1284
 *                     if n_slope > largest_slope:
 *                         largest_slope_dir = i_n
 *                         largest_slope = n_slope             # <<<<<<<<<<<<<<
 * 
 *                 if largest_slope_dir >= 0:
 */
            __pyx_v_largest_slope = __pyx_v_n_slope;

            /* "src/geoprocessing/routing/routing.pyx":1282
 *                         # if diagonal, adjust the slope
 *                         n_slope *= SQRT2_INV
 *                     if n_slope > largest_slope:             # <<<<<<<<<<<<<<
 *                         largest_slope_dir = i_n
 *                         largest_slope = n_slope
 */
          }
          __pyx_L31_continue:;
        }

        /* "src/geoprocessing/routing/routing.pyx":1286
 *                         largest_slope = n_slope
 * 
 *                 if largest_slope_dir >= 0:             # <<<<<<<<<<<<<<
 *                     # define flow dir and move on
 *                     flow_dir_managed_raster.set(
 */
        __pyx_t_5 = ((__pyx_v_largest_slope_dir >= 0) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1288
 *                 if largest_slope_dir >= 0:
 *                     # define flow dir and move on
 *                     flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root, largest_slope_dir)
 *                     continue
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, __pyx_v_largest_slope_dir);

          /* "src/geoprocessing/routing/routing.pyx":1290
 *                     flow_dir_managed_raster.set(
 *                         xi_root, yi_root, largest_slope_dir)
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # otherwise, this pixel doesn't drain locally, so it must
 */
          goto __pyx_L27_continue;

          /* "src/geoprocessing/routing/routing.pyx":1286
 *                         largest_slope = n_slope
 * 
 *                 if largest_slope_dir >= 0:             # <<<<<<<<<<<<<<
 *                     # define flow dir and move on
 *                     flow_dir_managed_raster.set(
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1294
 *                 # otherwise, this pixel doesn't drain locally, so it must
 *                 # be a plateau, search for the drains of the plateau
 *                 search_queue.push(CoordinateType(xi_root, yi_root))             # <<<<<<<<<<<<<<
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)
 * 
 */
        __pyx_t_32.xi = __pyx_v_xi_root;
        __pyx_t_32.yi = __pyx_v_yi_root;
        __pyx_v_search_queue.push(__pyx_t_32);

        /* "src/geoprocessing/routing/routing.pyx":1295
 *                 # be a plateau, search for the drains of the plateau
 *                 search_queue.push(CoordinateType(xi_root, yi_root))
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)             # <<<<<<<<<<<<<<
 * 
 *                 # this loop does a BFS starting at this pixel to all pixels
 */
        __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, 1.0);

        /* "src/geoprocessing/routing/routing.pyx":1301
 *                 # on a queue for later processing.
 * 
 *                 while not search_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = search_queue.front().xi
 *                     yi_q = search_queue.front().yi
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_search_queue.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":1302
 * 
 *                 while not search_queue.empty():
 *                     xi_q = search_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()
 */
          __pyx_t_30 = __pyx_v_search_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_30;

          /* "src/geoprocessing/routing/routing.pyx":1303
 *                 while not search_queue.empty():
 *                     xi_q = search_queue.front().xi
 *                     yi_q = search_queue.front().yi             # <<<<<<<<<<<<<<
 *                     search_queue.pop()
 * 
 */
          __pyx_t_30 = __pyx_v_search_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_30;

          /* "src/geoprocessing/routing/routing.pyx":1304
 *                     xi_q = search_queue.front().xi
 *                     yi_q = search_queue.front().yi
 *                     search_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                     largest_slope_dir = -1
 */
          __pyx_v_search_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":1306
 *                     search_queue.pop()
 * 
 *                     largest_slope_dir = -1             # <<<<<<<<<<<<<<
 *                     largest_slope = 0.0
 *                     diagonal_nodata = 1
 */
          __pyx_v_largest_slope_dir = -1L;

          /* "src/geoprocessing/routing/routing.pyx":1307
 * 
 *                     largest_slope_dir = -1
 *                     largest_slope = 0.0             # <<<<<<<<<<<<<<
 *                     diagonal_nodata = 1
 *                     for i_n in range(8):
 */
          __pyx_v_largest_slope = 0.0;

          /* "src/geoprocessing/routing/routing.pyx":1308
 *                     largest_slope_dir = -1
 *                     largest_slope = 0.0
 *                     diagonal_nodata = 1             # <<<<<<<<<<<<<<
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 */
          __pyx_v_diagonal_nodata = 1;

          /* "src/geoprocessing/routing/routing.pyx":1309
 *                     largest_slope = 0.0
 *                     diagonal_nodata = 1
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_30 = 0; __pyx_t_30 < 8; __pyx_t_30+=1) {
            __pyx_v_i_n = __pyx_t_30;

            /* "src/geoprocessing/routing/routing.pyx":1310
 *                     diagonal_nodata = 1
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1311
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1313
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata
 */
            __pyx_t_6 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L42_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L42_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1314
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             n_height = dem_nodata
 *                         else:
 */
            __pyx_t_6 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L42_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L42_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1313
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1315
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata             # <<<<<<<<<<<<<<
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 */
              __pyx_v_n_height = __pyx_v_dem_nodata;

              /* "src/geoprocessing/routing/routing.pyx":1313
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata
 */
              goto __pyx_L41;
            }

            /* "src/geoprocessing/routing/routing.pyx":1317
 *                             n_height = dem_nodata
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if diagonal_nodata and largest_slope == 0.0:
 */
            /*else*/ {
              __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);
            }
            __pyx_L41:;

            /* "src/geoprocessing/routing/routing.pyx":1318
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             if diagonal_nodata and largest_slope == 0.0:
 *                                 largest_slope_dir = i_n
 */
            __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1319
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if diagonal_nodata and largest_slope == 0.0:             # <<<<<<<<<<<<<<
 *                                 largest_slope_dir = i_n
 *                                 diagonal_nodata = i_n & 1
 */
              __pyx_t_6 = (__pyx_v_diagonal_nodata != 0);
              if (__pyx_t_6) {
              } else {
                __pyx_t_5 = __pyx_t_6;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_6 = ((__pyx_v_largest_slope == 0.0) != 0);
              __pyx_t_5 = __pyx_t_6;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_5) {

                /* "src/geoprocessing/routing/routing.pyx":1320
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if diagonal_nodata and largest_slope == 0.0:
 *                                 largest_slope_dir = i_n             # <<<<<<<<<<<<<<
 *                                 diagonal_nodata = i_n & 1
 *                             continue
 */
                __pyx_v_largest_slope_dir = __pyx_v_i_n;

                /* "src/geoprocessing/routing/routing.pyx":1321
 *                             if diagonal_nodata and largest_slope == 0.0:
 *                                 largest_slope_dir = i_n
 *                                 diagonal_nodata = i_n & 1             # <<<<<<<<<<<<<<
 *                             continue
 *                         n_slope = root_height - n_height
 */
                __pyx_v_diagonal_nodata = (__pyx_v_i_n & 1);

                /* "src/geoprocessing/routing/routing.pyx":1319
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             if diagonal_nodata and largest_slope == 0.0:             # <<<<<<<<<<<<<<
 *                                 largest_slope_dir = i_n
 *                                 diagonal_nodata = i_n & 1
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":1322
 *                                 largest_slope_dir = i_n
 *                                 diagonal_nodata = i_n & 1
 *                             continue             # <<<<<<<<<<<<<<
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:
 */
              goto __pyx_L39_continue;

              /* "src/geoprocessing/routing/routing.pyx":1318
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             if diagonal_nodata and largest_slope == 0.0:
 *                                 largest_slope_dir = i_n
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1323
 *                                 diagonal_nodata = i_n & 1
 *                             continue
 *                         n_slope = root_height - n_height             # <<<<<<<<<<<<<<
 *                         if n_slope < 0:
 *                             continue
 */
            __pyx_v_n_slope = (__pyx_v_root_height - __pyx_v_n_height);

            /* "src/geoprocessing/routing/routing.pyx":1324
 *                             continue
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_slope == 0.0:
 */
            __pyx_t_5 = ((__pyx_v_n_slope < 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1325
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(
 */
              goto __pyx_L39_continue;

              /* "src/geoprocessing/routing/routing.pyx":1324
 *                             continue
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_slope == 0.0:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1326
 *                         if n_slope < 0:
 *                             continue
 *                         if n_slope == 0.0:             # <<<<<<<<<<<<<<
 *                             if flat_region_mask_managed_raster.get(
 *                                     xi_n, yi_n) == mask_nodata:
 */
            __pyx_t_5 = ((__pyx_v_n_slope == 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1328
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(
 *                                     xi_n, yi_n) == mask_nodata:             # <<<<<<<<<<<<<<
 *                                 # only grow if it's at the same level and not
 *                                 # previously visited
 */
              __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == __pyx_v_mask_nodata) != 0);

              /* "src/geoprocessing/routing/routing.pyx":1327
 *                             continue
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n) == mask_nodata:
 *                                 # only grow if it's at the same level and not
 */
              if (__pyx_t_5) {

                /* "src/geoprocessing/routing/routing.pyx":1331
 *                                 # only grow if it's at the same level and not
 *                                 # previously visited
 *                                 search_queue.push(CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *                                 flat_region_mask_managed_raster.set(
 *                                     xi_n, yi_n, 1)
 */
                __pyx_t_32.xi = __pyx_v_xi_n;
                __pyx_t_32.yi = __pyx_v_yi_n;
                __pyx_v_search_queue.push(__pyx_t_32);

                /* "src/geoprocessing/routing/routing.pyx":1332
 *                                 # previously visited
 *                                 search_queue.push(CoordinateType(xi_n, yi_n))
 *                                 flat_region_mask_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n, 1)
 *                             continue
 */
                __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, 1.0);

                /* "src/geoprocessing/routing/routing.pyx":1327
 *                             continue
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n) == mask_nodata:
 *                                 # only grow if it's at the same level and not
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":1334
 *                                 flat_region_mask_managed_raster.set(
 *                                     xi_n, yi_n, 1)
 *                             continue             # <<<<<<<<<<<<<<
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV
 */
              goto __pyx_L39_continue;

              /* "src/geoprocessing/routing/routing.pyx":1326
 *                         if n_slope < 0:
 *                             continue
 *                         if n_slope == 0.0:             # <<<<<<<<<<<<<<
 *                             if flat_region_mask_managed_raster.get(
 *                                     xi_n, yi_n) == mask_nodata:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1335
 *                                     xi_n, yi_n, 1)
 *                             continue
 *                         if i_n & 1:             # <<<<<<<<<<<<<<
 *                             n_slope *= SQRT2_INV
 *                         if n_slope > largest_slope:
 */
            __pyx_t_5 = ((__pyx_v_i_n & 1) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1336
 *                             continue
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV             # <<<<<<<<<<<<<<
 *                         if n_slope > largest_slope:
 *                             largest_slope = n_slope
 */
              __pyx_v_n_slope = (__pyx_v_n_slope * __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV);

              /* "src/geoprocessing/routing/routing.pyx":1335
 *                                     xi_n, yi_n, 1)
 *                             continue
 *                         if i_n & 1:             # <<<<<<<<<<<<<<
 *                             n_slope *= SQRT2_INV
 *                         if n_slope > largest_slope:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1337
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV
 *                         if n_slope > largest_slope:             # <<<<<<<<<<<<<<
 *                             largest_slope = n_slope
 *                             largest_slope_dir = i_n
 */
            __pyx_t_5 = ((__pyx_v_n_slope > __pyx_v_largest_slope) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1338
 *                             n_slope *= SQRT2_INV
 *                         if n_slope > largest_slope:
 *                             largest_slope = n_slope             # <<<<<<<<<<<<<<
 *                             largest_slope_dir = i_n
 * 
 */
              __pyx_v_largest_slope = __pyx_v_n_slope;

              /* "src/geoprocessing/routing/routing.pyx":1339
 *                         if n_slope > largest_slope:
 *                             largest_slope = n_slope
 *                             largest_slope_dir = i_n             # <<<<<<<<<<<<<<
 * 
 *                     if largest_slope_dir >= 0:
 */
              __pyx_v_largest_slope_dir = __pyx_v_i_n;

              /* "src/geoprocessing/routing/routing.pyx":1337
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV
 *                         if n_slope > largest_slope:             # <<<<<<<<<<<<<<
 *                             largest_slope = n_slope
 *                             largest_slope_dir = i_n
 */
            }
            __pyx_L39_continue:;
          }

          /* "src/geoprocessing/routing/routing.pyx":1341
 *                             largest_slope_dir = i_n
 * 
 *                     if largest_slope_dir >= 0:             # <<<<<<<<<<<<<<
 *                         if largest_slope > 0.0:
 *                             # regular downhill pixel
 */
          __pyx_t_5 = ((__pyx_v_largest_slope_dir >= 0) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1342
 * 
 *                     if largest_slope_dir >= 0:
 *                         if largest_slope > 0.0:             # <<<<<<<<<<<<<<
 *                             # regular downhill pixel
 *                             flow_dir_managed_raster.set(
 */
            __pyx_t_5 = ((__pyx_v_largest_slope > 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1344
 *                         if largest_slope > 0.0:
 *                             # regular downhill pixel
 *                             flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_q, yi_q, largest_slope_dir)
 *                             plateau_distance_managed_raster.set(
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, __pyx_v_largest_slope_dir);

              /* "src/geoprocessing/routing/routing.pyx":1346
 *                             flow_dir_managed_raster.set(
 *                                 xi_q, yi_q, largest_slope_dir)
 *                             plateau_distance_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_q, yi_q, 0.0)
 *                             drain_queue.push(CoordinateType(xi_q, yi_q))
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, 0.0);

              /* "src/geoprocessing/routing/routing.pyx":1348
 *                             plateau_distance_managed_raster.set(
 *                                 xi_q, yi_q, 0.0)
 *                             drain_queue.push(CoordinateType(xi_q, yi_q))             # <<<<<<<<<<<<<<
 *                         else:
 *                             # must be a nodata drain, save on queue for later
 */
              __pyx_t_32.xi = __pyx_v_xi_q;
              __pyx_t_32.yi = __pyx_v_yi_q;
              __pyx_v_drain_queue.push(__pyx_t_32);

              /* "src/geoprocessing/routing/routing.pyx":1342
 * 
 *                     if largest_slope_dir >= 0:
 *                         if largest_slope > 0.0:             # <<<<<<<<<<<<<<
 *                             # regular downhill pixel
 *                             flow_dir_managed_raster.set(
 */
              goto __pyx_L56;
            }

            /* "src/geoprocessing/routing/routing.pyx":1351
 *                         else:
 *                             # must be a nodata drain, save on queue for later
 *                             nodata_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_q, yi_q))
 *                             nodata_flow_dir_queue.push(largest_slope_dir)
 */
            /*else*/ {

              /* "src/geoprocessing/routing/routing.pyx":1352
 *                             # must be a nodata drain, save on queue for later
 *                             nodata_drain_queue.push(
 *                                 CoordinateType(xi_q, yi_q))             # <<<<<<<<<<<<<<
 *                             nodata_flow_dir_queue.push(largest_slope_dir)
 * 
 */
              __pyx_t_32.xi = __pyx_v_xi_q;
              __pyx_t_32.yi = __pyx_v_yi_q;

              /* "src/geoprocessing/routing/routing.pyx":1351
 *                         else:
 *                             # must be a nodata drain, save on queue for later
 *                             nodata_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_q, yi_q))
 *                             nodata_flow_dir_queue.push(largest_slope_dir)
 */
              __pyx_v_nodata_drain_queue.push(__pyx_t_32);

              /* "src/geoprocessing/routing/routing.pyx":1353
 *                             nodata_drain_queue.push(
 *                                 CoordinateType(xi_q, yi_q))
 *                             nodata_flow_dir_queue.push(largest_slope_dir)             # <<<<<<<<<<<<<<
 * 
 *                 # if there's no downhill drains, try the nodata drains
 */
              __pyx_v_nodata_flow_dir_queue.push(__pyx_v_largest_slope_dir);
            }
            __pyx_L56:;

            /* "src/geoprocessing/routing/routing.pyx":1341
 *                             largest_slope_dir = i_n
 * 
 *                     if largest_slope_dir >= 0:             # <<<<<<<<<<<<<<
 *                         if largest_slope > 0.0:
 *                             # regular downhill pixel
 */
          }
        }

        /* "src/geoprocessing/routing/routing.pyx":1356
 * 
 *                 # if there's no downhill drains, try the nodata drains
 *                 if drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     # push the nodata drain queue over to the drain queue
 *                     # and set all the flow directions on the nodata drain
 */
        __pyx_t_5 = (__pyx_v_drain_queue.empty() != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1360
 *                     # and set all the flow directions on the nodata drain
 *                     # pixels
 *                     while not nodata_drain_queue.empty():             # <<<<<<<<<<<<<<
 *                         xi_q = nodata_drain_queue.front().xi
 *                         yi_q = nodata_drain_queue.front().yi
 */
          while (1) {
            __pyx_t_5 = ((!(__pyx_v_nodata_drain_queue.empty() != 0)) != 0);
            if (!__pyx_t_5) break;

            /* "src/geoprocessing/routing/routing.pyx":1361
 *                     # pixels
 *                     while not nodata_drain_queue.empty():
 *                         xi_q = nodata_drain_queue.front().xi             # <<<<<<<<<<<<<<
 *                         yi_q = nodata_drain_queue.front().yi
 *                         flow_dir_managed_raster.set(
 */
            __pyx_t_30 = __pyx_v_nodata_drain_queue.front().xi;
            __pyx_v_xi_q = __pyx_t_30;

            /* "src/geoprocessing/routing/routing.pyx":1362
 *                     while not nodata_drain_queue.empty():
 *                         xi_q = nodata_drain_queue.front().xi
 *                         yi_q = nodata_drain_queue.front().yi             # <<<<<<<<<<<<<<
 *                         flow_dir_managed_raster.set(
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 */
            __pyx_t_30 = __pyx_v_nodata_drain_queue.front().yi;
            __pyx_v_yi_q = __pyx_t_30;

            /* "src/geoprocessing/routing/routing.pyx":1363
 *                         xi_q = nodata_drain_queue.front().xi
 *                         yi_q = nodata_drain_queue.front().yi
 *                         flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, __pyx_v_nodata_flow_dir_queue.front());

            /* "src/geoprocessing/routing/routing.pyx":1365
 *                         flow_dir_managed_raster.set(
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)             # <<<<<<<<<<<<<<
 *                         drain_queue.push(nodata_drain_queue.front())
 *                         nodata_flow_dir_queue.pop()
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, 0.0);

            /* "src/geoprocessing/routing/routing.pyx":1366
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)
 *                         drain_queue.push(nodata_drain_queue.front())             # <<<<<<<<<<<<<<
 *                         nodata_flow_dir_queue.pop()
 *                         nodata_drain_queue.pop()
 */
            __pyx_v_drain_queue.push(__pyx_v_nodata_drain_queue.front());

            /* "src/geoprocessing/routing/routing.pyx":1367
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)
 *                         drain_queue.push(nodata_drain_queue.front())
 *                         nodata_flow_dir_queue.pop()             # <<<<<<<<<<<<<<
 *                         nodata_drain_queue.pop()
 *                 else:
 */
            __pyx_v_nodata_flow_dir_queue.pop();

            /* "src/geoprocessing/routing/routing.pyx":1368
 *                         drain_queue.push(nodata_drain_queue.front())
 *                         nodata_flow_dir_queue.pop()
 *                         nodata_drain_queue.pop()             # <<<<<<<<<<<<<<
 *                 else:
 *                     # clear the nodata drain queues
 */
            __pyx_v_nodata_drain_queue.pop();
          }

          /* "src/geoprocessing/routing/routing.pyx":1356
 * 
 *                 # if there's no downhill drains, try the nodata drains
 *                 if drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     # push the nodata drain queue over to the drain queue
 *                     # and set all the flow directions on the nodata drain
 */
          goto __pyx_L57;
        }

        /* "src/geoprocessing/routing/routing.pyx":1371
 *                 else:
 *                     # clear the nodata drain queues
 *                     nodata_flow_dir_queue = IntQueueType()             # <<<<<<<<<<<<<<
 *                     nodata_drain_queue = CoordinateQueueType()
 * 
 */
        /*else*/ {
          try {
            __pyx_t_33 = __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_IntQueueType();
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 1371, __pyx_L1_error)
          }
          __pyx_v_nodata_flow_dir_queue = __pyx_t_33;

          /* "src/geoprocessing/routing/routing.pyx":1372
 *                     # clear the nodata drain queues
 *                     nodata_flow_dir_queue = IntQueueType()
 *                     nodata_drain_queue = CoordinateQueueType()             # <<<<<<<<<<<<<<
 * 
 *                 # this loop does a BFS from the plateau drain to any other
 */
          try {
            __pyx_t_34 = __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType();
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 1372, __pyx_L1_error)
          }
          __pyx_v_nodata_drain_queue = __pyx_t_34;
        }
        __pyx_L57:;

        /* "src/geoprocessing/routing/routing.pyx":1376
 *                 # this loop does a BFS from the plateau drain to any other
 *                 # neighboring undefined pixels
 *                 while not drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = drain_queue.front().xi
 *                     yi_q = drain_queue.front().yi
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_drain_queue.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":1377
 *                 # neighboring undefined pixels
 *                 while not drain_queue.empty():
 *                     xi_q = drain_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = drain_queue.front().yi
 *                     drain_queue.pop()
 */
          __pyx_t_30 = __pyx_v_drain_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_30;

          /* "src/geoprocessing/routing/routing.pyx":1378
 *                 while not drain_queue.empty():
 *                     xi_q = drain_queue.front().xi
 *                     yi_q = drain_queue.front().yi             # <<<<<<<<<<<<<<
 *                     drain_queue.pop()
 * 
 */
          __pyx_t_30 = __pyx_v_drain_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_30;

          /* "src/geoprocessing/routing/routing.pyx":1379
 *                     xi_q = drain_queue.front().xi
 *                     yi_q = drain_queue.front().yi
 *                     drain_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                     drain_distance = plateau_distance_managed_raster.get(
 */
          __pyx_v_drain_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":1381
 *                     drain_queue.pop()
 * 
 *                     drain_distance = plateau_distance_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_q, yi_q)
 * 
 */
          __pyx_v_drain_distance = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q);

          /* "src/geoprocessing/routing/routing.pyx":1384
 *                         xi_q, yi_q)
 * 
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_30 = 0; __pyx_t_30 < 8; __pyx_t_30+=1) {
            __pyx_v_i_n = __pyx_t_30;

            /* "src/geoprocessing/routing/routing.pyx":1385
 * 
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1386
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1387
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            __pyx_t_6 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L65_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L65_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1388
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_6 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L65_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L65_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1387
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1389
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         n_drain_distance = drain_distance + (
 */
              goto __pyx_L62_continue;

              /* "src/geoprocessing/routing/routing.pyx":1387
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1392
 * 
 *                         n_drain_distance = drain_distance + (
 *                             SQRT2 if i_n & 1 else 1.0)             # <<<<<<<<<<<<<<
 * 
 *                         if dem_managed_raster.get(
 */
            if (((__pyx_v_i_n & 1) != 0)) {
              __pyx_t_7 = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2;
            } else {
              __pyx_t_7 = 1.0;
            }

            /* "src/geoprocessing/routing/routing.pyx":1391
 *                             continue
 * 
 *                         n_drain_distance = drain_distance + (             # <<<<<<<<<<<<<<
 *                             SQRT2 if i_n & 1 else 1.0)
 * 
 */
            __pyx_v_n_drain_distance = (__pyx_v_drain_distance + __pyx_t_7);

            /* "src/geoprocessing/routing/routing.pyx":1395
 * 
 *                         if dem_managed_raster.get(
 *                                 xi_n, yi_n) == root_height and (             # <<<<<<<<<<<<<<
 *                                 plateau_distance_managed_raster.get(
 *                                     xi_n, yi_n) > n_drain_distance):
 */
            __pyx_t_6 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == __pyx_v_root_height) != 0);
            if (__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L70_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1397
 *                                 xi_n, yi_n) == root_height and (
 *                                 plateau_distance_managed_raster.get(
 *                                     xi_n, yi_n) > n_drain_distance):             # <<<<<<<<<<<<<<
 *                             # neighbor is at same level and has longer drain
 *                             # flow path than current
 */
            __pyx_t_6 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) > __pyx_v_n_drain_distance) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L70_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1394
 *                             SQRT2 if i_n & 1 else 1.0)
 * 
 *                         if dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n) == root_height and (
 *                                 plateau_distance_managed_raster.get(
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1400
 *                             # neighbor is at same level and has longer drain
 *                             # flow path than current
 *                             flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n, D8_REVERSE_DIRECTION[i_n])
 *                             plateau_distance_managed_raster.set(
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_i_n]));

              /* "src/geoprocessing/routing/routing.pyx":1402
 *                             flow_dir_managed_raster.set(
 *                                 xi_n, yi_n, D8_REVERSE_DIRECTION[i_n])
 *                             plateau_distance_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n, n_drain_distance)
 *                             drain_queue.push(CoordinateType(xi_n, yi_n))
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, __pyx_v_n_drain_distance);

              /* "src/geoprocessing/routing/routing.pyx":1404
 *                             plateau_distance_managed_raster.set(
 *                                 xi_n, yi_n, n_drain_distance)
 *                             drain_queue.push(CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *     dem_band = None
 *     dem_raster = None
 */
              __pyx_t_32.xi = __pyx_v_xi_n;
              __pyx_t_32.yi = __pyx_v_yi_n;
              __pyx_v_drain_queue.push(__pyx_t_32);

              /* "src/geoprocessing/routing/routing.pyx":1394
 *                             SQRT2 if i_n & 1 else 1.0)
 * 
 *                         if dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n) == root_height and (
 *                                 plateau_distance_managed_raster.get(
 */
            }
            __pyx_L62_continue:;
          }
        }
        __pyx_L27_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":1216
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1405
 *                                 xi_n, yi_n, n_drain_distance)
 *                             drain_queue.push(CoordinateType(xi_n, yi_n))
 *     dem_band = None             # <<<<<<<<<<<<<<
 *     dem_raster = None
 *     flow_dir_managed_raster.close()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_dem_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":1406
 *                             drain_queue.push(CoordinateType(xi_n, yi_n))
 *     dem_band = None
 *     dem_raster = None             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster.close()
 *     flat_region_mask_managed_raster.close()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_dem_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":1407
 *     dem_band = None
 *     dem_raster = None
 *     flow_dir_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flat_region_mask_managed_raster.close()
 *     dem_managed_raster.close()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_dir_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_15 = (__pyx_t_22) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_22) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1408
 *     dem_raster = None
 *     flow_dir_managed_raster.close()
 *     flat_region_mask_managed_raster.close()             # <<<<<<<<<<<<<<
 *     dem_managed_raster.close()
 *     plateau_distance_managed_raster.close()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flat_region_mask_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_15 = (__pyx_t_22) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_22) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1409
 *     flow_dir_managed_raster.close()
 *     flat_region_mask_managed_raster.close()
 *     dem_managed_raster.close()             # <<<<<<<<<<<<<<
 *     plateau_distance_managed_raster.close()
 *     shutil.rmtree(working_dir_path)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_dem_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_15 = (__pyx_t_22) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_22) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1410
 *     flat_region_mask_managed_raster.close()
 *     dem_managed_raster.close()
 *     plateau_distance_managed_raster.close()             # <<<<<<<<<<<<<<
 *     shutil.rmtree(working_dir_path)
 *     LOGGER.info('(flow dir d8): complete')
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_plateau_distance_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_15 = (__pyx_t_22) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_22) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1411
 *     dem_managed_raster.close()
 *     plateau_distance_managed_raster.close()
 *     shutil.rmtree(working_dir_path)             # <<<<<<<<<<<<<<
 *     LOGGER.info('(flow dir d8): complete')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_shutil); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_22))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_22);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_22, function);
    }
  }
  __pyx_t_15 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_22, __pyx_t_3, __pyx_v_working_dir_path) : __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1412
 *     plateau_distance_managed_raster.close()
 *     shutil.rmtree(working_dir_path)
 *     LOGGER.info('(flow dir d8): complete')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_22, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_15 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_22, __pyx_kp_u_flow_dir_d8_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_flow_dir_d8_complete);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1050
 * 
 * 
 * def flow_dir_d8(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_dir_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_buffer_array);
  __Pyx_XDECREF(__pyx_v_dem_raster_info);
  __Pyx_XDECREF(__pyx_v_base_nodata);
  __Pyx_XDECREF(__pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_v_flat_region_mask_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_flat_region_mask_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_v_plateau_distance_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_plateau_distance_managed_raster);
  __Pyx_XDECREF(__pyx_v_compatable_dem_raster_path_band);
  __Pyx_XDECREF(__pyx_v_dem_block_xsize);
  __Pyx_XDECREF(__pyx_v_dem_block_ysize);
  __Pyx_XDECREF(__pyx_v_raster_driver);
  __Pyx_XDECREF(__pyx_v_dem_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_managed_raster);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_modified_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":1415
 * 
 * 
 * def flow_accumulation_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_7flow_accumulation_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_6flow_accumulation_d8[] = "D8 flow accumulation.\n\n    Parameters:\n        flow_dir_raster_path_band (tuple): a path, band number tuple\n            for a flow accumulation raster whose pixels indicate the flow\n            out of a pixel in one of 8 directions in the following\n            configuration::\n\n                3 2 1\n                4 x 0\n                5 6 7\n\n        target_flow_accum_raster_path (str): path to flow\n            accumulation raster created by this call. After this call, the\n            value of each pixel will be 1 plus the number of upstream pixels\n            that drain to that pixel. Note the target type of this raster\n            is a 64 bit float so there is minimal risk of overflow and the\n            possibility of handling a float dtype in\n            ``weight_raster_path_band``.\n        weight_raster_path_band (tuple): optional path and band number to a\n            raster that will be used as the per-pixel flow accumulation\n            weight. If ``None``, 1 is the default flow accumulation weight.\n            This raster must be the same dimensions as\n            ``flow_dir_mfd_raster_path_band``.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_7flow_accumulation_d8 = {"flow_accumulation_d8", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_7flow_accumulation_d8, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_6flow_accumulation_d8};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_7flow_accumulation_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_raster_path_band = 0;
  PyObject *__pyx_v_target_flow_accum_raster_path = 0;
  PyObject *__pyx_v_weight_raster_path_band = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_accumulation_d8 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_raster_path_band,&__pyx_n_s_target_flow_accum_raster_path,&__pyx_n_s_weight_raster_path_band,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[4] = {0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":1417
 * def flow_accumulation_d8(
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """D8 flow accumulation.
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = __pyx_k__7;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_flow_accum_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_accumulation_d8", 0, 2, 4, 1); __PYX_ERR(0, 1415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_raster_path_band);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_accumulation_d8") < 0)) __PYX_ERR(0, 1415, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_dir_raster_path_band = values[0];
    __pyx_v_target_flow_accum_raster_path = values[1];
    __pyx_v_weight_raster_path_band = values[2];
    __pyx_v_raster_driver_creation_tuple = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_accumulation_d8", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1415, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_accumulation_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_6flow_accumulation_d8(__pyx_self, __pyx_v_flow_dir_raster_path_band, __pyx_v_target_flow_accum_raster_path, __pyx_v_weight_raster_path_band, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":1415
 * 
 * 
 * def flow_accumulation_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_6flow_accumulation_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_raster_path_band, PyObject *__pyx_v_target_flow_accum_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyArrayObject *__pyx_v_flow_dir_buffer_array = 0;
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  int __pyx_v_flow_dir;
  int __pyx_v_upstream_flow_dir;
  int __pyx_v_flow_dir_nodata;
  double __pyx_v_upstream_flow_accum;
  double __pyx_v_weight_val;
  double __pyx_v_weight_nodata;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType>  __pyx_v_search_stack;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType __pyx_v_flow_pixel;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  time_t __pyx_v_last_log_time;
  double __pyx_v_flow_accum_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_accum_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  PyObject *__pyx_v_flow_dir_raster = NULL;
  PyObject *__pyx_v_flow_dir_band = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_weight_raster = 0;
  PyObject *__pyx_v_raw_weight_nodata = NULL;
  PyObject *__pyx_v_flow_dir_raster_info = NULL;
  PyObject *__pyx_v_tmp_flow_dir_nodata = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_modified_offset_dict = NULL;
  long __pyx_v_preempted;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_dir_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_flow_dir_buffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  int __pyx_t_29;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType __pyx_t_30;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flow_accumulation_d8", 0);
  __pyx_pybuffer_flow_dir_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_dir_buffer_array.refcount = 0;
  __pyx_pybuffernd_flow_dir_buffer_array.data = NULL;
  __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer = &__pyx_pybuffer_flow_dir_buffer_array;

  /* "src/geoprocessing/routing/routing.pyx":1476
 *     # come from a predefined flow accumulation weight raster
 *     cdef double weight_val
 *     cdef double weight_nodata = IMPROBABLE_FLOAT_NODATA  # set to something             # <<<<<<<<<<<<<<
 * 
 *     # `search_stack` is used to walk upstream to calculate flow accumulation
 */
  __pyx_v_weight_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;

  /* "src/geoprocessing/routing/routing.pyx":1488
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_raster_path_band):
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":1490
 *     last_log_time = ctime(NULL)
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_raster_path_band):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_flow_dir_raster_path_band) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_flow_dir_raster_path_band);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/routing.pyx":1492
 *     if not _is_raster_path_band_formatted(flow_dir_raster_path_band):
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                 flow_dir_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_flow_dir_raster_path_band); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":1491
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_raster_path_band):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_raster_path_band))
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1491, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":1490
 *     last_log_time = ctime(NULL)
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_raster_path_band):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":1494
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         raise ValueError(
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_weight_raster_path_band); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1494, __pyx_L1_error)
  if (__pyx_t_4) {
  } else {
    __pyx_t_5 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":1495
 *                 flow_dir_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(
 *             weight_raster_path_band):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_weight_raster_path_band) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_weight_raster_path_band);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1494
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         raise ValueError(
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = ((!__pyx_t_4) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/routing.pyx":1497
 *             weight_raster_path_band):
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band))
 * 
 */
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_weight_raster_path_band); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":1496
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(
 *             weight_raster_path_band):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 weight_raster_path_band))
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1496, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":1494
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         raise ValueError(
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":1500
 *                 weight_raster_path_band))
 * 
 *     flow_accum_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,
 */
  __pyx_v_flow_accum_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;

  /* "src/geoprocessing/routing/routing.pyx":1501
 * 
 *     flow_accum_nodata = IMPROBABLE_FLOAT_NODATA
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1502
 *     flow_accum_nodata = IMPROBABLE_FLOAT_NODATA
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float64, [flow_accum_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":1503
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flow_accum_managed_raster = _ManagedRaster(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_flow_accum_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1501
 * 
 *     flow_accum_nodata = IMPROBABLE_FLOAT_NODATA
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 */
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_target_flow_accum_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_accum_raster_path);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_target_flow_accum_raster_path);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1504
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     flow_accum_managed_raster = _ManagedRaster(
 *         target_flow_accum_raster_path, 1, 1)
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1504, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1501
 * 
 *     flow_accum_nodata = IMPROBABLE_FLOAT_NODATA
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1505
 *         gdal.GDT_Float64, [flow_accum_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flow_accum_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_flow_accum_raster_path, 1, 1)
 * 
 */
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_target_flow_accum_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_accum_raster_path);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_target_flow_accum_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_int_1);
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_flow_accum_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1509
 * 
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_raster_path_band[0], flow_dir_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/geoprocessing/routing/routing.pyx":1508
 *         target_flow_accum_raster_path, 1, 1)
 * 
 *     flow_dir_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0], flow_dir_raster_path_band[1], 0)
 *     flow_dir_raster = gdal.OpenEx(
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_0);
  __pyx_t_8 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1510
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_raster_path_band[0], flow_dir_raster_path_band[1], 0)
 *     flow_dir_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1511
 *         flow_dir_raster_path_band[0], flow_dir_raster_path_band[1], 0)
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 *         flow_dir_raster_path_band[1])
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_1};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_1};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_raster = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1512
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[1])
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "src/geoprocessing/routing/routing.pyx":1513
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 *         flow_dir_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     cdef _ManagedRaster weight_raster = None
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_1, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_band = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1515
 *         flow_dir_raster_path_band[1])
 * 
 *     cdef _ManagedRaster weight_raster = None             # <<<<<<<<<<<<<<
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_weight_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)Py_None);

  /* "src/geoprocessing/routing/routing.pyx":1516
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_weight_raster_path_band); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1516, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":1518
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "src/geoprocessing/routing/routing.pyx":1517
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 */
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_int_0);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_weight_raster, ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1519
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1520
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_10);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_u_nodata); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1521
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_PyInt_SubtractObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1520
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_raw_weight_nodata = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1522
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 * 
 */
    __pyx_t_5 = (__pyx_v_raw_weight_nodata != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "src/geoprocessing/routing/routing.pyx":1523
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_raw_weight_nodata); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1523, __pyx_L1_error)
      __pyx_v_weight_nodata = __pyx_t_11;

      /* "src/geoprocessing/routing/routing.pyx":1522
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 * 
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":1516
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":1525
 *             weight_nodata = raw_weight_nodata
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1526
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 * 
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_flow_dir_raster_info = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1527
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     tmp_flow_dir_nodata = flow_dir_raster_info['nodata'][
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1527, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_10);
    #else
    __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_7 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_1); if (unlikely(!__pyx_t_10)) goto __pyx_L9_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_10);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1527, __pyx_L1_error)
    __pyx_t_12 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L10_unpacking_done;
    __pyx_L9_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1527, __pyx_L1_error)
    __pyx_L10_unpacking_done:;
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_raster_x_size = __pyx_t_9;
  __pyx_v_raster_y_size = __pyx_t_13;

  /* "src/geoprocessing/routing/routing.pyx":1529
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 * 
 *     tmp_flow_dir_nodata = flow_dir_raster_info['nodata'][             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[1]-1]
 *     if tmp_flow_dir_nodata is None:
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "src/geoprocessing/routing/routing.pyx":1530
 * 
 *     tmp_flow_dir_nodata = flow_dir_raster_info['nodata'][
 *         flow_dir_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *     if tmp_flow_dir_nodata is None:
 *         flow_dir_nodata = 128
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_10, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1529
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 * 
 *     tmp_flow_dir_nodata = flow_dir_raster_info['nodata'][             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[1]-1]
 *     if tmp_flow_dir_nodata is None:
 */
  __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_tmp_flow_dir_nodata = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1531
 *     tmp_flow_dir_nodata = flow_dir_raster_info['nodata'][
 *         flow_dir_raster_path_band[1]-1]
 *     if tmp_flow_dir_nodata is None:             # <<<<<<<<<<<<<<
 *         flow_dir_nodata = 128
 *     else:
 */
  __pyx_t_6 = (__pyx_v_tmp_flow_dir_nodata == Py_None);
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":1532
 *         flow_dir_raster_path_band[1]-1]
 *     if tmp_flow_dir_nodata is None:
 *         flow_dir_nodata = 128             # <<<<<<<<<<<<<<
 *     else:
 *         flow_dir_nodata = tmp_flow_dir_nodata
 */
    __pyx_v_flow_dir_nodata = 0x80;

    /* "src/geoprocessing/routing/routing.pyx":1531
 *     tmp_flow_dir_nodata = flow_dir_raster_info['nodata'][
 *         flow_dir_raster_path_band[1]-1]
 *     if tmp_flow_dir_nodata is None:             # <<<<<<<<<<<<<<
 *         flow_dir_nodata = 128
 *     else:
 */
    goto __pyx_L11;
  }

  /* "src/geoprocessing/routing/routing.pyx":1534
 *         flow_dir_nodata = 128
 *     else:
 *         flow_dir_nodata = tmp_flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 */
  /*else*/ {
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_tmp_flow_dir_nodata); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1534, __pyx_L1_error)
    __pyx_v_flow_dir_nodata = __pyx_t_13;
  }
  __pyx_L11:;

  /* "src/geoprocessing/routing/routing.pyx":1537
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1538
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_raster_path_band, offset_only=True, largest_block=0):             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_flow_dir_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_flow_dir_raster_path_band);
  __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 1538, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 1538, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1537
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_8 = __pyx_t_1; __Pyx_INCREF(__pyx_t_8); __pyx_t_14 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_14 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_15 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1537, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_1); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1537, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_1); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1537, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_15(__pyx_t_8);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1537, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1539
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_win_xsize = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":1540
 *             flow_dir_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_win_ysize = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":1541
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1541, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_xoff = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":1542
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_yoff = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":1544
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":1545
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":1546
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))
 */
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":1547
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);

      /* "src/geoprocessing/routing/routing.pyx":1548
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))             # <<<<<<<<<<<<<<
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 */
      __pyx_t_3 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "src/geoprocessing/routing/routing.pyx":1547
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_kp_u_1f_complete, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_kp_u_1f_complete, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_kp_u_1f_complete);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_13, __pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_13, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":1544
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":1551
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1552
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array[:] = flow_dir_nodata
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_10 = 0;
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1551
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1553
 *         flow_dir_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)             # <<<<<<<<<<<<<<
 *         flow_dir_buffer_array[:] = flow_dir_nodata
 * 
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_uint8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1551
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1551, __pyx_L1_error)
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer);
      __pyx_t_13 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_13 < 0)) {
        PyErr_Fetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_flow_dir_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
        }
        __pyx_t_17 = __pyx_t_18 = __pyx_t_19 = 0;
      }
      __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].strides = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].strides = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1551, __pyx_L1_error)
    }
    __pyx_t_16 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flow_dir_buffer_array, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1554
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array[:] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # attempt to expand read block by a pixel boundary
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_buffer_array), __pyx_slice__6, __pyx_t_3) < 0)) __PYX_ERR(0, 1554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1557
 * 
 *         # attempt to expand read block by a pixel boundary
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_generate_read_bounds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":1558
 *         # attempt to expand read block by a pixel boundary
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)             # <<<<<<<<<<<<<<
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.uint8)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_raster_x_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_raster_y_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_offset_dict, __pyx_t_2, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_offset_dict, __pyx_t_2, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_v_offset_dict);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_13, __pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_13, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_13, __pyx_t_7);
      __pyx_t_2 = 0;
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1557, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_20 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_20 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_20);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_20 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_20 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_20)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }

    /* "src/geoprocessing/routing/routing.pyx":1557
 * 
 *         # attempt to expand read block by a pixel boundary
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 */
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1557, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_21 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_21 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_21);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_2,&__pyx_t_10,&__pyx_t_21};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1557, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_2,&__pyx_t_10,&__pyx_t_21};
      __pyx_t_22 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_22)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_22); if (unlikely(!item)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_22), 4) < 0) __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      goto __pyx_L18_unpacking_done;
      __pyx_L17_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_L18_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xa, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xb, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ya, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_yb, __pyx_t_21);
    __pyx_t_21 = 0;
    __Pyx_XDECREF_SET(__pyx_v_modified_offset_dict, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1559
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.uint8)
 * 
 */
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);

    /* "src/geoprocessing/routing/routing.pyx":1560
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.uint8)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 1560, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_1 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_1 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }

    /* "src/geoprocessing/routing/routing.pyx":1559
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.uint8)
 * 
 */
    __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1560
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.uint8)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_uint8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __pyx_t_21 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_21, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_20);
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1559
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.uint8)
 * 
 */
    __pyx_t_1 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_20 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_20);
    __pyx_t_1 = 0;
    __pyx_t_20 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_buffer_array), __pyx_t_21, __pyx_t_3) < 0)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1563
 * 
 *         # ensure these are set for the complier
 *         xi_n = -1             # <<<<<<<<<<<<<<
 *         yi_n = -1
 * 
 */
    __pyx_v_xi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":1564
 *         # ensure these are set for the complier
 *         xi_n = -1
 *         yi_n = -1             # <<<<<<<<<<<<<<
 * 
 *         # search block for to set flow direction
 */
    __pyx_v_yi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":1567
 * 
 *         # search block for to set flow direction
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_buffer_array[yi, xi]
 */
    __pyx_t_23 = (__pyx_v_win_ysize + 1);
    __pyx_t_24 = __pyx_t_23;
    for (__pyx_t_13 = 1; __pyx_t_13 < __pyx_t_24; __pyx_t_13+=1) {
      __pyx_v_yi = __pyx_t_13;

      /* "src/geoprocessing/routing/routing.pyx":1568
 *         # search block for to set flow direction
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 flow_dir = flow_dir_buffer_array[yi, xi]
 *                 if flow_dir == flow_dir_nodata:
 */
      __pyx_t_25 = (__pyx_v_win_xsize + 1);
      __pyx_t_26 = __pyx_t_25;
      for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_26; __pyx_t_9+=1) {
        __pyx_v_xi = __pyx_t_9;

        /* "src/geoprocessing/routing/routing.pyx":1569
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_buffer_array[yi, xi]             # <<<<<<<<<<<<<<
 *                 if flow_dir == flow_dir_nodata:
 *                     continue
 */
        __pyx_t_27 = __pyx_v_yi;
        __pyx_t_28 = __pyx_v_xi;
        __pyx_t_29 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_29 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape)) __pyx_t_29 = 0;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_29 = 1;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape)) __pyx_t_29 = 1;
        if (unlikely(__pyx_t_29 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_29);
          __PYX_ERR(0, 1569, __pyx_L1_error)
        }
        __pyx_v_flow_dir = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].strides));

        /* "src/geoprocessing/routing/routing.pyx":1570
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_buffer_array[yi, xi]
 *                 if flow_dir == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_5 = ((__pyx_v_flow_dir == __pyx_v_flow_dir_nodata) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1571
 *                 flow_dir = flow_dir_buffer_array[yi, xi]
 *                 if flow_dir == flow_dir_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 xi_n = xi+D8_XOFFSET[flow_dir]
 */
          goto __pyx_L21_continue;

          /* "src/geoprocessing/routing/routing.pyx":1570
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_buffer_array[yi, xi]
 *                 if flow_dir == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1573
 *                     continue
 * 
 *                 xi_n = xi+D8_XOFFSET[flow_dir]             # <<<<<<<<<<<<<<
 *                 yi_n = yi+D8_YOFFSET[flow_dir]
 * 
 */
        __pyx_v_xi_n = (__pyx_v_xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_flow_dir]));

        /* "src/geoprocessing/routing/routing.pyx":1574
 * 
 *                 xi_n = xi+D8_XOFFSET[flow_dir]
 *                 yi_n = yi+D8_YOFFSET[flow_dir]             # <<<<<<<<<<<<<<
 * 
 *                 if flow_dir_buffer_array[yi_n, xi_n] == flow_dir_nodata:
 */
        __pyx_v_yi_n = (__pyx_v_yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_flow_dir]));

        /* "src/geoprocessing/routing/routing.pyx":1576
 *                 yi_n = yi+D8_YOFFSET[flow_dir]
 * 
 *                 if flow_dir_buffer_array[yi_n, xi_n] == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     xi_root = xi-1+xoff
 *                     yi_root = yi-1+yoff
 */
        __pyx_t_28 = __pyx_v_yi_n;
        __pyx_t_27 = __pyx_v_xi_n;
        __pyx_t_29 = -1;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_29 = 0;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape)) __pyx_t_29 = 0;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_29 = 1;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape)) __pyx_t_29 = 1;
        if (unlikely(__pyx_t_29 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_29);
          __PYX_ERR(0, 1576, __pyx_L1_error)
        }
        __pyx_t_5 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].strides, __pyx_t_27, __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].strides)) == __pyx_v_flow_dir_nodata) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1577
 * 
 *                 if flow_dir_buffer_array[yi_n, xi_n] == flow_dir_nodata:
 *                     xi_root = xi-1+xoff             # <<<<<<<<<<<<<<
 *                     yi_root = yi-1+yoff
 * 
 */
          __pyx_v_xi_root = ((__pyx_v_xi - 1) + __pyx_v_xoff);

          /* "src/geoprocessing/routing/routing.pyx":1578
 *                 if flow_dir_buffer_array[yi_n, xi_n] == flow_dir_nodata:
 *                     xi_root = xi-1+xoff
 *                     yi_root = yi-1+yoff             # <<<<<<<<<<<<<<
 * 
 *                     if weight_raster is not None:
 */
          __pyx_v_yi_root = ((__pyx_v_yi - 1) + __pyx_v_yoff);

          /* "src/geoprocessing/routing/routing.pyx":1580
 *                     yi_root = yi-1+yoff
 * 
 *                     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                         weight_val = <double>weight_raster.get(
 *                             xi_root, yi_root)
 */
          __pyx_t_5 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
          __pyx_t_6 = (__pyx_t_5 != 0);
          if (__pyx_t_6) {

            /* "src/geoprocessing/routing/routing.pyx":1581
 * 
 *                     if weight_raster is not None:
 *                         weight_val = <double>weight_raster.get(             # <<<<<<<<<<<<<<
 *                             xi_root, yi_root)
 *                         if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
            __pyx_v_weight_val = ((double)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_weight_raster, __pyx_v_xi_root, __pyx_v_yi_root));

            /* "src/geoprocessing/routing/routing.pyx":1583
 *                         weight_val = <double>weight_raster.get(
 *                             xi_root, yi_root)
 *                         if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             weight_val = 0.0
 *                     else:
 */
            __pyx_t_6 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_weight_val, __pyx_v_weight_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_6) {

              /* "src/geoprocessing/routing/routing.pyx":1584
 *                             xi_root, yi_root)
 *                         if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                             weight_val = 0.0             # <<<<<<<<<<<<<<
 *                     else:
 *                         weight_val = 1.0
 */
              __pyx_v_weight_val = 0.0;

              /* "src/geoprocessing/routing/routing.pyx":1583
 *                         weight_val = <double>weight_raster.get(
 *                             xi_root, yi_root)
 *                         if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             weight_val = 0.0
 *                     else:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1580
 *                     yi_root = yi-1+yoff
 * 
 *                     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                         weight_val = <double>weight_raster.get(
 *                             xi_root, yi_root)
 */
            goto __pyx_L25;
          }

          /* "src/geoprocessing/routing/routing.pyx":1586
 *                             weight_val = 0.0
 *                     else:
 *                         weight_val = 1.0             # <<<<<<<<<<<<<<
 *                     search_stack.push(
 *                         FlowPixelType(xi_root, yi_root, 0, weight_val))
 */
          /*else*/ {
            __pyx_v_weight_val = 1.0;
          }
          __pyx_L25:;

          /* "src/geoprocessing/routing/routing.pyx":1588
 *                         weight_val = 1.0
 *                     search_stack.push(
 *                         FlowPixelType(xi_root, yi_root, 0, weight_val))             # <<<<<<<<<<<<<<
 * 
 *                 while not search_stack.empty():
 */
          __pyx_t_30.xi = __pyx_v_xi_root;
          __pyx_t_30.yi = __pyx_v_yi_root;
          __pyx_t_30.last_flow_dir = 0;
          __pyx_t_30.value = __pyx_v_weight_val;

          /* "src/geoprocessing/routing/routing.pyx":1587
 *                     else:
 *                         weight_val = 1.0
 *                     search_stack.push(             # <<<<<<<<<<<<<<
 *                         FlowPixelType(xi_root, yi_root, 0, weight_val))
 * 
 */
          __pyx_v_search_stack.push(__pyx_t_30);

          /* "src/geoprocessing/routing/routing.pyx":1576
 *                 yi_n = yi+D8_YOFFSET[flow_dir]
 * 
 *                 if flow_dir_buffer_array[yi_n, xi_n] == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     xi_root = xi-1+xoff
 *                     yi_root = yi-1+yoff
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1590
 *                         FlowPixelType(xi_root, yi_root, 0, weight_val))
 * 
 *                 while not search_stack.empty():             # <<<<<<<<<<<<<<
 *                     flow_pixel = search_stack.top()
 *                     search_stack.pop()
 */
        while (1) {
          __pyx_t_6 = ((!(__pyx_v_search_stack.empty() != 0)) != 0);
          if (!__pyx_t_6) break;

          /* "src/geoprocessing/routing/routing.pyx":1591
 * 
 *                 while not search_stack.empty():
 *                     flow_pixel = search_stack.top()             # <<<<<<<<<<<<<<
 *                     search_stack.pop()
 * 
 */
          __pyx_v_flow_pixel = __pyx_v_search_stack.top();

          /* "src/geoprocessing/routing/routing.pyx":1592
 *                 while not search_stack.empty():
 *                     flow_pixel = search_stack.top()
 *                     search_stack.pop()             # <<<<<<<<<<<<<<
 * 
 *                     preempted = 0
 */
          __pyx_v_search_stack.pop();

          /* "src/geoprocessing/routing/routing.pyx":1594
 *                     search_stack.pop()
 * 
 *                     preempted = 0             # <<<<<<<<<<<<<<
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 */
          __pyx_v_preempted = 0;

          /* "src/geoprocessing/routing/routing.pyx":1595
 * 
 *                     preempted = 0
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):             # <<<<<<<<<<<<<<
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 */
          for (__pyx_t_29 = __pyx_v_flow_pixel.last_flow_dir; __pyx_t_29 < 8; __pyx_t_29+=1) {
            __pyx_v_i_n = __pyx_t_29;

            /* "src/geoprocessing/routing/routing.pyx":1596
 *                     preempted = 0
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_xi_n = (__pyx_v_flow_pixel.xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1597
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 */
            __pyx_v_yi_n = (__pyx_v_flow_pixel.yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1598
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 */
            __pyx_t_5 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_5) {
            } else {
              __pyx_t_6 = __pyx_t_5;
              goto __pyx_L32_bool_binop_done;
            }
            __pyx_t_5 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_5) {
            } else {
              __pyx_t_6 = __pyx_t_5;
              goto __pyx_L32_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1599
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             # no upstream here
 *                             continue
 */
            __pyx_t_5 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_5) {
            } else {
              __pyx_t_6 = __pyx_t_5;
              goto __pyx_L32_bool_binop_done;
            }
            __pyx_t_5 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_6 = __pyx_t_5;
            __pyx_L32_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1598
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 */
            if (__pyx_t_6) {

              /* "src/geoprocessing/routing/routing.pyx":1601
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 *                             continue             # <<<<<<<<<<<<<<
 *                         upstream_flow_dir = <int>flow_dir_managed_raster.get(
 *                             xi_n, yi_n)
 */
              goto __pyx_L29_continue;

              /* "src/geoprocessing/routing/routing.pyx":1598
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1602
 *                             # no upstream here
 *                             continue
 *                         upstream_flow_dir = <int>flow_dir_managed_raster.get(             # <<<<<<<<<<<<<<
 *                             xi_n, yi_n)
 *                         if upstream_flow_dir == flow_dir_nodata or (
 */
            __pyx_v_upstream_flow_dir = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n));

            /* "src/geoprocessing/routing/routing.pyx":1604
 *                         upstream_flow_dir = <int>flow_dir_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if upstream_flow_dir == flow_dir_nodata or (             # <<<<<<<<<<<<<<
 *                                 upstream_flow_dir !=
 *                                 D8_REVERSE_DIRECTION[i_n]):
 */
            __pyx_t_5 = ((__pyx_v_upstream_flow_dir == __pyx_v_flow_dir_nodata) != 0);
            if (!__pyx_t_5) {
            } else {
              __pyx_t_6 = __pyx_t_5;
              goto __pyx_L37_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1605
 *                             xi_n, yi_n)
 *                         if upstream_flow_dir == flow_dir_nodata or (
 *                                 upstream_flow_dir !=             # <<<<<<<<<<<<<<
 *                                 D8_REVERSE_DIRECTION[i_n]):
 *                             # no upstream here
 */
            __pyx_t_5 = ((__pyx_v_upstream_flow_dir != (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_i_n])) != 0);
            __pyx_t_6 = __pyx_t_5;
            __pyx_L37_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1604
 *                         upstream_flow_dir = <int>flow_dir_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if upstream_flow_dir == flow_dir_nodata or (             # <<<<<<<<<<<<<<
 *                                 upstream_flow_dir !=
 *                                 D8_REVERSE_DIRECTION[i_n]):
 */
            if (__pyx_t_6) {

              /* "src/geoprocessing/routing/routing.pyx":1608
 *                                 D8_REVERSE_DIRECTION[i_n]):
 *                             # no upstream here
 *                             continue             # <<<<<<<<<<<<<<
 *                         upstream_flow_accum = <double>(
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 */
              goto __pyx_L29_continue;

              /* "src/geoprocessing/routing/routing.pyx":1604
 *                         upstream_flow_dir = <int>flow_dir_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if upstream_flow_dir == flow_dir_nodata or (             # <<<<<<<<<<<<<<
 *                                 upstream_flow_dir !=
 *                                 D8_REVERSE_DIRECTION[i_n]):
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1609
 *                             # no upstream here
 *                             continue
 *                         upstream_flow_accum = <double>(             # <<<<<<<<<<<<<<
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if _is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 */
            __pyx_v_upstream_flow_accum = ((double)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n));

            /* "src/geoprocessing/routing/routing.pyx":1611
 *                         upstream_flow_accum = <double>(
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if _is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             # process upstream before this one
 *                             flow_pixel.last_flow_dir = i_n
 */
            __pyx_t_6 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_upstream_flow_accum, __pyx_v_flow_accum_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_6) {

              /* "src/geoprocessing/routing/routing.pyx":1613
 *                         if _is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 *                             # process upstream before this one
 *                             flow_pixel.last_flow_dir = i_n             # <<<<<<<<<<<<<<
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:
 */
              __pyx_v_flow_pixel.last_flow_dir = __pyx_v_i_n;

              /* "src/geoprocessing/routing/routing.pyx":1614
 *                             # process upstream before this one
 *                             flow_pixel.last_flow_dir = i_n
 *                             search_stack.push(flow_pixel)             # <<<<<<<<<<<<<<
 *                             if weight_raster is not None:
 *                                 weight_val = <double>weight_raster.get(
 */
              __pyx_v_search_stack.push(__pyx_v_flow_pixel);

              /* "src/geoprocessing/routing/routing.pyx":1615
 *                             flow_pixel.last_flow_dir = i_n
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 */
              __pyx_t_6 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
              __pyx_t_5 = (__pyx_t_6 != 0);
              if (__pyx_t_5) {

                /* "src/geoprocessing/routing/routing.pyx":1616
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:
 *                                 weight_val = <double>weight_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
                __pyx_v_weight_val = ((double)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_weight_raster, __pyx_v_xi_n, __pyx_v_yi_n));

                /* "src/geoprocessing/routing/routing.pyx":1618
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                     weight_val = 0.0
 *                             else:
 */
                __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_weight_val, __pyx_v_weight_nodata, 1e-8, 1e-5) != 0);
                if (__pyx_t_5) {

                  /* "src/geoprocessing/routing/routing.pyx":1619
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                     weight_val = 0.0             # <<<<<<<<<<<<<<
 *                             else:
 *                                 weight_val = 1.0
 */
                  __pyx_v_weight_val = 0.0;

                  /* "src/geoprocessing/routing/routing.pyx":1618
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                     weight_val = 0.0
 *                             else:
 */
                }

                /* "src/geoprocessing/routing/routing.pyx":1615
 *                             flow_pixel.last_flow_dir = i_n
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 */
                goto __pyx_L40;
              }

              /* "src/geoprocessing/routing/routing.pyx":1621
 *                                     weight_val = 0.0
 *                             else:
 *                                 weight_val = 1.0             # <<<<<<<<<<<<<<
 *                             search_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 */
              /*else*/ {
                __pyx_v_weight_val = 1.0;
              }
              __pyx_L40:;

              /* "src/geoprocessing/routing/routing.pyx":1623
 *                                 weight_val = 1.0
 *                             search_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))             # <<<<<<<<<<<<<<
 *                             preempted = 1
 *                             break
 */
              __pyx_t_30.xi = __pyx_v_xi_n;
              __pyx_t_30.yi = __pyx_v_yi_n;
              __pyx_t_30.last_flow_dir = 0;
              __pyx_t_30.value = __pyx_v_weight_val;

              /* "src/geoprocessing/routing/routing.pyx":1622
 *                             else:
 *                                 weight_val = 1.0
 *                             search_stack.push(             # <<<<<<<<<<<<<<
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 *                             preempted = 1
 */
              __pyx_v_search_stack.push(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":1624
 *                             search_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 *                             preempted = 1             # <<<<<<<<<<<<<<
 *                             break
 *                         flow_pixel.value += upstream_flow_accum
 */
              __pyx_v_preempted = 1;

              /* "src/geoprocessing/routing/routing.pyx":1625
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 *                             preempted = 1
 *                             break             # <<<<<<<<<<<<<<
 *                         flow_pixel.value += upstream_flow_accum
 *                     if not preempted:
 */
              goto __pyx_L30_break;

              /* "src/geoprocessing/routing/routing.pyx":1611
 *                         upstream_flow_accum = <double>(
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if _is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             # process upstream before this one
 *                             flow_pixel.last_flow_dir = i_n
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1626
 *                             preempted = 1
 *                             break
 *                         flow_pixel.value += upstream_flow_accum             # <<<<<<<<<<<<<<
 *                     if not preempted:
 *                         flow_accum_managed_raster.set(
 */
            __pyx_v_flow_pixel.value = (__pyx_v_flow_pixel.value + __pyx_v_upstream_flow_accum);
            __pyx_L29_continue:;
          }
          __pyx_L30_break:;

          /* "src/geoprocessing/routing/routing.pyx":1627
 *                             break
 *                         flow_pixel.value += upstream_flow_accum
 *                     if not preempted:             # <<<<<<<<<<<<<<
 *                         flow_accum_managed_raster.set(
 *                             flow_pixel.xi, flow_pixel.yi,
 */
          __pyx_t_5 = ((!(__pyx_v_preempted != 0)) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1628
 *                         flow_pixel.value += upstream_flow_accum
 *                     if not preempted:
 *                         flow_accum_managed_raster.set(             # <<<<<<<<<<<<<<
 *                             flow_pixel.xi, flow_pixel.yi,
 *                             flow_pixel.value)
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_accum_managed_raster, __pyx_v_flow_pixel.xi, __pyx_v_flow_pixel.yi, __pyx_v_flow_pixel.value);

            /* "src/geoprocessing/routing/routing.pyx":1627
 *                             break
 *                         flow_pixel.value += upstream_flow_accum
 *                     if not preempted:             # <<<<<<<<<<<<<<
 *                         flow_accum_managed_raster.set(
 *                             flow_pixel.xi, flow_pixel.yi,
 */
          }
        }
        __pyx_L21_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":1537
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1631
 *                             flow_pixel.xi, flow_pixel.yi,
 *                             flow_pixel.value)
 *     flow_accum_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_accum_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_21 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_8 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1632
 *                             flow_pixel.value)
 *     flow_accum_managed_raster.close()
 *     flow_dir_managed_raster.close()             # <<<<<<<<<<<<<<
 *     if weight_raster is not None:
 *         weight_raster.close()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_dir_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_21 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_8 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1633
 *     flow_accum_managed_raster.close()
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 *     LOGGER.info('%.1f%% complete', 100.0)
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "src/geoprocessing/routing/routing.pyx":1634
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:
 *         weight_raster.close()             # <<<<<<<<<<<<<<
 *     LOGGER.info('%.1f%% complete', 100.0)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_weight_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_21 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_8 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1633
 *     flow_accum_managed_raster.close()
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 *     LOGGER.info('%.1f%% complete', 100.0)
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":1635
 *     if weight_raster is not None:
 *         weight_raster.close()
 *     LOGGER.info('%.1f%% complete', 100.0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1415
 * 
 * 
 * def flow_accumulation_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_accumulation_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_buffer_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_accum_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster);
  __Pyx_XDECREF(__pyx_v_flow_dir_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_weight_raster);
  __Pyx_XDECREF(__pyx_v_raw_weight_nodata);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster_info);
  __Pyx_XDECREF(__pyx_v_tmp_flow_dir_nodata);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_modified_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":1638
 * 
 * 
 * def flow_dir_mfd(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_9flow_dir_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_8flow_dir_mfd[] = "Multiple flow direction.\n\n    Parameters:\n        dem_raster_path_band (tuple): a path, band number tuple indicating the\n            DEM calculate flow direction. This DEM must not have hydrological\n            pits or else the target flow direction will be undefined.\n        target_flow_dir_path (str): path to a raster created by this call\n            of a 32 bit int raster of the same dimensions and projections as\n            ``dem_raster_path_band[0]``. The value of the pixel indicates the\n            proportion of flow from that pixel to its neighbors given these\n            indexes::\n\n                3 2 1\n                4 x 0\n                5 6 7\n\n            The pixel value is formatted as 8 separate 4 bit integers\n            compressed into a 32 bit int. To extract the proportion of flow\n            from a particular direction given the pixel value 'x' one can\n            shift and mask as follows ``0xF & (x >> (4*dir))``, where ``dir``\n            is one of the 8 directions indicated above.\n        working_dir (str): If not None, indicates where temporary files\n            should be created during this run. If this directory doesn't exist\n            it is created by this call.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_9flow_dir_mfd = {"flow_dir_mfd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_9flow_dir_mfd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_8flow_dir_mfd};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_9flow_dir_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dem_raster_path_band = 0;
  PyObject *__pyx_v_target_flow_dir_path = 0;
  PyObject *__pyx_v_working_dir = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_dir_mfd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dem_raster_path_band,&__pyx_n_s_target_flow_dir_path,&__pyx_n_s_working_dir,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[4] = {0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":1639
 * 
 * def flow_dir_mfd(
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """Multiple flow direction.
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = __pyx_k__9;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dem_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_flow_dir_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_dir_mfd", 0, 2, 4, 1); __PYX_ERR(0, 1638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_dir_mfd") < 0)) __PYX_ERR(0, 1638, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dem_raster_path_band = values[0];
    __pyx_v_target_flow_dir_path = values[1];
    __pyx_v_working_dir = values[2];
    __pyx_v_raster_driver_creation_tuple = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_dir_mfd", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1638, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_dir_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_8flow_dir_mfd(__pyx_self, __pyx_v_dem_raster_path_band, __pyx_v_target_flow_dir_path, __pyx_v_working_dir, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":1638
 * 
 * 
 * def flow_dir_mfd(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_8flow_dir_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_flow_dir_path, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyArrayObject *__pyx_v_dem_buffer_array = 0;
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_q;
  int __pyx_v_yi_q;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  double __pyx_v_root_height;
  double __pyx_v_n_height;
  double __pyx_v_dem_nodata;
  double __pyx_v_n_slope;
  double __pyx_v_drain_distance;
  double __pyx_v_n_drain_distance;
  std::queue<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType>  __pyx_v_drain_search_queue;
  double __pyx_v_downhill_slope_array[8];
  double __pyx_v_nodata_downhill_slope_array[8];
  double *__pyx_v_working_downhill_slope_array;
  double __pyx_v_sum_of_slope_weights;
  double __pyx_v_sum_of_nodata_slope_weights;
  int __pyx_v_compressed_integer_slopes;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_distance_drain_queue;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_nodata_distance_drain_queue;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_direction_drain_queue;
  std::queue<int>  __pyx_v_nodata_flow_dir_queue;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_dem_raster_info = NULL;
  PyObject *__pyx_v_base_nodata = NULL;
  long __pyx_v_mask_nodata;
  PyObject *__pyx_v_working_dir_path = NULL;
  PyObject *__pyx_v_flat_region_mask_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flat_region_mask_managed_raster = NULL;
  long __pyx_v_flow_dir_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  PyObject *__pyx_v_plateu_drain_mask_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_plateau_drain_mask_managed_raster = NULL;
  PyObject *__pyx_v_plateau_distance_path = NULL;
  int __pyx_v_plateau_distance_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_plateau_distance_managed_raster = NULL;
  PyObject *__pyx_v_compatable_dem_raster_path_band = NULL;
  PyObject *__pyx_v_dem_block_xsize = NULL;
  PyObject *__pyx_v_dem_block_ysize = NULL;
  PyObject *__pyx_v_raster_driver = NULL;
  PyObject *__pyx_v_dem_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_dem_managed_raster = NULL;
  PyObject *__pyx_v_dem_band = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_modified_offset_dict = NULL;
  double __pyx_v_sum_of_downhill_slopes;
  double __pyx_v_working_downhill_slope_sum;
  CYTHON_UNUSED size_t __pyx_v__;
  double __pyx_v_n_distance;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dem_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_dem_buffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyArrayObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType __pyx_t_30;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_IntQueueType __pyx_t_31;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_t_32;
  size_t __pyx_t_33;
  size_t __pyx_t_34;
  size_t __pyx_t_35;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flow_dir_mfd", 0);
  __pyx_pybuffer_dem_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_dem_buffer_array.refcount = 0;
  __pyx_pybuffernd_dem_buffer_array.data = NULL;
  __pyx_pybuffernd_dem_buffer_array.rcbuffer = &__pyx_pybuffer_dem_buffer_array;

  /* "src/geoprocessing/routing/routing.pyx":1736
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     # determine dem nodata in the working type, or set an improbable value
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":1740
 *     # determine dem nodata in the working type, or set an improbable value
 *     # if one can't be determined
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_raster_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1741
 *     # if one can't be determined
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *     if base_nodata is not None:
 *         # cast to a float64 since that's our operating array type
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_base_nodata = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1742
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:             # <<<<<<<<<<<<<<
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)
 */
  __pyx_t_5 = (__pyx_v_base_nodata != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "src/geoprocessing/routing/routing.pyx":1744
 *     if base_nodata is not None:
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)             # <<<<<<<<<<<<<<
 *     else:
 *         # pick some very improbable value since it's hard to deal with NaNs
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_base_nodata) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_base_nodata);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dem_nodata = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":1742
 *     dem_raster_info = pygeoprocessing.get_raster_info(dem_raster_path_band[0])
 *     base_nodata = dem_raster_info['nodata'][dem_raster_path_band[1]-1]
 *     if base_nodata is not None:             # <<<<<<<<<<<<<<
 *         # cast to a float64 since that's our operating array type
 *         dem_nodata = numpy.float64(base_nodata)
 */
    goto __pyx_L3;
  }

  /* "src/geoprocessing/routing/routing.pyx":1747
 *     else:
 *         # pick some very improbable value since it's hard to deal with NaNs
 *         dem_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     # these are used to determine if a sample is within the raster
 */
  /*else*/ {
    __pyx_v_dem_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;
  }
  __pyx_L3:;

  /* "src/geoprocessing/routing/routing.pyx":1750
 * 
 *     # these are used to determine if a sample is within the raster
 *     raster_x_size, raster_y_size = dem_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     # this is the nodata value for all the flat region and pit masks
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1750, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1750, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1750, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_raster_x_size = __pyx_t_9;
  __pyx_v_raster_y_size = __pyx_t_10;

  /* "src/geoprocessing/routing/routing.pyx":1753
 * 
 *     # this is the nodata value for all the flat region and pit masks
 *     mask_nodata = 0             # <<<<<<<<<<<<<<
 * 
 *     # set up the working dir for the mask rasters
 */
  __pyx_v_mask_nodata = 0;

  /* "src/geoprocessing/routing/routing.pyx":1756
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "src/geoprocessing/routing/routing.pyx":1757
 *     # set up the working dir for the mask rasters
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      __pyx_t_6 = (__pyx_v_working_dir != Py_None);
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/routing.pyx":1758
 *     try:
 *         if working_dir is not None:
 *             os.makedirs(working_dir)             # <<<<<<<<<<<<<<
 *     except OSError:
 *         pass
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_working_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_working_dir);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":1757
 *     # set up the working dir for the mask rasters
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":1756
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    }
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L11_try_end;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1759
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 *     except OSError:             # <<<<<<<<<<<<<<
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_10) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L7_exception_handled;
    }
    goto __pyx_L8_except_error;
    __pyx_L8_except_error:;

    /* "src/geoprocessing/routing/routing.pyx":1756
 * 
 *     # set up the working dir for the mask rasters
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L7_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    __pyx_L11_try_end:;
  }

  /* "src/geoprocessing/routing/routing.pyx":1761
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir,
 *         prefix='flow_dir_multiple_flow_dir_%s_' % time.strftime(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1762
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir,             # <<<<<<<<<<<<<<
 *         prefix='flow_dir_multiple_flow_dir_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dir, __pyx_v_working_dir) < 0) __PYX_ERR(0, 1762, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1763
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir,
 *         prefix='flow_dir_multiple_flow_dir_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_strftime); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1764
 *         dir=working_dir,
 *         prefix='flow_dir_multiple_flow_dir_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))             # <<<<<<<<<<<<<<
 * 
 *     # this raster is used to keep track of what pixels have been searched for
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_gmtime); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
    }
  }
  __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_16) {
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __pyx_t_16 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_kp_u_Y_m_d__H__M__S);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_10, __pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1763
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir,
 *         prefix='flow_dir_multiple_flow_dir_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_14 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_flow_dir_multiple_flow_dir__s, __pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefix, __pyx_t_14) < 0) __PYX_ERR(0, 1762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1761
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir,
 *         prefix='flow_dir_multiple_flow_dir_%s_' % time.strftime(
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_working_dir_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1769
 *     # a plateau. if a pixel is set, it means it is part of a locally
 *     # undrained area
 *     flat_region_mask_path = os.path.join(             # <<<<<<<<<<<<<<
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1770
 *     # undrained area
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 */
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_working_dir_path, __pyx_kp_u_flat_region_mask_tif};
    __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_working_dir_path, __pyx_kp_u_flat_region_mask_tif};
    __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_10, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_flat_region_mask_tif);
    __Pyx_GIVEREF(__pyx_kp_u_flat_region_mask_tif);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_10, __pyx_kp_u_flat_region_mask_tif);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flat_region_mask_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1771
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1772
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,             # <<<<<<<<<<<<<<
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1773
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flat_region_mask_managed_raster = _ManagedRaster(
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_mask_nodata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1771
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_v_flat_region_mask_path);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_15);
  __pyx_t_14 = 0;
  __pyx_t_1 = 0;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1774
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     flat_region_mask_managed_raster = _ManagedRaster(
 *         flat_region_mask_path, 1, 1)
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1774, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1771
 *     flat_region_mask_path = os.path.join(
 *         working_dir_path, 'flat_region_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], flat_region_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1775
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flat_region_mask_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flat_region_mask_path, 1, 1)
 * 
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_flat_region_mask_path);
  __Pyx_GIVEREF(__pyx_v_flat_region_mask_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_flat_region_mask_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_1);
  __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flat_region_mask_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1778
 *         flat_region_mask_path, 1, 1)
 * 
 *     flow_dir_nodata = 0             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,
 */
  __pyx_v_flow_dir_nodata = 0;

  /* "src/geoprocessing/routing/routing.pyx":1779
 * 
 *     flow_dir_nodata = 0
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,
 *         [flow_dir_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1780
 *     flow_dir_nodata = 0
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,             # <<<<<<<<<<<<<<
 *         [flow_dir_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1781
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,
 *         [flow_dir_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1779
 * 
 *     flow_dir_nodata = 0
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,
 *         [flow_dir_nodata],
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_target_flow_dir_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_dir_path);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_target_flow_dir_path);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_14);
  __pyx_t_15 = 0;
  __pyx_t_3 = 0;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1782
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,
 *         [flow_dir_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)
 * 
 */
  __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1782, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1779
 * 
 *     flow_dir_nodata = 0
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], target_flow_dir_path, gdal.GDT_Int32,
 *         [flow_dir_nodata],
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1783
 *         [flow_dir_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)             # <<<<<<<<<<<<<<
 * 
 *     plateu_drain_mask_path = os.path.join(
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_target_flow_dir_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_dir_path);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_target_flow_dir_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
  __pyx_t_14 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1785
 *     flow_dir_managed_raster = _ManagedRaster(target_flow_dir_path, 1, 1)
 * 
 *     plateu_drain_mask_path = os.path.join(             # <<<<<<<<<<<<<<
 *         working_dir_path, 'plateu_drain_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1786
 * 
 *     plateu_drain_mask_path = os.path.join(
 *         working_dir_path, 'plateu_drain_mask.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,
 */
  __pyx_t_2 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_working_dir_path, __pyx_kp_u_plateu_drain_mask_tif};
    __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_working_dir_path, __pyx_kp_u_plateu_drain_mask_tif};
    __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_plateu_drain_mask_tif);
    __Pyx_GIVEREF(__pyx_kp_u_plateu_drain_mask_tif);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_kp_u_plateu_drain_mask_tif);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_plateu_drain_mask_path = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1787
 *     plateu_drain_mask_path = os.path.join(
 *         working_dir_path, 'plateu_drain_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1788
 *         working_dir_path, 'plateu_drain_mask.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,             # <<<<<<<<<<<<<<
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1789
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_drain_mask_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_mask_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1787
 *     plateu_drain_mask_path = os.path.join(
 *         working_dir_path, 'plateu_drain_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_plateu_drain_mask_path);
  __Pyx_GIVEREF(__pyx_v_plateu_drain_mask_path);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_plateu_drain_mask_path);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_15);
  __pyx_t_14 = 0;
  __pyx_t_2 = 0;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1790
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     plateau_drain_mask_managed_raster = _ManagedRaster(
 *         plateu_drain_mask_path, 1, 1)
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1790, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1787
 *     plateu_drain_mask_path = os.path.join(
 *         working_dir_path, 'plateu_drain_mask.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateu_drain_mask_path, gdal.GDT_Byte,
 *         [mask_nodata],
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1791
 *         [mask_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_drain_mask_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         plateu_drain_mask_path, 1, 1)
 * 
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_plateu_drain_mask_path);
  __Pyx_GIVEREF(__pyx_v_plateu_drain_mask_path);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_plateu_drain_mask_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_1);
  __pyx_t_15 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_2, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_plateau_drain_mask_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_15);
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1798
 *     # raster_x_size * raster_y_size as a distance that's greater than the
 *     # longest plateau drain distance possible for this raster.
 *     plateau_distance_path = os.path.join(             # <<<<<<<<<<<<<<
 *         working_dir_path, 'plateau_distance.tif')
 *     plateau_distance_nodata = raster_x_size * raster_y_size
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1799
 *     # longest plateau drain distance possible for this raster.
 *     plateau_distance_path = os.path.join(
 *         working_dir_path, 'plateau_distance.tif')             # <<<<<<<<<<<<<<
 *     plateau_distance_nodata = raster_x_size * raster_y_size
 *     pygeoprocessing.new_raster_from_base(
 */
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_working_dir_path, __pyx_kp_u_plateau_distance_tif};
    __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_working_dir_path, __pyx_kp_u_plateau_distance_tif};
    __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_15);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_working_dir_path);
    __Pyx_GIVEREF(__pyx_v_working_dir_path);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_working_dir_path);
    __Pyx_INCREF(__pyx_kp_u_plateau_distance_tif);
    __Pyx_GIVEREF(__pyx_kp_u_plateau_distance_tif);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_kp_u_plateau_distance_tif);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_plateau_distance_path = __pyx_t_15;
  __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1800
 *     plateau_distance_path = os.path.join(
 *         working_dir_path, 'plateau_distance.tif')
 *     plateau_distance_nodata = raster_x_size * raster_y_size             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 */
  __pyx_v_plateau_distance_nodata = (__pyx_v_raster_x_size * __pyx_v_raster_y_size);

  /* "src/geoprocessing/routing/routing.pyx":1801
 *         working_dir_path, 'plateau_distance.tif')
 *     plateau_distance_nodata = raster_x_size * raster_y_size
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1802
 *     plateau_distance_nodata = raster_x_size * raster_y_size
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,             # <<<<<<<<<<<<<<
 *         [plateau_distance_nodata], fill_value_list=[
 *             raster_x_size * raster_y_size],
 */
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1803
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[             # <<<<<<<<<<<<<<
 *             raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_plateau_distance_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1801
 *         working_dir_path, 'plateau_distance.tif')
 *     plateau_distance_nodata = raster_x_size * raster_y_size
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[
 */
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_plateau_distance_path);
  __Pyx_GIVEREF(__pyx_v_plateau_distance_path);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_plateau_distance_path);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_14);
  __pyx_t_15 = 0;
  __pyx_t_1 = 0;
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1803
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[             # <<<<<<<<<<<<<<
 *             raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_14 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);

  /* "src/geoprocessing/routing/routing.pyx":1804
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[
 *             raster_x_size * raster_y_size],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_distance_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_raster_x_size * __pyx_v_raster_y_size)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":1803
 *     pygeoprocessing.new_raster_from_base(
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[             # <<<<<<<<<<<<<<
 *             raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_fill_value_list, __pyx_t_15) < 0) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1805
 *         [plateau_distance_nodata], fill_value_list=[
 *             raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     plateau_distance_managed_raster = _ManagedRaster(
 *         plateau_distance_path, 1, 1)
 */
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 1803, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1801
 *         working_dir_path, 'plateau_distance.tif')
 *     plateau_distance_nodata = raster_x_size * raster_y_size
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], plateau_distance_path, gdal.GDT_Float64,
 *         [plateau_distance_nodata], fill_value_list=[
 */
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1806
 *             raster_x_size * raster_y_size],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     plateau_distance_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         plateau_distance_path, 1, 1)
 * 
 */
  __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_v_plateau_distance_path);
  __Pyx_GIVEREF(__pyx_v_plateau_distance_path);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_plateau_distance_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_int_1);
  __pyx_t_14 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_15, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_plateau_distance_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1810
 * 
 *     # this raster is for random access of the DEM
 *     compatable_dem_raster_path_band = None             # <<<<<<<<<<<<<<
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_compatable_dem_raster_path_band = Py_None;

  /* "src/geoprocessing/routing/routing.pyx":1811
 *     # this raster is for random access of the DEM
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']             # <<<<<<<<<<<<<<
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 */
  __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_block_size); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
    PyObject* sequence = __pyx_t_14;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1811, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_15 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_15 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_15 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_15 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_15)) goto __pyx_L13_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_15);
    index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L13_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1811, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L14_unpacking_done;
    __pyx_L13_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1811, __pyx_L1_error)
    __pyx_L14_unpacking_done:;
  }
  __pyx_v_dem_block_xsize = __pyx_t_15;
  __pyx_t_15 = 0;
  __pyx_v_dem_block_ysize = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1812
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 */
  __pyx_t_14 = __Pyx_PyInt_SubtractObjC(__pyx_v_dem_block_xsize, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = PyNumber_And(__pyx_v_dem_block_xsize, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyInt_NeObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L16_bool_binop_done;
  }

  /* "src/geoprocessing/routing/routing.pyx":1813
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):             # <<<<<<<<<<<<<<
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 *         compatable_dem_raster_path_band = (
 */
  __pyx_t_14 = __Pyx_PyInt_SubtractObjC(__pyx_v_dem_block_ysize, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_3 = PyNumber_And(__pyx_v_dem_block_ysize, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyInt_NeObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L16_bool_binop_done:;

  /* "src/geoprocessing/routing/routing.pyx":1812
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 */
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":1814
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warning); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_14 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_3, __pyx_kp_u_dem_is_not_a_power_of_2_creating) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_kp_u_dem_is_not_a_power_of_2_creating);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1816
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),             # <<<<<<<<<<<<<<
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_os); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_working_dir_path, __pyx_kp_u_compatable_dem_tif};
      __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_14);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_working_dir_path, __pyx_kp_u_compatable_dem_tif};
      __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_14);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_v_working_dir_path);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_10, __pyx_v_working_dir_path);
      __Pyx_INCREF(__pyx_kp_u_compatable_dem_tif);
      __Pyx_GIVEREF(__pyx_kp_u_compatable_dem_tif);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_10, __pyx_kp_u_compatable_dem_tif);
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_2, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1817
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),
 *             dem_raster_path_band[1])             # <<<<<<<<<<<<<<
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 */
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);

    /* "src/geoprocessing/routing/routing.pyx":1816
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 *         compatable_dem_raster_path_band = (
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),             # <<<<<<<<<<<<<<
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_15);
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_compatable_dem_raster_path_band, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1818
 *             os.path.join(working_dir_path, 'compatable_dem.tif'),
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])             # <<<<<<<<<<<<<<
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_gdal); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_raster_driver_creation_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_3, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_15);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_raster_driver = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1819
 *             dem_raster_path_band[1])
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *         raster_driver.CreateCopy(
 *             compatable_dem_raster_path_band[0], dem_raster,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_gdal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_14, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_14, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_t_1);
      __pyx_t_14 = 0;
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_dem_raster = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1820
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_driver, __pyx_n_s_CreateCopy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":1821
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(
 *             compatable_dem_raster_path_band[0], dem_raster,             # <<<<<<<<<<<<<<
 *             options=raster_driver_creation_tuple[1])
 *         dem_raster = None
 */
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);

    /* "src/geoprocessing/routing/routing.pyx":1820
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15);
    __Pyx_INCREF(__pyx_v_dem_raster);
    __Pyx_GIVEREF(__pyx_v_dem_raster);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_dem_raster);
    __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1822
 *         raster_driver.CreateCopy(
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])             # <<<<<<<<<<<<<<
 *         dem_raster = None
 *         LOGGER.info("compatible dem complete")
 */
    __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_raster_driver_creation_tuple, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_options, __pyx_t_1) < 0) __PYX_ERR(0, 1822, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1820
 *         raster_driver = gdal.GetDriverByName(raster_driver_creation_tuple[0])
 *         dem_raster = gdal.OpenEx(dem_raster_path_band[0], gdal.OF_RASTER)
 *         raster_driver.CreateCopy(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1823
 *             compatable_dem_raster_path_band[0], dem_raster,
 *             options=raster_driver_creation_tuple[1])
 *         dem_raster = None             # <<<<<<<<<<<<<<
 *         LOGGER.info("compatible dem complete")
 *     else:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_dem_raster, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":1824
 *             options=raster_driver_creation_tuple[1])
 *         dem_raster = None
 *         LOGGER.info("compatible dem complete")             # <<<<<<<<<<<<<<
 *     else:
 *         compatable_dem_raster_path_band = dem_raster_path_band
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_kp_u_compatible_dem_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_compatible_dem_complete);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1812
 *     compatable_dem_raster_path_band = None
 *     dem_block_xsize, dem_block_ysize = dem_raster_info['block_size']
 *     if (dem_block_xsize & (dem_block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *             dem_block_ysize & (dem_block_ysize - 1) != 0):
 *         LOGGER.warning("dem is not a power of 2, creating a copy that is.")
 */
    goto __pyx_L15;
  }

  /* "src/geoprocessing/routing/routing.pyx":1826
 *         LOGGER.info("compatible dem complete")
 *     else:
 *         compatable_dem_raster_path_band = dem_raster_path_band             # <<<<<<<<<<<<<<
 *     dem_managed_raster = _ManagedRaster(
 *         compatable_dem_raster_path_band[0],
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_dem_raster_path_band);
    __Pyx_DECREF_SET(__pyx_v_compatable_dem_raster_path_band, __pyx_v_dem_raster_path_band);
  }
  __pyx_L15:;

  /* "src/geoprocessing/routing/routing.pyx":1828
 *         compatable_dem_raster_path_band = dem_raster_path_band
 *     dem_managed_raster = _ManagedRaster(
 *         compatable_dem_raster_path_band[0],             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[1], 0)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":1829
 *     dem_managed_raster = _ManagedRaster(
 *         compatable_dem_raster_path_band[0],
 *         compatable_dem_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     # and this raster is for efficient block-by-block reading of the dem
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":1827
 *     else:
 *         compatable_dem_raster_path_band = dem_raster_path_band
 *     dem_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[0],
 *         compatable_dem_raster_path_band[1], 0)
 */
  __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_int_0);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_v_dem_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1832
 * 
 *     # and this raster is for efficient block-by-block reading of the dem
 *     dem_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)
 *     dem_band = dem_raster.GetRasterBand(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_gdal); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1833
 *     # and this raster is for efficient block-by-block reading of the dem
 *     dem_raster = gdal.OpenEx(
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     dem_band = dem_raster.GetRasterBand(
 *         compatable_dem_raster_path_band[1])
 */
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_15, __pyx_t_14};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_15, __pyx_t_14};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_t_14);
    __pyx_t_15 = 0;
    __pyx_t_14 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XDECREF_SET(__pyx_v_dem_raster, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1834
 *     dem_raster = gdal.OpenEx(
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)
 *     dem_band = dem_raster.GetRasterBand(             # <<<<<<<<<<<<<<
 *         compatable_dem_raster_path_band[1])
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":1835
 *         compatable_dem_raster_path_band[0], gdal.OF_RASTER)
 *     dem_band = dem_raster.GetRasterBand(
 *         compatable_dem_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_compatable_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_14, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dem_band = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1838
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1839
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             compatable_dem_raster_path_band, offset_only=True,             # <<<<<<<<<<<<<<
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_compatable_dem_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_compatable_dem_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_compatable_dem_raster_path_band);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 1839, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 1839, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1838
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
    __pyx_t_3 = __pyx_t_14; __Pyx_INCREF(__pyx_t_3); __pyx_t_17 = 0;
    __pyx_t_18 = NULL;
  } else {
    __pyx_t_17 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_18 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1838, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  for (;;) {
    if (likely(!__pyx_t_18)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_14 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1838, __pyx_L1_error)
        #else
        __pyx_t_14 = PySequence_ITEM(__pyx_t_3, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        #endif
      } else {
        if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1838, __pyx_L1_error)
        #else
        __pyx_t_14 = PySequence_ITEM(__pyx_t_3, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        #endif
      }
    } else {
      __pyx_t_14 = __pyx_t_18(__pyx_t_3);
      if (unlikely(!__pyx_t_14)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1838, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_14);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1841
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1841, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_win_xsize = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1842
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_win_ysize = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1843
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_xoff = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1844
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1844, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_yoff = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":1846
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":1847
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":1848
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))
 */
      __pyx_t_14 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "src/geoprocessing/routing/routing.pyx":1849
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "src/geoprocessing/routing/routing.pyx":1850
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))             # <<<<<<<<<<<<<<
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 */
      __pyx_t_15 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "src/geoprocessing/routing/routing.pyx":1849
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_kp_u_1f_complete, __pyx_t_2};
        __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1849, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_kp_u_1f_complete, __pyx_t_2};
        __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1849, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1849, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_15) {
          __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15); __pyx_t_15 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_kp_u_1f_complete);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1849, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "src/geoprocessing/routing/routing.pyx":1846
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":1853
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_numpy); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1854
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.float64)
 *         dem_buffer_array[:] = dem_nodata
 */
    __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_14, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_14, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1853
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1855
 *         dem_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)             # <<<<<<<<<<<<<<
 *         dem_buffer_array[:] = dem_nodata
 * 
 */
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(0, 1855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1853
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         dem_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 */
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1853, __pyx_L1_error)
    __pyx_t_19 = ((PyArrayObject *)__pyx_t_15);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer);
      __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_10 < 0)) {
        PyErr_Fetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_dem_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
        }
        __pyx_t_13 = __pyx_t_12 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_dem_buffer_array.diminfo[0].strides = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dem_buffer_array.diminfo[1].strides = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape = __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1853, __pyx_L1_error)
    }
    __pyx_t_19 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dem_buffer_array, ((PyArrayObject *)__pyx_t_15));
    __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1856
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 *         dem_buffer_array[:] = dem_nodata             # <<<<<<<<<<<<<<
 * 
 *         # check if we can widen the border to include real data from the
 */
    __pyx_t_15 = PyFloat_FromDouble(__pyx_v_dem_nodata); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_dem_buffer_array), __pyx_slice__6, __pyx_t_15) < 0)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1860
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_generate_read_bounds); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);

    /* "src/geoprocessing/routing/routing.pyx":1861
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)             # <<<<<<<<<<<<<<
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.float64)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_raster_x_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_raster_y_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_offset_dict, __pyx_t_2, __pyx_t_1};
      __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_offset_dict, __pyx_t_2, __pyx_t_1};
      __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_v_offset_dict);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_10, __pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_10, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_10, __pyx_t_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
      PyObject* sequence = __pyx_t_15;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1860, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_14 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_16);
      #else
      __pyx_t_14 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      #endif
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext;
      index = 0; __pyx_t_14 = __pyx_t_8(__pyx_t_1); if (unlikely(!__pyx_t_14)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_14);
      index = 1; __pyx_t_16 = __pyx_t_8(__pyx_t_1); if (unlikely(!__pyx_t_16)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1860, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L22_unpacking_done;
      __pyx_L21_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1860, __pyx_L1_error)
      __pyx_L22_unpacking_done:;
    }

    /* "src/geoprocessing/routing/routing.pyx":1860
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 */
    if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
      PyObject* sequence = __pyx_t_14;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1860, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_20 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_20 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_20);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_4,&__pyx_t_20};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1860, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_4,&__pyx_t_20};
      __pyx_t_21 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_21)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_8(__pyx_t_21); if (unlikely(!item)) goto __pyx_L23_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_21), 4) < 0) __PYX_ERR(0, 1860, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      goto __pyx_L24_unpacking_done;
      __pyx_L23_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1860, __pyx_L1_error)
      __pyx_L24_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xa, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xb, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ya, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_yb, __pyx_t_20);
    __pyx_t_20 = 0;
    __Pyx_XDECREF_SET(__pyx_v_modified_offset_dict, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1862
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.float64)
 * 
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_dem_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);

    /* "src/geoprocessing/routing/routing.pyx":1863
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.float64)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 1863, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_14 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
    } else {
      __pyx_t_14 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
    }

    /* "src/geoprocessing/routing/routing.pyx":1862
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.float64)
 * 
 */
    __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_empty_tuple, __pyx_t_14); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1863
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.float64)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_astype); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_numpy); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_float64); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_20 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_20)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_20);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_15 = (__pyx_t_20) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_20, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_16);
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1862
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         dem_buffer_array[ya:yb, xa:xb] = dem_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.float64)
 * 
 */
    __pyx_t_14 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_16 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_16);
    __pyx_t_14 = 0;
    __pyx_t_16 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_dem_buffer_array), __pyx_t_20, __pyx_t_15) < 0)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":1866
 * 
 *         # ensure these are set for the complier
 *         xi_n = -1             # <<<<<<<<<<<<<<
 *         yi_n = -1
 * 
 */
    __pyx_v_xi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":1867
 *         # ensure these are set for the complier
 *         xi_n = -1
 *         yi_n = -1             # <<<<<<<<<<<<<<
 * 
 *         # search block for to set flow direction
 */
    __pyx_v_yi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":1870
 * 
 *         # search block for to set flow direction
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]
 */
    __pyx_t_22 = (__pyx_v_win_ysize + 1);
    __pyx_t_23 = __pyx_t_22;
    for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_23; __pyx_t_10+=1) {
      __pyx_v_yi = __pyx_t_10;

      /* "src/geoprocessing/routing/routing.pyx":1871
 *         # search block for to set flow direction
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):
 */
      __pyx_t_24 = (__pyx_v_win_xsize + 1);
      __pyx_t_25 = __pyx_t_24;
      for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_25; __pyx_t_9+=1) {
        __pyx_v_xi = __pyx_t_9;

        /* "src/geoprocessing/routing/routing.pyx":1872
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]             # <<<<<<<<<<<<<<
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):
 *                     continue
 */
        __pyx_t_26 = __pyx_v_yi;
        __pyx_t_27 = __pyx_v_xi;
        __pyx_t_28 = -1;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_28 = 0;
        } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape)) __pyx_t_28 = 0;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_28 = 1;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape)) __pyx_t_28 = 1;
        if (unlikely(__pyx_t_28 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_28);
          __PYX_ERR(0, 1872, __pyx_L1_error)
        }
        __pyx_v_root_height = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_dem_buffer_array.diminfo[0].strides, __pyx_t_27, __pyx_pybuffernd_dem_buffer_array.diminfo[1].strides));

        /* "src/geoprocessing/routing/routing.pyx":1873
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_root_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1874
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # this value is set in case it turns out to be the root of a
 */
          goto __pyx_L27_continue;

          /* "src/geoprocessing/routing/routing.pyx":1873
 *             for xi in range(1, win_xsize+1):
 *                 root_height = dem_buffer_array[yi, xi]
 *                 if _is_close(root_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1879
 *                 # pit, we'll start the fill from this pixel in the last phase
 *                 # of the algorithm
 *                 xi_root = xi-1+xoff             # <<<<<<<<<<<<<<
 *                 yi_root = yi-1+yoff
 * 
 */
        __pyx_v_xi_root = ((__pyx_v_xi - 1) + __pyx_v_xoff);

        /* "src/geoprocessing/routing/routing.pyx":1880
 *                 # of the algorithm
 *                 xi_root = xi-1+xoff
 *                 yi_root = yi-1+yoff             # <<<<<<<<<<<<<<
 * 
 *                 if flow_dir_managed_raster.get(
 */
        __pyx_v_yi_root = ((__pyx_v_yi - 1) + __pyx_v_yoff);

        /* "src/geoprocessing/routing/routing.pyx":1883
 * 
 *                 if flow_dir_managed_raster.get(
 *                         xi_root, yi_root) != flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     # already been defined
 *                     continue
 */
        __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root) != __pyx_v_flow_dir_nodata) != 0);

        /* "src/geoprocessing/routing/routing.pyx":1882
 *                 yi_root = yi-1+yoff
 * 
 *                 if flow_dir_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root) != flow_dir_nodata:
 *                     # already been defined
 */
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1885
 *                         xi_root, yi_root) != flow_dir_nodata:
 *                     # already been defined
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # PHASE 1 - try to set the direction based on local values
 */
          goto __pyx_L27_continue;

          /* "src/geoprocessing/routing/routing.pyx":1882
 *                 yi_root = yi-1+yoff
 * 
 *                 if flow_dir_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root) != flow_dir_nodata:
 *                     # already been defined
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1891
 *                 # undefined, the largest slope seen so far is flat, and the
 *                 # largest nodata is at least a diagonal away
 *                 sum_of_downhill_slopes = 0.0             # <<<<<<<<<<<<<<
 *                 for i_n in range(8):
 *                     # initialize downhill slopes to 0.0
 */
        __pyx_v_sum_of_downhill_slopes = 0.0;

        /* "src/geoprocessing/routing/routing.pyx":1892
 *                 # largest nodata is at least a diagonal away
 *                 sum_of_downhill_slopes = 0.0
 *                 for i_n in range(8):             # <<<<<<<<<<<<<<
 *                     # initialize downhill slopes to 0.0
 *                     downhill_slope_array[i_n] = 0.0
 */
        for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
          __pyx_v_i_n = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":1894
 *                 for i_n in range(8):
 *                     # initialize downhill slopes to 0.0
 *                     downhill_slope_array[i_n] = 0.0             # <<<<<<<<<<<<<<
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]
 */
          (__pyx_v_downhill_slope_array[__pyx_v_i_n]) = 0.0;

          /* "src/geoprocessing/routing/routing.pyx":1895
 *                     # initialize downhill slopes to 0.0
 *                     downhill_slope_array[i_n] = 0.0
 *                     xi_n = xi+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 */
          __pyx_v_xi_n = (__pyx_v_xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":1896
 *                     downhill_slope_array[i_n] = 0.0
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
          __pyx_v_yi_n = (__pyx_v_yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":1897
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]             # <<<<<<<<<<<<<<
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         continue
 */
          __pyx_t_27 = __pyx_v_yi_n;
          __pyx_t_26 = __pyx_v_xi_n;
          __pyx_t_29 = -1;
          if (__pyx_t_27 < 0) {
            __pyx_t_27 += __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape;
            if (unlikely(__pyx_t_27 < 0)) __pyx_t_29 = 0;
          } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_dem_buffer_array.diminfo[0].shape)) __pyx_t_29 = 0;
          if (__pyx_t_26 < 0) {
            __pyx_t_26 += __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape;
            if (unlikely(__pyx_t_26 < 0)) __pyx_t_29 = 1;
          } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_dem_buffer_array.diminfo[1].shape)) __pyx_t_29 = 1;
          if (unlikely(__pyx_t_29 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_29);
            __PYX_ERR(0, 1897, __pyx_L1_error)
          }
          __pyx_v_n_height = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_dem_buffer_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_dem_buffer_array.diminfo[1].strides));

          /* "src/geoprocessing/routing/routing.pyx":1898
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         continue
 *                     n_slope = root_height - n_height
 */
          __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1899
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         continue             # <<<<<<<<<<<<<<
 *                     n_slope = root_height - n_height
 *                     if n_slope > 0.0:
 */
            goto __pyx_L31_continue;

            /* "src/geoprocessing/routing/routing.pyx":1898
 *                     yi_n = yi+D8_YOFFSET[i_n]
 *                     n_height = dem_buffer_array[yi_n, xi_n]
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         continue
 *                     n_slope = root_height - n_height
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":1900
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         continue
 *                     n_slope = root_height - n_height             # <<<<<<<<<<<<<<
 *                     if n_slope > 0.0:
 *                         if i_n & 1:
 */
          __pyx_v_n_slope = (__pyx_v_root_height - __pyx_v_n_height);

          /* "src/geoprocessing/routing/routing.pyx":1901
 *                         continue
 *                     n_slope = root_height - n_height
 *                     if n_slope > 0.0:             # <<<<<<<<<<<<<<
 *                         if i_n & 1:
 *                             # if diagonal, adjust the slope
 */
          __pyx_t_5 = ((__pyx_v_n_slope > 0.0) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1902
 *                     n_slope = root_height - n_height
 *                     if n_slope > 0.0:
 *                         if i_n & 1:             # <<<<<<<<<<<<<<
 *                             # if diagonal, adjust the slope
 *                             n_slope *= SQRT2_INV
 */
            __pyx_t_5 = ((__pyx_v_i_n & 1) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1904
 *                         if i_n & 1:
 *                             # if diagonal, adjust the slope
 *                             n_slope *= SQRT2_INV             # <<<<<<<<<<<<<<
 *                         downhill_slope_array[i_n] = n_slope
 *                         sum_of_downhill_slopes += n_slope
 */
              __pyx_v_n_slope = (__pyx_v_n_slope * __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV);

              /* "src/geoprocessing/routing/routing.pyx":1902
 *                     n_slope = root_height - n_height
 *                     if n_slope > 0.0:
 *                         if i_n & 1:             # <<<<<<<<<<<<<<
 *                             # if diagonal, adjust the slope
 *                             n_slope *= SQRT2_INV
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1905
 *                             # if diagonal, adjust the slope
 *                             n_slope *= SQRT2_INV
 *                         downhill_slope_array[i_n] = n_slope             # <<<<<<<<<<<<<<
 *                         sum_of_downhill_slopes += n_slope
 * 
 */
            (__pyx_v_downhill_slope_array[__pyx_v_i_n]) = __pyx_v_n_slope;

            /* "src/geoprocessing/routing/routing.pyx":1906
 *                             n_slope *= SQRT2_INV
 *                         downhill_slope_array[i_n] = n_slope
 *                         sum_of_downhill_slopes += n_slope             # <<<<<<<<<<<<<<
 * 
 *                 if sum_of_downhill_slopes > 0.0:
 */
            __pyx_v_sum_of_downhill_slopes = (__pyx_v_sum_of_downhill_slopes + __pyx_v_n_slope);

            /* "src/geoprocessing/routing/routing.pyx":1901
 *                         continue
 *                     n_slope = root_height - n_height
 *                     if n_slope > 0.0:             # <<<<<<<<<<<<<<
 *                         if i_n & 1:
 *                             # if diagonal, adjust the slope
 */
          }
          __pyx_L31_continue:;
        }

        /* "src/geoprocessing/routing/routing.pyx":1908
 *                         sum_of_downhill_slopes += n_slope
 * 
 *                 if sum_of_downhill_slopes > 0.0:             # <<<<<<<<<<<<<<
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):
 */
        __pyx_t_5 = ((__pyx_v_sum_of_downhill_slopes > 0.0) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":1909
 * 
 *                 if sum_of_downhill_slopes > 0.0:
 *                     compressed_integer_slopes = 0             # <<<<<<<<<<<<<<
 *                     for i_n in range(8):
 *                         compressed_integer_slopes |= (<int>(
 */
          __pyx_v_compressed_integer_slopes = 0;

          /* "src/geoprocessing/routing/routing.pyx":1910
 *                 if sum_of_downhill_slopes > 0.0:
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         compressed_integer_slopes |= (<int>(
 *                             0.5 + downhill_slope_array[i_n] /
 */
          for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
            __pyx_v_i_n = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":1912
 *                     for i_n in range(8):
 *                         compressed_integer_slopes |= (<int>(
 *                             0.5 + downhill_slope_array[i_n] /             # <<<<<<<<<<<<<<
 *                             sum_of_downhill_slopes * 0xF)) << (i_n * 4)
 * 
 */
            if (unlikely(__pyx_v_sum_of_downhill_slopes == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 1912, __pyx_L1_error)
            }

            /* "src/geoprocessing/routing/routing.pyx":1911
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):
 *                         compressed_integer_slopes |= (<int>(             # <<<<<<<<<<<<<<
 *                             0.5 + downhill_slope_array[i_n] /
 *                             sum_of_downhill_slopes * 0xF)) << (i_n * 4)
 */
            __pyx_v_compressed_integer_slopes = (__pyx_v_compressed_integer_slopes | (((int)(0.5 + (((__pyx_v_downhill_slope_array[__pyx_v_i_n]) / __pyx_v_sum_of_downhill_slopes) * 15.0))) << (__pyx_v_i_n * 4)));
          }

          /* "src/geoprocessing/routing/routing.pyx":1915
 *                             sum_of_downhill_slopes * 0xF)) << (i_n * 4)
 * 
 *                     flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root, compressed_integer_slopes)
 *                     continue
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, __pyx_v_compressed_integer_slopes);

          /* "src/geoprocessing/routing/routing.pyx":1917
 *                     flow_dir_managed_raster.set(
 *                         xi_root, yi_root, compressed_integer_slopes)
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # PHASE 2 - search for what drains the plateau, prefer
 */
          goto __pyx_L27_continue;

          /* "src/geoprocessing/routing/routing.pyx":1908
 *                         sum_of_downhill_slopes += n_slope
 * 
 *                 if sum_of_downhill_slopes > 0.0:             # <<<<<<<<<<<<<<
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":1925
 *                 # otherwise, this pixel doesn't drain locally, so it must
 *                 # be a plateau, search for the drains of the plateau
 *                 drain_search_queue.push(CoordinateType(xi_root, yi_root))             # <<<<<<<<<<<<<<
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)
 * 
 */
        __pyx_t_30.xi = __pyx_v_xi_root;
        __pyx_t_30.yi = __pyx_v_yi_root;
        __pyx_v_drain_search_queue.push(__pyx_t_30);

        /* "src/geoprocessing/routing/routing.pyx":1926
 *                 # be a plateau, search for the drains of the plateau
 *                 drain_search_queue.push(CoordinateType(xi_root, yi_root))
 *                 flat_region_mask_managed_raster.set(xi_root, yi_root, 1)             # <<<<<<<<<<<<<<
 * 
 *                 # this loop does a BFS starting at this pixel to all pixels
 */
        __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, 1.0);

        /* "src/geoprocessing/routing/routing.pyx":1931
 *                 # of the same height. if a drain is encountered, it is pushed
 *                 # on a queue for later processing.
 *                 while not drain_search_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = drain_search_queue.front().xi
 *                     yi_q = drain_search_queue.front().yi
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_drain_search_queue.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":1932
 *                 # on a queue for later processing.
 *                 while not drain_search_queue.empty():
 *                     xi_q = drain_search_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = drain_search_queue.front().yi
 *                     drain_search_queue.pop()
 */
          __pyx_t_28 = __pyx_v_drain_search_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":1933
 *                 while not drain_search_queue.empty():
 *                     xi_q = drain_search_queue.front().xi
 *                     yi_q = drain_search_queue.front().yi             # <<<<<<<<<<<<<<
 *                     drain_search_queue.pop()
 * 
 */
          __pyx_t_28 = __pyx_v_drain_search_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":1934
 *                     xi_q = drain_search_queue.front().xi
 *                     yi_q = drain_search_queue.front().yi
 *                     drain_search_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                     sum_of_slope_weights = 0.0
 */
          __pyx_v_drain_search_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":1936
 *                     drain_search_queue.pop()
 * 
 *                     sum_of_slope_weights = 0.0             # <<<<<<<<<<<<<<
 *                     sum_of_nodata_slope_weights = 0.0
 *                     for i_n in range(8):
 */
          __pyx_v_sum_of_slope_weights = 0.0;

          /* "src/geoprocessing/routing/routing.pyx":1937
 * 
 *                     sum_of_slope_weights = 0.0
 *                     sum_of_nodata_slope_weights = 0.0             # <<<<<<<<<<<<<<
 *                     for i_n in range(8):
 *                         # initialize downhill slopes to 0.0
 */
          __pyx_v_sum_of_nodata_slope_weights = 0.0;

          /* "src/geoprocessing/routing/routing.pyx":1938
 *                     sum_of_slope_weights = 0.0
 *                     sum_of_nodata_slope_weights = 0.0
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         # initialize downhill slopes to 0.0
 *                         downhill_slope_array[i_n] = 0.0
 */
          for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
            __pyx_v_i_n = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":1940
 *                     for i_n in range(8):
 *                         # initialize downhill slopes to 0.0
 *                         downhill_slope_array[i_n] = 0.0             # <<<<<<<<<<<<<<
 *                         nodata_downhill_slope_array[i_n] = 0.0
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 */
            (__pyx_v_downhill_slope_array[__pyx_v_i_n]) = 0.0;

            /* "src/geoprocessing/routing/routing.pyx":1941
 *                         # initialize downhill slopes to 0.0
 *                         downhill_slope_array[i_n] = 0.0
 *                         nodata_downhill_slope_array[i_n] = 0.0             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
            (__pyx_v_nodata_downhill_slope_array[__pyx_v_i_n]) = 0.0;

            /* "src/geoprocessing/routing/routing.pyx":1942
 *                         downhill_slope_array[i_n] = 0.0
 *                         nodata_downhill_slope_array[i_n] = 0.0
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1943
 *                         nodata_downhill_slope_array[i_n] = 0.0
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":1945
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata
 */
            __pyx_t_6 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L44_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L44_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":1946
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             n_height = dem_nodata
 *                         else:
 */
            __pyx_t_6 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L44_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L44_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":1945
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1947
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata             # <<<<<<<<<<<<<<
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 */
              __pyx_v_n_height = __pyx_v_dem_nodata;

              /* "src/geoprocessing/routing/routing.pyx":1945
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             n_height = dem_nodata
 */
              goto __pyx_L43;
            }

            /* "src/geoprocessing/routing/routing.pyx":1949
 *                             n_height = dem_nodata
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 */
            /*else*/ {
              __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);
            }
            __pyx_L43:;

            /* "src/geoprocessing/routing/routing.pyx":1950
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             sum_of_nodata_slope_weights += n_slope
 */
            __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1951
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0             # <<<<<<<<<<<<<<
 *                             sum_of_nodata_slope_weights += n_slope
 *                             nodata_downhill_slope_array[i_n] = n_slope
 */
              if (((__pyx_v_i_n & 1) != 0)) {
                __pyx_t_7 = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV;
              } else {
                __pyx_t_7 = 1.0;
              }
              __pyx_v_n_slope = __pyx_t_7;

              /* "src/geoprocessing/routing/routing.pyx":1952
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             sum_of_nodata_slope_weights += n_slope             # <<<<<<<<<<<<<<
 *                             nodata_downhill_slope_array[i_n] = n_slope
 *                             continue
 */
              __pyx_v_sum_of_nodata_slope_weights = (__pyx_v_sum_of_nodata_slope_weights + __pyx_v_n_slope);

              /* "src/geoprocessing/routing/routing.pyx":1953
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             sum_of_nodata_slope_weights += n_slope
 *                             nodata_downhill_slope_array[i_n] = n_slope             # <<<<<<<<<<<<<<
 *                             continue
 *                         n_slope = root_height - n_height
 */
              (__pyx_v_nodata_downhill_slope_array[__pyx_v_i_n]) = __pyx_v_n_slope;

              /* "src/geoprocessing/routing/routing.pyx":1954
 *                             sum_of_nodata_slope_weights += n_slope
 *                             nodata_downhill_slope_array[i_n] = n_slope
 *                             continue             # <<<<<<<<<<<<<<
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:
 */
              goto __pyx_L41_continue;

              /* "src/geoprocessing/routing/routing.pyx":1950
 *                         else:
 *                             n_height = dem_managed_raster.get(xi_n, yi_n)
 *                         if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             sum_of_nodata_slope_weights += n_slope
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1955
 *                             nodata_downhill_slope_array[i_n] = n_slope
 *                             continue
 *                         n_slope = root_height - n_height             # <<<<<<<<<<<<<<
 *                         if n_slope < 0:
 *                             continue
 */
            __pyx_v_n_slope = (__pyx_v_root_height - __pyx_v_n_height);

            /* "src/geoprocessing/routing/routing.pyx":1956
 *                             continue
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_slope == 0.0:
 */
            __pyx_t_5 = ((__pyx_v_n_slope < 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1957
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(
 */
              goto __pyx_L41_continue;

              /* "src/geoprocessing/routing/routing.pyx":1956
 *                             continue
 *                         n_slope = root_height - n_height
 *                         if n_slope < 0:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_slope == 0.0:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1958
 *                         if n_slope < 0:
 *                             continue
 *                         if n_slope == 0.0:             # <<<<<<<<<<<<<<
 *                             if flat_region_mask_managed_raster.get(
 *                                     xi_n, yi_n) == mask_nodata:
 */
            __pyx_t_5 = ((__pyx_v_n_slope == 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1960
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(
 *                                     xi_n, yi_n) == mask_nodata:             # <<<<<<<<<<<<<<
 *                                 # only grow if it's at the same level and not
 *                                 # previously visited
 */
              __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == __pyx_v_mask_nodata) != 0);

              /* "src/geoprocessing/routing/routing.pyx":1959
 *                             continue
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n) == mask_nodata:
 *                                 # only grow if it's at the same level and not
 */
              if (__pyx_t_5) {

                /* "src/geoprocessing/routing/routing.pyx":1964
 *                                 # previously visited
 *                                 drain_search_queue.push(
 *                                     CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *                                 flat_region_mask_managed_raster.set(
 *                                     xi_n, yi_n, 1)
 */
                __pyx_t_30.xi = __pyx_v_xi_n;
                __pyx_t_30.yi = __pyx_v_yi_n;

                /* "src/geoprocessing/routing/routing.pyx":1963
 *                                 # only grow if it's at the same level and not
 *                                 # previously visited
 *                                 drain_search_queue.push(             # <<<<<<<<<<<<<<
 *                                     CoordinateType(xi_n, yi_n))
 *                                 flat_region_mask_managed_raster.set(
 */
                __pyx_v_drain_search_queue.push(__pyx_t_30);

                /* "src/geoprocessing/routing/routing.pyx":1965
 *                                 drain_search_queue.push(
 *                                     CoordinateType(xi_n, yi_n))
 *                                 flat_region_mask_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n, 1)
 *                             continue
 */
                __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flat_region_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, 1.0);

                /* "src/geoprocessing/routing/routing.pyx":1959
 *                             continue
 *                         if n_slope == 0.0:
 *                             if flat_region_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n) == mask_nodata:
 *                                 # only grow if it's at the same level and not
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":1967
 *                                 flat_region_mask_managed_raster.set(
 *                                     xi_n, yi_n, 1)
 *                             continue             # <<<<<<<<<<<<<<
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV
 */
              goto __pyx_L41_continue;

              /* "src/geoprocessing/routing/routing.pyx":1958
 *                         if n_slope < 0:
 *                             continue
 *                         if n_slope == 0.0:             # <<<<<<<<<<<<<<
 *                             if flat_region_mask_managed_raster.get(
 *                                     xi_n, yi_n) == mask_nodata:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1968
 *                                     xi_n, yi_n, 1)
 *                             continue
 *                         if i_n & 1:             # <<<<<<<<<<<<<<
 *                             n_slope *= SQRT2_INV
 *                         downhill_slope_array[i_n] = n_slope
 */
            __pyx_t_5 = ((__pyx_v_i_n & 1) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1969
 *                             continue
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV             # <<<<<<<<<<<<<<
 *                         downhill_slope_array[i_n] = n_slope
 *                         sum_of_slope_weights += downhill_slope_array[i_n]
 */
              __pyx_v_n_slope = (__pyx_v_n_slope * __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV);

              /* "src/geoprocessing/routing/routing.pyx":1968
 *                                     xi_n, yi_n, 1)
 *                             continue
 *                         if i_n & 1:             # <<<<<<<<<<<<<<
 *                             n_slope *= SQRT2_INV
 *                         downhill_slope_array[i_n] = n_slope
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":1970
 *                         if i_n & 1:
 *                             n_slope *= SQRT2_INV
 *                         downhill_slope_array[i_n] = n_slope             # <<<<<<<<<<<<<<
 *                         sum_of_slope_weights += downhill_slope_array[i_n]
 * 
 */
            (__pyx_v_downhill_slope_array[__pyx_v_i_n]) = __pyx_v_n_slope;

            /* "src/geoprocessing/routing/routing.pyx":1971
 *                             n_slope *= SQRT2_INV
 *                         downhill_slope_array[i_n] = n_slope
 *                         sum_of_slope_weights += downhill_slope_array[i_n]             # <<<<<<<<<<<<<<
 * 
 *                     working_downhill_slope_sum = 0.0
 */
            __pyx_v_sum_of_slope_weights = (__pyx_v_sum_of_slope_weights + (__pyx_v_downhill_slope_array[__pyx_v_i_n]));
            __pyx_L41_continue:;
          }

          /* "src/geoprocessing/routing/routing.pyx":1973
 *                         sum_of_slope_weights += downhill_slope_array[i_n]
 * 
 *                     working_downhill_slope_sum = 0.0             # <<<<<<<<<<<<<<
 *                     working_downhill_slope_array = NULL
 *                     if sum_of_slope_weights > 0.0:
 */
          __pyx_v_working_downhill_slope_sum = 0.0;

          /* "src/geoprocessing/routing/routing.pyx":1974
 * 
 *                     working_downhill_slope_sum = 0.0
 *                     working_downhill_slope_array = NULL             # <<<<<<<<<<<<<<
 *                     if sum_of_slope_weights > 0.0:
 *                         working_downhill_slope_array = downhill_slope_array
 */
          __pyx_v_working_downhill_slope_array = NULL;

          /* "src/geoprocessing/routing/routing.pyx":1975
 *                     working_downhill_slope_sum = 0.0
 *                     working_downhill_slope_array = NULL
 *                     if sum_of_slope_weights > 0.0:             # <<<<<<<<<<<<<<
 *                         working_downhill_slope_array = downhill_slope_array
 *                         working_downhill_slope_sum = sum_of_slope_weights
 */
          __pyx_t_5 = ((__pyx_v_sum_of_slope_weights > 0.0) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1976
 *                     working_downhill_slope_array = NULL
 *                     if sum_of_slope_weights > 0.0:
 *                         working_downhill_slope_array = downhill_slope_array             # <<<<<<<<<<<<<<
 *                         working_downhill_slope_sum = sum_of_slope_weights
 *                     elif sum_of_nodata_slope_weights > 0.0:
 */
            __pyx_v_working_downhill_slope_array = __pyx_v_downhill_slope_array;

            /* "src/geoprocessing/routing/routing.pyx":1977
 *                     if sum_of_slope_weights > 0.0:
 *                         working_downhill_slope_array = downhill_slope_array
 *                         working_downhill_slope_sum = sum_of_slope_weights             # <<<<<<<<<<<<<<
 *                     elif sum_of_nodata_slope_weights > 0.0:
 *                         working_downhill_slope_array = (
 */
            __pyx_v_working_downhill_slope_sum = __pyx_v_sum_of_slope_weights;

            /* "src/geoprocessing/routing/routing.pyx":1975
 *                     working_downhill_slope_sum = 0.0
 *                     working_downhill_slope_array = NULL
 *                     if sum_of_slope_weights > 0.0:             # <<<<<<<<<<<<<<
 *                         working_downhill_slope_array = downhill_slope_array
 *                         working_downhill_slope_sum = sum_of_slope_weights
 */
            goto __pyx_L53;
          }

          /* "src/geoprocessing/routing/routing.pyx":1978
 *                         working_downhill_slope_array = downhill_slope_array
 *                         working_downhill_slope_sum = sum_of_slope_weights
 *                     elif sum_of_nodata_slope_weights > 0.0:             # <<<<<<<<<<<<<<
 *                         working_downhill_slope_array = (
 *                             nodata_downhill_slope_array)
 */
          __pyx_t_5 = ((__pyx_v_sum_of_nodata_slope_weights > 0.0) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1980
 *                     elif sum_of_nodata_slope_weights > 0.0:
 *                         working_downhill_slope_array = (
 *                             nodata_downhill_slope_array)             # <<<<<<<<<<<<<<
 *                         working_downhill_slope_sum = (
 *                             sum_of_nodata_slope_weights)
 */
            __pyx_v_working_downhill_slope_array = __pyx_v_nodata_downhill_slope_array;

            /* "src/geoprocessing/routing/routing.pyx":1982
 *                             nodata_downhill_slope_array)
 *                         working_downhill_slope_sum = (
 *                             sum_of_nodata_slope_weights)             # <<<<<<<<<<<<<<
 * 
 *                     if working_downhill_slope_sum > 0.0:
 */
            __pyx_v_working_downhill_slope_sum = __pyx_v_sum_of_nodata_slope_weights;

            /* "src/geoprocessing/routing/routing.pyx":1978
 *                         working_downhill_slope_array = downhill_slope_array
 *                         working_downhill_slope_sum = sum_of_slope_weights
 *                     elif sum_of_nodata_slope_weights > 0.0:             # <<<<<<<<<<<<<<
 *                         working_downhill_slope_array = (
 *                             nodata_downhill_slope_array)
 */
          }
          __pyx_L53:;

          /* "src/geoprocessing/routing/routing.pyx":1984
 *                             sum_of_nodata_slope_weights)
 * 
 *                     if working_downhill_slope_sum > 0.0:             # <<<<<<<<<<<<<<
 *                         compressed_integer_slopes = 0
 *                         for i_n in range(8):
 */
          __pyx_t_5 = ((__pyx_v_working_downhill_slope_sum > 0.0) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":1985
 * 
 *                     if working_downhill_slope_sum > 0.0:
 *                         compressed_integer_slopes = 0             # <<<<<<<<<<<<<<
 *                         for i_n in range(8):
 *                             compressed_integer_slopes |= (<int>(
 */
            __pyx_v_compressed_integer_slopes = 0;

            /* "src/geoprocessing/routing/routing.pyx":1986
 *                     if working_downhill_slope_sum > 0.0:
 *                         compressed_integer_slopes = 0
 *                         for i_n in range(8):             # <<<<<<<<<<<<<<
 *                             compressed_integer_slopes |= (<int>(
 *                                 0.5 + working_downhill_slope_array[i_n] /
 */
            for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
              __pyx_v_i_n = __pyx_t_28;

              /* "src/geoprocessing/routing/routing.pyx":1988
 *                         for i_n in range(8):
 *                             compressed_integer_slopes |= (<int>(
 *                                 0.5 + working_downhill_slope_array[i_n] /             # <<<<<<<<<<<<<<
 *                                 working_downhill_slope_sum * 0xF)) << (
 *                                 i_n * 4)
 */
              if (unlikely(__pyx_v_working_downhill_slope_sum == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 1988, __pyx_L1_error)
              }

              /* "src/geoprocessing/routing/routing.pyx":1987
 *                         compressed_integer_slopes = 0
 *                         for i_n in range(8):
 *                             compressed_integer_slopes |= (<int>(             # <<<<<<<<<<<<<<
 *                                 0.5 + working_downhill_slope_array[i_n] /
 *                                 working_downhill_slope_sum * 0xF)) << (
 */
              __pyx_v_compressed_integer_slopes = (__pyx_v_compressed_integer_slopes | (((int)(0.5 + (((__pyx_v_working_downhill_slope_array[__pyx_v_i_n]) / __pyx_v_working_downhill_slope_sum) * 15.0))) << (__pyx_v_i_n * 4)));
            }

            /* "src/geoprocessing/routing/routing.pyx":1991
 *                                 working_downhill_slope_sum * 0xF)) << (
 *                                 i_n * 4)
 *                         if sum_of_slope_weights > 0.0:             # <<<<<<<<<<<<<<
 *                             # regular downhill pixel
 *                             flow_dir_managed_raster.set(
 */
            __pyx_t_5 = ((__pyx_v_sum_of_slope_weights > 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":1993
 *                         if sum_of_slope_weights > 0.0:
 *                             # regular downhill pixel
 *                             flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_q, yi_q, compressed_integer_slopes)
 *                             plateau_distance_managed_raster.set(
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, __pyx_v_compressed_integer_slopes);

              /* "src/geoprocessing/routing/routing.pyx":1995
 *                             flow_dir_managed_raster.set(
 *                                 xi_q, yi_q, compressed_integer_slopes)
 *                             plateau_distance_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_q, yi_q, 0.0)
 *                             plateau_drain_mask_managed_raster.set(
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, 0.0);

              /* "src/geoprocessing/routing/routing.pyx":1997
 *                             plateau_distance_managed_raster.set(
 *                                 xi_q, yi_q, 0.0)
 *                             plateau_drain_mask_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_q, yi_q, 1)
 *                             distance_drain_queue.push(
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_drain_mask_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, 1.0);

              /* "src/geoprocessing/routing/routing.pyx":2000
 *                                 xi_q, yi_q, 1)
 *                             distance_drain_queue.push(
 *                                 CoordinateType(xi_q, yi_q))             # <<<<<<<<<<<<<<
 *                         else:
 *                             nodata_distance_drain_queue.push(
 */
              __pyx_t_30.xi = __pyx_v_xi_q;
              __pyx_t_30.yi = __pyx_v_yi_q;

              /* "src/geoprocessing/routing/routing.pyx":1999
 *                             plateau_drain_mask_managed_raster.set(
 *                                 xi_q, yi_q, 1)
 *                             distance_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_q, yi_q))
 *                         else:
 */
              __pyx_v_distance_drain_queue.push(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":1991
 *                                 working_downhill_slope_sum * 0xF)) << (
 *                                 i_n * 4)
 *                         if sum_of_slope_weights > 0.0:             # <<<<<<<<<<<<<<
 *                             # regular downhill pixel
 *                             flow_dir_managed_raster.set(
 */
              goto __pyx_L57;
            }

            /* "src/geoprocessing/routing/routing.pyx":2002
 *                                 CoordinateType(xi_q, yi_q))
 *                         else:
 *                             nodata_distance_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_q, yi_q))
 *                             nodata_flow_dir_queue.push(
 */
            /*else*/ {

              /* "src/geoprocessing/routing/routing.pyx":2003
 *                         else:
 *                             nodata_distance_drain_queue.push(
 *                                 CoordinateType(xi_q, yi_q))             # <<<<<<<<<<<<<<
 *                             nodata_flow_dir_queue.push(
 *                                 compressed_integer_slopes)
 */
              __pyx_t_30.xi = __pyx_v_xi_q;
              __pyx_t_30.yi = __pyx_v_yi_q;

              /* "src/geoprocessing/routing/routing.pyx":2002
 *                                 CoordinateType(xi_q, yi_q))
 *                         else:
 *                             nodata_distance_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_q, yi_q))
 *                             nodata_flow_dir_queue.push(
 */
              __pyx_v_nodata_distance_drain_queue.push(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":2004
 *                             nodata_distance_drain_queue.push(
 *                                 CoordinateType(xi_q, yi_q))
 *                             nodata_flow_dir_queue.push(             # <<<<<<<<<<<<<<
 *                                 compressed_integer_slopes)
 * 
 */
              __pyx_v_nodata_flow_dir_queue.push(__pyx_v_compressed_integer_slopes);
            }
            __pyx_L57:;

            /* "src/geoprocessing/routing/routing.pyx":1984
 *                             sum_of_nodata_slope_weights)
 * 
 *                     if working_downhill_slope_sum > 0.0:             # <<<<<<<<<<<<<<
 *                         compressed_integer_slopes = 0
 *                         for i_n in range(8):
 */
          }
        }

        /* "src/geoprocessing/routing/routing.pyx":2008
 * 
 *                 # if there's no downhill drains, try the nodata drains
 *                 if distance_drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     # push the nodata drain queue over to the drain queue
 *                     # and set all the flow directions on the nodata drain
 */
        __pyx_t_5 = (__pyx_v_distance_drain_queue.empty() != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":2012
 *                     # and set all the flow directions on the nodata drain
 *                     # pixels
 *                     while not nodata_distance_drain_queue.empty():             # <<<<<<<<<<<<<<
 *                         xi_q = nodata_distance_drain_queue.front().xi
 *                         yi_q = nodata_distance_drain_queue.front().yi
 */
          while (1) {
            __pyx_t_5 = ((!(__pyx_v_nodata_distance_drain_queue.empty() != 0)) != 0);
            if (!__pyx_t_5) break;

            /* "src/geoprocessing/routing/routing.pyx":2013
 *                     # pixels
 *                     while not nodata_distance_drain_queue.empty():
 *                         xi_q = nodata_distance_drain_queue.front().xi             # <<<<<<<<<<<<<<
 *                         yi_q = nodata_distance_drain_queue.front().yi
 *                         flow_dir_managed_raster.set(
 */
            __pyx_t_28 = __pyx_v_nodata_distance_drain_queue.front().xi;
            __pyx_v_xi_q = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":2014
 *                     while not nodata_distance_drain_queue.empty():
 *                         xi_q = nodata_distance_drain_queue.front().xi
 *                         yi_q = nodata_distance_drain_queue.front().yi             # <<<<<<<<<<<<<<
 *                         flow_dir_managed_raster.set(
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 */
            __pyx_t_28 = __pyx_v_nodata_distance_drain_queue.front().yi;
            __pyx_v_yi_q = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":2015
 *                         xi_q = nodata_distance_drain_queue.front().xi
 *                         yi_q = nodata_distance_drain_queue.front().yi
 *                         flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, __pyx_v_nodata_flow_dir_queue.front());

            /* "src/geoprocessing/routing/routing.pyx":2017
 *                         flow_dir_managed_raster.set(
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)             # <<<<<<<<<<<<<<
 *                         plateau_drain_mask_managed_raster.set(xi_q, yi_q, 1)
 *                         distance_drain_queue.push(
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, 0.0);

            /* "src/geoprocessing/routing/routing.pyx":2018
 *                             xi_q, yi_q, nodata_flow_dir_queue.front())
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)
 *                         plateau_drain_mask_managed_raster.set(xi_q, yi_q, 1)             # <<<<<<<<<<<<<<
 *                         distance_drain_queue.push(
 *                             nodata_distance_drain_queue.front())
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_drain_mask_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, 1.0);

            /* "src/geoprocessing/routing/routing.pyx":2019
 *                         plateau_distance_managed_raster.set(xi_q, yi_q, 0.0)
 *                         plateau_drain_mask_managed_raster.set(xi_q, yi_q, 1)
 *                         distance_drain_queue.push(             # <<<<<<<<<<<<<<
 *                             nodata_distance_drain_queue.front())
 *                         nodata_flow_dir_queue.pop()
 */
            __pyx_v_distance_drain_queue.push(__pyx_v_nodata_distance_drain_queue.front());

            /* "src/geoprocessing/routing/routing.pyx":2021
 *                         distance_drain_queue.push(
 *                             nodata_distance_drain_queue.front())
 *                         nodata_flow_dir_queue.pop()             # <<<<<<<<<<<<<<
 *                         nodata_distance_drain_queue.pop()
 *                 else:
 */
            __pyx_v_nodata_flow_dir_queue.pop();

            /* "src/geoprocessing/routing/routing.pyx":2022
 *                             nodata_distance_drain_queue.front())
 *                         nodata_flow_dir_queue.pop()
 *                         nodata_distance_drain_queue.pop()             # <<<<<<<<<<<<<<
 *                 else:
 *                     # clear the nodata drain queues
 */
            __pyx_v_nodata_distance_drain_queue.pop();
          }

          /* "src/geoprocessing/routing/routing.pyx":2008
 * 
 *                 # if there's no downhill drains, try the nodata drains
 *                 if distance_drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     # push the nodata drain queue over to the drain queue
 *                     # and set all the flow directions on the nodata drain
 */
          goto __pyx_L58;
        }

        /* "src/geoprocessing/routing/routing.pyx":2025
 *                 else:
 *                     # clear the nodata drain queues
 *                     nodata_flow_dir_queue = IntQueueType()             # <<<<<<<<<<<<<<
 *                     nodata_distance_drain_queue = CoordinateQueueType()
 * 
 */
        /*else*/ {
          try {
            __pyx_t_31 = __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_IntQueueType();
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 2025, __pyx_L1_error)
          }
          __pyx_v_nodata_flow_dir_queue = __pyx_t_31;

          /* "src/geoprocessing/routing/routing.pyx":2026
 *                     # clear the nodata drain queues
 *                     nodata_flow_dir_queue = IntQueueType()
 *                     nodata_distance_drain_queue = CoordinateQueueType()             # <<<<<<<<<<<<<<
 * 
 *                 # copy the drain queue to another queue
 */
          try {
            __pyx_t_32 = __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType();
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 2026, __pyx_L1_error)
          }
          __pyx_v_nodata_distance_drain_queue = __pyx_t_32;
        }
        __pyx_L58:;

        /* "src/geoprocessing/routing/routing.pyx":2029
 * 
 *                 # copy the drain queue to another queue
 *                 for _ in range(distance_drain_queue.size()):             # <<<<<<<<<<<<<<
 *                     distance_drain_queue.push(
 *                         distance_drain_queue.front())
 */
        __pyx_t_33 = __pyx_v_distance_drain_queue.size();
        __pyx_t_34 = __pyx_t_33;
        for (__pyx_t_35 = 0; __pyx_t_35 < __pyx_t_34; __pyx_t_35+=1) {
          __pyx_v__ = __pyx_t_35;

          /* "src/geoprocessing/routing/routing.pyx":2030
 *                 # copy the drain queue to another queue
 *                 for _ in range(distance_drain_queue.size()):
 *                     distance_drain_queue.push(             # <<<<<<<<<<<<<<
 *                         distance_drain_queue.front())
 *                     direction_drain_queue.push(distance_drain_queue.front())
 */
          __pyx_v_distance_drain_queue.push(__pyx_v_distance_drain_queue.front());

          /* "src/geoprocessing/routing/routing.pyx":2032
 *                     distance_drain_queue.push(
 *                         distance_drain_queue.front())
 *                     direction_drain_queue.push(distance_drain_queue.front())             # <<<<<<<<<<<<<<
 *                     distance_drain_queue.pop()
 * 
 */
          __pyx_v_direction_drain_queue.push(__pyx_v_distance_drain_queue.front());

          /* "src/geoprocessing/routing/routing.pyx":2033
 *                         distance_drain_queue.front())
 *                     direction_drain_queue.push(distance_drain_queue.front())
 *                     distance_drain_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                 # PHASE 3 - build up a distance raster for the plateau such
 */
          __pyx_v_distance_drain_queue.pop();
        }

        /* "src/geoprocessing/routing/routing.pyx":2041
 *                 # this loop does a BFS from the plateau drain to any other
 *                 # neighboring undefined pixels
 *                 while not distance_drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = distance_drain_queue.front().xi
 *                     yi_q = distance_drain_queue.front().yi
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_distance_drain_queue.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":2042
 *                 # neighboring undefined pixels
 *                 while not distance_drain_queue.empty():
 *                     xi_q = distance_drain_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = distance_drain_queue.front().yi
 *                     distance_drain_queue.pop()
 */
          __pyx_t_28 = __pyx_v_distance_drain_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":2043
 *                 while not distance_drain_queue.empty():
 *                     xi_q = distance_drain_queue.front().xi
 *                     yi_q = distance_drain_queue.front().yi             # <<<<<<<<<<<<<<
 *                     distance_drain_queue.pop()
 * 
 */
          __pyx_t_28 = __pyx_v_distance_drain_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":2044
 *                     xi_q = distance_drain_queue.front().xi
 *                     yi_q = distance_drain_queue.front().yi
 *                     distance_drain_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                     drain_distance = plateau_distance_managed_raster.get(
 */
          __pyx_v_distance_drain_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":2046
 *                     distance_drain_queue.pop()
 * 
 *                     drain_distance = plateau_distance_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_q, yi_q)
 * 
 */
          __pyx_v_drain_distance = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q);

          /* "src/geoprocessing/routing/routing.pyx":2049
 *                         xi_q, yi_q)
 * 
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
            __pyx_v_i_n = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":2050
 * 
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2051
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2052
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            __pyx_t_6 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L68_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L68_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2053
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_6 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L68_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L68_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2052
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2054
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         n_drain_distance = drain_distance + (
 */
              goto __pyx_L65_continue;

              /* "src/geoprocessing/routing/routing.pyx":2052
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2057
 * 
 *                         n_drain_distance = drain_distance + (
 *                             SQRT2 if i_n & 1 else 1.0)             # <<<<<<<<<<<<<<
 * 
 *                         if (<double>(dem_managed_raster.get(
 */
            if (((__pyx_v_i_n & 1) != 0)) {
              __pyx_t_7 = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2;
            } else {
              __pyx_t_7 = 1.0;
            }

            /* "src/geoprocessing/routing/routing.pyx":2056
 *                             continue
 * 
 *                         n_drain_distance = drain_distance + (             # <<<<<<<<<<<<<<
 *                             SQRT2 if i_n & 1 else 1.0)
 * 
 */
            __pyx_v_n_drain_distance = (__pyx_v_drain_distance + __pyx_t_7);

            /* "src/geoprocessing/routing/routing.pyx":2060
 * 
 *                         if (<double>(dem_managed_raster.get(
 *                                 xi_n, yi_n)) == root_height) and (             # <<<<<<<<<<<<<<
 *                                 plateau_distance_managed_raster.get(
 *                                     xi_n, yi_n) > n_drain_distance):
 */
            __pyx_t_6 = ((((double)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n)) == __pyx_v_root_height) != 0);
            if (__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L73_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2062
 *                                 xi_n, yi_n)) == root_height) and (
 *                                 plateau_distance_managed_raster.get(
 *                                     xi_n, yi_n) > n_drain_distance):             # <<<<<<<<<<<<<<
 *                             # neighbor is at same level and has longer drain
 *                             # flow path than current
 */
            __pyx_t_6 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) > __pyx_v_n_drain_distance) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L73_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2059
 *                             SQRT2 if i_n & 1 else 1.0)
 * 
 *                         if (<double>(dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n)) == root_height) and (
 *                                 plateau_distance_managed_raster.get(
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2065
 *                             # neighbor is at same level and has longer drain
 *                             # flow path than current
 *                             plateau_distance_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n, n_drain_distance)
 *                             distance_drain_queue.push(
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, __pyx_v_n_drain_distance);

              /* "src/geoprocessing/routing/routing.pyx":2068
 *                                 xi_n, yi_n, n_drain_distance)
 *                             distance_drain_queue.push(
 *                                 CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 * 
 *                 # PHASE 4 - set the plateau pixel flow direction based on the
 */
              __pyx_t_30.xi = __pyx_v_xi_n;
              __pyx_t_30.yi = __pyx_v_yi_n;

              /* "src/geoprocessing/routing/routing.pyx":2067
 *                             plateau_distance_managed_raster.set(
 *                                 xi_n, yi_n, n_drain_distance)
 *                             distance_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_n, yi_n))
 * 
 */
              __pyx_v_distance_drain_queue.push(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":2059
 *                             SQRT2 if i_n & 1 else 1.0)
 * 
 *                         if (<double>(dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n)) == root_height) and (
 *                                 plateau_distance_managed_raster.get(
 */
            }
            __pyx_L65_continue:;
          }
        }

        /* "src/geoprocessing/routing/routing.pyx":2072
 *                 # PHASE 4 - set the plateau pixel flow direction based on the
 *                 # distance to the nearest drain
 *                 while not direction_drain_queue.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = direction_drain_queue.front().xi
 *                     yi_q = direction_drain_queue.front().yi
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_direction_drain_queue.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":2073
 *                 # distance to the nearest drain
 *                 while not direction_drain_queue.empty():
 *                     xi_q = direction_drain_queue.front().xi             # <<<<<<<<<<<<<<
 *                     yi_q = direction_drain_queue.front().yi
 *                     direction_drain_queue.pop()
 */
          __pyx_t_28 = __pyx_v_direction_drain_queue.front().xi;
          __pyx_v_xi_q = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":2074
 *                 while not direction_drain_queue.empty():
 *                     xi_q = direction_drain_queue.front().xi
 *                     yi_q = direction_drain_queue.front().yi             # <<<<<<<<<<<<<<
 *                     direction_drain_queue.pop()
 * 
 */
          __pyx_t_28 = __pyx_v_direction_drain_queue.front().yi;
          __pyx_v_yi_q = __pyx_t_28;

          /* "src/geoprocessing/routing/routing.pyx":2075
 *                     xi_q = direction_drain_queue.front().xi
 *                     yi_q = direction_drain_queue.front().yi
 *                     direction_drain_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *                     drain_distance = plateau_distance_managed_raster.get(
 */
          __pyx_v_direction_drain_queue.pop();

          /* "src/geoprocessing/routing/routing.pyx":2077
 *                     direction_drain_queue.pop()
 * 
 *                     drain_distance = plateau_distance_managed_raster.get(             # <<<<<<<<<<<<<<
 *                         xi_q, yi_q)
 * 
 */
          __pyx_v_drain_distance = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q);

          /* "src/geoprocessing/routing/routing.pyx":2080
 *                         xi_q, yi_q)
 * 
 *                     sum_of_slope_weights = 0.0             # <<<<<<<<<<<<<<
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 */
          __pyx_v_sum_of_slope_weights = 0.0;

          /* "src/geoprocessing/routing/routing.pyx":2081
 * 
 *                     sum_of_slope_weights = 0.0
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
            __pyx_v_i_n = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":2082
 *                     sum_of_slope_weights = 0.0
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         downhill_slope_array[i_n] = 0.0
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2083
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         downhill_slope_array[i_n] = 0.0
 * 
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2084
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 *                         downhill_slope_array[i_n] = 0.0             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            (__pyx_v_downhill_slope_array[__pyx_v_i_n]) = 0.0;

            /* "src/geoprocessing/routing/routing.pyx":2086
 *                         downhill_slope_array[i_n] = 0.0
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            __pyx_t_6 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L80_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L80_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2087
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_6 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L80_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L80_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2086
 *                         downhill_slope_array[i_n] = 0.0
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2088
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         if dem_managed_raster.get(xi_n, yi_n) != root_height:
 */
              goto __pyx_L77_continue;

              /* "src/geoprocessing/routing/routing.pyx":2086
 *                         downhill_slope_array[i_n] = 0.0
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2090
 *                             continue
 * 
 *                         if dem_managed_raster.get(xi_n, yi_n) != root_height:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) != __pyx_v_root_height) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2091
 * 
 *                         if dem_managed_raster.get(xi_n, yi_n) != root_height:
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         n_distance = plateau_distance_managed_raster.get(
 */
              goto __pyx_L77_continue;

              /* "src/geoprocessing/routing/routing.pyx":2090
 *                             continue
 * 
 *                         if dem_managed_raster.get(xi_n, yi_n) != root_height:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2093
 *                             continue
 * 
 *                         n_distance = plateau_distance_managed_raster.get(             # <<<<<<<<<<<<<<
 *                             xi_n, yi_n)
 *                         if n_distance == plateau_distance_nodata:
 */
            __pyx_v_n_distance = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_distance_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

            /* "src/geoprocessing/routing/routing.pyx":2095
 *                         n_distance = plateau_distance_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if n_distance == plateau_distance_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_distance < drain_distance:
 */
            __pyx_t_5 = ((__pyx_v_n_distance == __pyx_v_plateau_distance_nodata) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2096
 *                             xi_n, yi_n)
 *                         if n_distance == plateau_distance_nodata:
 *                             continue             # <<<<<<<<<<<<<<
 *                         if n_distance < drain_distance:
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 */
              goto __pyx_L77_continue;

              /* "src/geoprocessing/routing/routing.pyx":2095
 *                         n_distance = plateau_distance_managed_raster.get(
 *                             xi_n, yi_n)
 *                         if n_distance == plateau_distance_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if n_distance < drain_distance:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2097
 *                         if n_distance == plateau_distance_nodata:
 *                             continue
 *                         if n_distance < drain_distance:             # <<<<<<<<<<<<<<
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             downhill_slope_array[i_n] = n_slope
 */
            __pyx_t_5 = ((__pyx_v_n_distance < __pyx_v_drain_distance) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2098
 *                             continue
 *                         if n_distance < drain_distance:
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0             # <<<<<<<<<<<<<<
 *                             downhill_slope_array[i_n] = n_slope
 *                             sum_of_slope_weights += n_slope
 */
              if (((__pyx_v_i_n & 1) != 0)) {
                __pyx_t_7 = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV;
              } else {
                __pyx_t_7 = 1.0;
              }
              __pyx_v_n_slope = __pyx_t_7;

              /* "src/geoprocessing/routing/routing.pyx":2099
 *                         if n_distance < drain_distance:
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             downhill_slope_array[i_n] = n_slope             # <<<<<<<<<<<<<<
 *                             sum_of_slope_weights += n_slope
 *                         elif not plateau_drain_mask_managed_raster.get(
 */
              (__pyx_v_downhill_slope_array[__pyx_v_i_n]) = __pyx_v_n_slope;

              /* "src/geoprocessing/routing/routing.pyx":2100
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             downhill_slope_array[i_n] = n_slope
 *                             sum_of_slope_weights += n_slope             # <<<<<<<<<<<<<<
 *                         elif not plateau_drain_mask_managed_raster.get(
 *                                 xi_n, yi_n):
 */
              __pyx_v_sum_of_slope_weights = (__pyx_v_sum_of_slope_weights + __pyx_v_n_slope);

              /* "src/geoprocessing/routing/routing.pyx":2097
 *                         if n_distance == plateau_distance_nodata:
 *                             continue
 *                         if n_distance < drain_distance:             # <<<<<<<<<<<<<<
 *                             n_slope = SQRT2_INV if i_n & 1 else 1.0
 *                             downhill_slope_array[i_n] = n_slope
 */
              goto __pyx_L86;
            }

            /* "src/geoprocessing/routing/routing.pyx":2101
 *                             downhill_slope_array[i_n] = n_slope
 *                             sum_of_slope_weights += n_slope
 *                         elif not plateau_drain_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n):
 *                             direction_drain_queue.push(
 */
            __pyx_t_5 = ((!(__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_plateau_drain_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) != 0)) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2104
 *                                 xi_n, yi_n):
 *                             direction_drain_queue.push(
 *                                 CoordinateType(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *                             plateau_drain_mask_managed_raster.set(
 *                                 xi_n, yi_n, 1)
 */
              __pyx_t_30.xi = __pyx_v_xi_n;
              __pyx_t_30.yi = __pyx_v_yi_n;

              /* "src/geoprocessing/routing/routing.pyx":2103
 *                         elif not plateau_drain_mask_managed_raster.get(
 *                                 xi_n, yi_n):
 *                             direction_drain_queue.push(             # <<<<<<<<<<<<<<
 *                                 CoordinateType(xi_n, yi_n))
 *                             plateau_drain_mask_managed_raster.set(
 */
              __pyx_v_direction_drain_queue.push(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":2105
 *                             direction_drain_queue.push(
 *                                 CoordinateType(xi_n, yi_n))
 *                             plateau_drain_mask_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n, 1)
 * 
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_plateau_drain_mask_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, 1.0);

              /* "src/geoprocessing/routing/routing.pyx":2101
 *                             downhill_slope_array[i_n] = n_slope
 *                             sum_of_slope_weights += n_slope
 *                         elif not plateau_drain_mask_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_n, yi_n):
 *                             direction_drain_queue.push(
 */
            }
            __pyx_L86:;
            __pyx_L77_continue:;
          }

          /* "src/geoprocessing/routing/routing.pyx":2108
 *                                 xi_n, yi_n, 1)
 * 
 *                     if sum_of_slope_weights == 0:             # <<<<<<<<<<<<<<
 *                         continue
 *                     compressed_integer_slopes = 0
 */
          __pyx_t_5 = ((__pyx_v_sum_of_slope_weights == 0.0) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":2109
 * 
 *                     if sum_of_slope_weights == 0:
 *                         continue             # <<<<<<<<<<<<<<
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):
 */
            goto __pyx_L75_continue;

            /* "src/geoprocessing/routing/routing.pyx":2108
 *                                 xi_n, yi_n, 1)
 * 
 *                     if sum_of_slope_weights == 0:             # <<<<<<<<<<<<<<
 *                         continue
 *                     compressed_integer_slopes = 0
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2110
 *                     if sum_of_slope_weights == 0:
 *                         continue
 *                     compressed_integer_slopes = 0             # <<<<<<<<<<<<<<
 *                     for i_n in range(8):
 *                         compressed_integer_slopes |= (<int>(
 */
          __pyx_v_compressed_integer_slopes = 0;

          /* "src/geoprocessing/routing/routing.pyx":2111
 *                         continue
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         compressed_integer_slopes |= (<int>(
 *                             0.5 + downhill_slope_array[i_n] /
 */
          for (__pyx_t_28 = 0; __pyx_t_28 < 8; __pyx_t_28+=1) {
            __pyx_v_i_n = __pyx_t_28;

            /* "src/geoprocessing/routing/routing.pyx":2113
 *                     for i_n in range(8):
 *                         compressed_integer_slopes |= (<int>(
 *                             0.5 + downhill_slope_array[i_n] /             # <<<<<<<<<<<<<<
 *                             sum_of_slope_weights * 0xF)) << (i_n * 4)
 *                     flow_dir_managed_raster.set(
 */
            if (unlikely(__pyx_v_sum_of_slope_weights == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 2113, __pyx_L1_error)
            }

            /* "src/geoprocessing/routing/routing.pyx":2112
 *                     compressed_integer_slopes = 0
 *                     for i_n in range(8):
 *                         compressed_integer_slopes |= (<int>(             # <<<<<<<<<<<<<<
 *                             0.5 + downhill_slope_array[i_n] /
 *                             sum_of_slope_weights * 0xF)) << (i_n * 4)
 */
            __pyx_v_compressed_integer_slopes = (__pyx_v_compressed_integer_slopes | (((int)(0.5 + (((__pyx_v_downhill_slope_array[__pyx_v_i_n]) / __pyx_v_sum_of_slope_weights) * 15.0))) << (__pyx_v_i_n * 4)));
          }

          /* "src/geoprocessing/routing/routing.pyx":2115
 *                             0.5 + downhill_slope_array[i_n] /
 *                             sum_of_slope_weights * 0xF)) << (i_n * 4)
 *                     flow_dir_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         xi_q, yi_q, compressed_integer_slopes)
 * 
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, __pyx_v_compressed_integer_slopes);
          __pyx_L75_continue:;
        }
        __pyx_L27_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":1838
 * 
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             compatable_dem_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2118
 *                         xi_q, yi_q, compressed_integer_slopes)
 * 
 *     dem_band = None             # <<<<<<<<<<<<<<
 *     dem_raster = None
 *     plateau_drain_mask_managed_raster.close()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_dem_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":2119
 * 
 *     dem_band = None
 *     dem_raster = None             # <<<<<<<<<<<<<<
 *     plateau_drain_mask_managed_raster.close()
 *     flow_dir_managed_raster.close()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_dem_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":2120
 *     dem_band = None
 *     dem_raster = None
 *     plateau_drain_mask_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster.close()
 *     flat_region_mask_managed_raster.close()
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_plateau_drain_mask_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_3 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2121
 *     dem_raster = None
 *     plateau_drain_mask_managed_raster.close()
 *     flow_dir_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flat_region_mask_managed_raster.close()
 *     dem_managed_raster.close()
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_dir_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_3 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2122
 *     plateau_drain_mask_managed_raster.close()
 *     flow_dir_managed_raster.close()
 *     flat_region_mask_managed_raster.close()             # <<<<<<<<<<<<<<
 *     dem_managed_raster.close()
 *     plateau_distance_managed_raster.close()
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flat_region_mask_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_3 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2123
 *     flow_dir_managed_raster.close()
 *     flat_region_mask_managed_raster.close()
 *     dem_managed_raster.close()             # <<<<<<<<<<<<<<
 *     plateau_distance_managed_raster.close()
 *     shutil.rmtree(working_dir_path)
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_dem_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_3 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2124
 *     flat_region_mask_managed_raster.close()
 *     dem_managed_raster.close()
 *     plateau_distance_managed_raster.close()             # <<<<<<<<<<<<<<
 *     shutil.rmtree(working_dir_path)
 *     LOGGER.info('%.1f%% complete', 100.0)
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_plateau_distance_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_3 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2125
 *     dem_managed_raster.close()
 *     plateau_distance_managed_raster.close()
 *     shutil.rmtree(working_dir_path)             # <<<<<<<<<<<<<<
 *     LOGGER.info('%.1f%% complete', 100.0)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_shutil); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_20);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_20, function);
    }
  }
  __pyx_t_3 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_15, __pyx_v_working_dir_path) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2126
 *     plateau_distance_managed_raster.close()
 *     shutil.rmtree(working_dir_path)
 *     LOGGER.info('%.1f%% complete', 100.0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1638
 * 
 * 
 * def flow_dir_mfd(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_dir_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dem_buffer_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_buffer_array);
  __Pyx_XDECREF(__pyx_v_dem_raster_info);
  __Pyx_XDECREF(__pyx_v_base_nodata);
  __Pyx_XDECREF(__pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_v_flat_region_mask_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_flat_region_mask_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_v_plateu_drain_mask_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_plateau_drain_mask_managed_raster);
  __Pyx_XDECREF(__pyx_v_plateau_distance_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_plateau_distance_managed_raster);
  __Pyx_XDECREF(__pyx_v_compatable_dem_raster_path_band);
  __Pyx_XDECREF(__pyx_v_dem_block_xsize);
  __Pyx_XDECREF(__pyx_v_dem_block_ysize);
  __Pyx_XDECREF(__pyx_v_raster_driver);
  __Pyx_XDECREF(__pyx_v_dem_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_managed_raster);
  __Pyx_XDECREF(__pyx_v_dem_band);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_modified_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":2129
 * 
 * 
 * def flow_accumulation_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_11flow_accumulation_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_10flow_accumulation_mfd[] = "Multiple flow direction accumulation.\n\n    Parameters:\n        flow_dir_mfd_raster_path_band (tuple): a path, band number tuple\n            for a multiple flow direction raster generated from a call to\n            ``flow_dir_mfd``. The format of this raster is described in the\n            docstring of that function.\n        target_flow_accum_raster_path (str): a path to a raster created by\n            a call to this function that is the same dimensions and projection\n            as ``flow_dir_mfd_raster_path_band[0]``. The value in each pixel is\n            1 plus the proportional contribution of all upstream pixels that\n            flow into it. The proportion is determined as the value of the\n            upstream flow dir pixel in the downslope direction pointing to\n            the current pixel divided by the sum of all the flow weights\n            exiting that pixel. Note the target type of this raster\n            is a 64 bit float so there is minimal risk of overflow and the\n            possibility of handling a float dtype in\n            ``weight_raster_path_band``.\n        weight_raster_path_band (tuple): optional path and band number to a\n            raster that will be used as the per-pixel flow accumulation\n            weight. If ``None``, 1 is the default flow accumulation weight.\n            This raster must be the same dimensions as\n            ``flow_dir_mfd_raster_path_band``. If a weight nodata pixel is\n            encountered it will be treated as a weight value of 0.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS.\n\n    Returns:\n        None.\n\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_11flow_accumulation_mfd = {"flow_accumulation_mfd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_11flow_accumulation_mfd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_10flow_accumulation_mfd};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_11flow_accumulation_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_mfd_raster_path_band = 0;
  PyObject *__pyx_v_target_flow_accum_raster_path = 0;
  PyObject *__pyx_v_weight_raster_path_band = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flow_accumulation_mfd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_mfd_raster_path_band,&__pyx_n_s_target_flow_accum_raster_path,&__pyx_n_s_weight_raster_path_band,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[4] = {0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":2131
 * def flow_accumulation_mfd(
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """Multiple flow direction accumulation.
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = __pyx_k__10;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_mfd_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_flow_accum_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flow_accumulation_mfd", 0, 2, 4, 1); __PYX_ERR(0, 2129, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_raster_path_band);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flow_accumulation_mfd") < 0)) __PYX_ERR(0, 2129, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_dir_mfd_raster_path_band = values[0];
    __pyx_v_target_flow_accum_raster_path = values[1];
    __pyx_v_weight_raster_path_band = values[2];
    __pyx_v_raster_driver_creation_tuple = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flow_accumulation_mfd", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_accumulation_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_10flow_accumulation_mfd(__pyx_self, __pyx_v_flow_dir_mfd_raster_path_band, __pyx_v_target_flow_accum_raster_path, __pyx_v_weight_raster_path_band, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":2129
 * 
 * 
 * def flow_accumulation_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_10flow_accumulation_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_mfd_raster_path_band, PyObject *__pyx_v_target_flow_accum_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyArrayObject *__pyx_v_flow_dir_mfd_buffer_array = 0;
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  PY_LONG_LONG __pyx_v_visit_count;
  PY_LONG_LONG __pyx_v_pixel_count;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  int __pyx_v_i_upstream_flow;
  int __pyx_v_flow_dir_mfd;
  int __pyx_v_upstream_flow_weight;
  int __pyx_v_compressed_upstream_flow_dir;
  int __pyx_v_upstream_flow_dir_sum;
  double __pyx_v_upstream_flow_accum;
  double __pyx_v_flow_accum_nodata;
  double __pyx_v_weight_nodata;
  double __pyx_v_weight_val;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType>  __pyx_v_search_stack;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType __pyx_v_flow_pixel;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  time_t __pyx_v_last_log_time;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_accum_managed_raster = NULL;
  PyObject *__pyx_v_tmp_dir_root = NULL;
  PyObject *__pyx_v_tmp_dir = NULL;
  PyObject *__pyx_v_visited_raster_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_visited_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  PyObject *__pyx_v_flow_dir_raster = NULL;
  PyObject *__pyx_v_flow_dir_band = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_weight_raster = 0;
  PyObject *__pyx_v_raw_weight_nodata = NULL;
  PyObject *__pyx_v_flow_dir_raster_info = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_modified_offset_dict = NULL;
  long __pyx_v_preempted;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_dir_mfd_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_flow_dir_mfd_buffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType __pyx_t_31;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flow_accumulation_mfd", 0);
  __pyx_pybuffer_flow_dir_mfd_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_dir_mfd_buffer_array.refcount = 0;
  __pyx_pybuffernd_flow_dir_mfd_buffer_array.data = NULL;
  __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer = &__pyx_pybuffer_flow_dir_mfd_buffer_array;

  /* "src/geoprocessing/routing/routing.pyx":2195
 *     cdef double upstream_flow_accum
 * 
 *     cdef double flow_accum_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 *     cdef double weight_nodata = IMPROBABLE_FLOAT_NODATA
 * 
 */
  __pyx_v_flow_accum_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;

  /* "src/geoprocessing/routing/routing.pyx":2196
 * 
 *     cdef double flow_accum_nodata = IMPROBABLE_FLOAT_NODATA
 *     cdef double weight_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     # this value is used to store the current weight which might be 1 or
 */
  __pyx_v_weight_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;

  /* "src/geoprocessing/routing/routing.pyx":2213
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_mfd_raster_path_band):
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":2215
 *     last_log_time = ctime(NULL)
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_mfd_raster_path_band):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_flow_dir_mfd_raster_path_band) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_flow_dir_mfd_raster_path_band);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/routing.pyx":2217
 *     if not _is_raster_path_band_formatted(flow_dir_mfd_raster_path_band):
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                 flow_dir_mfd_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_flow_dir_mfd_raster_path_band); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":2216
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_mfd_raster_path_band):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_mfd_raster_path_band))
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2216, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2215
 *     last_log_time = ctime(NULL)
 * 
 *     if not _is_raster_path_band_formatted(flow_dir_mfd_raster_path_band):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2219
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_mfd_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         raise ValueError(
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_weight_raster_path_band); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2219, __pyx_L1_error)
  if (__pyx_t_4) {
  } else {
    __pyx_t_5 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":2220
 *                 flow_dir_mfd_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(
 *             weight_raster_path_band):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_weight_raster_path_band) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_weight_raster_path_band);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2219
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_mfd_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         raise ValueError(
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = ((!__pyx_t_4) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/routing.pyx":2222
 *             weight_raster_path_band):
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band))
 * 
 */
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_weight_raster_path_band); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":2221
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(
 *             weight_raster_path_band):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 weight_raster_path_band))
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2221, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2219
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 flow_dir_mfd_raster_path_band))
 *     if weight_raster_path_band and not _is_raster_path_band_formatted(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         raise ValueError(
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2225
 *                 weight_raster_path_band))
 * 
 *     LOGGER.debug('creating target flow accum raster layer')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_u_creating_target_flow_accum_raste) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_creating_target_flow_accum_raste);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2226
 * 
 *     LOGGER.debug('creating target flow accum raster layer')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2227
 *     LOGGER.debug('creating target flow accum raster layer')
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float64, [flow_accum_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":2228
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_flow_accum_nodata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2226
 * 
 *     LOGGER.debug('creating target flow accum raster layer')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_target_flow_accum_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_accum_raster_path);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_target_flow_accum_raster_path);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2229
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 * 
 *     flow_accum_managed_raster = _ManagedRaster(
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 2229, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2226
 * 
 *     LOGGER.debug('creating target flow accum raster layer')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], target_flow_accum_raster_path,
 *         gdal.GDT_Float64, [flow_accum_nodata],
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2231
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 * 
 *     flow_accum_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_flow_accum_raster_path, 1, 1)
 * 
 */
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_target_flow_accum_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_flow_accum_raster_path);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_target_flow_accum_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_int_1);
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_flow_accum_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2235
 * 
 *     # make a temporary raster to mark where we have visisted
 *     LOGGER.debug('creating visited raster layer')             # <<<<<<<<<<<<<<
 *     tmp_dir_root = os.path.dirname(target_flow_accum_raster_path)
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_debug); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_kp_u_creating_visited_raster_layer) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_creating_visited_raster_layer);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2236
 *     # make a temporary raster to mark where we have visisted
 *     LOGGER.debug('creating visited raster layer')
 *     tmp_dir_root = os.path.dirname(target_flow_accum_raster_path)             # <<<<<<<<<<<<<<
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_dirname); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_v_target_flow_accum_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_target_flow_accum_raster_path);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tmp_dir_root = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2237
 *     LOGGER.debug('creating visited raster layer')
 *     tmp_dir_root = os.path.dirname(target_flow_accum_raster_path)
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')             # <<<<<<<<<<<<<<
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dir, __pyx_v_tmp_dir_root) < 0) __PYX_ERR(0, 2237, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_prefix, __pyx_n_u_mfd_flow_dir) < 0) __PYX_ERR(0, 2237, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_tmp_dir = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2238
 *     tmp_dir_root = os.path.dirname(target_flow_accum_raster_path)
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_os); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_tmp_dir, __pyx_kp_u_visited_tif};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_tmp_dir, __pyx_kp_u_visited_tif};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_tmp_dir);
    __Pyx_GIVEREF(__pyx_v_tmp_dir);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_9, __pyx_v_tmp_dir);
    __Pyx_INCREF(__pyx_kp_u_visited_tif);
    __Pyx_GIVEREF(__pyx_kp_u_visited_tif);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_9, __pyx_kp_u_visited_tif);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_visited_raster_path = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2239
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 *         gdal.GDT_Byte, [0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2240
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Byte, [0],
 *         raster_driver_creation_tuple=('GTiff', (
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/geoprocessing/routing/routing.pyx":2241
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 *         gdal.GDT_Byte, [0],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=('GTiff', (
 *             'SPARSE_OK=TRUE', 'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_gdal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);

  /* "src/geoprocessing/routing/routing.pyx":2239
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 *         gdal.GDT_Byte, [0],
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_visited_raster_path);
  __Pyx_GIVEREF(__pyx_v_visited_raster_path);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_visited_raster_path);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2242
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 *         gdal.GDT_Byte, [0],
 *         raster_driver_creation_tuple=('GTiff', (             # <<<<<<<<<<<<<<
 *             'SPARSE_OK=TRUE', 'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *             'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":2244
 *         raster_driver_creation_tuple=('GTiff', (
 *             'SPARSE_OK=TRUE', 'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *             'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),             # <<<<<<<<<<<<<<
 *             'BLOCKYSIZE=%d' % (1 << BLOCK_BITS))))
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_long((1 << __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_BLOCKXSIZE_d, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2245
 *             'SPARSE_OK=TRUE', 'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *             'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 *             'BLOCKYSIZE=%d' % (1 << BLOCK_BITS))))             # <<<<<<<<<<<<<<
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_long((1 << __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = PyUnicode_Format(__pyx_kp_u_BLOCKYSIZE_d, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2243
 *         gdal.GDT_Byte, [0],
 *         raster_driver_creation_tuple=('GTiff', (
 *             'SPARSE_OK=TRUE', 'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',             # <<<<<<<<<<<<<<
 *             'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 *             'BLOCKYSIZE=%d' % (1 << BLOCK_BITS))))
 */
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u_SPARSE_OK_TRUE);
  __Pyx_GIVEREF(__pyx_kp_u_SPARSE_OK_TRUE);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_SPARSE_OK_TRUE);
  __Pyx_INCREF(__pyx_kp_u_TILED_YES);
  __Pyx_GIVEREF(__pyx_kp_u_TILED_YES);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_TILED_YES);
  __Pyx_INCREF(__pyx_kp_u_BIGTIFF_YES);
  __Pyx_GIVEREF(__pyx_kp_u_BIGTIFF_YES);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_BIGTIFF_YES);
  __Pyx_INCREF(__pyx_kp_u_COMPRESS_LZW);
  __Pyx_GIVEREF(__pyx_kp_u_COMPRESS_LZW);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_kp_u_COMPRESS_LZW);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_10);
  __pyx_t_7 = 0;
  __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2242
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 *         gdal.GDT_Byte, [0],
 *         raster_driver_creation_tuple=('GTiff', (             # <<<<<<<<<<<<<<
 *             'SPARSE_OK=TRUE', 'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *             'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 */
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_n_u_GTiff);
  __Pyx_GIVEREF(__pyx_n_u_GTiff);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_u_GTiff);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_raster_driver_creation_tuple, __pyx_t_10) < 0) __PYX_ERR(0, 2242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2239
 *     tmp_dir = tempfile.mkdtemp(dir=tmp_dir_root, prefix='mfd_flow_dir_')
 *     visited_raster_path = os.path.join(tmp_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], visited_raster_path,
 *         gdal.GDT_Byte, [0],
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2246
 *             'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 *             'BLOCKYSIZE=%d' % (1 << BLOCK_BITS))))
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_managed_raster = _ManagedRaster(
 */
  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_visited_raster_path);
  __Pyx_GIVEREF(__pyx_v_visited_raster_path);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_visited_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_int_1);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_visited_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2249
 * 
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "src/geoprocessing/routing/routing.pyx":2248
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)
 * 
 *     flow_dir_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)
 *     flow_dir_raster = gdal.OpenEx(
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_10);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
  __pyx_t_3 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2250
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)
 *     flow_dir_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2251
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 *         flow_dir_mfd_raster_path_band[1])
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_gdal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_1, __pyx_t_2};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2250, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_1, __pyx_t_2};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2250, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_raster = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2252
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[1])
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":2253
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 *         flow_dir_mfd_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     cdef _ManagedRaster weight_raster = None
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_10 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_band = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2255
 *         flow_dir_mfd_raster_path_band[1])
 * 
 *     cdef _ManagedRaster weight_raster = None             # <<<<<<<<<<<<<<
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_weight_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)Py_None);

  /* "src/geoprocessing/routing/routing.pyx":2256
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_weight_raster_path_band); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2256, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":2258
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "src/geoprocessing/routing/routing.pyx":2257
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 */
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_int_0);
    __pyx_t_10 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_weight_raster, ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2259
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2260
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_u_nodata); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2261
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2260
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_raw_weight_nodata = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2262
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 * 
 */
    __pyx_t_5 = (__pyx_v_raw_weight_nodata != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "src/geoprocessing/routing/routing.pyx":2263
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_raw_weight_nodata); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2263, __pyx_L1_error)
      __pyx_v_weight_nodata = __pyx_t_11;

      /* "src/geoprocessing/routing/routing.pyx":2262
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 * 
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2256
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2265
 *             weight_nodata = raw_weight_nodata
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2266
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_mfd_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 *     pixel_count = raster_x_size * raster_y_size
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_flow_dir_raster_info = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2267
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_mfd_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']             # <<<<<<<<<<<<<<
 *     pixel_count = raster_x_size * raster_y_size
 *     visit_count = 0
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2267, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_12 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_2); if (unlikely(!__pyx_t_10)) goto __pyx_L9_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_10);
    index = 1; __pyx_t_7 = __pyx_t_12(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_2), 2) < 0) __PYX_ERR(0, 2267, __pyx_L1_error)
    __pyx_t_12 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L10_unpacking_done;
    __pyx_L9_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2267, __pyx_L1_error)
    __pyx_L10_unpacking_done:;
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_raster_x_size = __pyx_t_9;
  __pyx_v_raster_y_size = __pyx_t_13;

  /* "src/geoprocessing/routing/routing.pyx":2268
 *         flow_dir_mfd_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 *     pixel_count = raster_x_size * raster_y_size             # <<<<<<<<<<<<<<
 *     visit_count = 0
 * 
 */
  __pyx_v_pixel_count = (__pyx_v_raster_x_size * __pyx_v_raster_y_size);

  /* "src/geoprocessing/routing/routing.pyx":2269
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 *     pixel_count = raster_x_size * raster_y_size
 *     visit_count = 0             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.debug('starting search')
 */
  __pyx_v_visit_count = 0;

  /* "src/geoprocessing/routing/routing.pyx":2271
 *     visit_count = 0
 * 
 *     LOGGER.debug('starting search')             # <<<<<<<<<<<<<<
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_debug); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_7, __pyx_kp_u_starting_search) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_u_starting_search);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2273
 *     LOGGER.debug('starting search')
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_mfd_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2274
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_mfd_raster_path_band, offset_only=True,             # <<<<<<<<<<<<<<
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_flow_dir_mfd_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_mfd_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_flow_dir_mfd_raster_path_band);
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 2274, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 2274, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2273
 *     LOGGER.debug('starting search')
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_mfd_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_7 = __pyx_t_2; __Pyx_INCREF(__pyx_t_7); __pyx_t_14 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_14 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_15 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2273, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 2273, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 2273, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_15(__pyx_t_7);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2273, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2276
 *             flow_dir_mfd_raster_path_band, offset_only=True,
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_win_xsize = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":2277
 *             largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_win_ysize = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":2278
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_xoff = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":2279
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_yoff = __pyx_t_13;

    /* "src/geoprocessing/routing/routing.pyx":2281
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_6 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_6) {

      /* "src/geoprocessing/routing/routing.pyx":2282
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":2283
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))
 */
      __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2284
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "src/geoprocessing/routing/routing.pyx":2285
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))             # <<<<<<<<<<<<<<
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 */
      __pyx_t_1 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "src/geoprocessing/routing/routing.pyx":2284
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_kp_u_1f_complete, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_kp_u_1f_complete, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2284, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_kp_u_1f_complete);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_13, __pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_13, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2281
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2288
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_mfd_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2289
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_mfd_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.int32)
 *         flow_dir_mfd_buffer_array[:] = 0  # 0 means no flow at all
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2288
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_mfd_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 */
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2290
 *         flow_dir_mfd_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_buffer_array[:] = 0  # 0 means no flow at all
 * 
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2288
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         flow_dir_mfd_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2288, __pyx_L1_error)
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer);
      __pyx_t_13 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_13 < 0)) {
        PyErr_Fetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_flow_dir_mfd_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
        }
        __pyx_t_17 = __pyx_t_18 = __pyx_t_19 = 0;
      }
      __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].strides = __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].shape = __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].strides = __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].shape = __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 2288, __pyx_L1_error)
    }
    __pyx_t_16 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flow_dir_mfd_buffer_array, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2291
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 *         flow_dir_mfd_buffer_array[:] = 0  # 0 means no flow at all             # <<<<<<<<<<<<<<
 * 
 *         # check if we can widen the border to include real data from the
 */
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_mfd_buffer_array), __pyx_slice__6, __pyx_int_0) < 0)) __PYX_ERR(0, 2291, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2295
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_generate_read_bounds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":2296
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.int32)
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_raster_x_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_raster_y_size); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_offset_dict, __pyx_t_8, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_offset_dict, __pyx_t_8, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_v_offset_dict);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_13, __pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_13, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_13, __pyx_t_10);
      __pyx_t_8 = 0;
      __pyx_t_10 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2295, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_20 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_20 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_20);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_20 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_20 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_20)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_10), 2) < 0) __PYX_ERR(0, 2295, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L15_unpacking_done;
      __pyx_L14_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2295, __pyx_L1_error)
      __pyx_L15_unpacking_done:;
    }

    /* "src/geoprocessing/routing/routing.pyx":2295
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 */
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2295, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_21 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_21 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_21);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_10,&__pyx_t_8,&__pyx_t_3,&__pyx_t_21};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2295, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_10,&__pyx_t_8,&__pyx_t_3,&__pyx_t_21};
      __pyx_t_22 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_22)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_22); if (unlikely(!item)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_22), 4) < 0) __PYX_ERR(0, 2295, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      goto __pyx_L17_unpacking_done;
      __pyx_L16_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2295, __pyx_L1_error)
      __pyx_L17_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xa, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xb, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ya, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_yb, __pyx_t_21);
    __pyx_t_21 = 0;
    __Pyx_XDECREF_SET(__pyx_v_modified_offset_dict, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2297
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.int32)
 * 
 */
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);

    /* "src/geoprocessing/routing/routing.pyx":2298
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 2298, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_2 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_2 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }

    /* "src/geoprocessing/routing/routing.pyx":2297
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.int32)
 * 
 */
    __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2298
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(
 *                 **modified_offset_dict).astype(numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_int32); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __pyx_t_21 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_21, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_20);
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2297
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         flow_dir_mfd_buffer_array[ya:yb, xa:xb] = flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 **modified_offset_dict).astype(numpy.int32)
 * 
 */
    __pyx_t_2 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_20 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_20);
    __pyx_t_2 = 0;
    __pyx_t_20 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_mfd_buffer_array), __pyx_t_21, __pyx_t_1) < 0)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2301
 * 
 *         # ensure these are set for the complier
 *         xi_n = -1             # <<<<<<<<<<<<<<
 *         yi_n = -1
 * 
 */
    __pyx_v_xi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":2302
 *         # ensure these are set for the complier
 *         xi_n = -1
 *         yi_n = -1             # <<<<<<<<<<<<<<
 * 
 *         # search block for to set flow accumulation
 */
    __pyx_v_yi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":2305
 * 
 *         # search block for to set flow accumulation
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir_mfd = flow_dir_mfd_buffer_array[yi, xi]
 */
    __pyx_t_23 = (__pyx_v_win_ysize + 1);
    __pyx_t_24 = __pyx_t_23;
    for (__pyx_t_13 = 1; __pyx_t_13 < __pyx_t_24; __pyx_t_13+=1) {
      __pyx_v_yi = __pyx_t_13;

      /* "src/geoprocessing/routing/routing.pyx":2306
 *         # search block for to set flow accumulation
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 flow_dir_mfd = flow_dir_mfd_buffer_array[yi, xi]
 *                 if flow_dir_mfd == 0:
 */
      __pyx_t_25 = (__pyx_v_win_xsize + 1);
      __pyx_t_26 = __pyx_t_25;
      for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_26; __pyx_t_9+=1) {
        __pyx_v_xi = __pyx_t_9;

        /* "src/geoprocessing/routing/routing.pyx":2307
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir_mfd = flow_dir_mfd_buffer_array[yi, xi]             # <<<<<<<<<<<<<<
 *                 if flow_dir_mfd == 0:
 *                     # no flow in this pixel, so skip
 */
        __pyx_t_27 = __pyx_v_yi;
        __pyx_t_28 = __pyx_v_xi;
        __pyx_t_29 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_29 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].shape)) __pyx_t_29 = 0;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_29 = 1;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].shape)) __pyx_t_29 = 1;
        if (unlikely(__pyx_t_29 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_29);
          __PYX_ERR(0, 2307, __pyx_L1_error)
        }
        __pyx_v_flow_dir_mfd = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].strides));

        /* "src/geoprocessing/routing/routing.pyx":2308
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir_mfd = flow_dir_mfd_buffer_array[yi, xi]
 *                 if flow_dir_mfd == 0:             # <<<<<<<<<<<<<<
 *                     # no flow in this pixel, so skip
 *                     continue
 */
        __pyx_t_6 = ((__pyx_v_flow_dir_mfd == 0) != 0);
        if (__pyx_t_6) {

          /* "src/geoprocessing/routing/routing.pyx":2310
 *                 if flow_dir_mfd == 0:
 *                     # no flow in this pixel, so skip
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 for i_n in range(8):
 */
          goto __pyx_L20_continue;

          /* "src/geoprocessing/routing/routing.pyx":2308
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir_mfd = flow_dir_mfd_buffer_array[yi, xi]
 *                 if flow_dir_mfd == 0:             # <<<<<<<<<<<<<<
 *                     # no flow in this pixel, so skip
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2312
 *                     continue
 * 
 *                 for i_n in range(8):             # <<<<<<<<<<<<<<
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:
 *                         # no flow in that direction
 */
        for (__pyx_t_29 = 0; __pyx_t_29 < 8; __pyx_t_29+=1) {
          __pyx_v_i_n = __pyx_t_29;

          /* "src/geoprocessing/routing/routing.pyx":2313
 * 
 *                 for i_n in range(8):
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:             # <<<<<<<<<<<<<<
 *                         # no flow in that direction
 *                         continue
 */
          __pyx_t_6 = ((((__pyx_v_flow_dir_mfd >> (__pyx_v_i_n * 4)) & 0xF) == 0) != 0);
          if (__pyx_t_6) {

            /* "src/geoprocessing/routing/routing.pyx":2315
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:
 *                         # no flow in that direction
 *                         continue             # <<<<<<<<<<<<<<
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]
 */
            goto __pyx_L23_continue;

            /* "src/geoprocessing/routing/routing.pyx":2313
 * 
 *                 for i_n in range(8):
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:             # <<<<<<<<<<<<<<
 *                         # no flow in that direction
 *                         continue
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2316
 *                         # no flow in that direction
 *                         continue
 *                     xi_n = xi+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     yi_n = yi+D8_YOFFSET[i_n]
 * 
 */
          __pyx_v_xi_n = (__pyx_v_xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":2317
 *                         continue
 *                     xi_n = xi+D8_XOFFSET[i_n]
 *                     yi_n = yi+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                     if flow_dir_mfd_buffer_array[yi_n, xi_n] == 0:
 */
          __pyx_v_yi_n = (__pyx_v_yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":2319
 *                     yi_n = yi+D8_YOFFSET[i_n]
 * 
 *                     if flow_dir_mfd_buffer_array[yi_n, xi_n] == 0:             # <<<<<<<<<<<<<<
 *                         # if the entire value is zero, it flows nowhere
 *                         # and the root pixel is draining to it, thus the
 */
          __pyx_t_28 = __pyx_v_yi_n;
          __pyx_t_27 = __pyx_v_xi_n;
          __pyx_t_30 = -1;
          if (__pyx_t_28 < 0) {
            __pyx_t_28 += __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].shape;
            if (unlikely(__pyx_t_28 < 0)) __pyx_t_30 = 0;
          } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].shape)) __pyx_t_30 = 0;
          if (__pyx_t_27 < 0) {
            __pyx_t_27 += __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].shape;
            if (unlikely(__pyx_t_27 < 0)) __pyx_t_30 = 1;
          } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].shape)) __pyx_t_30 = 1;
          if (unlikely(__pyx_t_30 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_30);
            __PYX_ERR(0, 2319, __pyx_L1_error)
          }
          __pyx_t_6 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[0].strides, __pyx_t_27, __pyx_pybuffernd_flow_dir_mfd_buffer_array.diminfo[1].strides)) == 0) != 0);
          if (__pyx_t_6) {

            /* "src/geoprocessing/routing/routing.pyx":2323
 *                         # and the root pixel is draining to it, thus the
 *                         # root must be a drain
 *                         xi_root = xi-1+xoff             # <<<<<<<<<<<<<<
 *                         yi_root = yi-1+yoff
 *                         if weight_raster is not None:
 */
            __pyx_v_xi_root = ((__pyx_v_xi - 1) + __pyx_v_xoff);

            /* "src/geoprocessing/routing/routing.pyx":2324
 *                         # root must be a drain
 *                         xi_root = xi-1+xoff
 *                         yi_root = yi-1+yoff             # <<<<<<<<<<<<<<
 *                         if weight_raster is not None:
 *                             weight_val = <double>weight_raster.get(
 */
            __pyx_v_yi_root = ((__pyx_v_yi - 1) + __pyx_v_yoff);

            /* "src/geoprocessing/routing/routing.pyx":2325
 *                         xi_root = xi-1+xoff
 *                         yi_root = yi-1+yoff
 *                         if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                             weight_val = <double>weight_raster.get(
 *                                 xi_root, yi_root)
 */
            __pyx_t_6 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
            __pyx_t_5 = (__pyx_t_6 != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2326
 *                         yi_root = yi-1+yoff
 *                         if weight_raster is not None:
 *                             weight_val = <double>weight_raster.get(             # <<<<<<<<<<<<<<
 *                                 xi_root, yi_root)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
              __pyx_v_weight_val = ((double)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_weight_raster, __pyx_v_xi_root, __pyx_v_yi_root));

              /* "src/geoprocessing/routing/routing.pyx":2328
 *                             weight_val = <double>weight_raster.get(
 *                                 xi_root, yi_root)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                 weight_val = 0.0
 *                         else:
 */
              __pyx_t_5 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_weight_val, __pyx_v_weight_nodata, 1e-8, 1e-5) != 0);
              if (__pyx_t_5) {

                /* "src/geoprocessing/routing/routing.pyx":2329
 *                                 xi_root, yi_root)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                 weight_val = 0.0             # <<<<<<<<<<<<<<
 *                         else:
 *                             weight_val = 1.0
 */
                __pyx_v_weight_val = 0.0;

                /* "src/geoprocessing/routing/routing.pyx":2328
 *                             weight_val = <double>weight_raster.get(
 *                                 xi_root, yi_root)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                 weight_val = 0.0
 *                         else:
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":2325
 *                         xi_root = xi-1+xoff
 *                         yi_root = yi-1+yoff
 *                         if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                             weight_val = <double>weight_raster.get(
 *                                 xi_root, yi_root)
 */
              goto __pyx_L27;
            }

            /* "src/geoprocessing/routing/routing.pyx":2331
 *                                 weight_val = 0.0
 *                         else:
 *                             weight_val = 1.0             # <<<<<<<<<<<<<<
 *                         search_stack.push(
 *                             FlowPixelType(xi_root, yi_root, 0, weight_val))
 */
            /*else*/ {
              __pyx_v_weight_val = 1.0;
            }
            __pyx_L27:;

            /* "src/geoprocessing/routing/routing.pyx":2333
 *                             weight_val = 1.0
 *                         search_stack.push(
 *                             FlowPixelType(xi_root, yi_root, 0, weight_val))             # <<<<<<<<<<<<<<
 *                         visited_managed_raster.set(xi_root, yi_root, 1)
 *                         visit_count += 1
 */
            __pyx_t_31.xi = __pyx_v_xi_root;
            __pyx_t_31.yi = __pyx_v_yi_root;
            __pyx_t_31.last_flow_dir = 0;
            __pyx_t_31.value = __pyx_v_weight_val;

            /* "src/geoprocessing/routing/routing.pyx":2332
 *                         else:
 *                             weight_val = 1.0
 *                         search_stack.push(             # <<<<<<<<<<<<<<
 *                             FlowPixelType(xi_root, yi_root, 0, weight_val))
 *                         visited_managed_raster.set(xi_root, yi_root, 1)
 */
            __pyx_v_search_stack.push(__pyx_t_31);

            /* "src/geoprocessing/routing/routing.pyx":2334
 *                         search_stack.push(
 *                             FlowPixelType(xi_root, yi_root, 0, weight_val))
 *                         visited_managed_raster.set(xi_root, yi_root, 1)             # <<<<<<<<<<<<<<
 *                         visit_count += 1
 *                         break
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_visited_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, 1.0);

            /* "src/geoprocessing/routing/routing.pyx":2335
 *                             FlowPixelType(xi_root, yi_root, 0, weight_val))
 *                         visited_managed_raster.set(xi_root, yi_root, 1)
 *                         visit_count += 1             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
            __pyx_v_visit_count = (__pyx_v_visit_count + 1);

            /* "src/geoprocessing/routing/routing.pyx":2336
 *                         visited_managed_raster.set(xi_root, yi_root, 1)
 *                         visit_count += 1
 *                         break             # <<<<<<<<<<<<<<
 * 
 *                 while not search_stack.empty():
 */
            goto __pyx_L24_break;

            /* "src/geoprocessing/routing/routing.pyx":2319
 *                     yi_n = yi+D8_YOFFSET[i_n]
 * 
 *                     if flow_dir_mfd_buffer_array[yi_n, xi_n] == 0:             # <<<<<<<<<<<<<<
 *                         # if the entire value is zero, it flows nowhere
 *                         # and the root pixel is draining to it, thus the
 */
          }
          __pyx_L23_continue:;
        }
        __pyx_L24_break:;

        /* "src/geoprocessing/routing/routing.pyx":2338
 *                         break
 * 
 *                 while not search_stack.empty():             # <<<<<<<<<<<<<<
 *                     flow_pixel = search_stack.top()
 *                     search_stack.pop()
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_search_stack.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":2339
 * 
 *                 while not search_stack.empty():
 *                     flow_pixel = search_stack.top()             # <<<<<<<<<<<<<<
 *                     search_stack.pop()
 * 
 */
          __pyx_v_flow_pixel = __pyx_v_search_stack.top();

          /* "src/geoprocessing/routing/routing.pyx":2340
 *                 while not search_stack.empty():
 *                     flow_pixel = search_stack.top()
 *                     search_stack.pop()             # <<<<<<<<<<<<<<
 * 
 *                     if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
          __pyx_v_search_stack.pop();

          /* "src/geoprocessing/routing/routing.pyx":2342
 *                     search_stack.pop()
 * 
 *                     if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *                         last_log_time = ctime(NULL)
 *                         LOGGER.info(
 */
          __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":2343
 * 
 *                     if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *                         last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *                         LOGGER.info(
 *                             'mfd flow accum %.1f%% complete',
 */
            __pyx_v_last_log_time = time(NULL);

            /* "src/geoprocessing/routing/routing.pyx":2344
 *                     if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *                         last_log_time = ctime(NULL)
 *                         LOGGER.info(             # <<<<<<<<<<<<<<
 *                             'mfd flow accum %.1f%% complete',
 *                             100.0 * visit_count / float(pixel_count))
 */
            __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2344, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_info); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2344, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

            /* "src/geoprocessing/routing/routing.pyx":2346
 *                         LOGGER.info(
 *                             'mfd flow accum %.1f%% complete',
 *                             100.0 * visit_count / float(pixel_count))             # <<<<<<<<<<<<<<
 * 
 *                     preempted = 0
 */
            __pyx_t_11 = (100.0 * __pyx_v_visit_count);
            if (unlikely(((double)__pyx_v_pixel_count) == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 2346, __pyx_L1_error)
            }
            __pyx_t_21 = PyFloat_FromDouble((__pyx_t_11 / ((double)__pyx_v_pixel_count))); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_2 = NULL;
            __pyx_t_29 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_20);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_20, function);
                __pyx_t_29 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_20)) {
              PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_u_mfd_flow_accum_1f_complete, __pyx_t_21};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_20, __pyx_temp+1-__pyx_t_29, 2+__pyx_t_29); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2344, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_20)) {
              PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_u_mfd_flow_accum_1f_complete, __pyx_t_21};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_20, __pyx_temp+1-__pyx_t_29, 2+__pyx_t_29); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2344, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            } else
            #endif
            {
              __pyx_t_3 = PyTuple_New(2+__pyx_t_29); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2344, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              if (__pyx_t_2) {
                __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
              }
              __Pyx_INCREF(__pyx_kp_u_mfd_flow_accum_1f_complete);
              __Pyx_GIVEREF(__pyx_kp_u_mfd_flow_accum_1f_complete);
              PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_29, __pyx_kp_u_mfd_flow_accum_1f_complete);
              __Pyx_GIVEREF(__pyx_t_21);
              PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_29, __pyx_t_21);
              __pyx_t_21 = 0;
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2344, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "src/geoprocessing/routing/routing.pyx":2342
 *                     search_stack.pop()
 * 
 *                     if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *                         last_log_time = ctime(NULL)
 *                         LOGGER.info(
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2348
 *                             100.0 * visit_count / float(pixel_count))
 * 
 *                     preempted = 0             # <<<<<<<<<<<<<<
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 */
          __pyx_v_preempted = 0;

          /* "src/geoprocessing/routing/routing.pyx":2349
 * 
 *                     preempted = 0
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):             # <<<<<<<<<<<<<<
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 */
          for (__pyx_t_29 = __pyx_v_flow_pixel.last_flow_dir; __pyx_t_29 < 8; __pyx_t_29+=1) {
            __pyx_v_i_n = __pyx_t_29;

            /* "src/geoprocessing/routing/routing.pyx":2350
 *                     preempted = 0
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_xi_n = (__pyx_v_flow_pixel.xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2351
 *                     for i_n in range(flow_pixel.last_flow_dir, 8):
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 */
            __pyx_v_yi_n = (__pyx_v_flow_pixel.yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2352
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 */
            __pyx_t_6 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L35_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2353
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             # no upstream here
 *                             continue
 */
            __pyx_t_6 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L35_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2352
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2355
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 *                             continue             # <<<<<<<<<<<<<<
 *                         compressed_upstream_flow_dir = (
 *                             <int>flow_dir_managed_raster.get(xi_n, yi_n))
 */
              goto __pyx_L32_continue;

              /* "src/geoprocessing/routing/routing.pyx":2352
 *                         xi_n = flow_pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = flow_pixel.yi+D8_YOFFSET[i_n]
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             # no upstream here
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2357
 *                             continue
 *                         compressed_upstream_flow_dir = (
 *                             <int>flow_dir_managed_raster.get(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *                         upstream_flow_weight = (
 *                             compressed_upstream_flow_dir >> (
 */
            __pyx_v_compressed_upstream_flow_dir = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n));

            /* "src/geoprocessing/routing/routing.pyx":2360
 *                         upstream_flow_weight = (
 *                             compressed_upstream_flow_dir >> (
 *                                 D8_REVERSE_DIRECTION[i_n] * 4)) & 0xF             # <<<<<<<<<<<<<<
 *                         if upstream_flow_weight == 0:
 *                             # no upstream flow to this pixel
 */
            __pyx_v_upstream_flow_weight = ((__pyx_v_compressed_upstream_flow_dir >> ((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_i_n]) * 4)) & 0xF);

            /* "src/geoprocessing/routing/routing.pyx":2361
 *                             compressed_upstream_flow_dir >> (
 *                                 D8_REVERSE_DIRECTION[i_n] * 4)) & 0xF
 *                         if upstream_flow_weight == 0:             # <<<<<<<<<<<<<<
 *                             # no upstream flow to this pixel
 *                             continue
 */
            __pyx_t_5 = ((__pyx_v_upstream_flow_weight == 0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2363
 *                         if upstream_flow_weight == 0:
 *                             # no upstream flow to this pixel
 *                             continue             # <<<<<<<<<<<<<<
 *                         upstream_flow_accum = (
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 */
              goto __pyx_L32_continue;

              /* "src/geoprocessing/routing/routing.pyx":2361
 *                             compressed_upstream_flow_dir >> (
 *                                 D8_REVERSE_DIRECTION[i_n] * 4)) & 0xF
 *                         if upstream_flow_weight == 0:             # <<<<<<<<<<<<<<
 *                             # no upstream flow to this pixel
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2365
 *                             continue
 *                         upstream_flow_accum = (
 *                             flow_accum_managed_raster.get(xi_n, yi_n))             # <<<<<<<<<<<<<<
 *                         if (_is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5)
 *                                 and not visited_managed_raster.get(
 */
            __pyx_v_upstream_flow_accum = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

            /* "src/geoprocessing/routing/routing.pyx":2366
 *                         upstream_flow_accum = (
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if (_is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5)             # <<<<<<<<<<<<<<
 *                                 and not visited_managed_raster.get(
 *                                     xi_n, yi_n)):
 */
            __pyx_t_6 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_upstream_flow_accum, __pyx_v_flow_accum_nodata, 1e-8, 1e-5) != 0);
            if (__pyx_t_6) {
            } else {
              __pyx_t_5 = __pyx_t_6;
              goto __pyx_L41_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2367
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if (_is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5)
 *                                 and not visited_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n)):
 *                             # process upstream before this one
 */
            __pyx_t_6 = ((!(__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_visited_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) != 0)) != 0);
            __pyx_t_5 = __pyx_t_6;
            __pyx_L41_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2366
 *                         upstream_flow_accum = (
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if (_is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5)             # <<<<<<<<<<<<<<
 *                                 and not visited_managed_raster.get(
 *                                     xi_n, yi_n)):
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2370
 *                                     xi_n, yi_n)):
 *                             # process upstream before this one
 *                             flow_pixel.last_flow_dir = i_n             # <<<<<<<<<<<<<<
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:
 */
              __pyx_v_flow_pixel.last_flow_dir = __pyx_v_i_n;

              /* "src/geoprocessing/routing/routing.pyx":2371
 *                             # process upstream before this one
 *                             flow_pixel.last_flow_dir = i_n
 *                             search_stack.push(flow_pixel)             # <<<<<<<<<<<<<<
 *                             if weight_raster is not None:
 *                                 weight_val = <double>weight_raster.get(
 */
              __pyx_v_search_stack.push(__pyx_v_flow_pixel);

              /* "src/geoprocessing/routing/routing.pyx":2372
 *                             flow_pixel.last_flow_dir = i_n
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 */
              __pyx_t_5 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
              __pyx_t_6 = (__pyx_t_5 != 0);
              if (__pyx_t_6) {

                /* "src/geoprocessing/routing/routing.pyx":2373
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:
 *                                 weight_val = <double>weight_raster.get(             # <<<<<<<<<<<<<<
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
                __pyx_v_weight_val = ((double)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_weight_raster, __pyx_v_xi_n, __pyx_v_yi_n));

                /* "src/geoprocessing/routing/routing.pyx":2375
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                     weight_val = 0.0
 *                             else:
 */
                __pyx_t_6 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_weight_val, __pyx_v_weight_nodata, 1e-8, 1e-5) != 0);
                if (__pyx_t_6) {

                  /* "src/geoprocessing/routing/routing.pyx":2376
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                     weight_val = 0.0             # <<<<<<<<<<<<<<
 *                             else:
 *                                 weight_val = 1.0
 */
                  __pyx_v_weight_val = 0.0;

                  /* "src/geoprocessing/routing/routing.pyx":2375
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                     weight_val = 0.0
 *                             else:
 */
                }

                /* "src/geoprocessing/routing/routing.pyx":2372
 *                             flow_pixel.last_flow_dir = i_n
 *                             search_stack.push(flow_pixel)
 *                             if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                                 weight_val = <double>weight_raster.get(
 *                                     xi_n, yi_n)
 */
                goto __pyx_L43;
              }

              /* "src/geoprocessing/routing/routing.pyx":2378
 *                                     weight_val = 0.0
 *                             else:
 *                                 weight_val = 1.0             # <<<<<<<<<<<<<<
 *                             search_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 */
              /*else*/ {
                __pyx_v_weight_val = 1.0;
              }
              __pyx_L43:;

              /* "src/geoprocessing/routing/routing.pyx":2380
 *                                 weight_val = 1.0
 *                             search_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))             # <<<<<<<<<<<<<<
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             visit_count += 1
 */
              __pyx_t_31.xi = __pyx_v_xi_n;
              __pyx_t_31.yi = __pyx_v_yi_n;
              __pyx_t_31.last_flow_dir = 0;
              __pyx_t_31.value = __pyx_v_weight_val;

              /* "src/geoprocessing/routing/routing.pyx":2379
 *                             else:
 *                                 weight_val = 1.0
 *                             search_stack.push(             # <<<<<<<<<<<<<<
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 */
              __pyx_v_search_stack.push(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":2381
 *                             search_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 *                             visited_managed_raster.set(xi_n, yi_n, 1)             # <<<<<<<<<<<<<<
 *                             visit_count += 1
 *                             preempted = 1
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_visited_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, 1.0);

              /* "src/geoprocessing/routing/routing.pyx":2382
 *                                 FlowPixelType(xi_n, yi_n, 0, weight_val))
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             visit_count += 1             # <<<<<<<<<<<<<<
 *                             preempted = 1
 *                             break
 */
              __pyx_v_visit_count = (__pyx_v_visit_count + 1);

              /* "src/geoprocessing/routing/routing.pyx":2383
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             visit_count += 1
 *                             preempted = 1             # <<<<<<<<<<<<<<
 *                             break
 *                         upstream_flow_dir_sum = 0
 */
              __pyx_v_preempted = 1;

              /* "src/geoprocessing/routing/routing.pyx":2384
 *                             visit_count += 1
 *                             preempted = 1
 *                             break             # <<<<<<<<<<<<<<
 *                         upstream_flow_dir_sum = 0
 *                         for i_upstream_flow in range(8):
 */
              goto __pyx_L33_break;

              /* "src/geoprocessing/routing/routing.pyx":2366
 *                         upstream_flow_accum = (
 *                             flow_accum_managed_raster.get(xi_n, yi_n))
 *                         if (_is_close(upstream_flow_accum, flow_accum_nodata, 1e-8, 1e-5)             # <<<<<<<<<<<<<<
 *                                 and not visited_managed_raster.get(
 *                                     xi_n, yi_n)):
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2385
 *                             preempted = 1
 *                             break
 *                         upstream_flow_dir_sum = 0             # <<<<<<<<<<<<<<
 *                         for i_upstream_flow in range(8):
 *                             upstream_flow_dir_sum += (
 */
            __pyx_v_upstream_flow_dir_sum = 0;

            /* "src/geoprocessing/routing/routing.pyx":2386
 *                             break
 *                         upstream_flow_dir_sum = 0
 *                         for i_upstream_flow in range(8):             # <<<<<<<<<<<<<<
 *                             upstream_flow_dir_sum += (
 *                                 compressed_upstream_flow_dir >> (
 */
            for (__pyx_t_30 = 0; __pyx_t_30 < 8; __pyx_t_30+=1) {
              __pyx_v_i_upstream_flow = __pyx_t_30;

              /* "src/geoprocessing/routing/routing.pyx":2387
 *                         upstream_flow_dir_sum = 0
 *                         for i_upstream_flow in range(8):
 *                             upstream_flow_dir_sum += (             # <<<<<<<<<<<<<<
 *                                 compressed_upstream_flow_dir >> (
 *                                     i_upstream_flow * 4)) & 0xF
 */
              __pyx_v_upstream_flow_dir_sum = (__pyx_v_upstream_flow_dir_sum + ((__pyx_v_compressed_upstream_flow_dir >> (__pyx_v_i_upstream_flow * 4)) & 0xF));
            }

            /* "src/geoprocessing/routing/routing.pyx":2392
 * 
 *                         flow_pixel.value += (
 *                             upstream_flow_accum * upstream_flow_weight /             # <<<<<<<<<<<<<<
 *                             <float>upstream_flow_dir_sum)
 *                     if not preempted:
 */
            __pyx_t_11 = (__pyx_v_upstream_flow_accum * __pyx_v_upstream_flow_weight);

            /* "src/geoprocessing/routing/routing.pyx":2393
 *                         flow_pixel.value += (
 *                             upstream_flow_accum * upstream_flow_weight /
 *                             <float>upstream_flow_dir_sum)             # <<<<<<<<<<<<<<
 *                     if not preempted:
 *                         flow_accum_managed_raster.set(
 */
            if (unlikely(((float)__pyx_v_upstream_flow_dir_sum) == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 2392, __pyx_L1_error)
            }

            /* "src/geoprocessing/routing/routing.pyx":2391
 *                                     i_upstream_flow * 4)) & 0xF
 * 
 *                         flow_pixel.value += (             # <<<<<<<<<<<<<<
 *                             upstream_flow_accum * upstream_flow_weight /
 *                             <float>upstream_flow_dir_sum)
 */
            __pyx_v_flow_pixel.value = (__pyx_v_flow_pixel.value + (__pyx_t_11 / ((double)((float)__pyx_v_upstream_flow_dir_sum))));
            __pyx_L32_continue:;
          }
          __pyx_L33_break:;

          /* "src/geoprocessing/routing/routing.pyx":2394
 *                             upstream_flow_accum * upstream_flow_weight /
 *                             <float>upstream_flow_dir_sum)
 *                     if not preempted:             # <<<<<<<<<<<<<<
 *                         flow_accum_managed_raster.set(
 *                             flow_pixel.xi, flow_pixel.yi,
 */
          __pyx_t_6 = ((!(__pyx_v_preempted != 0)) != 0);
          if (__pyx_t_6) {

            /* "src/geoprocessing/routing/routing.pyx":2395
 *                             <float>upstream_flow_dir_sum)
 *                     if not preempted:
 *                         flow_accum_managed_raster.set(             # <<<<<<<<<<<<<<
 *                             flow_pixel.xi, flow_pixel.yi,
 *                             flow_pixel.value)
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_flow_accum_managed_raster, __pyx_v_flow_pixel.xi, __pyx_v_flow_pixel.yi, __pyx_v_flow_pixel.value);

            /* "src/geoprocessing/routing/routing.pyx":2394
 *                             upstream_flow_accum * upstream_flow_weight /
 *                             <float>upstream_flow_dir_sum)
 *                     if not preempted:             # <<<<<<<<<<<<<<
 *                         flow_accum_managed_raster.set(
 *                             flow_pixel.xi, flow_pixel.yi,
 */
          }
        }
        __pyx_L20_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":2273
 *     LOGGER.debug('starting search')
 *     # this outer loop searches for a pixel that is locally undrained
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_mfd_raster_path_band, offset_only=True,
 *             largest_block=0):
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2398
 *                             flow_pixel.xi, flow_pixel.yi,
 *                             flow_pixel.value)
 *     flow_accum_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_accum_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2399
 *                             flow_pixel.value)
 *     flow_accum_managed_raster.close()
 *     flow_dir_managed_raster.close()             # <<<<<<<<<<<<<<
 *     if weight_raster is not None:
 *         weight_raster.close()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_dir_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2400
 *     flow_accum_managed_raster.close()
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 *     visited_managed_raster.close()
 */
  __pyx_t_6 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":2401
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:
 *         weight_raster.close()             # <<<<<<<<<<<<<<
 *     visited_managed_raster.close()
 *     try:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_weight_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_20 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_20)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_20);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2400
 *     flow_accum_managed_raster.close()
 *     flow_dir_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 *     visited_managed_raster.close()
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2402
 *     if weight_raster is not None:
 *         weight_raster.close()
 *     visited_managed_raster.close()             # <<<<<<<<<<<<<<
 *     try:
 *         shutil.rmtree(tmp_dir)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_visited_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2403
 *         weight_raster.close()
 *     visited_managed_raster.close()
 *     try:             # <<<<<<<<<<<<<<
 *         shutil.rmtree(tmp_dir)
 *     except OSError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
    __Pyx_XGOTREF(__pyx_t_19);
    __Pyx_XGOTREF(__pyx_t_18);
    __Pyx_XGOTREF(__pyx_t_17);
    /*try:*/ {

      /* "src/geoprocessing/routing/routing.pyx":2404
 *     visited_managed_raster.close()
 *     try:
 *         shutil.rmtree(tmp_dir)             # <<<<<<<<<<<<<<
 *     except OSError:
 *         LOGGER.exception("couldn't remove temp dir")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_shutil); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2404, __pyx_L49_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2404, __pyx_L49_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_20);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_20, function);
        }
      }
      __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_1, __pyx_v_tmp_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_v_tmp_dir);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2404, __pyx_L49_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2403
 *         weight_raster.close()
 *     visited_managed_raster.close()
 *     try:             # <<<<<<<<<<<<<<
 *         shutil.rmtree(tmp_dir)
 *     except OSError:
 */
    }
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    goto __pyx_L54_try_end;
    __pyx_L49_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2405
 *     try:
 *         shutil.rmtree(tmp_dir)
 *     except OSError:             # <<<<<<<<<<<<<<
 *         LOGGER.exception("couldn't remove temp dir")
 *     LOGGER.info('%.1f%% complete', 100.0)
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_13) {
      __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_accumulation_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_20, &__pyx_t_1) < 0) __PYX_ERR(0, 2405, __pyx_L51_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_GOTREF(__pyx_t_1);

      /* "src/geoprocessing/routing/routing.pyx":2406
 *         shutil.rmtree(tmp_dir)
 *     except OSError:
 *         LOGGER.exception("couldn't remove temp dir")             # <<<<<<<<<<<<<<
 *     LOGGER.info('%.1f%% complete', 100.0)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2406, __pyx_L51_except_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_exception); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2406, __pyx_L51_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_21)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_21);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_21, __pyx_kp_u_couldn_t_remove_temp_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_couldn_t_remove_temp_dir);
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2406, __pyx_L51_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L50_exception_handled;
    }
    goto __pyx_L51_except_error;
    __pyx_L51_except_error:;

    /* "src/geoprocessing/routing/routing.pyx":2403
 *         weight_raster.close()
 *     visited_managed_raster.close()
 *     try:             # <<<<<<<<<<<<<<
 *         shutil.rmtree(tmp_dir)
 *     except OSError:
 */
    __Pyx_XGIVEREF(__pyx_t_19);
    __Pyx_XGIVEREF(__pyx_t_18);
    __Pyx_XGIVEREF(__pyx_t_17);
    __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_18, __pyx_t_17);
    goto __pyx_L1_error;
    __pyx_L50_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_19);
    __Pyx_XGIVEREF(__pyx_t_18);
    __Pyx_XGIVEREF(__pyx_t_17);
    __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_18, __pyx_t_17);
    __pyx_L54_try_end:;
  }

  /* "src/geoprocessing/routing/routing.pyx":2407
 *     except OSError:
 *         LOGGER.exception("couldn't remove temp dir")
 *     LOGGER.info('%.1f%% complete', 100.0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2129
 * 
 * 
 * def flow_accumulation_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.flow_accumulation_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_mfd_buffer_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_mfd_buffer_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_accum_managed_raster);
  __Pyx_XDECREF(__pyx_v_tmp_dir_root);
  __Pyx_XDECREF(__pyx_v_tmp_dir);
  __Pyx_XDECREF(__pyx_v_visited_raster_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_visited_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster);
  __Pyx_XDECREF(__pyx_v_flow_dir_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_weight_raster);
  __Pyx_XDECREF(__pyx_v_raw_weight_nodata);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster_info);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_modified_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":2410
 * 
 * 
 * def distance_to_channel_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_13distance_to_channel_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_12distance_to_channel_d8[] = "Calculate distance to channel with D8 flow.\n\n    Parameters:\n        flow_dir_d8_raster_path_band (tuple): a path/band index tuple\n            indicating the raster that defines the D8 flow direction\n            raster for this call. The pixel values are integers that\n            correspond to outflow in the following configuration::\n\n                3 2 1\n                4 x 0\n                5 6 7\n\n        channel_raster_path_band (tuple): a path/band tuple of the same\n            dimensions and projection as ``flow_dir_d8_raster_path_band[0]``\n            that indicates where the channels in the problem space lie. A\n            channel is indicated if the value of the pixel is 1. Other values\n            are ignored.\n        target_distance_to_channel_raster_path (str): path to a raster\n            created by this call that has per-pixel distances from a given\n            pixel to the nearest downhill channel.\n        weight_raster_path_band (tuple): optional path and band number to a\n            raster that will be used as the per-pixel flow distance\n            weight. If ``None``, 1 is the default distance between neighboring\n            pixels. This raster must be the same dimensions as\n            ``flow_dir_mfd_raster_path_band``.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_13distance_to_channel_d8 = {"distance_to_channel_d8", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_13distance_to_channel_d8, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_12distance_to_channel_d8};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_13distance_to_channel_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_d8_raster_path_band = 0;
  PyObject *__pyx_v_channel_raster_path_band = 0;
  PyObject *__pyx_v_target_distance_to_channel_raster_path = 0;
  PyObject *__pyx_v_weight_raster_path_band = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance_to_channel_d8 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_d8_raster_path_band,&__pyx_n_s_channel_raster_path_band,&__pyx_n_s_target_distance_to_channel_raste,&__pyx_n_s_weight_raster_path_band,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":2413
 *         flow_dir_d8_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path,
 *         weight_raster_path_band=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """Calculate distance to channel with D8 flow.
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = __pyx_k__11;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_d8_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_channel_raster_path_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance_to_channel_d8", 0, 3, 5, 1); __PYX_ERR(0, 2410, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_distance_to_channel_raste)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance_to_channel_d8", 0, 3, 5, 2); __PYX_ERR(0, 2410, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_raster_path_band);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance_to_channel_d8") < 0)) __PYX_ERR(0, 2410, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_dir_d8_raster_path_band = values[0];
    __pyx_v_channel_raster_path_band = values[1];
    __pyx_v_target_distance_to_channel_raster_path = values[2];
    __pyx_v_weight_raster_path_band = values[3];
    __pyx_v_raster_driver_creation_tuple = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance_to_channel_d8", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2410, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.distance_to_channel_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_12distance_to_channel_d8(__pyx_self, __pyx_v_flow_dir_d8_raster_path_band, __pyx_v_channel_raster_path_band, __pyx_v_target_distance_to_channel_raster_path, __pyx_v_weight_raster_path_band, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":2410
 * 
 * 
 * def distance_to_channel_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_12distance_to_channel_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_d8_raster_path_band, PyObject *__pyx_v_channel_raster_path_band, PyObject *__pyx_v_target_distance_to_channel_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyArrayObject *__pyx_v_channel_buffer_array = 0;
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_q;
  int __pyx_v_yi_q;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType>  __pyx_v_distance_to_channel_stack;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  double __pyx_v_weight_val;
  double __pyx_v_pixel_val;
  double __pyx_v_weight_nodata;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_path = NULL;
  long __pyx_v_distance_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_distance_to_channel_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_weight_raster = 0;
  PyObject *__pyx_v_raw_weight_nodata = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_channel_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_d8_managed_raster = NULL;
  PyObject *__pyx_v_channel_raster = NULL;
  PyObject *__pyx_v_channel_band = NULL;
  PyObject *__pyx_v_flow_dir_raster_info = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_modified_offset_dict = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_channel_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_channel_buffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  int __pyx_t_29;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_PixelType __pyx_t_30;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance_to_channel_d8", 0);
  __pyx_pybuffer_channel_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_channel_buffer_array.refcount = 0;
  __pyx_pybuffernd_channel_buffer_array.data = NULL;
  __pyx_pybuffernd_channel_buffer_array.rcbuffer = &__pyx_pybuffer_channel_buffer_array;

  /* "src/geoprocessing/routing/routing.pyx":2467
 *     # for distance updates
 *     cdef double weight_val, pixel_val
 *     cdef double weight_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     # used for time-delayed logging
 */
  __pyx_v_weight_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;

  /* "src/geoprocessing/routing/routing.pyx":2471
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     for path in (
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":2474
 * 
 *     for path in (
 *             flow_dir_d8_raster_path_band, channel_raster_path_band,             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_flow_dir_d8_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_d8_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_flow_dir_d8_raster_path_band);
  __Pyx_INCREF(__pyx_v_channel_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_channel_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_channel_raster_path_band);
  __Pyx_INCREF(__pyx_v_weight_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_weight_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_weight_raster_path_band);

  /* "src/geoprocessing/routing/routing.pyx":2473
 *     last_log_time = ctime(NULL)
 * 
 *     for path in (             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 */
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= 3) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2473, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_path, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2476
 *             flow_dir_d8_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "%s is supposed to be a raster band tuple but it's not." % (
 */
    __pyx_t_5 = (__pyx_v_path != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_path) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_path);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = ((!__pyx_t_6) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_4)) {

      /* "src/geoprocessing/routing/routing.pyx":2478
 *         if path is not None and not _is_raster_path_band_formatted(path):
 *             raise ValueError(
 *                 "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                     path))
 * 
 */
      __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "src/geoprocessing/routing/routing.pyx":2477
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "%s is supposed to be a raster band tuple but it's not." % (
 *                     path))
 */
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 2477, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":2476
 *             flow_dir_d8_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "%s is supposed to be a raster band tuple but it's not." % (
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2473
 *     last_log_time = ctime(NULL)
 * 
 *     for path in (             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2481
 *                     path))
 * 
 *     distance_nodata = -1             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0],
 */
  __pyx_v_distance_nodata = -1L;

  /* "src/geoprocessing/routing/routing.pyx":2482
 * 
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2483
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0],             # <<<<<<<<<<<<<<
 *         target_distance_to_channel_raster_path,
 *         gdal.GDT_Float64, [distance_nodata],
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":2485
 *         flow_dir_d8_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 *         gdal.GDT_Float64, [distance_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     distance_to_channel_managed_raster = _ManagedRaster(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_distance_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2482
 * 
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_target_distance_to_channel_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_distance_to_channel_raster_path);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_target_distance_to_channel_raster_path);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2486
 *         target_distance_to_channel_raster_path,
 *         gdal.GDT_Float64, [distance_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     distance_to_channel_managed_raster = _ManagedRaster(
 *         target_distance_to_channel_raster_path, 1, 1)
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 2486, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2482
 * 
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2487
 *         gdal.GDT_Float64, [distance_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     distance_to_channel_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_distance_to_channel_raster_path, 1, 1)
 * 
 */
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_target_distance_to_channel_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_distance_to_channel_raster_path);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_target_distance_to_channel_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_int_1);
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_distance_to_channel_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2490
 *         target_distance_to_channel_raster_path, 1, 1)
 * 
 *     cdef _ManagedRaster weight_raster = None             # <<<<<<<<<<<<<<
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_weight_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)Py_None);

  /* "src/geoprocessing/routing/routing.pyx":2491
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_weight_raster_path_band); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2491, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "src/geoprocessing/routing/routing.pyx":2493
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 */
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "src/geoprocessing/routing/routing.pyx":2492
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
    __pyx_t_9 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_weight_raster, ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2494
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2495
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_u_nodata); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2496
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2495
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_raw_weight_nodata = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2497
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 * 
 */
    __pyx_t_4 = (__pyx_v_raw_weight_nodata != Py_None);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":2498
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata             # <<<<<<<<<<<<<<
 * 
 *     channel_managed_raster = _ManagedRaster(
 */
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_raw_weight_nodata); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2498, __pyx_L1_error)
      __pyx_v_weight_nodata = __pyx_t_10;

      /* "src/geoprocessing/routing/routing.pyx":2497
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 * 
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2491
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2501
 * 
 *     channel_managed_raster = _ManagedRaster(
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_d8_managed_raster = _ManagedRaster(
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":2500
 *             weight_nodata = raw_weight_nodata
 * 
 *     channel_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)
 * 
 */
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_int_0);
  __pyx_t_8 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_channel_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2504
 * 
 *     flow_dir_d8_managed_raster = _ManagedRaster(
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "src/geoprocessing/routing/routing.pyx":2503
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)
 * 
 *     flow_dir_d8_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)
 */
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_int_0);
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_d8_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2505
 *     flow_dir_d8_managed_raster = _ManagedRaster(
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_gdal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, __pyx_t_2};
    __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2505, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, __pyx_t_2};
    __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2505, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_2);
    __pyx_t_8 = 0;
    __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_channel_raster = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2506
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_channel_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_12);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_channel_band = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2508
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2509
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_flow_dir_raster_info = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2510
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     # this outer loop searches for undefined channels
 */
  __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
    PyObject* sequence = __pyx_t_9;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2510, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_12 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_12)) goto __pyx_L10_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_12);
    index = 1; __pyx_t_1 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L10_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_2), 2) < 0) __PYX_ERR(0, 2510, __pyx_L1_error)
    __pyx_t_13 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L11_unpacking_done;
    __pyx_L10_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2510, __pyx_L1_error)
    __pyx_L11_unpacking_done:;
  }
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_raster_x_size = __pyx_t_11;
  __pyx_v_raster_y_size = __pyx_t_14;

  /* "src/geoprocessing/routing/routing.pyx":2513
 * 
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2514
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             channel_raster_path_band, offset_only=True, largest_block=0):             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_v_channel_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_channel_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_channel_raster_path_band);
  __pyx_t_12 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 2514, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 2514, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2513
 * 
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_12 = __pyx_t_2; __Pyx_INCREF(__pyx_t_12); __pyx_t_3 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_15 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2513, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_12))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_12)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2513, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_12, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2513, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_12, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_15(__pyx_t_12);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2513, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2515
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2515, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_win_xsize = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2516
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_win_ysize = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2517
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_xoff = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2518
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_yoff = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2520
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":2521
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":2522
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))
 */
      __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2523
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "src/geoprocessing/routing/routing.pyx":2524
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))             # <<<<<<<<<<<<<<
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 */
      __pyx_t_8 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "src/geoprocessing/routing/routing.pyx":2523
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_kp_u_1f_complete, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2523, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_kp_u_1f_complete, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2523, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2523, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_kp_u_1f_complete);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_14, __pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_14, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2523, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2520
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2527
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2528
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.uint8)
 *         channel_buffer_array[:] = 0  # 0 means no channel
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
    __pyx_t_9 = 0;
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2527
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2529
 *         channel_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)             # <<<<<<<<<<<<<<
 *         channel_buffer_array[:] = 0  # 0 means no channel
 * 
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_uint8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 2529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2527
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2527, __pyx_L1_error)
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_8);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer);
      __pyx_t_14 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_14 < 0)) {
        PyErr_Fetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_channel_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
        }
        __pyx_t_17 = __pyx_t_18 = __pyx_t_19 = 0;
      }
      __pyx_pybuffernd_channel_buffer_array.diminfo[0].strides = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_channel_buffer_array.diminfo[0].shape = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_channel_buffer_array.diminfo[1].strides = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_channel_buffer_array.diminfo[1].shape = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 2527, __pyx_L1_error)
    }
    __pyx_t_16 = 0;
    __Pyx_XDECREF_SET(__pyx_v_channel_buffer_array, ((PyArrayObject *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2530
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 *         channel_buffer_array[:] = 0  # 0 means no channel             # <<<<<<<<<<<<<<
 * 
 *         # check if we can widen the border to include real data from the
 */
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_channel_buffer_array), __pyx_slice__6, __pyx_int_0) < 0)) __PYX_ERR(0, 2530, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2534
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_generate_read_bounds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":2535
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)             # <<<<<<<<<<<<<<
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int8)
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_raster_x_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_raster_y_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_offset_dict, __pyx_t_7, __pyx_t_1};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_offset_dict, __pyx_t_7, __pyx_t_1};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(3+__pyx_t_14); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_v_offset_dict);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_14, __pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_14, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_14, __pyx_t_1);
      __pyx_t_7 = 0;
      __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_20, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
      PyObject* sequence = __pyx_t_8;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2534, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_20 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_20 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_20);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_20 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      #endif
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_1)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_13(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_20 = __pyx_t_13(__pyx_t_1); if (unlikely(!__pyx_t_20)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_1), 2) < 0) __PYX_ERR(0, 2534, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2534, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }

    /* "src/geoprocessing/routing/routing.pyx":2534
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 */
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2534, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_21 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_21 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_21);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_7,&__pyx_t_9,&__pyx_t_21};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2534, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_7,&__pyx_t_9,&__pyx_t_21};
      __pyx_t_22 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_22)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_13(__pyx_t_22); if (unlikely(!item)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_22), 4) < 0) __PYX_ERR(0, 2534, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      goto __pyx_L18_unpacking_done;
      __pyx_L17_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2534, __pyx_L1_error)
      __pyx_L18_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xa, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xb, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ya, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_yb, __pyx_t_21);
    __pyx_t_21 = 0;
    __Pyx_XDECREF_SET(__pyx_v_modified_offset_dict, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2536
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 */
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_channel_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);

    /* "src/geoprocessing/routing/routing.pyx":2537
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 2537, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_2 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_2 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }

    /* "src/geoprocessing/routing/routing.pyx":2536
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 */
    __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2537
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_int8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __pyx_t_21 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_8 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_21, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_20);
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2536
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 */
    __pyx_t_2 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_20 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_20);
    __pyx_t_2 = 0;
    __pyx_t_20 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_channel_buffer_array), __pyx_t_21, __pyx_t_8) < 0)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2540
 * 
 *         # ensure these are set for the complier
 *         xi_n = -1             # <<<<<<<<<<<<<<
 *         yi_n = -1
 * 
 */
    __pyx_v_xi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":2541
 *         # ensure these are set for the complier
 *         xi_n = -1
 *         yi_n = -1             # <<<<<<<<<<<<<<
 * 
 *         # search block for to search for a channel seed
 */
    __pyx_v_yi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":2544
 * 
 *         # search block for to search for a channel seed
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 if channel_buffer_array[yi, xi] != 1:
 */
    __pyx_t_23 = (__pyx_v_win_ysize + 1);
    __pyx_t_24 = __pyx_t_23;
    for (__pyx_t_14 = 1; __pyx_t_14 < __pyx_t_24; __pyx_t_14+=1) {
      __pyx_v_yi = __pyx_t_14;

      /* "src/geoprocessing/routing/routing.pyx":2545
 *         # search block for to search for a channel seed
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 if channel_buffer_array[yi, xi] != 1:
 *                     # no channel seed
 */
      __pyx_t_25 = (__pyx_v_win_xsize + 1);
      __pyx_t_26 = __pyx_t_25;
      for (__pyx_t_11 = 1; __pyx_t_11 < __pyx_t_26; __pyx_t_11+=1) {
        __pyx_v_xi = __pyx_t_11;

        /* "src/geoprocessing/routing/routing.pyx":2546
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 if channel_buffer_array[yi, xi] != 1:             # <<<<<<<<<<<<<<
 *                     # no channel seed
 *                     continue
 */
        __pyx_t_27 = __pyx_v_yi;
        __pyx_t_28 = __pyx_v_xi;
        __pyx_t_29 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_channel_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_29 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_channel_buffer_array.diminfo[0].shape)) __pyx_t_29 = 0;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_channel_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_29 = 1;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_channel_buffer_array.diminfo[1].shape)) __pyx_t_29 = 1;
        if (unlikely(__pyx_t_29 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_29);
          __PYX_ERR(0, 2546, __pyx_L1_error)
        }
        __pyx_t_5 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_channel_buffer_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_channel_buffer_array.diminfo[1].strides)) != 1) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":2548
 *                 if channel_buffer_array[yi, xi] != 1:
 *                     # no channel seed
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 distance_to_channel_stack.push(
 */
          goto __pyx_L21_continue;

          /* "src/geoprocessing/routing/routing.pyx":2546
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 if channel_buffer_array[yi, xi] != 1:             # <<<<<<<<<<<<<<
 *                     # no channel seed
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2551
 * 
 *                 distance_to_channel_stack.push(
 *                     PixelType(0.0, xi+xoff-1, yi+yoff-1, 0))             # <<<<<<<<<<<<<<
 * 
 *                 while not distance_to_channel_stack.empty():
 */
        __pyx_t_30.value = 0.0;
        __pyx_t_30.xi = ((__pyx_v_xi + __pyx_v_xoff) - 1);
        __pyx_t_30.yi = ((__pyx_v_yi + __pyx_v_yoff) - 1);
        __pyx_t_30.priority = 0;

        /* "src/geoprocessing/routing/routing.pyx":2550
 *                     continue
 * 
 *                 distance_to_channel_stack.push(             # <<<<<<<<<<<<<<
 *                     PixelType(0.0, xi+xoff-1, yi+yoff-1, 0))
 * 
 */
        __pyx_v_distance_to_channel_stack.push(__pyx_t_30);

        /* "src/geoprocessing/routing/routing.pyx":2553
 *                     PixelType(0.0, xi+xoff-1, yi+yoff-1, 0))
 * 
 *                 while not distance_to_channel_stack.empty():             # <<<<<<<<<<<<<<
 *                     xi_q = distance_to_channel_stack.top().xi
 *                     yi_q = distance_to_channel_stack.top().yi
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_distance_to_channel_stack.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":2554
 * 
 *                 while not distance_to_channel_stack.empty():
 *                     xi_q = distance_to_channel_stack.top().xi             # <<<<<<<<<<<<<<
 *                     yi_q = distance_to_channel_stack.top().yi
 *                     pixel_val = distance_to_channel_stack.top().value
 */
          __pyx_t_29 = __pyx_v_distance_to_channel_stack.top().xi;
          __pyx_v_xi_q = __pyx_t_29;

          /* "src/geoprocessing/routing/routing.pyx":2555
 *                 while not distance_to_channel_stack.empty():
 *                     xi_q = distance_to_channel_stack.top().xi
 *                     yi_q = distance_to_channel_stack.top().yi             # <<<<<<<<<<<<<<
 *                     pixel_val = distance_to_channel_stack.top().value
 *                     distance_to_channel_stack.pop()
 */
          __pyx_t_29 = __pyx_v_distance_to_channel_stack.top().yi;
          __pyx_v_yi_q = __pyx_t_29;

          /* "src/geoprocessing/routing/routing.pyx":2556
 *                     xi_q = distance_to_channel_stack.top().xi
 *                     yi_q = distance_to_channel_stack.top().yi
 *                     pixel_val = distance_to_channel_stack.top().value             # <<<<<<<<<<<<<<
 *                     distance_to_channel_stack.pop()
 * 
 */
          __pyx_t_10 = __pyx_v_distance_to_channel_stack.top().value;
          __pyx_v_pixel_val = __pyx_t_10;

          /* "src/geoprocessing/routing/routing.pyx":2557
 *                     yi_q = distance_to_channel_stack.top().yi
 *                     pixel_val = distance_to_channel_stack.top().value
 *                     distance_to_channel_stack.pop()             # <<<<<<<<<<<<<<
 * 
 *                     distance_to_channel_managed_raster.set(
 */
          __pyx_v_distance_to_channel_stack.pop();

          /* "src/geoprocessing/routing/routing.pyx":2559
 *                     distance_to_channel_stack.pop()
 * 
 *                     distance_to_channel_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         xi_q, yi_q, pixel_val)
 * 
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_distance_to_channel_managed_raster, __pyx_v_xi_q, __pyx_v_yi_q, __pyx_v_pixel_val);

          /* "src/geoprocessing/routing/routing.pyx":2562
 *                         xi_q, yi_q, pixel_val)
 * 
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 */
          for (__pyx_t_29 = 0; __pyx_t_29 < 8; __pyx_t_29+=1) {
            __pyx_v_i_n = __pyx_t_29;

            /* "src/geoprocessing/routing/routing.pyx":2563
 * 
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 */
            __pyx_v_xi_n = (__pyx_v_xi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2564
 *                     for i_n in range(8):
 *                         xi_n = xi_q+D8_XOFFSET[i_n]
 *                         yi_n = yi_q+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_yi_n = (__pyx_v_yi_q + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2566
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            __pyx_t_4 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L29_bool_binop_done;
            }
            __pyx_t_4 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L29_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2567
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_4 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L29_bool_binop_done;
            }
            __pyx_t_4 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_4;
            __pyx_L29_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2566
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2568
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         if channel_managed_raster.get(xi_n, yi_n) == 1:
 */
              goto __pyx_L26_continue;

              /* "src/geoprocessing/routing/routing.pyx":2566
 *                         yi_n = yi_q+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2570
 *                             continue
 * 
 *                         if channel_managed_raster.get(xi_n, yi_n) == 1:             # <<<<<<<<<<<<<<
 *                             # it's a channel, it'll get picked up in the
 *                             # outer loop
 */
            __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_channel_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == 1.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2573
 *                             # it's a channel, it'll get picked up in the
 *                             # outer loop
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         if (flow_dir_d8_managed_raster.get(xi_n, yi_n) ==
 */
              goto __pyx_L26_continue;

              /* "src/geoprocessing/routing/routing.pyx":2570
 *                             continue
 * 
 *                         if channel_managed_raster.get(xi_n, yi_n) == 1:             # <<<<<<<<<<<<<<
 *                             # it's a channel, it'll get picked up in the
 *                             # outer loop
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2575
 *                             continue
 * 
 *                         if (flow_dir_d8_managed_raster.get(xi_n, yi_n) ==             # <<<<<<<<<<<<<<
 *                                 D8_REVERSE_DIRECTION[i_n]):
 *                             # if a weight is passed we use it directly and do
 */
            __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_d8_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_i_n])) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2582
 *                             # then "distance" is being calculated and we
 *                             # account for diagonal distance.
 *                             if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                                 weight_val = weight_raster.get(xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
              __pyx_t_5 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
              __pyx_t_4 = (__pyx_t_5 != 0);
              if (__pyx_t_4) {

                /* "src/geoprocessing/routing/routing.pyx":2583
 *                             # account for diagonal distance.
 *                             if weight_raster is not None:
 *                                 weight_val = weight_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                     weight_val = 0.0
 */
                __pyx_v_weight_val = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_weight_raster, __pyx_v_xi_n, __pyx_v_yi_n);

                /* "src/geoprocessing/routing/routing.pyx":2584
 *                             if weight_raster is not None:
 *                                 weight_val = weight_raster.get(xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                     weight_val = 0.0
 *                             else:
 */
                __pyx_t_4 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_weight_val, __pyx_v_weight_nodata, 1e-8, 1e-5) != 0);
                if (__pyx_t_4) {

                  /* "src/geoprocessing/routing/routing.pyx":2585
 *                                 weight_val = weight_raster.get(xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                     weight_val = 0.0             # <<<<<<<<<<<<<<
 *                             else:
 *                                 weight_val = (SQRT2 if i_n % 2 else 1)
 */
                  __pyx_v_weight_val = 0.0;

                  /* "src/geoprocessing/routing/routing.pyx":2584
 *                             if weight_raster is not None:
 *                                 weight_val = weight_raster.get(xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                     weight_val = 0.0
 *                             else:
 */
                }

                /* "src/geoprocessing/routing/routing.pyx":2582
 *                             # then "distance" is being calculated and we
 *                             # account for diagonal distance.
 *                             if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                                 weight_val = weight_raster.get(xi_n, yi_n)
 *                                 if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
                goto __pyx_L35;
              }

              /* "src/geoprocessing/routing/routing.pyx":2587
 *                                     weight_val = 0.0
 *                             else:
 *                                 weight_val = (SQRT2 if i_n % 2 else 1)             # <<<<<<<<<<<<<<
 * 
 *                             distance_to_channel_stack.push(
 */
              /*else*/ {
                if ((__Pyx_mod_long(__pyx_v_i_n, 2) != 0)) {
                  __pyx_t_10 = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2;
                } else {
                  __pyx_t_10 = 1.0;
                }
                __pyx_v_weight_val = __pyx_t_10;
              }
              __pyx_L35:;

              /* "src/geoprocessing/routing/routing.pyx":2591
 *                             distance_to_channel_stack.push(
 *                                 PixelType(
 *                                     weight_val + pixel_val, xi_n, yi_n, 0))             # <<<<<<<<<<<<<<
 * 
 *     distance_to_channel_managed_raster.close()
 */
              __pyx_t_30.value = (__pyx_v_weight_val + __pyx_v_pixel_val);
              __pyx_t_30.xi = __pyx_v_xi_n;
              __pyx_t_30.yi = __pyx_v_yi_n;
              __pyx_t_30.priority = 0;

              /* "src/geoprocessing/routing/routing.pyx":2589
 *                                 weight_val = (SQRT2 if i_n % 2 else 1)
 * 
 *                             distance_to_channel_stack.push(             # <<<<<<<<<<<<<<
 *                                 PixelType(
 *                                     weight_val + pixel_val, xi_n, yi_n, 0))
 */
              __pyx_v_distance_to_channel_stack.push(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":2575
 *                             continue
 * 
 *                         if (flow_dir_d8_managed_raster.get(xi_n, yi_n) ==             # <<<<<<<<<<<<<<
 *                                 D8_REVERSE_DIRECTION[i_n]):
 *                             # if a weight is passed we use it directly and do
 */
            }
            __pyx_L26_continue:;
          }
        }
        __pyx_L21_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":2513
 * 
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2593
 *                                     weight_val + pixel_val, xi_n, yi_n, 0))
 * 
 *     distance_to_channel_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flow_dir_d8_managed_raster.close()
 *     channel_managed_raster.close()
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_distance_to_channel_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_12 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2594
 * 
 *     distance_to_channel_managed_raster.close()
 *     flow_dir_d8_managed_raster.close()             # <<<<<<<<<<<<<<
 *     channel_managed_raster.close()
 *     if weight_raster is not None:
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_dir_d8_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_12 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2595
 *     distance_to_channel_managed_raster.close()
 *     flow_dir_d8_managed_raster.close()
 *     channel_managed_raster.close()             # <<<<<<<<<<<<<<
 *     if weight_raster is not None:
 *         weight_raster.close()
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_channel_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_12 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2596
 *     flow_dir_d8_managed_raster.close()
 *     channel_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 * 
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":2597
 *     channel_managed_raster.close()
 *     if weight_raster is not None:
 *         weight_raster.close()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_weight_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_21 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_12 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2596
 *     flow_dir_d8_managed_raster.close()
 *     channel_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 * 
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2410
 * 
 * 
 * def distance_to_channel_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.distance_to_channel_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_channel_buffer_array);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_distance_to_channel_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_weight_raster);
  __Pyx_XDECREF(__pyx_v_raw_weight_nodata);
  __Pyx_XDECREF((PyObject *)__pyx_v_channel_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_d8_managed_raster);
  __Pyx_XDECREF(__pyx_v_channel_raster);
  __Pyx_XDECREF(__pyx_v_channel_band);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster_info);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_modified_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":2600
 * 
 * 
 * def distance_to_channel_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_15distance_to_channel_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_14distance_to_channel_mfd[] = "Calculate distance to channel with multiple flow direction.\n\n    Parameters:\n        flow_dir_mfd_raster_path_band (tuple): a path/band index tuple\n            indicating the raster that defines the mfd flow accumulation\n            raster for this call. This raster should be generated by a call\n            to ``pygeoprocessing.routing.flow_dir_mfd``.\n        channel_raster_path_band (tuple): a path/band tuple of the same\n            dimensions and projection as ``flow_dir_mfd_raster_path_band[0]``\n            that indicates where the channels in the problem space lie. A\n            channel is indicated if the value of the pixel is 1. Other values\n            are ignored.\n        target_distance_to_channel_raster_path (str): path to a raster\n            created by this call that has per-pixel distances from a given\n            pixel to the nearest downhill channel.\n        weight_raster_path_band (tuple): optional path and band number to a\n            raster that will be used as the per-pixel flow distance\n            weight. If ``None``, 1 is the default distance between neighboring\n            pixels. This raster must be the same dimensions as\n            ``flow_dir_mfd_raster_path_band``.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at ``geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS``.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_15distance_to_channel_mfd = {"distance_to_channel_mfd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_15distance_to_channel_mfd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_14distance_to_channel_mfd};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_15distance_to_channel_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_mfd_raster_path_band = 0;
  PyObject *__pyx_v_channel_raster_path_band = 0;
  PyObject *__pyx_v_target_distance_to_channel_raster_path = 0;
  PyObject *__pyx_v_weight_raster_path_band = 0;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance_to_channel_mfd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_mfd_raster_path_band,&__pyx_n_s_channel_raster_path_band,&__pyx_n_s_target_distance_to_channel_raste,&__pyx_n_s_weight_raster_path_band,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":2602
 * def distance_to_channel_mfd(
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 *     """Calculate distance to channel with multiple flow direction.
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = __pyx_k__12;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_mfd_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_channel_raster_path_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance_to_channel_mfd", 0, 3, 5, 1); __PYX_ERR(0, 2600, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_distance_to_channel_raste)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance_to_channel_mfd", 0, 3, 5, 2); __PYX_ERR(0, 2600, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_raster_path_band);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance_to_channel_mfd") < 0)) __PYX_ERR(0, 2600, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_dir_mfd_raster_path_band = values[0];
    __pyx_v_channel_raster_path_band = values[1];
    __pyx_v_target_distance_to_channel_raster_path = values[2];
    __pyx_v_weight_raster_path_band = values[3];
    __pyx_v_raster_driver_creation_tuple = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance_to_channel_mfd", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2600, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.distance_to_channel_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14distance_to_channel_mfd(__pyx_self, __pyx_v_flow_dir_mfd_raster_path_band, __pyx_v_channel_raster_path_band, __pyx_v_target_distance_to_channel_raster_path, __pyx_v_weight_raster_path_band, __pyx_v_raster_driver_creation_tuple);

  /* "src/geoprocessing/routing/routing.pyx":2600
 * 
 * 
 * def distance_to_channel_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_14distance_to_channel_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_mfd_raster_path_band, PyObject *__pyx_v_channel_raster_path_band, PyObject *__pyx_v_target_distance_to_channel_raster_path, PyObject *__pyx_v_weight_raster_path_band, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyArrayObject *__pyx_v_channel_buffer_array = 0;
  PyArrayObject *__pyx_v_flow_dir_buffer_array = 0;
  int __pyx_v_win_ysize;
  int __pyx_v_win_xsize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_i_n;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  int __pyx_v_flow_dir_weight;
  int __pyx_v_sum_of_flow_weights;
  int __pyx_v_compressed_flow_dir;
  int __pyx_v_is_a_channel;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType>  __pyx_v_distance_to_channel_stack;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  double __pyx_v_weight_val;
  double __pyx_v_weight_nodata;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_path = NULL;
  long __pyx_v_distance_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_distance_to_channel_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_channel_managed_raster = NULL;
  PyObject *__pyx_v_tmp_work_dir = NULL;
  PyObject *__pyx_v_visited_raster_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_visited_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_mfd_managed_raster = NULL;
  PyObject *__pyx_v_channel_raster = NULL;
  PyObject *__pyx_v_channel_band = NULL;
  PyObject *__pyx_v_flow_dir_mfd_raster = NULL;
  PyObject *__pyx_v_flow_dir_mfd_band = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_weight_raster = 0;
  PyObject *__pyx_v_raw_weight_nodata = NULL;
  PyObject *__pyx_v_flow_dir_raster_info = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_xa = NULL;
  PyObject *__pyx_v_xb = NULL;
  PyObject *__pyx_v_ya = NULL;
  PyObject *__pyx_v_yb = NULL;
  PyObject *__pyx_v_modified_offset_dict = NULL;
  long __pyx_v_xi_root;
  long __pyx_v_yi_root;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType __pyx_v_pixel;
  long __pyx_v_preempted;
  double __pyx_v_n_distance;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_channel_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_channel_buffer_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_dir_buffer_array;
  __Pyx_Buffer __pyx_pybuffer_flow_dir_buffer_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyArrayObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  int __pyx_t_30;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FlowPixelType __pyx_t_31;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance_to_channel_mfd", 0);
  __pyx_pybuffer_channel_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_channel_buffer_array.refcount = 0;
  __pyx_pybuffernd_channel_buffer_array.data = NULL;
  __pyx_pybuffernd_channel_buffer_array.rcbuffer = &__pyx_pybuffer_channel_buffer_array;
  __pyx_pybuffer_flow_dir_buffer_array.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_dir_buffer_array.refcount = 0;
  __pyx_pybuffernd_flow_dir_buffer_array.data = NULL;
  __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer = &__pyx_pybuffer_flow_dir_buffer_array;

  /* "src/geoprocessing/routing/routing.pyx":2656
 *     # come from a predefined flow accumulation weight raster
 *     cdef double weight_val
 *     cdef double weight_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     # used for time-delayed logging
 */
  __pyx_v_weight_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;

  /* "src/geoprocessing/routing/routing.pyx":2660
 *     # used for time-delayed logging
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     for path in (
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":2663
 * 
 *     for path in (
 *             flow_dir_mfd_raster_path_band, channel_raster_path_band,             # <<<<<<<<<<<<<<
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_flow_dir_mfd_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_mfd_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_flow_dir_mfd_raster_path_band);
  __Pyx_INCREF(__pyx_v_channel_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_channel_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_channel_raster_path_band);
  __Pyx_INCREF(__pyx_v_weight_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_weight_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_weight_raster_path_band);

  /* "src/geoprocessing/routing/routing.pyx":2662
 *     last_log_time = ctime(NULL)
 * 
 *     for path in (             # <<<<<<<<<<<<<<
 *             flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 */
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= 3) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2662, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_path, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2665
 *             flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "%s is supposed to be a raster band tuple but it's not." % (
 */
    __pyx_t_5 = (__pyx_v_path != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_path) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_path);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = ((!__pyx_t_6) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (unlikely(__pyx_t_4)) {

      /* "src/geoprocessing/routing/routing.pyx":2667
 *         if path is not None and not _is_raster_path_band_formatted(path):
 *             raise ValueError(
 *                 "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                     path))
 * 
 */
      __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2667, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "src/geoprocessing/routing/routing.pyx":2666
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "%s is supposed to be a raster band tuple but it's not." % (
 *                     path))
 */
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 2666, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":2665
 *             flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 *         if path is not None and not _is_raster_path_band_formatted(path):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "%s is supposed to be a raster band tuple but it's not." % (
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2662
 *     last_log_time = ctime(NULL)
 * 
 *     for path in (             # <<<<<<<<<<<<<<
 *             flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *             weight_raster_path_band):
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2670
 *                     path))
 * 
 *     distance_nodata = -1             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0],
 */
  __pyx_v_distance_nodata = -1L;

  /* "src/geoprocessing/routing/routing.pyx":2671
 * 
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2672
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0],             # <<<<<<<<<<<<<<
 *         target_distance_to_channel_raster_path,
 *         gdal.GDT_Float64, [distance_nodata],
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":2674
 *         flow_dir_mfd_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 *         gdal.GDT_Float64, [distance_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     distance_to_channel_managed_raster = _ManagedRaster(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_distance_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2671
 * 
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_target_distance_to_channel_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_distance_to_channel_raster_path);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_target_distance_to_channel_raster_path);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2675
 *         target_distance_to_channel_raster_path,
 *         gdal.GDT_Float64, [distance_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     distance_to_channel_managed_raster = _ManagedRaster(
 *         target_distance_to_channel_raster_path, 1, 1)
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 2675, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2671
 * 
 *     distance_nodata = -1
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0],
 *         target_distance_to_channel_raster_path,
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2676
 *         gdal.GDT_Float64, [distance_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     distance_to_channel_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_distance_to_channel_raster_path, 1, 1)
 *     channel_managed_raster = _ManagedRaster(
 */
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_target_distance_to_channel_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_distance_to_channel_raster_path);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_target_distance_to_channel_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_int_1);
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_distance_to_channel_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2679
 *         target_distance_to_channel_raster_path, 1, 1)
 *     channel_managed_raster = _ManagedRaster(
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     tmp_work_dir = tempfile.mkdtemp(
 */
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "src/geoprocessing/routing/routing.pyx":2678
 *     distance_to_channel_managed_raster = _ManagedRaster(
 *         target_distance_to_channel_raster_path, 1, 1)
 *     channel_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)
 * 
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
  __pyx_t_9 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_channel_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2681
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)
 * 
 *     tmp_work_dir = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         suffix=None, prefix='dist_to_channel_mfd_work_dir',
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2682
 * 
 *     tmp_work_dir = tempfile.mkdtemp(
 *         suffix=None, prefix='dist_to_channel_mfd_work_dir',             # <<<<<<<<<<<<<<
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_suffix, Py_None) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_prefix, __pyx_n_u_dist_to_channel_mfd_work_dir) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2683
 *     tmp_work_dir = tempfile.mkdtemp(
 *         suffix=None, prefix='dist_to_channel_mfd_work_dir',
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))             # <<<<<<<<<<<<<<
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dirname); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_v_target_distance_to_channel_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_target_distance_to_channel_raster_path);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dir, __pyx_t_9) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2681
 *         channel_raster_path_band[0], channel_raster_path_band[1], 0)
 * 
 *     tmp_work_dir = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         suffix=None, prefix='dist_to_channel_mfd_work_dir',
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_tmp_work_dir = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2684
 *         suffix=None, prefix='dist_to_channel_mfd_work_dir',
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_os); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_join); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_tmp_work_dir, __pyx_kp_u_visited_tif};
    __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_9);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_tmp_work_dir, __pyx_kp_u_visited_tif};
    __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_9);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_tmp_work_dir);
    __Pyx_GIVEREF(__pyx_v_tmp_work_dir);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_v_tmp_work_dir);
    __Pyx_INCREF(__pyx_kp_u_visited_tif);
    __Pyx_GIVEREF(__pyx_kp_u_visited_tif);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_kp_u_visited_tif);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_visited_raster_path = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2685
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0],
 *         visited_raster_path,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2686
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_mfd_raster_path_band[0],             # <<<<<<<<<<<<<<
 *         visited_raster_path,
 *         gdal.GDT_Byte, [0],
 */
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "src/geoprocessing/routing/routing.pyx":2688
 *         flow_dir_mfd_raster_path_band[0],
 *         visited_raster_path,
 *         gdal.GDT_Byte, [0],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);

  /* "src/geoprocessing/routing/routing.pyx":2685
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0],
 *         visited_raster_path,
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9);
  __Pyx_INCREF(__pyx_v_visited_raster_path);
  __Pyx_GIVEREF(__pyx_v_visited_raster_path);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_visited_raster_path);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2689
 *         visited_raster_path,
 *         gdal.GDT_Byte, [0],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)
 * 
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 2689, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2685
 *         dir=os.path.dirname(target_distance_to_channel_raster_path))
 *     visited_raster_path = os.path.join(tmp_work_dir, 'visited.tif')
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0],
 *         visited_raster_path,
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2690
 *         gdal.GDT_Byte, [0],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_mfd_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_visited_raster_path);
  __Pyx_GIVEREF(__pyx_v_visited_raster_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_visited_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_1);
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_visited_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2693
 * 
 *     flow_dir_mfd_managed_raster = _ManagedRaster(
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":2692
 *     visited_managed_raster = _ManagedRaster(visited_raster_path, 1, 1)
 * 
 *     flow_dir_mfd_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
  __pyx_t_7 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow_dir_mfd_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2694
 *     flow_dir_mfd_managed_raster = _ManagedRaster(
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_gdal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_9};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2694, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_9};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2694, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_9);
    __pyx_t_2 = 0;
    __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_channel_raster = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2695
 *         flow_dir_mfd_raster_path_band[0], flow_dir_mfd_raster_path_band[1], 0)
 *     channel_raster = gdal.OpenEx(channel_raster_path_band[0], gdal.OF_RASTER)
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_mfd_raster = gdal.OpenEx(
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_channel_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_channel_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_channel_band = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2697
 *     channel_band = channel_raster.GetRasterBand(channel_raster_path_band[1])
 * 
 *     flow_dir_mfd_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_mfd_band = flow_dir_mfd_raster.GetRasterBand(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2698
 * 
 *     flow_dir_mfd_raster = gdal.OpenEx(
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     flow_dir_mfd_band = flow_dir_mfd_raster.GetRasterBand(
 *         flow_dir_mfd_raster_path_band[1])
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_gdal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2697, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2697, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, __pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_flow_dir_mfd_raster = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2699
 *     flow_dir_mfd_raster = gdal.OpenEx(
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_mfd_band = flow_dir_mfd_raster.GetRasterBand(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[1])
 * 
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_mfd_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "src/geoprocessing/routing/routing.pyx":2700
 *         flow_dir_mfd_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_mfd_band = flow_dir_mfd_raster.GetRasterBand(
 *         flow_dir_mfd_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     cdef _ManagedRaster weight_raster = None
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_flow_dir_mfd_band = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2702
 *         flow_dir_mfd_raster_path_band[1])
 * 
 *     cdef _ManagedRaster weight_raster = None             # <<<<<<<<<<<<<<
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_weight_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)Py_None);

  /* "src/geoprocessing/routing/routing.pyx":2703
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_weight_raster_path_band); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2703, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "src/geoprocessing/routing/routing.pyx":2705
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "src/geoprocessing/routing/routing.pyx":2704
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:
 *         weight_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 */
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_11);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_int_0);
    __pyx_t_1 = 0;
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_8, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v_weight_raster, ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2706
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2707
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_11 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_u_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2708
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata
 */
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_weight_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_t_11, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2707
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 *         raw_weight_nodata = pygeoprocessing.get_raster_info(
 *             weight_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 */
    __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_raw_weight_nodata = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2709
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 *         else:
 */
    __pyx_t_4 = (__pyx_v_raw_weight_nodata != Py_None);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":2710
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:
 *             weight_nodata = raw_weight_nodata             # <<<<<<<<<<<<<<
 *         else:
 *             weight_nodata = IMPROBABLE_FLOAT_NODATA
 */
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_raw_weight_nodata); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2710, __pyx_L1_error)
      __pyx_v_weight_nodata = __pyx_t_12;

      /* "src/geoprocessing/routing/routing.pyx":2709
 *             weight_raster_path_band[0])['nodata'][
 *                 weight_raster_path_band[1]-1]
 *         if raw_weight_nodata is not None:             # <<<<<<<<<<<<<<
 *             weight_nodata = raw_weight_nodata
 *         else:
 */
      goto __pyx_L9;
    }

    /* "src/geoprocessing/routing/routing.pyx":2712
 *             weight_nodata = raw_weight_nodata
 *         else:
 *             weight_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 */
    /*else*/ {
      __pyx_v_weight_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;
    }
    __pyx_L9:;

    /* "src/geoprocessing/routing/routing.pyx":2703
 * 
 *     cdef _ManagedRaster weight_raster = None
 *     if weight_raster_path_band:             # <<<<<<<<<<<<<<
 *         weight_raster = _ManagedRaster(
 *             weight_raster_path_band[0], weight_raster_path_band[1], 0)
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2714
 *             weight_nodata = IMPROBABLE_FLOAT_NODATA
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2715
 * 
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_mfd_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_11 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flow_dir_raster_info = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2716
 *     flow_dir_raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_mfd_raster_path_band[0])
 *     raster_x_size, raster_y_size = flow_dir_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     # this outer loop searches for undefined channels
 */
  __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
    PyObject* sequence = __pyx_t_11;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2716, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_8);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L10_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_8 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_8)) goto __pyx_L10_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_2), 2) < 0) __PYX_ERR(0, 2716, __pyx_L1_error)
    __pyx_t_13 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L11_unpacking_done;
    __pyx_L10_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2716, __pyx_L1_error)
    __pyx_L11_unpacking_done:;
  }
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_raster_x_size = __pyx_t_10;
  __pyx_v_raster_y_size = __pyx_t_14;

  /* "src/geoprocessing/routing/routing.pyx":2719
 * 
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2720
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             channel_raster_path_band, offset_only=True, largest_block=0):             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_v_channel_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_channel_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_channel_raster_path_band);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2719
 * 
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2719, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2719, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2719, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_15(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2719, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2721
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_win_xsize = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2722
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_win_ysize = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2723
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_xoff = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2724
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2724, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_yoff = __pyx_t_14;

    /* "src/geoprocessing/routing/routing.pyx":2726
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":2727
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":2728
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))
 */
      __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2729
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);

      /* "src/geoprocessing/routing/routing.pyx":2730
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                 raster_x_size * raster_y_size))             # <<<<<<<<<<<<<<
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 */
      __pyx_t_7 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "src/geoprocessing/routing/routing.pyx":2729
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                 raster_x_size * raster_y_size))
 * 
 */
      __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_11, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_kp_u_1f_complete, __pyx_t_9};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2729, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_kp_u_1f_complete, __pyx_t_9};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2729, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_kp_u_1f_complete);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_14, __pyx_kp_u_1f_complete);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_14, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":2726
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":2733
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2734
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array = numpy.empty(
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
    __pyx_t_11 = 0;
    __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2733
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2735
 *         channel_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)             # <<<<<<<<<<<<<<
 *         flow_dir_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_uint8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 2735, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2733
 * 
 *         # make a buffer big enough to capture block and boundaries around it
 *         channel_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2733, __pyx_L1_error)
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer);
      __pyx_t_14 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_14 < 0)) {
        PyErr_Fetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_channel_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
        }
        __pyx_t_17 = __pyx_t_18 = __pyx_t_19 = 0;
      }
      __pyx_pybuffernd_channel_buffer_array.diminfo[0].strides = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_channel_buffer_array.diminfo[0].shape = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_channel_buffer_array.diminfo[1].strides = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_channel_buffer_array.diminfo[1].shape = __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 2733, __pyx_L1_error)
    }
    __pyx_t_16 = 0;
    __Pyx_XDECREF_SET(__pyx_v_channel_buffer_array, ((PyArrayObject *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2736
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2737
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),             # <<<<<<<<<<<<<<
 *             dtype=numpy.int32)
 *         channel_buffer_array[:] = 0  # 0 means no channel
 */
    __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
    __pyx_t_9 = 0;
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2736
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 */
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2738
 *         flow_dir_buffer_array = numpy.empty(
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         channel_buffer_array[:] = 0  # 0 means no channel
 *         flow_dir_buffer_array[:] = 0  # 0 means no flow
 */
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 2738, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2736
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.uint8)
 *         flow_dir_buffer_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 */
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2736, __pyx_L1_error)
    __pyx_t_20 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer);
      __pyx_t_14 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_14 < 0)) {
        PyErr_Fetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_flow_dir_buffer_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_19); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_17);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
        }
        __pyx_t_19 = __pyx_t_18 = __pyx_t_17 = 0;
      }
      __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].strides = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].strides = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape = __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 2736, __pyx_L1_error)
    }
    __pyx_t_20 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flow_dir_buffer_array, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2739
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.int32)
 *         channel_buffer_array[:] = 0  # 0 means no channel             # <<<<<<<<<<<<<<
 *         flow_dir_buffer_array[:] = 0  # 0 means no flow
 * 
 */
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_channel_buffer_array), __pyx_slice__6, __pyx_int_0) < 0)) __PYX_ERR(0, 2739, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2740
 *             dtype=numpy.int32)
 *         channel_buffer_array[:] = 0  # 0 means no channel
 *         flow_dir_buffer_array[:] = 0  # 0 means no flow             # <<<<<<<<<<<<<<
 * 
 *         # check if we can widen the border to include real data from the
 */
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_buffer_array), __pyx_slice__6, __pyx_int_0) < 0)) __PYX_ERR(0, 2740, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2744
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_generate_read_bounds); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "src/geoprocessing/routing/routing.pyx":2745
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)             # <<<<<<<<<<<<<<
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int8)
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_raster_x_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_raster_y_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_offset_dict, __pyx_t_8, __pyx_t_2};
      __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_offset_dict, __pyx_t_8, __pyx_t_2};
      __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_21 = PyTuple_New(3+__pyx_t_14); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_v_offset_dict);
      PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_14, __pyx_v_offset_dict);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_14, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_14, __pyx_t_2);
      __pyx_t_8 = 0;
      __pyx_t_2 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_21, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
      PyObject* sequence = __pyx_t_11;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2744, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_21 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_21 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_21);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_21 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      #endif
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_21 = __pyx_t_13(__pyx_t_2); if (unlikely(!__pyx_t_21)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_21);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_2), 2) < 0) __PYX_ERR(0, 2744, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2744, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }

    /* "src/geoprocessing/routing/routing.pyx":2744
 *         # check if we can widen the border to include real data from the
 *         # raster
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(             # <<<<<<<<<<<<<<
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 */
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2744, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_22 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_22 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_22);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_8,&__pyx_t_9,&__pyx_t_22};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2744, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_8,&__pyx_t_9,&__pyx_t_22};
      __pyx_t_23 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 2744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_23)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_13(__pyx_t_23); if (unlikely(!item)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_23), 4) < 0) __PYX_ERR(0, 2744, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      goto __pyx_L18_unpacking_done;
      __pyx_L17_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2744, __pyx_L1_error)
      __pyx_L18_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xa, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xb, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ya, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_yb, __pyx_t_22);
    __pyx_t_22 = 0;
    __Pyx_XDECREF_SET(__pyx_v_modified_offset_dict, __pyx_t_21);
    __pyx_t_21 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2746
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 */
    __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_channel_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);

    /* "src/geoprocessing/routing/routing.pyx":2747
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 2747, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_7 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      __pyx_t_7 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }

    /* "src/geoprocessing/routing/routing.pyx":2746
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 */
    __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2747
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int8)             # <<<<<<<<<<<<<<
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_astype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_22, __pyx_n_s_numpy); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_int8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_22)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_22);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_11 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_22, __pyx_t_21) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_21);
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2746
 *         (xa, xb, ya, yb), modified_offset_dict = _generate_read_bounds(
 *             offset_dict, raster_x_size, raster_y_size)
 *         channel_buffer_array[ya:yb, xa:xb] = channel_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 */
    __pyx_t_7 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_21 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_21);
    PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_21);
    __pyx_t_7 = 0;
    __pyx_t_21 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_channel_buffer_array), __pyx_t_22, __pyx_t_11) < 0)) __PYX_ERR(0, 2746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2749
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int32)
 * 
 */
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_mfd_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);

    /* "src/geoprocessing/routing/routing.pyx":2750
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    if (unlikely(__pyx_v_modified_offset_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 2750, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_modified_offset_dict))) {
      __pyx_t_21 = PyDict_Copy(__pyx_v_modified_offset_dict); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
    } else {
      __pyx_t_21 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_modified_offset_dict, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
    }

    /* "src/geoprocessing/routing/routing.pyx":2749
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int32)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_22, __pyx_empty_tuple, __pyx_t_21); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2750
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(
 *             **modified_offset_dict).astype(numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         # ensure these are set for the complier
 */
    __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_astype); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_21);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_21, function);
      }
    }
    __pyx_t_11 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_7, __pyx_t_22) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_t_22);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2749
 *             **modified_offset_dict).astype(numpy.int8)
 * 
 *         flow_dir_buffer_array[ya:yb, xa:xb] = flow_dir_mfd_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             **modified_offset_dict).astype(numpy.int32)
 * 
 */
    __pyx_t_21 = PySlice_New(__pyx_v_ya, __pyx_v_yb, Py_None); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_22 = PySlice_New(__pyx_v_xa, __pyx_v_xb, Py_None); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_21);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_22);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_22);
    __pyx_t_21 = 0;
    __pyx_t_22 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_buffer_array), __pyx_t_7, __pyx_t_11) < 0)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2753
 * 
 *         # ensure these are set for the complier
 *         xi_n = -1             # <<<<<<<<<<<<<<
 *         yi_n = -1
 * 
 */
    __pyx_v_xi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":2754
 *         # ensure these are set for the complier
 *         xi_n = -1
 *         yi_n = -1             # <<<<<<<<<<<<<<
 * 
 *         # search block for a pixel that has undefined distance to channel
 */
    __pyx_v_yi_n = -1;

    /* "src/geoprocessing/routing/routing.pyx":2757
 * 
 *         # search block for a pixel that has undefined distance to channel
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 xi_root = xi+xoff-1
 */
    __pyx_t_24 = (__pyx_v_win_ysize + 1);
    __pyx_t_25 = __pyx_t_24;
    for (__pyx_t_14 = 1; __pyx_t_14 < __pyx_t_25; __pyx_t_14+=1) {
      __pyx_v_yi = __pyx_t_14;

      /* "src/geoprocessing/routing/routing.pyx":2758
 *         # search block for a pixel that has undefined distance to channel
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 xi_root = xi+xoff-1
 *                 yi_root = yi+yoff-1
 */
      __pyx_t_26 = (__pyx_v_win_xsize + 1);
      __pyx_t_27 = __pyx_t_26;
      for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_27; __pyx_t_10+=1) {
        __pyx_v_xi = __pyx_t_10;

        /* "src/geoprocessing/routing/routing.pyx":2759
 *         for yi in range(1, win_ysize+1):
 *             for xi in range(1, win_xsize+1):
 *                 xi_root = xi+xoff-1             # <<<<<<<<<<<<<<
 *                 yi_root = yi+yoff-1
 * 
 */
        __pyx_v_xi_root = ((__pyx_v_xi + __pyx_v_xoff) - 1);

        /* "src/geoprocessing/routing/routing.pyx":2760
 *             for xi in range(1, win_xsize+1):
 *                 xi_root = xi+xoff-1
 *                 yi_root = yi+yoff-1             # <<<<<<<<<<<<<<
 * 
 *                 if channel_buffer_array[yi, xi] == 1:
 */
        __pyx_v_yi_root = ((__pyx_v_yi + __pyx_v_yoff) - 1);

        /* "src/geoprocessing/routing/routing.pyx":2762
 *                 yi_root = yi+yoff-1
 * 
 *                 if channel_buffer_array[yi, xi] == 1:             # <<<<<<<<<<<<<<
 *                     distance_to_channel_managed_raster.set(
 *                         xi_root, yi_root, 0)
 */
        __pyx_t_28 = __pyx_v_yi;
        __pyx_t_29 = __pyx_v_xi;
        __pyx_t_30 = -1;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_channel_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_30 = 0;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_channel_buffer_array.diminfo[0].shape)) __pyx_t_30 = 0;
        if (__pyx_t_29 < 0) {
          __pyx_t_29 += __pyx_pybuffernd_channel_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_30 = 1;
        } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_channel_buffer_array.diminfo[1].shape)) __pyx_t_30 = 1;
        if (unlikely(__pyx_t_30 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_30);
          __PYX_ERR(0, 2762, __pyx_L1_error)
        }
        __pyx_t_5 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_channel_buffer_array.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_channel_buffer_array.diminfo[1].strides)) == 1) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":2763
 * 
 *                 if channel_buffer_array[yi, xi] == 1:
 *                     distance_to_channel_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         xi_root, yi_root, 0)
 *                     continue
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_distance_to_channel_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, 0.0);

          /* "src/geoprocessing/routing/routing.pyx":2765
 *                     distance_to_channel_managed_raster.set(
 *                         xi_root, yi_root, 0)
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if flow_dir_buffer_array[yi, xi] == 0:
 */
          goto __pyx_L21_continue;

          /* "src/geoprocessing/routing/routing.pyx":2762
 *                 yi_root = yi+yoff-1
 * 
 *                 if channel_buffer_array[yi, xi] == 1:             # <<<<<<<<<<<<<<
 *                     distance_to_channel_managed_raster.set(
 *                         xi_root, yi_root, 0)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2767
 *                     continue
 * 
 *                 if flow_dir_buffer_array[yi, xi] == 0:             # <<<<<<<<<<<<<<
 *                     # nodata flow, so we skip
 *                     continue
 */
        __pyx_t_29 = __pyx_v_yi;
        __pyx_t_28 = __pyx_v_xi;
        __pyx_t_30 = -1;
        if (__pyx_t_29 < 0) {
          __pyx_t_29 += __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape;
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_30 = 0;
        } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].shape)) __pyx_t_30 = 0;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_30 = 1;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].shape)) __pyx_t_30 = 1;
        if (unlikely(__pyx_t_30 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_30);
          __PYX_ERR(0, 2767, __pyx_L1_error)
        }
        __pyx_t_5 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_flow_dir_buffer_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_flow_dir_buffer_array.diminfo[1].strides)) == 0) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":2769
 *                 if flow_dir_buffer_array[yi, xi] == 0:
 *                     # nodata flow, so we skip
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if visited_managed_raster.get(xi_root, yi_root) == 0:
 */
          goto __pyx_L21_continue;

          /* "src/geoprocessing/routing/routing.pyx":2767
 *                     continue
 * 
 *                 if flow_dir_buffer_array[yi, xi] == 0:             # <<<<<<<<<<<<<<
 *                     # nodata flow, so we skip
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2771
 *                     continue
 * 
 *                 if visited_managed_raster.get(xi_root, yi_root) == 0:             # <<<<<<<<<<<<<<
 *                     visited_managed_raster.set(xi_root, yi_root, 1)
 *                     # arguments are x,y position of pixel, then last D8 flow
 */
        __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_visited_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root) == 0.0) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":2772
 * 
 *                 if visited_managed_raster.get(xi_root, yi_root) == 0:
 *                     visited_managed_raster.set(xi_root, yi_root, 1)             # <<<<<<<<<<<<<<
 *                     # arguments are x,y position of pixel, then last D8 flow
 *                     # direction processed (0-7), and last is the running
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_visited_managed_raster, __pyx_v_xi_root, __pyx_v_yi_root, 1.0);

          /* "src/geoprocessing/routing/routing.pyx":2778
 *                     # initialized to nodata
 *                     distance_to_channel_stack.push(
 *                         FlowPixelType(xi_root, yi_root, 0, distance_nodata))             # <<<<<<<<<<<<<<
 * 
 *                 while not distance_to_channel_stack.empty():
 */
          __pyx_t_31.xi = __pyx_v_xi_root;
          __pyx_t_31.yi = __pyx_v_yi_root;
          __pyx_t_31.last_flow_dir = 0;
          __pyx_t_31.value = __pyx_v_distance_nodata;

          /* "src/geoprocessing/routing/routing.pyx":2777
 *                     # accumulation distance accumulated by this pixel so far
 *                     # initialized to nodata
 *                     distance_to_channel_stack.push(             # <<<<<<<<<<<<<<
 *                         FlowPixelType(xi_root, yi_root, 0, distance_nodata))
 * 
 */
          __pyx_v_distance_to_channel_stack.push(__pyx_t_31);

          /* "src/geoprocessing/routing/routing.pyx":2771
 *                     continue
 * 
 *                 if visited_managed_raster.get(xi_root, yi_root) == 0:             # <<<<<<<<<<<<<<
 *                     visited_managed_raster.set(xi_root, yi_root, 1)
 *                     # arguments are x,y position of pixel, then last D8 flow
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2780
 *                         FlowPixelType(xi_root, yi_root, 0, distance_nodata))
 * 
 *                 while not distance_to_channel_stack.empty():             # <<<<<<<<<<<<<<
 *                     pixel = distance_to_channel_stack.top()
 *                     distance_to_channel_stack.pop()
 */
        while (1) {
          __pyx_t_5 = ((!(__pyx_v_distance_to_channel_stack.empty() != 0)) != 0);
          if (!__pyx_t_5) break;

          /* "src/geoprocessing/routing/routing.pyx":2781
 * 
 *                 while not distance_to_channel_stack.empty():
 *                     pixel = distance_to_channel_stack.top()             # <<<<<<<<<<<<<<
 *                     distance_to_channel_stack.pop()
 *                     is_a_channel = (
 */
          __pyx_v_pixel = __pyx_v_distance_to_channel_stack.top();

          /* "src/geoprocessing/routing/routing.pyx":2782
 *                 while not distance_to_channel_stack.empty():
 *                     pixel = distance_to_channel_stack.top()
 *                     distance_to_channel_stack.pop()             # <<<<<<<<<<<<<<
 *                     is_a_channel = (
 *                         channel_managed_raster.get(pixel.xi, pixel.yi) == 1)
 */
          __pyx_v_distance_to_channel_stack.pop();

          /* "src/geoprocessing/routing/routing.pyx":2784
 *                     distance_to_channel_stack.pop()
 *                     is_a_channel = (
 *                         channel_managed_raster.get(pixel.xi, pixel.yi) == 1)             # <<<<<<<<<<<<<<
 *                     if is_a_channel:
 *                         distance_to_channel_managed_raster.set(
 */
          __pyx_v_is_a_channel = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_channel_managed_raster, __pyx_v_pixel.xi, __pyx_v_pixel.yi) == 1.0);

          /* "src/geoprocessing/routing/routing.pyx":2785
 *                     is_a_channel = (
 *                         channel_managed_raster.get(pixel.xi, pixel.yi) == 1)
 *                     if is_a_channel:             # <<<<<<<<<<<<<<
 *                         distance_to_channel_managed_raster.set(
 *                             pixel.xi, pixel.yi, 0)
 */
          __pyx_t_5 = (__pyx_v_is_a_channel != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":2786
 *                         channel_managed_raster.get(pixel.xi, pixel.yi) == 1)
 *                     if is_a_channel:
 *                         distance_to_channel_managed_raster.set(             # <<<<<<<<<<<<<<
 *                             pixel.xi, pixel.yi, 0)
 *                         continue
 */
            __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_distance_to_channel_managed_raster, __pyx_v_pixel.xi, __pyx_v_pixel.yi, 0.0);

            /* "src/geoprocessing/routing/routing.pyx":2788
 *                         distance_to_channel_managed_raster.set(
 *                             pixel.xi, pixel.yi, 0)
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     compressed_flow_dir = (
 */
            goto __pyx_L26_continue;

            /* "src/geoprocessing/routing/routing.pyx":2785
 *                     is_a_channel = (
 *                         channel_managed_raster.get(pixel.xi, pixel.yi) == 1)
 *                     if is_a_channel:             # <<<<<<<<<<<<<<
 *                         distance_to_channel_managed_raster.set(
 *                             pixel.xi, pixel.yi, 0)
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2791
 * 
 *                     compressed_flow_dir = (
 *                         <int>flow_dir_mfd_managed_raster.get(             # <<<<<<<<<<<<<<
 *                             pixel.xi, pixel.yi))
 * 
 */
          __pyx_v_compressed_flow_dir = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_mfd_managed_raster, __pyx_v_pixel.xi, __pyx_v_pixel.yi));

          /* "src/geoprocessing/routing/routing.pyx":2794
 *                             pixel.xi, pixel.yi))
 * 
 *                     preempted = 0             # <<<<<<<<<<<<<<
 *                     for i_n in range(pixel.last_flow_dir, 8):
 *                         flow_dir_weight = 0xF & (
 */
          __pyx_v_preempted = 0;

          /* "src/geoprocessing/routing/routing.pyx":2795
 * 
 *                     preempted = 0
 *                     for i_n in range(pixel.last_flow_dir, 8):             # <<<<<<<<<<<<<<
 *                         flow_dir_weight = 0xF & (
 *                             compressed_flow_dir >> (i_n * 4))
 */
          for (__pyx_t_30 = __pyx_v_pixel.last_flow_dir; __pyx_t_30 < 8; __pyx_t_30+=1) {
            __pyx_v_i_n = __pyx_t_30;

            /* "src/geoprocessing/routing/routing.pyx":2796
 *                     preempted = 0
 *                     for i_n in range(pixel.last_flow_dir, 8):
 *                         flow_dir_weight = 0xF & (             # <<<<<<<<<<<<<<
 *                             compressed_flow_dir >> (i_n * 4))
 *                         if flow_dir_weight == 0:
 */
            __pyx_v_flow_dir_weight = (0xF & (__pyx_v_compressed_flow_dir >> (__pyx_v_i_n * 4)));

            /* "src/geoprocessing/routing/routing.pyx":2798
 *                         flow_dir_weight = 0xF & (
 *                             compressed_flow_dir >> (i_n * 4))
 *                         if flow_dir_weight == 0:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_5 = ((__pyx_v_flow_dir_weight == 0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2799
 *                             compressed_flow_dir >> (i_n * 4))
 *                         if flow_dir_weight == 0:
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         xi_n = pixel.xi+D8_XOFFSET[i_n]
 */
              goto __pyx_L29_continue;

              /* "src/geoprocessing/routing/routing.pyx":2798
 *                         flow_dir_weight = 0xF & (
 *                             compressed_flow_dir >> (i_n * 4))
 *                         if flow_dir_weight == 0:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2801
 *                             continue
 * 
 *                         xi_n = pixel.xi+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                         yi_n = pixel.yi+D8_YOFFSET[i_n]
 * 
 */
            __pyx_v_xi_n = (__pyx_v_pixel.xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2802
 * 
 *                         xi_n = pixel.xi+D8_XOFFSET[i_n]
 *                         yi_n = pixel.yi+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 */
            __pyx_v_yi_n = (__pyx_v_pixel.yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

            /* "src/geoprocessing/routing/routing.pyx":2804
 *                         yi_n = pixel.yi+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            __pyx_t_4 = ((__pyx_v_xi_n < 0) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_4 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L33_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":2805
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
            __pyx_t_4 = ((__pyx_v_yi_n < 0) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_4 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
            __pyx_t_5 = __pyx_t_4;
            __pyx_L33_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":2804
 *                         yi_n = pixel.yi+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2806
 *                         if (xi_n < 0 or xi_n >= raster_x_size or
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         if visited_managed_raster.get(xi_n, yi_n) == 0:
 */
              goto __pyx_L29_continue;

              /* "src/geoprocessing/routing/routing.pyx":2804
 *                         yi_n = pixel.yi+D8_YOFFSET[i_n]
 * 
 *                         if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_n < 0 or yi_n >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2808
 *                             continue
 * 
 *                         if visited_managed_raster.get(xi_n, yi_n) == 0:             # <<<<<<<<<<<<<<
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             preempted = 1
 */
            __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_visited_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n) == 0.0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2809
 * 
 *                         if visited_managed_raster.get(xi_n, yi_n) == 0:
 *                             visited_managed_raster.set(xi_n, yi_n, 1)             # <<<<<<<<<<<<<<
 *                             preempted = 1
 *                             pixel.last_flow_dir = i_n
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_visited_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n, 1.0);

              /* "src/geoprocessing/routing/routing.pyx":2810
 *                         if visited_managed_raster.get(xi_n, yi_n) == 0:
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             preempted = 1             # <<<<<<<<<<<<<<
 *                             pixel.last_flow_dir = i_n
 *                             distance_to_channel_stack.push(pixel)
 */
              __pyx_v_preempted = 1;

              /* "src/geoprocessing/routing/routing.pyx":2811
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             preempted = 1
 *                             pixel.last_flow_dir = i_n             # <<<<<<<<<<<<<<
 *                             distance_to_channel_stack.push(pixel)
 *                             distance_to_channel_stack.push(
 */
              __pyx_v_pixel.last_flow_dir = __pyx_v_i_n;

              /* "src/geoprocessing/routing/routing.pyx":2812
 *                             preempted = 1
 *                             pixel.last_flow_dir = i_n
 *                             distance_to_channel_stack.push(pixel)             # <<<<<<<<<<<<<<
 *                             distance_to_channel_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, distance_nodata))
 */
              __pyx_v_distance_to_channel_stack.push(__pyx_v_pixel);

              /* "src/geoprocessing/routing/routing.pyx":2814
 *                             distance_to_channel_stack.push(pixel)
 *                             distance_to_channel_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, distance_nodata))             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
              __pyx_t_31.xi = __pyx_v_xi_n;
              __pyx_t_31.yi = __pyx_v_yi_n;
              __pyx_t_31.last_flow_dir = 0;
              __pyx_t_31.value = __pyx_v_distance_nodata;

              /* "src/geoprocessing/routing/routing.pyx":2813
 *                             pixel.last_flow_dir = i_n
 *                             distance_to_channel_stack.push(pixel)
 *                             distance_to_channel_stack.push(             # <<<<<<<<<<<<<<
 *                                 FlowPixelType(xi_n, yi_n, 0, distance_nodata))
 *                             break
 */
              __pyx_v_distance_to_channel_stack.push(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":2815
 *                             distance_to_channel_stack.push(
 *                                 FlowPixelType(xi_n, yi_n, 0, distance_nodata))
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                         n_distance = distance_to_channel_managed_raster.get(
 */
              goto __pyx_L30_break;

              /* "src/geoprocessing/routing/routing.pyx":2808
 *                             continue
 * 
 *                         if visited_managed_raster.get(xi_n, yi_n) == 0:             # <<<<<<<<<<<<<<
 *                             visited_managed_raster.set(xi_n, yi_n, 1)
 *                             preempted = 1
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2817
 *                             break
 * 
 *                         n_distance = distance_to_channel_managed_raster.get(             # <<<<<<<<<<<<<<
 *                             xi_n, yi_n)
 * 
 */
            __pyx_v_n_distance = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_distance_to_channel_managed_raster, __pyx_v_xi_n, __pyx_v_yi_n);

            /* "src/geoprocessing/routing/routing.pyx":2820
 *                             xi_n, yi_n)
 * 
 *                         if n_distance == distance_nodata:             # <<<<<<<<<<<<<<
 *                             # a channel was never found
 *                             continue
 */
            __pyx_t_5 = ((__pyx_v_n_distance == __pyx_v_distance_nodata) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":2822
 *                         if n_distance == distance_nodata:
 *                             # a channel was never found
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         # if a weight is passed we use it directly and do
 */
              goto __pyx_L29_continue;

              /* "src/geoprocessing/routing/routing.pyx":2820
 *                             xi_n, yi_n)
 * 
 *                         if n_distance == distance_nodata:             # <<<<<<<<<<<<<<
 *                             # a channel was never found
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2829
 *                         # then "distance" is being calculated and we account
 *                         # for diagonal distance.
 *                         if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                             weight_val = weight_raster.get(xi_n, yi_n)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
            __pyx_t_5 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
            __pyx_t_4 = (__pyx_t_5 != 0);
            if (__pyx_t_4) {

              /* "src/geoprocessing/routing/routing.pyx":2830
 *                         # for diagonal distance.
 *                         if weight_raster is not None:
 *                             weight_val = weight_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                 weight_val = 0.0
 */
              __pyx_v_weight_val = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_weight_raster, __pyx_v_xi_n, __pyx_v_yi_n);

              /* "src/geoprocessing/routing/routing.pyx":2831
 *                         if weight_raster is not None:
 *                             weight_val = weight_raster.get(xi_n, yi_n)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                 weight_val = 0.0
 *                         else:
 */
              __pyx_t_4 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_weight_val, __pyx_v_weight_nodata, 1e-8, 1e-5) != 0);
              if (__pyx_t_4) {

                /* "src/geoprocessing/routing/routing.pyx":2832
 *                             weight_val = weight_raster.get(xi_n, yi_n)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 *                                 weight_val = 0.0             # <<<<<<<<<<<<<<
 *                         else:
 *                             weight_val = (SQRT2 if i_n % 2 else 1)
 */
                __pyx_v_weight_val = 0.0;

                /* "src/geoprocessing/routing/routing.pyx":2831
 *                         if weight_raster is not None:
 *                             weight_val = weight_raster.get(xi_n, yi_n)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                                 weight_val = 0.0
 *                         else:
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":2829
 *                         # then "distance" is being calculated and we account
 *                         # for diagonal distance.
 *                         if weight_raster is not None:             # <<<<<<<<<<<<<<
 *                             weight_val = weight_raster.get(xi_n, yi_n)
 *                             if _is_close(weight_val, weight_nodata, 1e-8, 1e-5):
 */
              goto __pyx_L39;
            }

            /* "src/geoprocessing/routing/routing.pyx":2834
 *                                 weight_val = 0.0
 *                         else:
 *                             weight_val = (SQRT2 if i_n % 2 else 1)             # <<<<<<<<<<<<<<
 * 
 *                         if pixel.value == distance_nodata:
 */
            /*else*/ {
              if ((__Pyx_mod_long(__pyx_v_i_n, 2) != 0)) {
                __pyx_t_12 = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2;
              } else {
                __pyx_t_12 = 1.0;
              }
              __pyx_v_weight_val = __pyx_t_12;
            }
            __pyx_L39:;

            /* "src/geoprocessing/routing/routing.pyx":2836
 *                             weight_val = (SQRT2 if i_n % 2 else 1)
 * 
 *                         if pixel.value == distance_nodata:             # <<<<<<<<<<<<<<
 *                             pixel.value = 0
 *                         pixel.value += flow_dir_weight * (
 */
            __pyx_t_4 = ((__pyx_v_pixel.value == __pyx_v_distance_nodata) != 0);
            if (__pyx_t_4) {

              /* "src/geoprocessing/routing/routing.pyx":2837
 * 
 *                         if pixel.value == distance_nodata:
 *                             pixel.value = 0             # <<<<<<<<<<<<<<
 *                         pixel.value += flow_dir_weight * (
 *                             weight_val + n_distance)
 */
              __pyx_v_pixel.value = 0.0;

              /* "src/geoprocessing/routing/routing.pyx":2836
 *                             weight_val = (SQRT2 if i_n % 2 else 1)
 * 
 *                         if pixel.value == distance_nodata:             # <<<<<<<<<<<<<<
 *                             pixel.value = 0
 *                         pixel.value += flow_dir_weight * (
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":2838
 *                         if pixel.value == distance_nodata:
 *                             pixel.value = 0
 *                         pixel.value += flow_dir_weight * (             # <<<<<<<<<<<<<<
 *                             weight_val + n_distance)
 * 
 */
            __pyx_v_pixel.value = (__pyx_v_pixel.value + (__pyx_v_flow_dir_weight * (__pyx_v_weight_val + __pyx_v_n_distance)));
            __pyx_L29_continue:;
          }
          __pyx_L30_break:;

          /* "src/geoprocessing/routing/routing.pyx":2841
 *                             weight_val + n_distance)
 * 
 *                     if preempted or pixel.value == distance_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_5 = (__pyx_v_preempted != 0);
          if (!__pyx_t_5) {
          } else {
            __pyx_t_4 = __pyx_t_5;
            goto __pyx_L43_bool_binop_done;
          }
          __pyx_t_5 = ((__pyx_v_pixel.value == __pyx_v_distance_nodata) != 0);
          __pyx_t_4 = __pyx_t_5;
          __pyx_L43_bool_binop_done:;
          if (__pyx_t_4) {

            /* "src/geoprocessing/routing/routing.pyx":2842
 * 
 *                     if preempted or pixel.value == distance_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     sum_of_flow_weights = 0
 */
            goto __pyx_L26_continue;

            /* "src/geoprocessing/routing/routing.pyx":2841
 *                             weight_val + n_distance)
 * 
 *                     if preempted or pixel.value == distance_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2844
 *                         continue
 * 
 *                     sum_of_flow_weights = 0             # <<<<<<<<<<<<<<
 *                     for i_n in range(8):
 *                         sum_of_flow_weights += 0xF & (
 */
          __pyx_v_sum_of_flow_weights = 0;

          /* "src/geoprocessing/routing/routing.pyx":2845
 * 
 *                     sum_of_flow_weights = 0
 *                     for i_n in range(8):             # <<<<<<<<<<<<<<
 *                         sum_of_flow_weights += 0xF & (
 *                             compressed_flow_dir >> (i_n * 4))
 */
          for (__pyx_t_30 = 0; __pyx_t_30 < 8; __pyx_t_30+=1) {
            __pyx_v_i_n = __pyx_t_30;

            /* "src/geoprocessing/routing/routing.pyx":2846
 *                     sum_of_flow_weights = 0
 *                     for i_n in range(8):
 *                         sum_of_flow_weights += 0xF & (             # <<<<<<<<<<<<<<
 *                             compressed_flow_dir >> (i_n * 4))
 * 
 */
            __pyx_v_sum_of_flow_weights = (__pyx_v_sum_of_flow_weights + (0xF & (__pyx_v_compressed_flow_dir >> (__pyx_v_i_n * 4))));
          }

          /* "src/geoprocessing/routing/routing.pyx":2849
 *                             compressed_flow_dir >> (i_n * 4))
 * 
 *                     if sum_of_flow_weights != 0:             # <<<<<<<<<<<<<<
 *                         pixel.value = pixel.value / sum_of_flow_weights
 *                     else:
 */
          __pyx_t_4 = ((__pyx_v_sum_of_flow_weights != 0) != 0);
          if (__pyx_t_4) {

            /* "src/geoprocessing/routing/routing.pyx":2850
 * 
 *                     if sum_of_flow_weights != 0:
 *                         pixel.value = pixel.value / sum_of_flow_weights             # <<<<<<<<<<<<<<
 *                     else:
 *                         pixel.value = 0
 */
            if (unlikely(__pyx_v_sum_of_flow_weights == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 2850, __pyx_L1_error)
            }
            __pyx_v_pixel.value = (__pyx_v_pixel.value / ((double)__pyx_v_sum_of_flow_weights));

            /* "src/geoprocessing/routing/routing.pyx":2849
 *                             compressed_flow_dir >> (i_n * 4))
 * 
 *                     if sum_of_flow_weights != 0:             # <<<<<<<<<<<<<<
 *                         pixel.value = pixel.value / sum_of_flow_weights
 *                     else:
 */
            goto __pyx_L47;
          }

          /* "src/geoprocessing/routing/routing.pyx":2852
 *                         pixel.value = pixel.value / sum_of_flow_weights
 *                     else:
 *                         pixel.value = 0             # <<<<<<<<<<<<<<
 *                     distance_to_channel_managed_raster.set(
 *                         pixel.xi, pixel.yi, pixel.value)
 */
          /*else*/ {
            __pyx_v_pixel.value = 0.0;
          }
          __pyx_L47:;

          /* "src/geoprocessing/routing/routing.pyx":2853
 *                     else:
 *                         pixel.value = 0
 *                     distance_to_channel_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         pixel.xi, pixel.yi, pixel.value)
 * 
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_distance_to_channel_managed_raster, __pyx_v_pixel.xi, __pyx_v_pixel.yi, __pyx_v_pixel.value);
          __pyx_L26_continue:;
        }
        __pyx_L21_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":2719
 * 
 *     # this outer loop searches for undefined channels
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             channel_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2856
 *                         pixel.xi, pixel.yi, pixel.value)
 * 
 *     distance_to_channel_managed_raster.close()             # <<<<<<<<<<<<<<
 *     channel_managed_raster.close()
 *     flow_dir_mfd_managed_raster.close()
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_distance_to_channel_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2857
 * 
 *     distance_to_channel_managed_raster.close()
 *     channel_managed_raster.close()             # <<<<<<<<<<<<<<
 *     flow_dir_mfd_managed_raster.close()
 *     if weight_raster is not None:
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_channel_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2858
 *     distance_to_channel_managed_raster.close()
 *     channel_managed_raster.close()
 *     flow_dir_mfd_managed_raster.close()             # <<<<<<<<<<<<<<
 *     if weight_raster is not None:
 *         weight_raster.close()
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_flow_dir_mfd_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2859
 *     channel_managed_raster.close()
 *     flow_dir_mfd_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 *     visited_managed_raster.close()
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_weight_raster) != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":2860
 *     flow_dir_mfd_managed_raster.close()
 *     if weight_raster is not None:
 *         weight_raster.close()             # <<<<<<<<<<<<<<
 *     visited_managed_raster.close()
 *     shutil.rmtree(tmp_work_dir)
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_weight_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2859
 *     channel_managed_raster.close()
 *     flow_dir_mfd_managed_raster.close()
 *     if weight_raster is not None:             # <<<<<<<<<<<<<<
 *         weight_raster.close()
 *     visited_managed_raster.close()
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2861
 *     if weight_raster is not None:
 *         weight_raster.close()
 *     visited_managed_raster.close()             # <<<<<<<<<<<<<<
 *     shutil.rmtree(tmp_work_dir)
 *     LOGGER.info('%.1f%% complete', 100.0)
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_visited_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2862
 *         weight_raster.close()
 *     visited_managed_raster.close()
 *     shutil.rmtree(tmp_work_dir)             # <<<<<<<<<<<<<<
 *     LOGGER.info('%.1f%% complete', 100.0)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_shutil); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_11, __pyx_v_tmp_work_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_tmp_work_dir);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2863
 *     visited_managed_raster.close()
 *     shutil.rmtree(tmp_work_dir)
 *     LOGGER.info('%.1f%% complete', 100.0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2600
 * 
 * 
 * def distance_to_channel_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.distance_to_channel_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_channel_buffer_array.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_buffer_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_channel_buffer_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_buffer_array);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_distance_to_channel_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_channel_managed_raster);
  __Pyx_XDECREF(__pyx_v_tmp_work_dir);
  __Pyx_XDECREF(__pyx_v_visited_raster_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_visited_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_mfd_managed_raster);
  __Pyx_XDECREF(__pyx_v_channel_raster);
  __Pyx_XDECREF(__pyx_v_channel_band);
  __Pyx_XDECREF(__pyx_v_flow_dir_mfd_raster);
  __Pyx_XDECREF(__pyx_v_flow_dir_mfd_band);
  __Pyx_XDECREF((PyObject *)__pyx_v_weight_raster);
  __Pyx_XDECREF(__pyx_v_raw_weight_nodata);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster_info);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_xa);
  __Pyx_XDECREF(__pyx_v_xb);
  __Pyx_XDECREF(__pyx_v_ya);
  __Pyx_XDECREF(__pyx_v_yb);
  __Pyx_XDECREF(__pyx_v_modified_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":2866
 * 
 * 
 * def extract_streams_mfd(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band, flow_dir_mfd_path_band,
 *         double flow_threshold, target_stream_raster_path,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_17extract_streams_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_16extract_streams_mfd[] = "Classify a stream raster from MFD flow accumulation.\n\n    This function classifies pixels as streams that have a flow accumulation\n    value >= ``flow_threshold`` and can trace further upstream with a fuzzy\n    propotion if ``trace_threshold_proportion`` is set < 1.0\n\n    Parameters:\n        flow_accum_raster_path_band (tuple): a string/integer tuple indicating\n            the flow accumulation raster to use as a basis for thresholding\n            a stream. Values in this raster that are >= flow_threshold will\n            be classified as streams. This raster should be derived from\n            ``dem_raster_path_band`` using\n            ``pygeoprocessing.routing.flow_accumulation_mfd``.\n        flow_dir_mfd_path_band (str): path to multiple flow direction\n            raster, required to join divergent streams.\n        flow_threshold (float): the value in ``flow_accum_raster_path_band`` to\n            indicate where a stream exists.\n        target_stream_raster_path (str): path to the target stream raster.\n            This raster will be the same dimensions and projection as\n            ``dem_raster_path_band`` and will contain 1s where a stream is\n            defined, 0 where the flow accumulation layer is defined but no\n            stream exists, and nodata otherwise.\n        trace_threshold_proportion (float): this value indicates what\n            proportion of the flow_threshold is enough to classify a pixel\n            as a stream after the stream has been traced from a\n            ``flow_threshold`` drain. Setting this value < 1.0 is useful for\n            classifying streams in regions that have highly divergent flow\n            directions.\n        raster_driver_creation_tuple (tuple): a tuple containing a GDAL driver\n            name string as the first element and a GDAL creation options\n            tuple/list as the second. Defaults to a GTiff driver tuple\n            defined at geoprocessing.DEFAULT_GTIFF_CREATION_TUPLE_OPTION""S.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_17extract_streams_mfd = {"extract_streams_mfd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_17extract_streams_mfd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_16extract_streams_mfd};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_17extract_streams_mfd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_accum_raster_path_band = 0;
  PyObject *__pyx_v_flow_dir_mfd_path_band = 0;
  double __pyx_v_flow_threshold;
  PyObject *__pyx_v_target_stream_raster_path = 0;
  double __pyx_v_trace_threshold_proportion;
  PyObject *__pyx_v_raster_driver_creation_tuple = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_streams_mfd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_accum_raster_path_band,&__pyx_n_s_flow_dir_mfd_path_band,&__pyx_n_s_flow_threshold,&__pyx_n_s_target_stream_raster_path,&__pyx_n_s_trace_threshold_proportion,&__pyx_n_s_raster_driver_creation_tuple,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = __pyx_k__13;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_accum_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_mfd_path_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_streams_mfd", 0, 4, 6, 1); __PYX_ERR(0, 2866, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_streams_mfd", 0, 4, 6, 2); __PYX_ERR(0, 2866, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_stream_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_streams_mfd", 0, 4, 6, 3); __PYX_ERR(0, 2866, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trace_threshold_proportion);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_driver_creation_tuple);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extract_streams_mfd") < 0)) __PYX_ERR(0, 2866, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_accum_raster_path_band = values[0];
    __pyx_v_flow_dir_mfd_path_band = values[1];
    __pyx_v_flow_threshold = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_flow_threshold == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2868, __pyx_L3_error)
    __pyx_v_target_stream_raster_path = values[3];
    if (values[4]) {
      __pyx_v_trace_threshold_proportion = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_trace_threshold_proportion == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2869, __pyx_L3_error)
    } else {
      __pyx_v_trace_threshold_proportion = ((double)1.0);
    }
    __pyx_v_raster_driver_creation_tuple = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_streams_mfd", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2866, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.extract_streams_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_16extract_streams_mfd(__pyx_self, __pyx_v_flow_accum_raster_path_band, __pyx_v_flow_dir_mfd_path_band, __pyx_v_flow_threshold, __pyx_v_target_stream_raster_path, __pyx_v_trace_threshold_proportion, __pyx_v_raster_driver_creation_tuple);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_16extract_streams_mfd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_accum_raster_path_band, PyObject *__pyx_v_flow_dir_mfd_path_band, double __pyx_v_flow_threshold, PyObject *__pyx_v_target_stream_raster_path, double __pyx_v_trace_threshold_proportion, PyObject *__pyx_v_raster_driver_creation_tuple) {
  PyObject *__pyx_v_flow_accum_info = NULL;
  double __pyx_v_flow_accum_nodata;
  long __pyx_v_stream_nodata;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_accum_mr = 0;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_stream_mr = 0;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_mfd_mr = 0;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_i_n;
  int __pyx_v_xi_n;
  int __pyx_v_yi_n;
  int __pyx_v_i_sn;
  int __pyx_v_xi_sn;
  int __pyx_v_yi_sn;
  int __pyx_v_flow_dir_mfd;
  double __pyx_v_flow_accum;
  double __pyx_v_trace_flow_threshold;
  int __pyx_v_n_iterations;
  int __pyx_v_is_outlet;
  int __pyx_v_stream_val;
  int __pyx_v_flow_dir_nodata;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_open_set;
  __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateQueueType __pyx_v_backtrace_set;
  int __pyx_v_xi_bn;
  int __pyx_v_yi_bn;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_block_offsets = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_block_offsets_list = NULL;
  PyObject *__pyx_v_stream_raster = NULL;
  PyObject *__pyx_v_stream_band = NULL;
  PyObject *__pyx_v_stream_array = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_streams_mfd", 0);

  /* "src/geoprocessing/routing/routing.pyx":2907
 *         None.
 *     """
 *     if trace_threshold_proportion < 0.or trace_threshold_proportion > 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "trace_threshold_proportion should be in the range [0.0, 1.0] "
 */
  __pyx_t_2 = ((__pyx_v_trace_threshold_proportion < 0.) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_trace_threshold_proportion > 1.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/geoprocessing/routing/routing.pyx":2910
 *         raise ValueError(
 *             "trace_threshold_proportion should be in the range [0.0, 1.0] "
 *             "actual value is: %s" % trace_threshold_proportion)             # <<<<<<<<<<<<<<
 * 
 *     flow_accum_info = pygeoprocessing.get_raster_info(
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_trace_threshold_proportion); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_trace_threshold_proportion_shoul, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2908
 *     """
 *     if trace_threshold_proportion < 0.or trace_threshold_proportion > 1.0:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "trace_threshold_proportion should be in the range [0.0, 1.0] "
 *             "actual value is: %s" % trace_threshold_proportion)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2908, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":2907
 *         None.
 *     """
 *     if trace_threshold_proportion < 0.or trace_threshold_proportion > 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "trace_threshold_proportion should be in the range [0.0, 1.0] "
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":2912
 *             "actual value is: %s" % trace_threshold_proportion)
 * 
 *     flow_accum_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[0])
 *     cdef double flow_accum_nodata = flow_accum_info['nodata'][
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2913
 * 
 *     flow_accum_info = pygeoprocessing.get_raster_info(
 *         flow_accum_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     cdef double flow_accum_nodata = flow_accum_info['nodata'][
 *         flow_accum_raster_path_band[1]-1]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flow_accum_info = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2914
 *     flow_accum_info = pygeoprocessing.get_raster_info(
 *         flow_accum_raster_path_band[0])
 *     cdef double flow_accum_nodata = flow_accum_info['nodata'][             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[1]-1]
 *     stream_nodata = 255
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_accum_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":2915
 *         flow_accum_raster_path_band[0])
 *     cdef double flow_accum_nodata = flow_accum_info['nodata'][
 *         flow_accum_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 *     stream_nodata = 255
 * 
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2914
 *     flow_accum_info = pygeoprocessing.get_raster_info(
 *         flow_accum_raster_path_band[0])
 *     cdef double flow_accum_nodata = flow_accum_info['nodata'][             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[1]-1]
 *     stream_nodata = 255
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_flow_accum_nodata = __pyx_t_7;

  /* "src/geoprocessing/routing/routing.pyx":2916
 *     cdef double flow_accum_nodata = flow_accum_info['nodata'][
 *         flow_accum_raster_path_band[1]-1]
 *     stream_nodata = 255             # <<<<<<<<<<<<<<
 * 
 *     cdef int raster_x_size, raster_y_size
 */
  __pyx_v_stream_nodata = 0xFF;

  /* "src/geoprocessing/routing/routing.pyx":2919
 * 
 *     cdef int raster_x_size, raster_y_size
 *     raster_x_size, raster_y_size = flow_accum_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     pygeoprocessing.new_raster_from_base(
 */
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_accum_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2919, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_6), 2) < 0) __PYX_ERR(0, 2919, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L7_unpacking_done;
    __pyx_L6_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2919, __pyx_L1_error)
    __pyx_L7_unpacking_done:;
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2919, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2919, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_raster_x_size = __pyx_t_9;
  __pyx_v_raster_y_size = __pyx_t_10;

  /* "src/geoprocessing/routing/routing.pyx":2921
 *     raster_x_size, raster_y_size = flow_accum_info['raster_size']
 * 
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[0], target_stream_raster_path,
 *         gdal.GDT_Byte, [stream_nodata],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2922
 * 
 *     pygeoprocessing.new_raster_from_base(
 *         flow_accum_raster_path_band[0], target_stream_raster_path,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Byte, [stream_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "src/geoprocessing/routing/routing.pyx":2923
 *     pygeoprocessing.new_raster_from_base(
 *         flow_accum_raster_path_band[0], target_stream_raster_path,
 *         gdal.GDT_Byte, [stream_nodata],             # <<<<<<<<<<<<<<
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_stream_nodata); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyList_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2921
 *     raster_x_size, raster_y_size = flow_accum_info['raster_size']
 * 
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[0], target_stream_raster_path,
 *         gdal.GDT_Byte, [stream_nodata],
 */
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_target_stream_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_stream_raster_path);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_target_stream_raster_path);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_11);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2924
 *         flow_accum_raster_path_band[0], target_stream_raster_path,
 *         gdal.GDT_Byte, [stream_nodata],
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)             # <<<<<<<<<<<<<<
 * 
 *     cdef _ManagedRaster flow_accum_mr = _ManagedRaster(
 */
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_raster_driver_creation_tuple, __pyx_v_raster_driver_creation_tuple) < 0) __PYX_ERR(0, 2924, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2921
 *     raster_x_size, raster_y_size = flow_accum_info['raster_size']
 * 
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[0], target_stream_raster_path,
 *         gdal.GDT_Byte, [stream_nodata],
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2927
 * 
 *     cdef _ManagedRaster flow_accum_mr = _ManagedRaster(
 *         flow_accum_raster_path_band[0], flow_accum_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *     cdef _ManagedRaster stream_mr = _ManagedRaster(
 *         target_stream_raster_path, 1, 1)
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "src/geoprocessing/routing/routing.pyx":2926
 *         raster_driver_creation_tuple=raster_driver_creation_tuple)
 * 
 *     cdef _ManagedRaster flow_accum_mr = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[0], flow_accum_raster_path_band[1], 0)
 *     cdef _ManagedRaster stream_mr = _ManagedRaster(
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_11);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_int_0);
  __pyx_t_6 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_accum_mr = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2928
 *     cdef _ManagedRaster flow_accum_mr = _ManagedRaster(
 *         flow_accum_raster_path_band[0], flow_accum_raster_path_band[1], 0)
 *     cdef _ManagedRaster stream_mr = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_stream_raster_path, 1, 1)
 *     cdef _ManagedRaster flow_dir_mfd_mr = _ManagedRaster(
 */
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_v_target_stream_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_stream_raster_path);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_target_stream_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_int_1);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_stream_mr = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2931
 *         target_stream_raster_path, 1, 1)
 *     cdef _ManagedRaster flow_dir_mfd_mr = _ManagedRaster(
 *         flow_dir_mfd_path_band[0], flow_dir_mfd_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef int xoff, yoff, win_xsize, win_ysize
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "src/geoprocessing/routing/routing.pyx":2930
 *     cdef _ManagedRaster stream_mr = _ManagedRaster(
 *         target_stream_raster_path, 1, 1)
 *     cdef _ManagedRaster flow_dir_mfd_mr = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_path_band[0], flow_dir_mfd_path_band[1], 0)
 * 
 */
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_11);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_int_0);
  __pyx_t_4 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_flow_dir_mfd_mr = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2938
 *     cdef double flow_accum
 *     cdef double trace_flow_threshold = (
 *         trace_threshold_proportion * flow_threshold)             # <<<<<<<<<<<<<<
 *     cdef int n_iterations = 0
 *     cdef int is_outlet, stream_val
 */
  __pyx_v_trace_flow_threshold = (__pyx_v_trace_threshold_proportion * __pyx_v_flow_threshold);

  /* "src/geoprocessing/routing/routing.pyx":2939
 *     cdef double trace_flow_threshold = (
 *         trace_threshold_proportion * flow_threshold)
 *     cdef int n_iterations = 0             # <<<<<<<<<<<<<<
 *     cdef int is_outlet, stream_val
 * 
 */
  __pyx_v_n_iterations = 0;

  /* "src/geoprocessing/routing/routing.pyx":2942
 *     cdef int is_outlet, stream_val
 * 
 *     cdef int flow_dir_nodata = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_path_band[0])['nodata'][flow_dir_mfd_path_band[1]-1]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2943
 * 
 *     cdef int flow_dir_nodata = pygeoprocessing.get_raster_info(
 *         flow_dir_mfd_path_band[0])['nodata'][flow_dir_mfd_path_band[1]-1]             # <<<<<<<<<<<<<<
 * 
 *     # this queue is used to march the front from the stream pixel or the
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_11 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_u_nodata); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_flow_dir_mfd_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_11, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2943, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_flow_dir_nodata = __pyx_t_10;

  /* "src/geoprocessing/routing/routing.pyx":2950
 *     cdef int xi_bn, yi_bn # used for backtrace neighbor coordinates
 * 
 *     cdef time_t last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":2952
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_stream_raster_path, 1), offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2953
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(
 *             (target_stream_raster_path, 1), offset_only=True):             # <<<<<<<<<<<<<<
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']
 */
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_v_target_stream_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_stream_raster_path);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_target_stream_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_int_1);

  /* "src/geoprocessing/routing/routing.pyx":2952
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_stream_raster_path, 1), offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_11);
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2953
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(
 *             (target_stream_raster_path, 1), offset_only=True):             # <<<<<<<<<<<<<<
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']
 */
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 2953, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2952
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_stream_raster_path, 1), offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_11 = __pyx_t_3; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2952, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 2952, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2952, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 2952, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2952, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_13(__pyx_t_11);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2952, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_block_offsets, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":2954
 *     for block_offsets in pygeoprocessing.iterblocks(
 *             (target_stream_raster_path, 1), offset_only=True):
 *         xoff = block_offsets['xoff']             # <<<<<<<<<<<<<<
 *         yoff = block_offsets['yoff']
 *         win_xsize = block_offsets['win_xsize']
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_xoff); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2954, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_xoff = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":2955
 *             (target_stream_raster_path, 1), offset_only=True):
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']             # <<<<<<<<<<<<<<
 *         win_xsize = block_offsets['win_xsize']
 *         win_ysize = block_offsets['win_ysize']
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_yoff); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2955, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_yoff = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":2956
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']
 *         win_xsize = block_offsets['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = block_offsets['win_ysize']
 *         for yi in range(win_ysize):
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2956, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_win_xsize = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":2957
 *         yoff = block_offsets['yoff']
 *         win_xsize = block_offsets['win_xsize']
 *         win_ysize = block_offsets['win_ysize']             # <<<<<<<<<<<<<<
 *         for yi in range(win_ysize):
 *             yi_root = yi+yoff
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2957, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_win_ysize = __pyx_t_10;

    /* "src/geoprocessing/routing/routing.pyx":2958
 *         win_xsize = block_offsets['win_xsize']
 *         win_ysize = block_offsets['win_ysize']
 *         for yi in range(win_ysize):             # <<<<<<<<<<<<<<
 *             yi_root = yi+yoff
 *             if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_10 = __pyx_v_win_ysize;
    __pyx_t_9 = __pyx_t_10;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_9; __pyx_t_14+=1) {
      __pyx_v_yi = __pyx_t_14;

      /* "src/geoprocessing/routing/routing.pyx":2959
 *         win_ysize = block_offsets['win_ysize']
 *         for yi in range(win_ysize):
 *             yi_root = yi+yoff             # <<<<<<<<<<<<<<
 *             if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *                 last_log_time = ctime(NULL)
 */
      __pyx_v_yi_root = (__pyx_v_yi + __pyx_v_yoff);

      /* "src/geoprocessing/routing/routing.pyx":2960
 *         for yi in range(win_ysize):
 *             yi_root = yi+yoff
 *             if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 */
      __pyx_t_1 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
      if (__pyx_t_1) {

        /* "src/geoprocessing/routing/routing.pyx":2961
 *             yi_root = yi+yoff
 *             if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *                 last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 */
        __pyx_v_last_log_time = time(NULL);

        /* "src/geoprocessing/routing/routing.pyx":2962
 *             if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *                 LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                     raster_x_size * raster_y_size))
 */
        __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2962, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":2963
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                     raster_x_size * raster_y_size))
 *             for xi in range(win_xsize):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "src/geoprocessing/routing/routing.pyx":2964
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                     raster_x_size * raster_y_size))             # <<<<<<<<<<<<<<
 *             for xi in range(win_xsize):
 *                 xi_root = xi+xoff
 */
        __pyx_t_5 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);

        /* "src/geoprocessing/routing/routing.pyx":2963
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                     raster_x_size * raster_y_size))
 *             for xi in range(win_xsize):
 */
        __pyx_t_15 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_16 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_16 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_kp_u_1f_complete, __pyx_t_15};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2963, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_kp_u_1f_complete, __pyx_t_15};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2963, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2963, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(__pyx_kp_u_1f_complete);
          __Pyx_GIVEREF(__pyx_kp_u_1f_complete);
          PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_16, __pyx_kp_u_1f_complete);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_16, __pyx_t_15);
          __pyx_t_15 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2963, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "src/geoprocessing/routing/routing.pyx":2960
 *         for yi in range(win_ysize):
 *             yi_root = yi+yoff
 *             if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":2965
 *                 LOGGER.info('%.1f%% complete', 100.0 * current_pixel / <float>(
 *                     raster_x_size * raster_y_size))
 *             for xi in range(win_xsize):             # <<<<<<<<<<<<<<
 *                 xi_root = xi+xoff
 *                 flow_accum = flow_accum_mr.get(xi_root, yi_root)
 */
      __pyx_t_16 = __pyx_v_win_xsize;
      __pyx_t_17 = __pyx_t_16;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_xi = __pyx_t_18;

        /* "src/geoprocessing/routing/routing.pyx":2966
 *                     raster_x_size * raster_y_size))
 *             for xi in range(win_xsize):
 *                 xi_root = xi+xoff             # <<<<<<<<<<<<<<
 *                 flow_accum = flow_accum_mr.get(xi_root, yi_root)
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 */
        __pyx_v_xi_root = (__pyx_v_xi + __pyx_v_xoff);

        /* "src/geoprocessing/routing/routing.pyx":2967
 *             for xi in range(win_xsize):
 *                 xi_root = xi+xoff
 *                 flow_accum = flow_accum_mr.get(xi_root, yi_root)             # <<<<<<<<<<<<<<
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 *                     continue
 */
        __pyx_v_flow_accum = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_mr, __pyx_v_xi_root, __pyx_v_yi_root);

        /* "src/geoprocessing/routing/routing.pyx":2968
 *                 xi_root = xi+xoff
 *                 flow_accum = flow_accum_mr.get(xi_root, yi_root)
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:
 */
        __pyx_t_1 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_flow_accum, __pyx_v_flow_accum_nodata, 1e-8, 1e-5) != 0);
        if (__pyx_t_1) {

          /* "src/geoprocessing/routing/routing.pyx":2969
 *                 flow_accum = flow_accum_mr.get(xi_root, yi_root)
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 *                     continue             # <<<<<<<<<<<<<<
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:
 *                     continue
 */
          goto __pyx_L13_continue;

          /* "src/geoprocessing/routing/routing.pyx":2968
 *                 xi_root = xi+xoff
 *                 flow_accum = flow_accum_mr.get(xi_root, yi_root)
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2970
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 *                     continue
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 *                 stream_mr.set(xi_root, yi_root, 0)
 */
        __pyx_t_1 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_stream_mr, __pyx_v_xi_root, __pyx_v_yi_root) != __pyx_v_stream_nodata) != 0);
        if (__pyx_t_1) {

          /* "src/geoprocessing/routing/routing.pyx":2971
 *                     continue
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 *                 stream_mr.set(xi_root, yi_root, 0)
 *                 if flow_accum < flow_threshold:
 */
          goto __pyx_L13_continue;

          /* "src/geoprocessing/routing/routing.pyx":2970
 *                 if _is_close(flow_accum, flow_accum_nodata, 1e-8, 1e-5):
 *                     continue
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 *                 stream_mr.set(xi_root, yi_root, 0)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2972
 *                 if stream_mr.get(xi_root, yi_root) != stream_nodata:
 *                     continue
 *                 stream_mr.set(xi_root, yi_root, 0)             # <<<<<<<<<<<<<<
 *                 if flow_accum < flow_threshold:
 *                     continue
 */
        __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_stream_mr, __pyx_v_xi_root, __pyx_v_yi_root, 0.0);

        /* "src/geoprocessing/routing/routing.pyx":2973
 *                     continue
 *                 stream_mr.set(xi_root, yi_root, 0)
 *                 if flow_accum < flow_threshold:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_1 = ((__pyx_v_flow_accum < __pyx_v_flow_threshold) != 0);
        if (__pyx_t_1) {

          /* "src/geoprocessing/routing/routing.pyx":2974
 *                 stream_mr.set(xi_root, yi_root, 0)
 *                 if flow_accum < flow_threshold:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_root, yi_root)
 */
          goto __pyx_L13_continue;

          /* "src/geoprocessing/routing/routing.pyx":2973
 *                     continue
 *                 stream_mr.set(xi_root, yi_root, 0)
 *                 if flow_accum < flow_threshold:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2976
 *                     continue
 * 
 *                 flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_root, yi_root)             # <<<<<<<<<<<<<<
 *                 is_outlet = 0
 *                 for i_n in range(8):
 */
        __pyx_v_flow_dir_mfd = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_mfd_mr, __pyx_v_xi_root, __pyx_v_yi_root));

        /* "src/geoprocessing/routing/routing.pyx":2977
 * 
 *                 flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_root, yi_root)
 *                 is_outlet = 0             # <<<<<<<<<<<<<<
 *                 for i_n in range(8):
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:
 */
        __pyx_v_is_outlet = 0;

        /* "src/geoprocessing/routing/routing.pyx":2978
 *                 flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_root, yi_root)
 *                 is_outlet = 0
 *                 for i_n in range(8):             # <<<<<<<<<<<<<<
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:
 *                         # no flow in that direction
 */
        for (__pyx_t_19 = 0; __pyx_t_19 < 8; __pyx_t_19+=1) {
          __pyx_v_i_n = __pyx_t_19;

          /* "src/geoprocessing/routing/routing.pyx":2979
 *                 is_outlet = 0
 *                 for i_n in range(8):
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:             # <<<<<<<<<<<<<<
 *                         # no flow in that direction
 *                         continue
 */
          __pyx_t_1 = ((((__pyx_v_flow_dir_mfd >> (__pyx_v_i_n * 4)) & 0xF) == 0) != 0);
          if (__pyx_t_1) {

            /* "src/geoprocessing/routing/routing.pyx":2981
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:
 *                         # no flow in that direction
 *                         continue             # <<<<<<<<<<<<<<
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 */
            goto __pyx_L18_continue;

            /* "src/geoprocessing/routing/routing.pyx":2979
 *                 is_outlet = 0
 *                 for i_n in range(8):
 *                     if ((flow_dir_mfd >> (i_n * 4)) & 0xF) == 0:             # <<<<<<<<<<<<<<
 *                         # no flow in that direction
 *                         continue
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2982
 *                         # no flow in that direction
 *                         continue
 *                     xi_n = xi_root+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 */
          __pyx_v_xi_n = (__pyx_v_xi_root + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":2983
 *                         continue
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 *                             yi_n < 0 or yi_n >= raster_y_size):
 */
          __pyx_v_yi_n = (__pyx_v_yi_root + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n]));

          /* "src/geoprocessing/routing/routing.pyx":2984
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 */
          __pyx_t_2 = ((__pyx_v_xi_n < 0) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L22_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_xi_n >= __pyx_v_raster_x_size) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L22_bool_binop_done;
          }

          /* "src/geoprocessing/routing/routing.pyx":2985
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 *                             yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                         # it'll drain off the edge of the raster
 *                         is_outlet = 1
 */
          __pyx_t_2 = ((__pyx_v_yi_n < 0) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L22_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_yi_n >= __pyx_v_raster_y_size) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L22_bool_binop_done:;

          /* "src/geoprocessing/routing/routing.pyx":2984
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 */
          if (__pyx_t_1) {

            /* "src/geoprocessing/routing/routing.pyx":2987
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 *                         is_outlet = 1             # <<<<<<<<<<<<<<
 *                         break
 *                     if flow_accum_mr.get(xi_n, yi_n) == flow_accum_nodata:
 */
            __pyx_v_is_outlet = 1;

            /* "src/geoprocessing/routing/routing.pyx":2988
 *                         # it'll drain off the edge of the raster
 *                         is_outlet = 1
 *                         break             # <<<<<<<<<<<<<<
 *                     if flow_accum_mr.get(xi_n, yi_n) == flow_accum_nodata:
 *                         is_outlet = 1
 */
            goto __pyx_L19_break;

            /* "src/geoprocessing/routing/routing.pyx":2984
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":2989
 *                         is_outlet = 1
 *                         break
 *                     if flow_accum_mr.get(xi_n, yi_n) == flow_accum_nodata:             # <<<<<<<<<<<<<<
 *                         is_outlet = 1
 *                         break
 */
          __pyx_t_1 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_mr, __pyx_v_xi_n, __pyx_v_yi_n) == __pyx_v_flow_accum_nodata) != 0);
          if (__pyx_t_1) {

            /* "src/geoprocessing/routing/routing.pyx":2990
 *                         break
 *                     if flow_accum_mr.get(xi_n, yi_n) == flow_accum_nodata:
 *                         is_outlet = 1             # <<<<<<<<<<<<<<
 *                         break
 *                 if is_outlet:
 */
            __pyx_v_is_outlet = 1;

            /* "src/geoprocessing/routing/routing.pyx":2991
 *                     if flow_accum_mr.get(xi_n, yi_n) == flow_accum_nodata:
 *                         is_outlet = 1
 *                         break             # <<<<<<<<<<<<<<
 *                 if is_outlet:
 *                     open_set.push(CoordinateType(xi_root, yi_root))
 */
            goto __pyx_L19_break;

            /* "src/geoprocessing/routing/routing.pyx":2989
 *                         is_outlet = 1
 *                         break
 *                     if flow_accum_mr.get(xi_n, yi_n) == flow_accum_nodata:             # <<<<<<<<<<<<<<
 *                         is_outlet = 1
 *                         break
 */
          }
          __pyx_L18_continue:;
        }
        __pyx_L19_break:;

        /* "src/geoprocessing/routing/routing.pyx":2992
 *                         is_outlet = 1
 *                         break
 *                 if is_outlet:             # <<<<<<<<<<<<<<
 *                     open_set.push(CoordinateType(xi_root, yi_root))
 *                     stream_mr.set(xi_root, yi_root, 1)
 */
        __pyx_t_1 = (__pyx_v_is_outlet != 0);
        if (__pyx_t_1) {

          /* "src/geoprocessing/routing/routing.pyx":2993
 *                         break
 *                 if is_outlet:
 *                     open_set.push(CoordinateType(xi_root, yi_root))             # <<<<<<<<<<<<<<
 *                     stream_mr.set(xi_root, yi_root, 1)
 * 
 */
          __pyx_t_20.xi = __pyx_v_xi_root;
          __pyx_t_20.yi = __pyx_v_yi_root;
          __pyx_v_open_set.push(__pyx_t_20);

          /* "src/geoprocessing/routing/routing.pyx":2994
 *                 if is_outlet:
 *                     open_set.push(CoordinateType(xi_root, yi_root))
 *                     stream_mr.set(xi_root, yi_root, 1)             # <<<<<<<<<<<<<<
 * 
 *                 n_iterations = 0
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_stream_mr, __pyx_v_xi_root, __pyx_v_yi_root, 1.0);

          /* "src/geoprocessing/routing/routing.pyx":2992
 *                         is_outlet = 1
 *                         break
 *                 if is_outlet:             # <<<<<<<<<<<<<<
 *                     open_set.push(CoordinateType(xi_root, yi_root))
 *                     stream_mr.set(xi_root, yi_root, 1)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":2996
 *                     stream_mr.set(xi_root, yi_root, 1)
 * 
 *                 n_iterations = 0             # <<<<<<<<<<<<<<
 *                 while open_set.size() > 0:
 *                     xi_n = open_set.front().xi
 */
        __pyx_v_n_iterations = 0;

        /* "src/geoprocessing/routing/routing.pyx":2997
 * 
 *                 n_iterations = 0
 *                 while open_set.size() > 0:             # <<<<<<<<<<<<<<
 *                     xi_n = open_set.front().xi
 *                     yi_n = open_set.front().yi
 */
        while (1) {
          __pyx_t_1 = ((__pyx_v_open_set.size() > 0) != 0);
          if (!__pyx_t_1) break;

          /* "src/geoprocessing/routing/routing.pyx":2998
 *                 n_iterations = 0
 *                 while open_set.size() > 0:
 *                     xi_n = open_set.front().xi             # <<<<<<<<<<<<<<
 *                     yi_n = open_set.front().yi
 *                     open_set.pop()
 */
          __pyx_t_19 = __pyx_v_open_set.front().xi;
          __pyx_v_xi_n = __pyx_t_19;

          /* "src/geoprocessing/routing/routing.pyx":2999
 *                 while open_set.size() > 0:
 *                     xi_n = open_set.front().xi
 *                     yi_n = open_set.front().yi             # <<<<<<<<<<<<<<
 *                     open_set.pop()
 *                     n_iterations += 1
 */
          __pyx_t_19 = __pyx_v_open_set.front().yi;
          __pyx_v_yi_n = __pyx_t_19;

          /* "src/geoprocessing/routing/routing.pyx":3000
 *                     xi_n = open_set.front().xi
 *                     yi_n = open_set.front().yi
 *                     open_set.pop()             # <<<<<<<<<<<<<<
 *                     n_iterations += 1
 *                     for i_sn in range(8):
 */
          __pyx_v_open_set.pop();

          /* "src/geoprocessing/routing/routing.pyx":3001
 *                     yi_n = open_set.front().yi
 *                     open_set.pop()
 *                     n_iterations += 1             # <<<<<<<<<<<<<<
 *                     for i_sn in range(8):
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]
 */
          __pyx_v_n_iterations = (__pyx_v_n_iterations + 1);

          /* "src/geoprocessing/routing/routing.pyx":3002
 *                     open_set.pop()
 *                     n_iterations += 1
 *                     for i_sn in range(8):             # <<<<<<<<<<<<<<
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]
 */
          for (__pyx_t_19 = 0; __pyx_t_19 < 8; __pyx_t_19+=1) {
            __pyx_v_i_sn = __pyx_t_19;

            /* "src/geoprocessing/routing/routing.pyx":3003
 *                     n_iterations += 1
 *                     for i_sn in range(8):
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]             # <<<<<<<<<<<<<<
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or
 */
            __pyx_v_xi_sn = (__pyx_v_xi_n + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_sn]));

            /* "src/geoprocessing/routing/routing.pyx":3004
 *                     for i_sn in range(8):
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]             # <<<<<<<<<<<<<<
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):
 */
            __pyx_v_yi_sn = (__pyx_v_yi_n + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_sn]));

            /* "src/geoprocessing/routing/routing.pyx":3005
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):
 *                             continue
 */
            __pyx_t_2 = ((__pyx_v_xi_sn < 0) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_xi_sn >= __pyx_v_raster_x_size) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L33_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":3006
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):             # <<<<<<<<<<<<<<
 *                             continue
 *                         flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_sn, yi_sn)
 */
            __pyx_t_2 = ((__pyx_v_yi_sn < 0) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_yi_sn >= __pyx_v_raster_y_size) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L33_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":3005
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):
 *                             continue
 */
            if (__pyx_t_1) {

              /* "src/geoprocessing/routing/routing.pyx":3007
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):
 *                             continue             # <<<<<<<<<<<<<<
 *                         flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_sn, yi_sn)
 *                         if flow_dir_mfd == flow_dir_nodata:
 */
              goto __pyx_L30_continue;

              /* "src/geoprocessing/routing/routing.pyx":3005
 *                         xi_sn = xi_n+D8_XOFFSET[i_sn]
 *                         yi_sn = yi_n+D8_YOFFSET[i_sn]
 *                         if (xi_sn < 0 or xi_sn >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3008
 *                                 yi_sn < 0 or yi_sn >= raster_y_size):
 *                             continue
 *                         flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_sn, yi_sn)             # <<<<<<<<<<<<<<
 *                         if flow_dir_mfd == flow_dir_nodata:
 *                             continue
 */
            __pyx_v_flow_dir_mfd = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_mfd_mr, __pyx_v_xi_sn, __pyx_v_yi_sn));

            /* "src/geoprocessing/routing/routing.pyx":3009
 *                             continue
 *                         flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_sn, yi_sn)
 *                         if flow_dir_mfd == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if ((flow_dir_mfd >>
 */
            __pyx_t_1 = ((__pyx_v_flow_dir_mfd == __pyx_v_flow_dir_nodata) != 0);
            if (__pyx_t_1) {

              /* "src/geoprocessing/routing/routing.pyx":3010
 *                         flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_sn, yi_sn)
 *                         if flow_dir_mfd == flow_dir_nodata:
 *                             continue             # <<<<<<<<<<<<<<
 *                         if ((flow_dir_mfd >>
 *                                 (D8_REVERSE_DIRECTION[i_sn] * 4)) & 0xF) > 0:
 */
              goto __pyx_L30_continue;

              /* "src/geoprocessing/routing/routing.pyx":3009
 *                             continue
 *                         flow_dir_mfd = <int>flow_dir_mfd_mr.get(xi_sn, yi_sn)
 *                         if flow_dir_mfd == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if ((flow_dir_mfd >>
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3012
 *                             continue
 *                         if ((flow_dir_mfd >>
 *                                 (D8_REVERSE_DIRECTION[i_sn] * 4)) & 0xF) > 0:             # <<<<<<<<<<<<<<
 *                             # upstream pixel flows into this one
 *                             stream_val = <int>stream_mr.get(xi_sn, yi_sn)
 */
            __pyx_t_1 = ((((__pyx_v_flow_dir_mfd >> ((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_i_sn]) * 4)) & 0xF) > 0) != 0);

            /* "src/geoprocessing/routing/routing.pyx":3011
 *                         if flow_dir_mfd == flow_dir_nodata:
 *                             continue
 *                         if ((flow_dir_mfd >>             # <<<<<<<<<<<<<<
 *                                 (D8_REVERSE_DIRECTION[i_sn] * 4)) & 0xF) > 0:
 *                             # upstream pixel flows into this one
 */
            if (__pyx_t_1) {

              /* "src/geoprocessing/routing/routing.pyx":3014
 *                                 (D8_REVERSE_DIRECTION[i_sn] * 4)) & 0xF) > 0:
 *                             # upstream pixel flows into this one
 *                             stream_val = <int>stream_mr.get(xi_sn, yi_sn)             # <<<<<<<<<<<<<<
 *                             if stream_val != 1 and stream_val != 2:
 *                                 flow_accum = flow_accum_mr.get(
 */
              __pyx_v_stream_val = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_stream_mr, __pyx_v_xi_sn, __pyx_v_yi_sn));

              /* "src/geoprocessing/routing/routing.pyx":3015
 *                             # upstream pixel flows into this one
 *                             stream_val = <int>stream_mr.get(xi_sn, yi_sn)
 *                             if stream_val != 1 and stream_val != 2:             # <<<<<<<<<<<<<<
 *                                 flow_accum = flow_accum_mr.get(
 *                                     xi_sn, yi_sn)
 */
              switch (__pyx_v_stream_val) {
                case 1:
                case 2:
                __pyx_t_1 = 0;
                break;
                default:
                __pyx_t_1 = 1;
                break;
              }
              if (__pyx_t_1) {

                /* "src/geoprocessing/routing/routing.pyx":3016
 *                             stream_val = <int>stream_mr.get(xi_sn, yi_sn)
 *                             if stream_val != 1 and stream_val != 2:
 *                                 flow_accum = flow_accum_mr.get(             # <<<<<<<<<<<<<<
 *                                     xi_sn, yi_sn)
 *                                 if flow_accum >= flow_threshold:
 */
                __pyx_v_flow_accum = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_mr, __pyx_v_xi_sn, __pyx_v_yi_sn);

                /* "src/geoprocessing/routing/routing.pyx":3018
 *                                 flow_accum = flow_accum_mr.get(
 *                                     xi_sn, yi_sn)
 *                                 if flow_accum >= flow_threshold:             # <<<<<<<<<<<<<<
 *                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                     open_set.push(
 */
                __pyx_t_1 = ((__pyx_v_flow_accum >= __pyx_v_flow_threshold) != 0);
                if (__pyx_t_1) {

                  /* "src/geoprocessing/routing/routing.pyx":3019
 *                                     xi_sn, yi_sn)
 *                                 if flow_accum >= flow_threshold:
 *                                     stream_mr.set(xi_sn, yi_sn, 1)             # <<<<<<<<<<<<<<
 *                                     open_set.push(
 *                                         CoordinateType(xi_sn, yi_sn))
 */
                  __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_stream_mr, __pyx_v_xi_sn, __pyx_v_yi_sn, 1.0);

                  /* "src/geoprocessing/routing/routing.pyx":3021
 *                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                     open_set.push(
 *                                         CoordinateType(xi_sn, yi_sn))             # <<<<<<<<<<<<<<
 *                                     # see if we're in a potential stream and
 *                                     # found a connection
 */
                  __pyx_t_20.xi = __pyx_v_xi_sn;
                  __pyx_t_20.yi = __pyx_v_yi_sn;

                  /* "src/geoprocessing/routing/routing.pyx":3020
 *                                 if flow_accum >= flow_threshold:
 *                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                     open_set.push(             # <<<<<<<<<<<<<<
 *                                         CoordinateType(xi_sn, yi_sn))
 *                                     # see if we're in a potential stream and
 */
                  __pyx_v_open_set.push(__pyx_t_20);

                  /* "src/geoprocessing/routing/routing.pyx":3025
 *                                     # found a connection
 *                                     backtrace_set.push(
 *                                         CoordinateType(xi_sn, yi_sn))             # <<<<<<<<<<<<<<
 *                                     while backtrace_set.size() > 0:
 *                                         xi_bn = backtrace_set.front().xi
 */
                  __pyx_t_20.xi = __pyx_v_xi_sn;
                  __pyx_t_20.yi = __pyx_v_yi_sn;

                  /* "src/geoprocessing/routing/routing.pyx":3024
 *                                     # see if we're in a potential stream and
 *                                     # found a connection
 *                                     backtrace_set.push(             # <<<<<<<<<<<<<<
 *                                         CoordinateType(xi_sn, yi_sn))
 *                                     while backtrace_set.size() > 0:
 */
                  __pyx_v_backtrace_set.push(__pyx_t_20);

                  /* "src/geoprocessing/routing/routing.pyx":3026
 *                                     backtrace_set.push(
 *                                         CoordinateType(xi_sn, yi_sn))
 *                                     while backtrace_set.size() > 0:             # <<<<<<<<<<<<<<
 *                                         xi_bn = backtrace_set.front().xi
 *                                         yi_bn = backtrace_set.front().yi
 */
                  while (1) {
                    __pyx_t_1 = ((__pyx_v_backtrace_set.size() > 0) != 0);
                    if (!__pyx_t_1) break;

                    /* "src/geoprocessing/routing/routing.pyx":3027
 *                                         CoordinateType(xi_sn, yi_sn))
 *                                     while backtrace_set.size() > 0:
 *                                         xi_bn = backtrace_set.front().xi             # <<<<<<<<<<<<<<
 *                                         yi_bn = backtrace_set.front().yi
 *                                         backtrace_set.pop()
 */
                    __pyx_t_21 = __pyx_v_backtrace_set.front().xi;
                    __pyx_v_xi_bn = __pyx_t_21;

                    /* "src/geoprocessing/routing/routing.pyx":3028
 *                                     while backtrace_set.size() > 0:
 *                                         xi_bn = backtrace_set.front().xi
 *                                         yi_bn = backtrace_set.front().yi             # <<<<<<<<<<<<<<
 *                                         backtrace_set.pop()
 *                                         flow_dir_mfd = <int>(
 */
                    __pyx_t_21 = __pyx_v_backtrace_set.front().yi;
                    __pyx_v_yi_bn = __pyx_t_21;

                    /* "src/geoprocessing/routing/routing.pyx":3029
 *                                         xi_bn = backtrace_set.front().xi
 *                                         yi_bn = backtrace_set.front().yi
 *                                         backtrace_set.pop()             # <<<<<<<<<<<<<<
 *                                         flow_dir_mfd = <int>(
 *                                             flow_dir_mfd_mr.get(xi_bn, yi_bn))
 */
                    __pyx_v_backtrace_set.pop();

                    /* "src/geoprocessing/routing/routing.pyx":3030
 *                                         yi_bn = backtrace_set.front().yi
 *                                         backtrace_set.pop()
 *                                         flow_dir_mfd = <int>(             # <<<<<<<<<<<<<<
 *                                             flow_dir_mfd_mr.get(xi_bn, yi_bn))
 *                                         for i_sn in range(8):
 */
                    __pyx_v_flow_dir_mfd = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_mfd_mr, __pyx_v_xi_bn, __pyx_v_yi_bn));

                    /* "src/geoprocessing/routing/routing.pyx":3032
 *                                         flow_dir_mfd = <int>(
 *                                             flow_dir_mfd_mr.get(xi_bn, yi_bn))
 *                                         for i_sn in range(8):             # <<<<<<<<<<<<<<
 *                                             if (flow_dir_mfd >> (i_sn*4)) & 0xF > 0:
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 */
                    for (__pyx_t_21 = 0; __pyx_t_21 < 8; __pyx_t_21+=1) {
                      __pyx_v_i_sn = __pyx_t_21;

                      /* "src/geoprocessing/routing/routing.pyx":3033
 *                                             flow_dir_mfd_mr.get(xi_bn, yi_bn))
 *                                         for i_sn in range(8):
 *                                             if (flow_dir_mfd >> (i_sn*4)) & 0xF > 0:             # <<<<<<<<<<<<<<
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 */
                      __pyx_t_1 = ((((__pyx_v_flow_dir_mfd >> (__pyx_v_i_sn * 4)) & 0xF) > 0) != 0);
                      if (__pyx_t_1) {

                        /* "src/geoprocessing/routing/routing.pyx":3034
 *                                         for i_sn in range(8):
 *                                             if (flow_dir_mfd >> (i_sn*4)) & 0xF > 0:
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]             # <<<<<<<<<<<<<<
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or
 */
                        __pyx_v_xi_sn = (__pyx_v_xi_bn + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_sn]));

                        /* "src/geoprocessing/routing/routing.pyx":3035
 *                                             if (flow_dir_mfd >> (i_sn*4)) & 0xF > 0:
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]             # <<<<<<<<<<<<<<
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 */
                        __pyx_v_yi_sn = (__pyx_v_yi_bn + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_sn]));

                        /* "src/geoprocessing/routing/routing.pyx":3036
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 *                                                     continue
 */
                        __pyx_t_2 = ((__pyx_v_xi_sn < 0) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L47_bool_binop_done;
                        }
                        __pyx_t_2 = ((__pyx_v_xi_sn >= __pyx_v_raster_x_size) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L47_bool_binop_done;
                        }

                        /* "src/geoprocessing/routing/routing.pyx":3037
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):             # <<<<<<<<<<<<<<
 *                                                     continue
 *                                                 if stream_mr.get(xi_sn, yi_sn) == 2:
 */
                        __pyx_t_2 = ((__pyx_v_yi_sn < 0) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L47_bool_binop_done;
                        }
                        __pyx_t_2 = ((__pyx_v_yi_sn >= __pyx_v_raster_y_size) != 0);
                        __pyx_t_1 = __pyx_t_2;
                        __pyx_L47_bool_binop_done:;

                        /* "src/geoprocessing/routing/routing.pyx":3036
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 *                                                     continue
 */
                        if (__pyx_t_1) {

                          /* "src/geoprocessing/routing/routing.pyx":3038
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 *                                                     continue             # <<<<<<<<<<<<<<
 *                                                 if stream_mr.get(xi_sn, yi_sn) == 2:
 *                                                     stream_mr.set(xi_sn, yi_sn, 1)
 */
                          goto __pyx_L43_continue;

                          /* "src/geoprocessing/routing/routing.pyx":3036
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 *                                                 if (xi_sn < 0 or xi_sn >= raster_x_size or             # <<<<<<<<<<<<<<
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 *                                                     continue
 */
                        }

                        /* "src/geoprocessing/routing/routing.pyx":3039
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 *                                                     continue
 *                                                 if stream_mr.get(xi_sn, yi_sn) == 2:             # <<<<<<<<<<<<<<
 *                                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                                     backtrace_set.push(
 */
                        __pyx_t_1 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_stream_mr, __pyx_v_xi_sn, __pyx_v_yi_sn) == 2.0) != 0);
                        if (__pyx_t_1) {

                          /* "src/geoprocessing/routing/routing.pyx":3040
 *                                                     continue
 *                                                 if stream_mr.get(xi_sn, yi_sn) == 2:
 *                                                     stream_mr.set(xi_sn, yi_sn, 1)             # <<<<<<<<<<<<<<
 *                                                     backtrace_set.push(
 *                                                         CoordinateType(xi_sn, yi_sn))
 */
                          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_stream_mr, __pyx_v_xi_sn, __pyx_v_yi_sn, 1.0);

                          /* "src/geoprocessing/routing/routing.pyx":3042
 *                                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                                     backtrace_set.push(
 *                                                         CoordinateType(xi_sn, yi_sn))             # <<<<<<<<<<<<<<
 *                                 elif flow_accum >= trace_flow_threshold:
 *                                     stream_mr.set(xi_sn, yi_sn, 2)
 */
                          __pyx_t_20.xi = __pyx_v_xi_sn;
                          __pyx_t_20.yi = __pyx_v_yi_sn;

                          /* "src/geoprocessing/routing/routing.pyx":3041
 *                                                 if stream_mr.get(xi_sn, yi_sn) == 2:
 *                                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                                     backtrace_set.push(             # <<<<<<<<<<<<<<
 *                                                         CoordinateType(xi_sn, yi_sn))
 *                                 elif flow_accum >= trace_flow_threshold:
 */
                          __pyx_v_backtrace_set.push(__pyx_t_20);

                          /* "src/geoprocessing/routing/routing.pyx":3039
 *                                                         yi_sn < 0 or yi_sn >= raster_y_size):
 *                                                     continue
 *                                                 if stream_mr.get(xi_sn, yi_sn) == 2:             # <<<<<<<<<<<<<<
 *                                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                                     backtrace_set.push(
 */
                        }

                        /* "src/geoprocessing/routing/routing.pyx":3033
 *                                             flow_dir_mfd_mr.get(xi_bn, yi_bn))
 *                                         for i_sn in range(8):
 *                                             if (flow_dir_mfd >> (i_sn*4)) & 0xF > 0:             # <<<<<<<<<<<<<<
 *                                                 xi_sn = xi_bn+D8_XOFFSET[i_sn]
 *                                                 yi_sn = yi_bn+D8_YOFFSET[i_sn]
 */
                      }
                      __pyx_L43_continue:;
                    }
                  }

                  /* "src/geoprocessing/routing/routing.pyx":3018
 *                                 flow_accum = flow_accum_mr.get(
 *                                     xi_sn, yi_sn)
 *                                 if flow_accum >= flow_threshold:             # <<<<<<<<<<<<<<
 *                                     stream_mr.set(xi_sn, yi_sn, 1)
 *                                     open_set.push(
 */
                  goto __pyx_L40;
                }

                /* "src/geoprocessing/routing/routing.pyx":3043
 *                                                     backtrace_set.push(
 *                                                         CoordinateType(xi_sn, yi_sn))
 *                                 elif flow_accum >= trace_flow_threshold:             # <<<<<<<<<<<<<<
 *                                     stream_mr.set(xi_sn, yi_sn, 2)
 *                                     open_set.push(
 */
                __pyx_t_1 = ((__pyx_v_flow_accum >= __pyx_v_trace_flow_threshold) != 0);
                if (__pyx_t_1) {

                  /* "src/geoprocessing/routing/routing.pyx":3044
 *                                                         CoordinateType(xi_sn, yi_sn))
 *                                 elif flow_accum >= trace_flow_threshold:
 *                                     stream_mr.set(xi_sn, yi_sn, 2)             # <<<<<<<<<<<<<<
 *                                     open_set.push(
 *                                         CoordinateType(xi_sn, yi_sn))
 */
                  __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_stream_mr, __pyx_v_xi_sn, __pyx_v_yi_sn, 2.0);

                  /* "src/geoprocessing/routing/routing.pyx":3046
 *                                     stream_mr.set(xi_sn, yi_sn, 2)
 *                                     open_set.push(
 *                                         CoordinateType(xi_sn, yi_sn))             # <<<<<<<<<<<<<<
 * 
 *     stream_mr.close()
 */
                  __pyx_t_20.xi = __pyx_v_xi_sn;
                  __pyx_t_20.yi = __pyx_v_yi_sn;

                  /* "src/geoprocessing/routing/routing.pyx":3045
 *                                 elif flow_accum >= trace_flow_threshold:
 *                                     stream_mr.set(xi_sn, yi_sn, 2)
 *                                     open_set.push(             # <<<<<<<<<<<<<<
 *                                         CoordinateType(xi_sn, yi_sn))
 * 
 */
                  __pyx_v_open_set.push(__pyx_t_20);

                  /* "src/geoprocessing/routing/routing.pyx":3043
 *                                                     backtrace_set.push(
 *                                                         CoordinateType(xi_sn, yi_sn))
 *                                 elif flow_accum >= trace_flow_threshold:             # <<<<<<<<<<<<<<
 *                                     stream_mr.set(xi_sn, yi_sn, 2)
 *                                     open_set.push(
 */
                }
                __pyx_L40:;

                /* "src/geoprocessing/routing/routing.pyx":3015
 *                             # upstream pixel flows into this one
 *                             stream_val = <int>stream_mr.get(xi_sn, yi_sn)
 *                             if stream_val != 1 and stream_val != 2:             # <<<<<<<<<<<<<<
 *                                 flow_accum = flow_accum_mr.get(
 *                                     xi_sn, yi_sn)
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":3011
 *                         if flow_dir_mfd == flow_dir_nodata:
 *                             continue
 *                         if ((flow_dir_mfd >>             # <<<<<<<<<<<<<<
 *                                 (D8_REVERSE_DIRECTION[i_sn] * 4)) & 0xF) > 0:
 *                             # upstream pixel flows into this one
 */
            }
            __pyx_L30_continue:;
          }
        }
        __pyx_L13_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":2952
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_stream_raster_path, 1), offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3048
 *                                         CoordinateType(xi_sn, yi_sn))
 * 
 *     stream_mr.close()             # <<<<<<<<<<<<<<
 *     LOGGER.info('filter out incomplete divergent streams')
 *     block_offsets_list = list(pygeoprocessing.iterblocks(
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_stream_mr), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_11 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3049
 * 
 *     stream_mr.close()
 *     LOGGER.info('filter out incomplete divergent streams')             # <<<<<<<<<<<<<<
 *     block_offsets_list = list(pygeoprocessing.iterblocks(
 *         (target_stream_raster_path, 1), offset_only=True))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_11 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_kp_u_filter_out_incomplete_divergent) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_filter_out_incomplete_divergent);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3050
 *     stream_mr.close()
 *     LOGGER.info('filter out incomplete divergent streams')
 *     block_offsets_list = list(pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *         (target_stream_raster_path, 1), offset_only=True))
 *     stream_raster = gdal.OpenEx(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3051
 *     LOGGER.info('filter out incomplete divergent streams')
 *     block_offsets_list = list(pygeoprocessing.iterblocks(
 *         (target_stream_raster_path, 1), offset_only=True))             # <<<<<<<<<<<<<<
 *     stream_raster = gdal.OpenEx(
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 */
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_v_target_stream_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_stream_raster_path);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_target_stream_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_int_1);

  /* "src/geoprocessing/routing/routing.pyx":3050
 *     stream_mr.close()
 *     LOGGER.info('filter out incomplete divergent streams')
 *     block_offsets_list = list(pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *         (target_stream_raster_path, 1), offset_only=True))
 *     stream_raster = gdal.OpenEx(
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_11);
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3051
 *     LOGGER.info('filter out incomplete divergent streams')
 *     block_offsets_list = list(pygeoprocessing.iterblocks(
 *         (target_stream_raster_path, 1), offset_only=True))             # <<<<<<<<<<<<<<
 *     stream_raster = gdal.OpenEx(
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 */
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 3051, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3050
 *     stream_mr.close()
 *     LOGGER.info('filter out incomplete divergent streams')
 *     block_offsets_list = list(pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *         (target_stream_raster_path, 1), offset_only=True))
 *     stream_raster = gdal.OpenEx(
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_offsets_list = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3052
 *     block_offsets_list = list(pygeoprocessing.iterblocks(
 *         (target_stream_raster_path, 1), offset_only=True))
 *     stream_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     stream_band = stream_raster.GetRasterBand(1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3053
 *         (target_stream_raster_path, 1), offset_only=True))
 *     stream_raster = gdal.OpenEx(
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)             # <<<<<<<<<<<<<<
 *     stream_band = stream_raster.GetRasterBand(1)
 *     for block_offsets in block_offsets_list:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 3053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Or(__pyx_t_6, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_target_stream_raster_path, __pyx_t_4};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3052, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_target_stream_raster_path, __pyx_t_4};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3052, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_15) {
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_15); __pyx_t_15 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target_stream_raster_path);
    __Pyx_GIVEREF(__pyx_v_target_stream_raster_path);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_10, __pyx_v_target_stream_raster_path);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stream_raster = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3054
 *     stream_raster = gdal.OpenEx(
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     stream_band = stream_raster.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *     for block_offsets in block_offsets_list:
 *         stream_array = stream_band.ReadAsArray(**block_offsets)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_11 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_1);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stream_band = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3055
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     stream_band = stream_raster.GetRasterBand(1)
 *     for block_offsets in block_offsets_list:             # <<<<<<<<<<<<<<
 *         stream_array = stream_band.ReadAsArray(**block_offsets)
 *         stream_array[stream_array == 2] = 0
 */
  __pyx_t_11 = __pyx_v_block_offsets_list; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
  for (;;) {
    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 3055, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_block_offsets, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3056
 *     stream_band = stream_raster.GetRasterBand(1)
 *     for block_offsets in block_offsets_list:
 *         stream_array = stream_band.ReadAsArray(**block_offsets)             # <<<<<<<<<<<<<<
 *         stream_array[stream_array == 2] = 0
 *         stream_band.WriteArray(
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_block_offsets == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 3056, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_v_block_offsets))) {
      __pyx_t_6 = PyDict_Copy(__pyx_v_block_offsets); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3056, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      __pyx_t_6 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_block_offsets, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3056, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_stream_array, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3057
 *     for block_offsets in block_offsets_list:
 *         stream_array = stream_band.ReadAsArray(**block_offsets)
 *         stream_array[stream_array == 2] = 0             # <<<<<<<<<<<<<<
 *         stream_band.WriteArray(
 *             stream_array, xoff=block_offsets['xoff'],
 */
    __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_stream_array, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyObject_SetItem(__pyx_v_stream_array, __pyx_t_4, __pyx_int_0) < 0)) __PYX_ERR(0, 3057, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3058
 *         stream_array = stream_band.ReadAsArray(**block_offsets)
 *         stream_array[stream_array == 2] = 0
 *         stream_band.WriteArray(             # <<<<<<<<<<<<<<
 *             stream_array, xoff=block_offsets['xoff'],
 *             yoff=block_offsets['yoff'])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "src/geoprocessing/routing/routing.pyx":3059
 *         stream_array[stream_array == 2] = 0
 *         stream_band.WriteArray(
 *             stream_array, xoff=block_offsets['xoff'],             # <<<<<<<<<<<<<<
 *             yoff=block_offsets['yoff'])
 *     stream_band = None
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_stream_array);
    __Pyx_GIVEREF(__pyx_v_stream_array);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_stream_array);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_xoff); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 3059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_xoff, __pyx_t_15) < 0) __PYX_ERR(0, 3059, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3060
 *         stream_band.WriteArray(
 *             stream_array, xoff=block_offsets['xoff'],
 *             yoff=block_offsets['yoff'])             # <<<<<<<<<<<<<<
 *     stream_band = None
 *     stream_raster = None
 */
    __pyx_t_15 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_yoff); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 3060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_yoff, __pyx_t_15) < 0) __PYX_ERR(0, 3059, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3058
 *         stream_array = stream_band.ReadAsArray(**block_offsets)
 *         stream_array[stream_array == 2] = 0
 *         stream_band.WriteArray(             # <<<<<<<<<<<<<<
 *             stream_array, xoff=block_offsets['xoff'],
 *             yoff=block_offsets['yoff'])
 */
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 3058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3055
 *         target_stream_raster_path, gdal.OF_RASTER | gdal.GA_Update)
 *     stream_band = stream_raster.GetRasterBand(1)
 *     for block_offsets in block_offsets_list:             # <<<<<<<<<<<<<<
 *         stream_array = stream_band.ReadAsArray(**block_offsets)
 *         stream_array[stream_array == 2] = 0
 */
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3061
 *             stream_array, xoff=block_offsets['xoff'],
 *             yoff=block_offsets['yoff'])
 *     stream_band = None             # <<<<<<<<<<<<<<
 *     stream_raster = None
 *     LOGGER.info('100.0% complete')
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_stream_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":3062
 *             yoff=block_offsets['yoff'])
 *     stream_band = None
 *     stream_raster = None             # <<<<<<<<<<<<<<
 *     LOGGER.info('100.0% complete')
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_stream_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":3063
 *     stream_band = None
 *     stream_raster = None
 *     LOGGER.info('100.0% complete')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 3063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_11 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_15, __pyx_kp_u_100_0_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_100_0_complete);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 3063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2866
 * 
 * 
 * def extract_streams_mfd(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band, flow_dir_mfd_path_band,
 *         double flow_threshold, target_stream_raster_path,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.extract_streams_mfd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_flow_accum_info);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_accum_mr);
  __Pyx_XDECREF((PyObject *)__pyx_v_stream_mr);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_mfd_mr);
  __Pyx_XDECREF(__pyx_v_block_offsets);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_block_offsets_list);
  __Pyx_XDECREF(__pyx_v_stream_raster);
  __Pyx_XDECREF(__pyx_v_stream_band);
  __Pyx_XDECREF(__pyx_v_stream_array);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":3066
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_19_is_raster_path_band_formatted(PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_18_is_raster_path_band_formatted[] = "Return true if raster path band is a (str, int) tuple/list.";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_19_is_raster_path_band_formatted = {"_is_raster_path_band_formatted", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_19_is_raster_path_band_formatted, METH_O, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_18_is_raster_path_band_formatted};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_19_is_raster_path_band_formatted(PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_raster_path_band_formatted (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_18_is_raster_path_band_formatted(__pyx_self, ((PyObject *)__pyx_v_raster_path_band));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_18_is_raster_path_band_formatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_raster_path_band_formatted", 0);

  /* "src/geoprocessing/routing/routing.pyx":3068
 * def _is_raster_path_band_formatted(raster_path_band):
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):             # <<<<<<<<<<<<<<
 *         return False
 *     elif len(raster_path_band) != 2:
 */
  __pyx_t_2 = PyList_Check(__pyx_v_raster_path_band); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_Check(__pyx_v_raster_path_band); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":3069
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 *         return False             # <<<<<<<<<<<<<<
 *     elif len(raster_path_band) != 2:
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":3068
 * def _is_raster_path_band_formatted(raster_path_band):
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):             # <<<<<<<<<<<<<<
 *         return False
 *     elif len(raster_path_band) != 2:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":3070
 *     if not isinstance(raster_path_band, (list, tuple)):
 *         return False
 *     elif len(raster_path_band) != 2:             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_raster_path_band); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3070, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_4 != 2) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":3071
 *         return False
 *     elif len(raster_path_band) != 2:
 *         return False             # <<<<<<<<<<<<<<
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":3070
 *     if not isinstance(raster_path_band, (list, tuple)):
 *         return False
 *     elif len(raster_path_band) != 2:             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":3072
 *     elif len(raster_path_band) != 2:
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[1], int):
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyBaseString_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":3073
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False             # <<<<<<<<<<<<<<
 *     elif not isinstance(raster_path_band[1], int):
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":3072
 *     elif len(raster_path_band) != 2:
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[1], int):
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":3074
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False
 *     elif not isinstance(raster_path_band[1], int):             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyInt_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/routing.pyx":3075
 *         return False
 *     elif not isinstance(raster_path_band[1], int):
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":3074
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False
 *     elif not isinstance(raster_path_band[1], int):             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":3077
 *         return False
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }

  /* "src/geoprocessing/routing/routing.pyx":3066
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._is_raster_path_band_formatted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":3080
 * 
 * 
 * def extract_strahler_streams_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, flow_accum_raster_path_band,
 *         dem_raster_path_band,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_21extract_strahler_streams_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_20extract_strahler_streams_d8[] = "Extract Strahler order stream geometry from flow accumulation.\n\n    Creates a Strahler ordered stream vector containing line segments\n    representing each separate stream fragment. The final vector contains\n    at least the fields:\n\n        * \"order\" (int): an integer representing the stream order\n        * \"river_id\" (int): unique ID used by all stream segments that\n            connect to the same outlet.\n        * \"drop_distance\" (float): this is the drop distance in DEM units\n            from the upstream to downstream component of this stream\n            segment.\n        * \"outlet\" (int): 1 if this segment is an outlet, 0 if not.\n        * \"river_id\": unique ID among all stream segments which are\n            hydrologically connected.\n        * \"us_fa\" (int): flow accumulation value at the upstream end of\n            the stream segment.\n        * \"ds_fa\" (int): flow accumulation value at the downstream end of\n            the stream segment\n        * \"thresh_fa\" (int): the final threshold flow accumulation value\n            used to determine the river segments.\n        * \"upstream_d8_dir\" (int): a bookkeeping parameter from stream\n            calculations that is left in due to the overhead\n            of deleting a field.\n        * \"ds_x\" (int): the raster x coordinate for the outlet.\n        * \"ds_y\" (int): the raster y coordinate for the outlet.\n        * \"ds_x_1\" (int): the x raster space coordinate that is 1 pixel\n            upstream from the outlet.\n        * \"ds_y_1\" (int): the y raster space coordinate that is 1 pixel\n            upstream from the outlet.\n        * \"us_x\" (int): the raster x coordinate for the upstream inlet.\n        * \"us_y\" (int): the raster y coordinate for the upstream inlet.\n\n    Args:\n        flow_dir_d8_raster_path_band (tuple): a path/band representing the D8\n            flow direction raster.\n        flow_accum_raster_path_band (tuple): a path/band representing th""e D8\n            flow accumulation raster represented by\n            ``flow_dir_d8_raster_path_band``.\n        dem_raster_path_band (tuple): a path/band representing the DEM used to\n            derive flow dir.\n        target_stream_vector_path (tuple): a single layer line vector created\n            by this function representing the stream segments extracted from\n            the above arguments. Contains the fields \"order\" and \"parent\" as\n            described above.\n        min_flow_accum_threshold (int): minimum number of upstream pixels\n            required to create a stream. If ``autotune_flow_accumulation``\n            is True, then the final value may be adjusted based on\n            significant differences in 1st and 2nd order streams.\n        river_order (int): what stream order to define as a river in terms of\n            automatically determining flow accumulation threshold for that\n            stream collection.\n        min_p_val (float): minimum p_value test for significance\n        autotune_flow_accumulation (bool): If true, uses a t-test to test for\n            significant distances in order 1 and order 2 streams. If it is\n            significant the flow accumulation parameter is adjusted upwards\n            until the drop distances are insignificant.\n        osr_axis_mapping_strategy (int): OSR axis mapping strategy for\n            ``SpatialReference`` objects. Defaults to\n            ``geoprocessing.DEFAULT_OSR_AXIS_MAPPING_STRATEGY``. This parameter\n            should not be changed unless you know what you are doing.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_21extract_strahler_streams_d8 = {"extract_strahler_streams_d8", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_21extract_strahler_streams_d8, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_20extract_strahler_streams_d8};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_21extract_strahler_streams_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_d8_raster_path_band = 0;
  PyObject *__pyx_v_flow_accum_raster_path_band = 0;
  PyObject *__pyx_v_dem_raster_path_band = 0;
  PyObject *__pyx_v_target_stream_vector_path = 0;
  long __pyx_v_min_flow_accum_threshold;
  int __pyx_v_river_order;
  float __pyx_v_min_p_val;
  PyObject *__pyx_v_autotune_flow_accumulation = 0;
  PyObject *__pyx_v_osr_axis_mapping_strategy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_strahler_streams_d8 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_d8_raster_path_band,&__pyx_n_s_flow_accum_raster_path_band,&__pyx_n_s_dem_raster_path_band,&__pyx_n_s_target_stream_vector_path,&__pyx_n_s_min_flow_accum_threshold,&__pyx_n_s_river_order,&__pyx_n_s_min_p_val,&__pyx_n_s_autotune_flow_accumulation,&__pyx_n_s_osr_axis_mapping_strategy,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "src/geoprocessing/routing/routing.pyx":3087
 *         int river_order=5,
 *         float min_p_val=0.05,
 *         autotune_flow_accumulation=False,             # <<<<<<<<<<<<<<
 *         osr_axis_mapping_strategy=DEFAULT_OSR_AXIS_MAPPING_STRATEGY):
 *     """Extract Strahler order stream geometry from flow accumulation.
 */
    values[7] = ((PyObject *)Py_False);
    values[8] = __pyx_k__14;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_d8_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_accum_raster_path_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_strahler_streams_d8", 0, 4, 9, 1); __PYX_ERR(0, 3080, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dem_raster_path_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_strahler_streams_d8", 0, 4, 9, 2); __PYX_ERR(0, 3080, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_stream_vector_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_strahler_streams_d8", 0, 4, 9, 3); __PYX_ERR(0, 3080, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_flow_accum_threshold);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_river_order);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_p_val);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_autotune_flow_accumulation);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_osr_axis_mapping_strategy);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extract_strahler_streams_d8") < 0)) __PYX_ERR(0, 3080, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_flow_dir_d8_raster_path_band = values[0];
    __pyx_v_flow_accum_raster_path_band = values[1];
    __pyx_v_dem_raster_path_band = values[2];
    __pyx_v_target_stream_vector_path = values[3];
    if (values[4]) {
      __pyx_v_min_flow_accum_threshold = __Pyx_PyInt_As_long(values[4]); if (unlikely((__pyx_v_min_flow_accum_threshold == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 3084, __pyx_L3_error)
    } else {
      __pyx_v_min_flow_accum_threshold = ((long)0x64);
    }
    if (values[5]) {
      __pyx_v_river_order = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_river_order == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3085, __pyx_L3_error)
    } else {
      __pyx_v_river_order = ((int)5);
    }
    if (values[6]) {
      __pyx_v_min_p_val = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_min_p_val == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3086, __pyx_L3_error)
    } else {
      __pyx_v_min_p_val = ((float)0.05);
    }
    __pyx_v_autotune_flow_accumulation = values[7];
    __pyx_v_osr_axis_mapping_strategy = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_strahler_streams_d8", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3080, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.extract_strahler_streams_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_20extract_strahler_streams_d8(__pyx_self, __pyx_v_flow_dir_d8_raster_path_band, __pyx_v_flow_accum_raster_path_band, __pyx_v_dem_raster_path_band, __pyx_v_target_stream_vector_path, __pyx_v_min_flow_accum_threshold, __pyx_v_river_order, __pyx_v_min_p_val, __pyx_v_autotune_flow_accumulation, __pyx_v_osr_axis_mapping_strategy);

  /* "src/geoprocessing/routing/routing.pyx":3080
 * 
 * 
 * def extract_strahler_streams_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, flow_accum_raster_path_band,
 *         dem_raster_path_band,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_20extract_strahler_streams_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_d8_raster_path_band, PyObject *__pyx_v_flow_accum_raster_path_band, PyObject *__pyx_v_dem_raster_path_band, PyObject *__pyx_v_target_stream_vector_path, long __pyx_v_min_flow_accum_threshold, int __pyx_v_river_order, float __pyx_v_min_p_val, PyObject *__pyx_v_autotune_flow_accumulation, PyObject *__pyx_v_osr_axis_mapping_strategy) {
  PyObject *__pyx_v_flow_dir_info = NULL;
  PyObject *__pyx_v_flow_dir_srs = NULL;
  PyObject *__pyx_v_gpkg_driver = NULL;
  PyObject *__pyx_v_stream_vector = NULL;
  PyObject *__pyx_v_stream_basename = NULL;
  PyObject *__pyx_v_stream_layer = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_accum_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_dem_managed_raster = NULL;
  int __pyx_v_flow_nodata;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_d;
  int __pyx_v_d_n;
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  long __pyx_v_n_pixels;
  long __pyx_v_n_processed;
  time_t __pyx_v_last_log_time;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_StreamConnectivityPoint>  __pyx_v_source_point_stack;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_StreamConnectivityPoint __pyx_v_source_stream_point;
  int __pyx_v_x_l;
  int __pyx_v_y_l;
  int __pyx_v_x_n;
  int __pyx_v_y_n;
  int __pyx_v_upstream_count;
  int __pyx_v_upstream_index;
  int *__pyx_v_upstream_dirs;
  long __pyx_v_local_flow_accum;
  int __pyx_v_is_drain;
  PyObject *__pyx_v_coord_to_stream_ids = NULL;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_stream_feature = NULL;
  PyObject *__pyx_v_stream_fid = NULL;
  PyObject *__pyx_v_n_points = NULL;
  PyObject *__pyx_v_downstream_to_upstream_ids = NULL;
  PyObject *__pyx_v_upstream_to_downstream_id = NULL;
  PyObject *__pyx_v_payload = NULL;
  PyObject *__pyx_v_x_u = NULL;
  PyObject *__pyx_v_y_u = NULL;
  PyObject *__pyx_v_ds_x_1 = NULL;
  PyObject *__pyx_v_ds_y_1 = NULL;
  PyObject *__pyx_v_upstream_id_list = NULL;
  PyObject *__pyx_v_stream_line = NULL;
  double __pyx_v_downstream_dem;
  PyObject *__pyx_v_upstream_id = NULL;
  double __pyx_v_upstream_dem;
  double __pyx_v_drop_distance;
  PyObject *__pyx_v_streams_to_process = NULL;
  PyObject *__pyx_v_base_feature_count = NULL;
  PyObject *__pyx_v_outlet_fid_list = NULL;
  PyObject *__pyx_v_downstream_fid = NULL;
  PyObject *__pyx_v_downstream_feature = NULL;
  PyObject *__pyx_v_connected_upstream_fids = NULL;
  PyObject *__pyx_v_stream_order_list = NULL;
  int __pyx_v_all_defined;
  PyObject *__pyx_v_upstream_fid = NULL;
  PyObject *__pyx_v_upstream_feature = NULL;
  PyObject *__pyx_v_upstream_order = NULL;
  PyObject *__pyx_v_sorted_stream_order_list = NULL;
  PyObject *__pyx_v_downstream_order = NULL;
  PyObject *__pyx_v_working_river_id = NULL;
  PyObject *__pyx_v_outlet_index = NULL;
  PyObject *__pyx_v_outlet_fid = NULL;
  PyObject *__pyx_v_search_stack = NULL;
  PyObject *__pyx_v_feature_id = NULL;
  PyObject *__pyx_v_stream_order = NULL;
  PyObject *__pyx_v_upstream_stack = NULL;
  PyObject *__pyx_v_streams_by_order = NULL;
  PyObject *__pyx_v_drop_distance_collection = NULL;
  PyObject *__pyx_v_max_upstream_flow_accum = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_v_working_flow_accum_threshold = NULL;
  PyObject *__pyx_v_test_order = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_p_val = NULL;
  PyObject *__pyx_v_streams_to_retest = NULL;
  PyObject *__pyx_v_ds_x = NULL;
  PyObject *__pyx_v_ds_y = NULL;
  PyObject *__pyx_v_upstream_d8_dir = NULL;
  PyObject *__pyx_v_working_stack = NULL;
  PyObject *__pyx_v_fid_to_order = NULL;
  PyObject *__pyx_v_processed_segments = NULL;
  Py_ssize_t __pyx_v_segments_to_process;
  PyObject *__pyx_v_deleted_set = NULL;
  PyObject *__pyx_v_working_fid = NULL;
  PyObject *__pyx_v_upstream_fid_list = NULL;
  PyObject *__pyx_v_order_count = NULL;
  PyObject *__pyx_v_working_order = NULL;
  PyObject *__pyx_v_working_feature = NULL;
  PyObject *__pyx_v_connected_fids = NULL;
  PyObject *__pyx_v_downstream_geom = NULL;
  PyObject *__pyx_v_working_geom = NULL;
  PyObject *__pyx_v_multi_line = NULL;
  PyObject *__pyx_v_joined_line = NULL;
  int __pyx_v_upstream_all_defined;
  PyObject *__pyx_v_connected_fid = NULL;
  PyObject *__pyx_7genexpr__pyx_v_stream_feature = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_fid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12[8];
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  Py_UCS4 __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_StreamConnectivityPoint __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  int __pyx_t_29;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_strahler_streams_d8", 0);

  /* "src/geoprocessing/routing/routing.pyx":3154
 *         None.
 *     """
 *     flow_dir_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0])
 *     if flow_dir_info['projection_wkt']:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3155
 *     """
 *     flow_dir_info = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     if flow_dir_info['projection_wkt']:
 *         flow_dir_srs = osr.SpatialReference()
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3156
 *     flow_dir_info = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])
 *     if flow_dir_info['projection_wkt']:             # <<<<<<<<<<<<<<
 *         flow_dir_srs = osr.SpatialReference()
 *         flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 3156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":3157
 *         flow_dir_d8_raster_path_band[0])
 *     if flow_dir_info['projection_wkt']:
 *         flow_dir_srs = osr.SpatialReference()             # <<<<<<<<<<<<<<
 *         flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *         flow_dir_srs.SetAxisMappingStrategy(osr_axis_mapping_strategy)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_osr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SpatialReference); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_flow_dir_srs = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3158
 *     if flow_dir_info['projection_wkt']:
 *         flow_dir_srs = osr.SpatialReference()
 *         flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])             # <<<<<<<<<<<<<<
 *         flow_dir_srs.SetAxisMappingStrategy(osr_axis_mapping_strategy)
 *     else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_srs, __pyx_n_s_ImportFromWkt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3159
 *         flow_dir_srs = osr.SpatialReference()
 *         flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *         flow_dir_srs.SetAxisMappingStrategy(osr_axis_mapping_strategy)             # <<<<<<<<<<<<<<
 *     else:
 *         flow_dir_srs = None
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_srs, __pyx_n_s_SetAxisMappingStrategy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_osr_axis_mapping_strategy) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_osr_axis_mapping_strategy);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3156
 *     flow_dir_info = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])
 *     if flow_dir_info['projection_wkt']:             # <<<<<<<<<<<<<<
 *         flow_dir_srs = osr.SpatialReference()
 *         flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 */
    goto __pyx_L3;
  }

  /* "src/geoprocessing/routing/routing.pyx":3161
 *         flow_dir_srs.SetAxisMappingStrategy(osr_axis_mapping_strategy)
 *     else:
 *         flow_dir_srs = None             # <<<<<<<<<<<<<<
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_flow_dir_srs = Py_None;
  }
  __pyx_L3:;

  /* "src/geoprocessing/routing/routing.pyx":3162
 *     else:
 *         flow_dir_srs = None
 *     gpkg_driver = gdal.GetDriverByName('GPKG')             # <<<<<<<<<<<<<<
 * 
 *     stream_vector = gpkg_driver.Create(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_u_GPKG) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_GPKG);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_gpkg_driver = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3164
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 *     stream_vector = gpkg_driver.Create(             # <<<<<<<<<<<<<<
 *         target_stream_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     stream_basename = os.path.basename(
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_gpkg_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":3165
 * 
 *     stream_vector = gpkg_driver.Create(
 *         target_stream_vector_path, 0, 0, 0, gdal.GDT_Unknown)             # <<<<<<<<<<<<<<
 *     stream_basename = os.path.basename(
 *         os.path.splitext(target_stream_vector_path)[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Unknown); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_2, __pyx_v_target_stream_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3164, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_2, __pyx_v_target_stream_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3164, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target_stream_vector_path);
    __Pyx_GIVEREF(__pyx_v_target_stream_vector_path);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_target_stream_vector_path);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stream_vector = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3166
 *     stream_vector = gpkg_driver.Create(
 *         target_stream_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     stream_basename = os.path.basename(             # <<<<<<<<<<<<<<
 *         os.path.splitext(target_stream_vector_path)[0])
 *     stream_layer = stream_vector.CreateLayer(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_basename); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3167
 *         target_stream_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     stream_basename = os.path.basename(
 *         os.path.splitext(target_stream_vector_path)[0])             # <<<<<<<<<<<<<<
 *     stream_layer = stream_vector.CreateLayer(
 *         stream_basename, flow_dir_srs, ogr.wkbLineString)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_splitext); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_target_stream_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_target_stream_vector_path);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stream_basename = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3168
 *     stream_basename = os.path.basename(
 *         os.path.splitext(target_stream_vector_path)[0])
 *     stream_layer = stream_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *         stream_basename, flow_dir_srs, ogr.wkbLineString)
 *     stream_layer.CreateField(ogr.FieldDefn('order', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":3169
 *         os.path.splitext(target_stream_vector_path)[0])
 *     stream_layer = stream_vector.CreateLayer(
 *         stream_basename, flow_dir_srs, ogr.wkbLineString)             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('order', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('drop_distance', ogr.OFTReal))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_wkbLineString); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_stream_basename, __pyx_v_flow_dir_srs, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3168, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_stream_basename, __pyx_v_flow_dir_srs, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3168, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_stream_basename);
    __Pyx_GIVEREF(__pyx_v_stream_basename);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_stream_basename);
    __Pyx_INCREF(__pyx_v_flow_dir_srs);
    __Pyx_GIVEREF(__pyx_v_flow_dir_srs);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_v_flow_dir_srs);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stream_layer = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3170
 *     stream_layer = stream_vector.CreateLayer(
 *         stream_basename, flow_dir_srs, ogr.wkbLineString)
 *     stream_layer.CreateField(ogr.FieldDefn('order', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('drop_distance', ogr.OFTReal))
 *     stream_layer.CreateField(ogr.FieldDefn('outlet', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_order, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3170, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_order, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3170, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_order);
    __Pyx_GIVEREF(__pyx_n_u_order);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_n_u_order);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3171
 *         stream_basename, flow_dir_srs, ogr.wkbLineString)
 *     stream_layer.CreateField(ogr.FieldDefn('order', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('drop_distance', ogr.OFTReal))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('outlet', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('river_id', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OFTReal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_drop_distance, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_drop_distance, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_drop_distance);
    __Pyx_GIVEREF(__pyx_n_u_drop_distance);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_drop_distance);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3172
 *     stream_layer.CreateField(ogr.FieldDefn('order', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('drop_distance', ogr.OFTReal))
 *     stream_layer.CreateField(ogr.FieldDefn('outlet', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('river_id', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_fa', ogr.OFTInteger64))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_outlet, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3172, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_outlet, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3172, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_outlet);
    __Pyx_GIVEREF(__pyx_n_u_outlet);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_n_u_outlet);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3173
 *     stream_layer.CreateField(ogr.FieldDefn('drop_distance', ogr.OFTReal))
 *     stream_layer.CreateField(ogr.FieldDefn('outlet', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('river_id', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('us_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_fa', ogr.OFTInteger64))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_river_id, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3173, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_river_id, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3173, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_river_id);
    __Pyx_GIVEREF(__pyx_n_u_river_id);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_n_u_river_id);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3174
 *     stream_layer.CreateField(ogr.FieldDefn('outlet', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('river_id', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_fa', ogr.OFTInteger64))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('ds_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('thresh_fa', ogr.OFTInteger64))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OFTInteger64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_us_fa, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3174, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_us_fa, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3174, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_us_fa);
    __Pyx_GIVEREF(__pyx_n_u_us_fa);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_us_fa);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3175
 *     stream_layer.CreateField(ogr.FieldDefn('river_id', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_fa', ogr.OFTInteger64))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('thresh_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('upstream_d8_dir', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_OFTInteger64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_fa, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3175, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_fa, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3175, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ds_fa);
    __Pyx_GIVEREF(__pyx_n_u_ds_fa);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_n_u_ds_fa);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3176
 *     stream_layer.CreateField(ogr.FieldDefn('us_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('thresh_fa', ogr.OFTInteger64))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('upstream_d8_dir', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OFTInteger64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_thresh_fa, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3176, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_thresh_fa, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3176, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_thresh_fa);
    __Pyx_GIVEREF(__pyx_n_u_thresh_fa);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_n_u_thresh_fa);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3177
 *     stream_layer.CreateField(ogr.FieldDefn('ds_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('thresh_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('upstream_d8_dir', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_upstream_d8_dir, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_upstream_d8_dir, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_upstream_d8_dir);
    __Pyx_GIVEREF(__pyx_n_u_upstream_d8_dir);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_upstream_d8_dir);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3178
 *     stream_layer.CreateField(ogr.FieldDefn('thresh_fa', ogr.OFTInteger64))
 *     stream_layer.CreateField(ogr.FieldDefn('upstream_d8_dir', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x_1', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_x, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_x, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ds_x);
    __Pyx_GIVEREF(__pyx_n_u_ds_x);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_n_u_ds_x);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3179
 *     stream_layer.CreateField(ogr.FieldDefn('upstream_d8_dir', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x_1', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y_1', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_ds_y, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_ds_y, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ds_y);
    __Pyx_GIVEREF(__pyx_n_u_ds_y);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_n_u_ds_y);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3180
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x_1', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y_1', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_x', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_ds_x_1, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3180, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_ds_x_1, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3180, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ds_x_1);
    __Pyx_GIVEREF(__pyx_n_u_ds_x_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_ds_x_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3181
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x_1', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y_1', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('us_x', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_y', ogr.OFTInteger))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_ogr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_y_1, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3181, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_y_1, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3181, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ds_y_1);
    __Pyx_GIVEREF(__pyx_n_u_ds_y_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_n_u_ds_y_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3182
 *     stream_layer.CreateField(ogr.FieldDefn('ds_x_1', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y_1', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_x', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     stream_layer.CreateField(ogr.FieldDefn('us_y', ogr.OFTInteger))
 *     flow_dir_managed_raster = _ManagedRaster(
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_us_x, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3182, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_us_x, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3182, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_us_x);
    __Pyx_GIVEREF(__pyx_n_u_us_x);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_n_u_us_x);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3183
 *     stream_layer.CreateField(ogr.FieldDefn('ds_y_1', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_x', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_y', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ogr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_us_y, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3183, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_us_y, __pyx_t_8};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3183, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_us_y);
    __Pyx_GIVEREF(__pyx_n_u_us_y);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_us_y);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3185
 *     stream_layer.CreateField(ogr.FieldDefn('us_y', ogr.OFTInteger))
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     flow_accum_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":3184
 *     stream_layer.CreateField(ogr.FieldDefn('us_x', ogr.OFTInteger))
 *     stream_layer.CreateField(ogr.FieldDefn('us_y', ogr.OFTInteger))
 *     flow_dir_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 * 
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3188
 * 
 *     flow_accum_managed_raster = _ManagedRaster(
 *         flow_accum_raster_path_band[0], flow_accum_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     dem_managed_raster = _ManagedRaster(
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_accum_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":3187
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 * 
 *     flow_accum_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band[0], flow_accum_raster_path_band[1], 0)
 * 
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flow_accum_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3191
 * 
 *     dem_managed_raster = _ManagedRaster(
 *         dem_raster_path_band[0], dem_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef int flow_nodata = pygeoprocessing.get_raster_info(
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":3190
 *         flow_accum_raster_path_band[0], flow_accum_raster_path_band[1], 0)
 * 
 *     dem_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], dem_raster_path_band[1], 0)
 * 
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dem_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3193
 *         dem_raster_path_band[0], dem_raster_path_band[1], 0)
 * 
 *     cdef int flow_nodata = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0])['nodata'][
 *             flow_dir_d8_raster_path_band[1]-1]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3194
 * 
 *     cdef int flow_nodata = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band[1]-1]
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_nodata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3195
 *     cdef int flow_nodata = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])['nodata'][
 *             flow_dir_d8_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 * 
 *     # D8 flow directions encoded as
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3194
 * 
 *     cdef int flow_nodata = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])['nodata'][             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band[1]-1]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flow_nodata = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":3204
 *     cdef int win_xsize, win_ysize
 * 
 *     n_cols, n_rows = flow_dir_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info('(extract_strahler_streams_d8): seed the drains')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 3204, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 3204, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 3204, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n_cols = __pyx_t_6;
  __pyx_v_n_rows = __pyx_t_11;

  /* "src/geoprocessing/routing/routing.pyx":3206
 *     n_cols, n_rows = flow_dir_info['raster_size']
 * 
 *     LOGGER.info('(extract_strahler_streams_d8): seed the drains')             # <<<<<<<<<<<<<<
 *     cdef long n_pixels = n_cols * n_rows
 *     cdef long n_processed = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_u_extract_strahler_streams_d8_see) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_extract_strahler_streams_d8_see);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3207
 * 
 *     LOGGER.info('(extract_strahler_streams_d8): seed the drains')
 *     cdef long n_pixels = n_cols * n_rows             # <<<<<<<<<<<<<<
 *     cdef long n_processed = 0
 *     cdef time_t last_log_time
 */
  __pyx_v_n_pixels = (__pyx_v_n_cols * __pyx_v_n_rows);

  /* "src/geoprocessing/routing/routing.pyx":3208
 *     LOGGER.info('(extract_strahler_streams_d8): seed the drains')
 *     cdef long n_pixels = n_cols * n_rows
 *     cdef long n_processed = 0             # <<<<<<<<<<<<<<
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)
 */
  __pyx_v_n_processed = 0;

  /* "src/geoprocessing/routing/routing.pyx":3210
 *     cdef long n_processed = 0
 *     cdef time_t last_log_time
 *     last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *     cdef stack[StreamConnectivityPoint] source_point_stack
 *     cdef StreamConnectivityPoint source_stream_point
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":3214
 *     cdef StreamConnectivityPoint source_stream_point
 * 
 *     cdef int x_l=-1, y_l=-1  # the _l is for "local" aka "current" pixel             # <<<<<<<<<<<<<<
 * 
 *     # D8 backflow directions encoded as
 */
  __pyx_v_x_l = -1;
  __pyx_v_y_l = -1;

  /* "src/geoprocessing/routing/routing.pyx":3221
 *     # 123
 *     cdef int x_n, y_n  # the _n is for "neighbor"
 *     cdef int upstream_count=0, upstream_index             # <<<<<<<<<<<<<<
 *     # this array is filled out as upstream directions are calculated and
 *     # indexed by `upstream_count`
 */
  __pyx_v_upstream_count = 0;

  /* "src/geoprocessing/routing/routing.pyx":3224
 *     # this array is filled out as upstream directions are calculated and
 *     # indexed by `upstream_count`
 *     cdef int *upstream_dirs = [0, 0, 0, 0, 0, 0, 0, 0]             # <<<<<<<<<<<<<<
 *     cdef long local_flow_accum
 *     # used to determine if source is a drain and should be tracked
 */
  __pyx_t_12[0] = 0;
  __pyx_t_12[1] = 0;
  __pyx_t_12[2] = 0;
  __pyx_t_12[3] = 0;
  __pyx_t_12[4] = 0;
  __pyx_t_12[5] = 0;
  __pyx_t_12[6] = 0;
  __pyx_t_12[7] = 0;
  __pyx_v_upstream_dirs = __pyx_t_12;

  /* "src/geoprocessing/routing/routing.pyx":3231
 *     # map x/y tuple to list of streams originating from that point
 *     # 2 tuple -> list of int
 *     coord_to_stream_ids = collections.defaultdict(list)             # <<<<<<<<<<<<<<
 * 
 *     # First pass - search for bifurcating stream points
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_collections); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)(&PyList_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)(&PyList_Type)));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_coord_to_stream_ids = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3240
 *     #       * drains to edge or nodata pixel
 *     #   record a seed point for that bifurcation for later processing.
 *     stream_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_d8_raster_path_band, offset_only=True):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3241
 *     #   record a seed point for that bifurcation for later processing.
 *     stream_layer.StartTransaction()
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3242
 *     stream_layer.StartTransaction()
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_d8_raster_path_band, offset_only=True):             # <<<<<<<<<<<<<<
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_flow_dir_d8_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_d8_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_flow_dir_d8_raster_path_band);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 3242, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3241
 *     #   record a seed point for that bifurcation for later processing.
 *     stream_layer.StartTransaction()
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
    __pyx_t_3 = __pyx_t_9; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3241, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_9); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3241, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_9); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3241, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_14(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 3241, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3243
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): drain seeding '
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":3244
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(extract_strahler_streams_d8): drain seeding '
 *                 f'{n_processed} of {n_pixels} pixels complete')
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3245
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): drain seeding '             # <<<<<<<<<<<<<<
 *                 f'{n_processed} of {n_pixels} pixels complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_extract_strahler_streams_d8_dra);
      __pyx_t_15 += 45;
      __Pyx_GIVEREF(__pyx_kp_u_extract_strahler_streams_d8_dra);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_extract_strahler_streams_d8_dra);

      /* "src/geoprocessing/routing/routing.pyx":3246
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): drain seeding '
 *                 f'{n_processed} of {n_pixels} pixels complete')             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *         xoff = offset_dict['xoff']
 */
      __pyx_t_7 = __Pyx_PyUnicode_From_long(__pyx_v_n_processed, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_15 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_of);
      __pyx_t_7 = __Pyx_PyUnicode_From_long(__pyx_v_n_pixels, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_pixels_complete);
      __pyx_t_15 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_pixels_complete);
      PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_pixels_complete);

      /* "src/geoprocessing/routing/routing.pyx":3245
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): drain seeding '             # <<<<<<<<<<<<<<
 *                 f'{n_processed} of {n_pixels} pixels complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3247
 *                 '(extract_strahler_streams_d8): drain seeding '
 *                 f'{n_processed} of {n_pixels} pixels complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":3243
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): drain seeding '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3248
 *                 f'{n_processed} of {n_pixels} pixels complete')
 *             last_log_time = ctime(NULL)
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 *         win_xsize = offset_dict['win_xsize']
 */
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_xoff = __pyx_t_11;

    /* "src/geoprocessing/routing/routing.pyx":3249
 *             last_log_time = ctime(NULL)
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_yoff = __pyx_t_11;

    /* "src/geoprocessing/routing/routing.pyx":3250
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         n_processed += win_xsize * win_ysize
 */
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_win_xsize = __pyx_t_11;

    /* "src/geoprocessing/routing/routing.pyx":3251
 *         yoff = offset_dict['yoff']
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         n_processed += win_xsize * win_ysize
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_win_ysize = __pyx_t_11;

    /* "src/geoprocessing/routing/routing.pyx":3252
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         n_processed += win_xsize * win_ysize             # <<<<<<<<<<<<<<
 * 
 *         for i in range(win_xsize):
 */
    __pyx_v_n_processed = (__pyx_v_n_processed + (__pyx_v_win_xsize * __pyx_v_win_ysize));

    /* "src/geoprocessing/routing/routing.pyx":3254
 *         n_processed += win_xsize * win_ysize
 * 
 *         for i in range(win_xsize):             # <<<<<<<<<<<<<<
 *             for j in range(win_ysize):
 *                 is_drain = 0
 */
    __pyx_t_11 = __pyx_v_win_xsize;
    __pyx_t_6 = __pyx_t_11;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_6; __pyx_t_17+=1) {
      __pyx_v_i = __pyx_t_17;

      /* "src/geoprocessing/routing/routing.pyx":3255
 * 
 *         for i in range(win_xsize):
 *             for j in range(win_ysize):             # <<<<<<<<<<<<<<
 *                 is_drain = 0
 *                 x_l = xoff + i
 */
      __pyx_t_18 = __pyx_v_win_ysize;
      __pyx_t_19 = __pyx_t_18;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
        __pyx_v_j = __pyx_t_20;

        /* "src/geoprocessing/routing/routing.pyx":3256
 *         for i in range(win_xsize):
 *             for j in range(win_ysize):
 *                 is_drain = 0             # <<<<<<<<<<<<<<
 *                 x_l = xoff + i
 *                 y_l = yoff + j
 */
        __pyx_v_is_drain = 0;

        /* "src/geoprocessing/routing/routing.pyx":3257
 *             for j in range(win_ysize):
 *                 is_drain = 0
 *                 x_l = xoff + i             # <<<<<<<<<<<<<<
 *                 y_l = yoff + j
 *                 local_flow_accum = <long>flow_accum_managed_raster.get(
 */
        __pyx_v_x_l = (__pyx_v_xoff + __pyx_v_i);

        /* "src/geoprocessing/routing/routing.pyx":3258
 *                 is_drain = 0
 *                 x_l = xoff + i
 *                 y_l = yoff + j             # <<<<<<<<<<<<<<
 *                 local_flow_accum = <long>flow_accum_managed_raster.get(
 *                     x_l, y_l)
 */
        __pyx_v_y_l = (__pyx_v_yoff + __pyx_v_j);

        /* "src/geoprocessing/routing/routing.pyx":3259
 *                 x_l = xoff + i
 *                 y_l = yoff + j
 *                 local_flow_accum = <long>flow_accum_managed_raster.get(             # <<<<<<<<<<<<<<
 *                     x_l, y_l)
 *                 if local_flow_accum < min_flow_accum_threshold:
 */
        __pyx_v_local_flow_accum = ((long)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_x_l, __pyx_v_y_l));

        /* "src/geoprocessing/routing/routing.pyx":3261
 *                 local_flow_accum = <long>flow_accum_managed_raster.get(
 *                     x_l, y_l)
 *                 if local_flow_accum < min_flow_accum_threshold:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # check to see if it's a drain
 */
        __pyx_t_5 = ((__pyx_v_local_flow_accum < __pyx_v_min_flow_accum_threshold) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":3262
 *                     x_l, y_l)
 *                 if local_flow_accum < min_flow_accum_threshold:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # check to see if it's a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 */
          goto __pyx_L11_continue;

          /* "src/geoprocessing/routing/routing.pyx":3261
 *                 local_flow_accum = <long>flow_accum_managed_raster.get(
 *                     x_l, y_l)
 *                 if local_flow_accum < min_flow_accum_threshold:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # check to see if it's a drain
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":3264
 *                     continue
 *                 # check to see if it's a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)             # <<<<<<<<<<<<<<
 *                 x_n = x_l + D8_XOFFSET[d_n]
 *                 y_n = y_l + D8_YOFFSET[d_n]
 */
        __pyx_v_d_n = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_l, __pyx_v_y_l));

        /* "src/geoprocessing/routing/routing.pyx":3265
 *                 # check to see if it's a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 *                 x_n = x_l + D8_XOFFSET[d_n]             # <<<<<<<<<<<<<<
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 */
        __pyx_v_x_n = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_d_n]));

        /* "src/geoprocessing/routing/routing.pyx":3266
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 *                 x_n = x_l + D8_XOFFSET[d_n]
 *                 y_n = y_l + D8_YOFFSET[d_n]             # <<<<<<<<<<<<<<
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_cols or
 */
        __pyx_v_y_n = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_d_n]));

        /* "src/geoprocessing/routing/routing.pyx":3268
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_cols or             # <<<<<<<<<<<<<<
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_nodata):
 */
        __pyx_t_21 = ((__pyx_v_x_n < 0) != 0);
        if (!__pyx_t_21) {
        } else {
          __pyx_t_5 = __pyx_t_21;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_21 = ((__pyx_v_y_n < 0) != 0);
        if (!__pyx_t_21) {
        } else {
          __pyx_t_5 = __pyx_t_21;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_21 = ((__pyx_v_x_n >= __pyx_v_n_cols) != 0);
        if (!__pyx_t_21) {
        } else {
          __pyx_t_5 = __pyx_t_21;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_21 = ((__pyx_v_y_n >= __pyx_v_n_cols) != 0);
        if (!__pyx_t_21) {
        } else {
          __pyx_t_5 = __pyx_t_21;
          goto __pyx_L15_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":3270
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_cols or
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_nodata):             # <<<<<<<<<<<<<<
 *                     is_drain = 1
 * 
 */
        __pyx_t_21 = ((((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_n, __pyx_v_y_n)) == __pyx_v_flow_nodata) != 0);
        __pyx_t_5 = __pyx_t_21;
        __pyx_L15_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":3268
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_cols or             # <<<<<<<<<<<<<<
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_nodata):
 */
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":3271
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_nodata):
 *                     is_drain = 1             # <<<<<<<<<<<<<<
 * 
 *                 if not is_drain and (
 */
          __pyx_v_is_drain = 1;

          /* "src/geoprocessing/routing/routing.pyx":3268
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_cols or             # <<<<<<<<<<<<<<
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_nodata):
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":3273
 *                     is_drain = 1
 * 
 *                 if not is_drain and (             # <<<<<<<<<<<<<<
 *                         local_flow_accum < 2*min_flow_accum_threshold):
 *                     # if current pixel is < 2*flow threshold then it can't
 */
        __pyx_t_21 = ((!(__pyx_v_is_drain != 0)) != 0);
        if (__pyx_t_21) {
        } else {
          __pyx_t_5 = __pyx_t_21;
          goto __pyx_L21_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":3274
 * 
 *                 if not is_drain and (
 *                         local_flow_accum < 2*min_flow_accum_threshold):             # <<<<<<<<<<<<<<
 *                     # if current pixel is < 2*flow threshold then it can't
 *                     # bifurcate into two pixels == flow threshold
 */
        __pyx_t_21 = ((__pyx_v_local_flow_accum < (2 * __pyx_v_min_flow_accum_threshold)) != 0);
        __pyx_t_5 = __pyx_t_21;
        __pyx_L21_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":3273
 *                     is_drain = 1
 * 
 *                 if not is_drain and (             # <<<<<<<<<<<<<<
 *                         local_flow_accum < 2*min_flow_accum_threshold):
 *                     # if current pixel is < 2*flow threshold then it can't
 */
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":3277
 *                     # if current pixel is < 2*flow threshold then it can't
 *                     # bifurcate into two pixels == flow threshold
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 upstream_count = 0
 */
          goto __pyx_L11_continue;

          /* "src/geoprocessing/routing/routing.pyx":3273
 *                     is_drain = 1
 * 
 *                 if not is_drain and (             # <<<<<<<<<<<<<<
 *                         local_flow_accum < 2*min_flow_accum_threshold):
 *                     # if current pixel is < 2*flow threshold then it can't
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":3279
 *                     continue
 * 
 *                 upstream_count = 0             # <<<<<<<<<<<<<<
 *                 for d in range(8):
 *                     x_n = x_l + D8_XOFFSET[d]
 */
        __pyx_v_upstream_count = 0;

        /* "src/geoprocessing/routing/routing.pyx":3280
 * 
 *                 upstream_count = 0
 *                 for d in range(8):             # <<<<<<<<<<<<<<
 *                     x_n = x_l + D8_XOFFSET[d]
 *                     y_n = y_l + D8_YOFFSET[d]
 */
        for (__pyx_t_22 = 0; __pyx_t_22 < 8; __pyx_t_22+=1) {
          __pyx_v_d = __pyx_t_22;

          /* "src/geoprocessing/routing/routing.pyx":3281
 *                 upstream_count = 0
 *                 for d in range(8):
 *                     x_n = x_l + D8_XOFFSET[d]             # <<<<<<<<<<<<<<
 *                     y_n = y_l + D8_YOFFSET[d]
 *                     # check if on border
 */
          __pyx_v_x_n = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_d]));

          /* "src/geoprocessing/routing/routing.pyx":3282
 *                 for d in range(8):
 *                     x_n = x_l + D8_XOFFSET[d]
 *                     y_n = y_l + D8_YOFFSET[d]             # <<<<<<<<<<<<<<
 *                     # check if on border
 *                     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 */
          __pyx_v_y_n = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_d]));

          /* "src/geoprocessing/routing/routing.pyx":3284
 *                     y_n = y_l + D8_YOFFSET[d]
 *                     # check if on border
 *                     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *                         continue
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 */
          __pyx_t_21 = ((__pyx_v_x_n < 0) != 0);
          if (!__pyx_t_21) {
          } else {
            __pyx_t_5 = __pyx_t_21;
            goto __pyx_L26_bool_binop_done;
          }
          __pyx_t_21 = ((__pyx_v_y_n < 0) != 0);
          if (!__pyx_t_21) {
          } else {
            __pyx_t_5 = __pyx_t_21;
            goto __pyx_L26_bool_binop_done;
          }
          __pyx_t_21 = ((__pyx_v_x_n >= __pyx_v_n_cols) != 0);
          if (!__pyx_t_21) {
          } else {
            __pyx_t_5 = __pyx_t_21;
            goto __pyx_L26_bool_binop_done;
          }
          __pyx_t_21 = ((__pyx_v_y_n >= __pyx_v_n_rows) != 0);
          __pyx_t_5 = __pyx_t_21;
          __pyx_L26_bool_binop_done:;
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":3285
 *                     # check if on border
 *                     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 *                         continue             # <<<<<<<<<<<<<<
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                     if d_n == flow_nodata:
 */
            goto __pyx_L23_continue;

            /* "src/geoprocessing/routing/routing.pyx":3284
 *                     y_n = y_l + D8_YOFFSET[d]
 *                     # check if on border
 *                     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *                         continue
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":3286
 *                     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 *                         continue
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)             # <<<<<<<<<<<<<<
 *                     if d_n == flow_nodata:
 *                         continue
 */
          __pyx_v_d_n = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_n, __pyx_v_y_n));

          /* "src/geoprocessing/routing/routing.pyx":3287
 *                         continue
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                     if d_n == flow_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and
 */
          __pyx_t_5 = ((__pyx_v_d_n == __pyx_v_flow_nodata) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":3288
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                     if d_n == flow_nodata:
 *                         continue             # <<<<<<<<<<<<<<
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and
 *                             <long>flow_accum_managed_raster.get(
 */
            goto __pyx_L23_continue;

            /* "src/geoprocessing/routing/routing.pyx":3287
 *                         continue
 *                     d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                     if d_n == flow_nodata:             # <<<<<<<<<<<<<<
 *                         continue
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":3289
 *                     if d_n == flow_nodata:
 *                         continue
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and             # <<<<<<<<<<<<<<
 *                             <long>flow_accum_managed_raster.get(
 *                                 x_n, y_n) >= min_flow_accum_threshold):
 */
          __pyx_t_21 = (((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_d]) == __pyx_v_d_n) != 0);
          if (__pyx_t_21) {
          } else {
            __pyx_t_5 = __pyx_t_21;
            goto __pyx_L32_bool_binop_done;
          }

          /* "src/geoprocessing/routing/routing.pyx":3291
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and
 *                             <long>flow_accum_managed_raster.get(
 *                                 x_n, y_n) >= min_flow_accum_threshold):             # <<<<<<<<<<<<<<
 *                         upstream_dirs[upstream_count] = d
 *                         upstream_count += 1
 */
          __pyx_t_21 = ((((long)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_x_n, __pyx_v_y_n)) >= __pyx_v_min_flow_accum_threshold) != 0);
          __pyx_t_5 = __pyx_t_21;
          __pyx_L32_bool_binop_done:;

          /* "src/geoprocessing/routing/routing.pyx":3289
 *                     if d_n == flow_nodata:
 *                         continue
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and             # <<<<<<<<<<<<<<
 *                             <long>flow_accum_managed_raster.get(
 *                                 x_n, y_n) >= min_flow_accum_threshold):
 */
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":3292
 *                             <long>flow_accum_managed_raster.get(
 *                                 x_n, y_n) >= min_flow_accum_threshold):
 *                         upstream_dirs[upstream_count] = d             # <<<<<<<<<<<<<<
 *                         upstream_count += 1
 *                 if upstream_count <= 1 and not is_drain:
 */
            (__pyx_v_upstream_dirs[__pyx_v_upstream_count]) = __pyx_v_d;

            /* "src/geoprocessing/routing/routing.pyx":3293
 *                                 x_n, y_n) >= min_flow_accum_threshold):
 *                         upstream_dirs[upstream_count] = d
 *                         upstream_count += 1             # <<<<<<<<<<<<<<
 *                 if upstream_count <= 1 and not is_drain:
 *                     continue
 */
            __pyx_v_upstream_count = (__pyx_v_upstream_count + 1);

            /* "src/geoprocessing/routing/routing.pyx":3289
 *                     if d_n == flow_nodata:
 *                         continue
 *                     if (D8_REVERSE_DIRECTION[d] == d_n and             # <<<<<<<<<<<<<<
 *                             <long>flow_accum_managed_raster.get(
 *                                 x_n, y_n) >= min_flow_accum_threshold):
 */
          }
          __pyx_L23_continue:;
        }

        /* "src/geoprocessing/routing/routing.pyx":3294
 *                         upstream_dirs[upstream_count] = d
 *                         upstream_count += 1
 *                 if upstream_count <= 1 and not is_drain:             # <<<<<<<<<<<<<<
 *                     continue
 *                 for upstream_index in range(upstream_count):
 */
        __pyx_t_21 = ((__pyx_v_upstream_count <= 1) != 0);
        if (__pyx_t_21) {
        } else {
          __pyx_t_5 = __pyx_t_21;
          goto __pyx_L35_bool_binop_done;
        }
        __pyx_t_21 = ((!(__pyx_v_is_drain != 0)) != 0);
        __pyx_t_5 = __pyx_t_21;
        __pyx_L35_bool_binop_done:;
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":3295
 *                         upstream_count += 1
 *                 if upstream_count <= 1 and not is_drain:
 *                     continue             # <<<<<<<<<<<<<<
 *                 for upstream_index in range(upstream_count):
 *                     # hit a branch!
 */
          goto __pyx_L11_continue;

          /* "src/geoprocessing/routing/routing.pyx":3294
 *                         upstream_dirs[upstream_count] = d
 *                         upstream_count += 1
 *                 if upstream_count <= 1 and not is_drain:             # <<<<<<<<<<<<<<
 *                     continue
 *                 for upstream_index in range(upstream_count):
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":3296
 *                 if upstream_count <= 1 and not is_drain:
 *                     continue
 *                 for upstream_index in range(upstream_count):             # <<<<<<<<<<<<<<
 *                     # hit a branch!
 *                     stream_feature = ogr.Feature(
 */
        __pyx_t_22 = __pyx_v_upstream_count;
        __pyx_t_23 = __pyx_t_22;
        for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
          __pyx_v_upstream_index = __pyx_t_24;

          /* "src/geoprocessing/routing/routing.pyx":3298
 *                 for upstream_index in range(upstream_count):
 *                     # hit a branch!
 *                     stream_feature = ogr.Feature(             # <<<<<<<<<<<<<<
 *                         stream_layer.GetLayerDefn())
 *                     stream_feature.SetField('outlet', 0)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ogr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Feature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3299
 *                     # hit a branch!
 *                     stream_feature = ogr.Feature(
 *                         stream_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *                     stream_feature.SetField('outlet', 0)
 *                     stream_layer.CreateFeature(stream_feature)
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_stream_feature, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3300
 *                     stream_feature = ogr.Feature(
 *                         stream_layer.GetLayerDefn())
 *                     stream_feature.SetField('outlet', 0)             # <<<<<<<<<<<<<<
 *                     stream_layer.CreateFeature(stream_feature)
 *                     stream_fid = stream_feature.GetFID()
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3301
 *                         stream_layer.GetLayerDefn())
 *                     stream_feature.SetField('outlet', 0)
 *                     stream_layer.CreateFeature(stream_feature)             # <<<<<<<<<<<<<<
 *                     stream_fid = stream_feature.GetFID()
 *                     source_point_stack.push(StreamConnectivityPoint(
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_2, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_stream_feature);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3302
 *                     stream_feature.SetField('outlet', 0)
 *                     stream_layer.CreateFeature(stream_feature)
 *                     stream_fid = stream_feature.GetFID()             # <<<<<<<<<<<<<<
 *                     source_point_stack.push(StreamConnectivityPoint(
 *                         x_l, y_l, upstream_dirs[upstream_index], stream_fid))
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3302, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3302, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_stream_fid, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3304
 *                     stream_fid = stream_feature.GetFID()
 *                     source_point_stack.push(StreamConnectivityPoint(
 *                         x_l, y_l, upstream_dirs[upstream_index], stream_fid))             # <<<<<<<<<<<<<<
 *                     coord_to_stream_ids[(x_l, y_l)].append(stream_fid)
 *     LOGGER.info(
 */
          __pyx_t_25.xi = __pyx_v_x_l;
          __pyx_t_25.yi = __pyx_v_y_l;
          __pyx_t_25.upstream_d8_dir = (__pyx_v_upstream_dirs[__pyx_v_upstream_index]);
          __pyx_t_26 = __Pyx_PyInt_As_int(__pyx_v_stream_fid); if (unlikely((__pyx_t_26 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3304, __pyx_L1_error)
          __pyx_t_25.source_id = __pyx_t_26;

          /* "src/geoprocessing/routing/routing.pyx":3303
 *                     stream_layer.CreateFeature(stream_feature)
 *                     stream_fid = stream_feature.GetFID()
 *                     source_point_stack.push(StreamConnectivityPoint(             # <<<<<<<<<<<<<<
 *                         x_l, y_l, upstream_dirs[upstream_index], stream_fid))
 *                     coord_to_stream_ids[(x_l, y_l)].append(stream_fid)
 */
          __pyx_v_source_point_stack.push(__pyx_t_25);

          /* "src/geoprocessing/routing/routing.pyx":3305
 *                     source_point_stack.push(StreamConnectivityPoint(
 *                         x_l, y_l, upstream_dirs[upstream_index], stream_fid))
 *                     coord_to_stream_ids[(x_l, y_l)].append(stream_fid)             # <<<<<<<<<<<<<<
 *     LOGGER.info(
 *         '(extract_strahler_streams_d8): '
 */
          __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3305, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3305, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3305, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
          __pyx_t_7 = 0;
          __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_coord_to_stream_ids, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3305, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_27 = __Pyx_PyObject_Append(__pyx_t_9, __pyx_v_stream_fid); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3305, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_L11_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":3241
 *     #   record a seed point for that bifurcation for later processing.
 *     stream_layer.StartTransaction()
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3306
 *                         x_l, y_l, upstream_dirs[upstream_index], stream_fid))
 *                     coord_to_stream_ids[(x_l, y_l)].append(stream_fid)
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): '
 *         f'drain seeding complete')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_kp_u_extract_strahler_streams_d8_dra_2) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_extract_strahler_streams_d8_dra_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3309
 *         '(extract_strahler_streams_d8): '
 *         f'drain seeding complete')
 *     LOGGER.info('(extract_strahler_streams_d8): starting upstream walk')             # <<<<<<<<<<<<<<
 *     n_points = source_point_stack.size()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_2, __pyx_kp_u_extract_strahler_streams_d8_sta) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_u_extract_strahler_streams_d8_sta);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3310
 *         f'drain seeding complete')
 *     LOGGER.info('(extract_strahler_streams_d8): starting upstream walk')
 *     n_points = source_point_stack.size()             # <<<<<<<<<<<<<<
 * 
 *     # map downstream ids to list of upstream connected streams
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_source_point_stack.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_n_points = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3314
 *     # map downstream ids to list of upstream connected streams
 *     # id -> list of ids
 *     downstream_to_upstream_ids = {}             # <<<<<<<<<<<<<<
 * 
 *     # map upstream id to downstream connected stream id -> id
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_downstream_to_upstream_ids = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3317
 * 
 *     # map upstream id to downstream connected stream id -> id
 *     upstream_to_downstream_id = {}             # <<<<<<<<<<<<<<
 * 
 *     while not source_point_stack.empty():
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_upstream_to_downstream_id = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3319
 *     upstream_to_downstream_id = {}
 * 
 *     while not source_point_stack.empty():             # <<<<<<<<<<<<<<
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 */
  while (1) {
    __pyx_t_5 = ((!(__pyx_v_source_point_stack.empty() != 0)) != 0);
    if (!__pyx_t_5) break;

    /* "src/geoprocessing/routing/routing.pyx":3320
 * 
 *     while not source_point_stack.empty():
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":3321
 *     while not source_point_stack.empty():
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(extract_strahler_streams_d8): '
 *                 'stream segment creation '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3322
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'stream segment creation '
 *                 f'{n_points-source_point_stack.size()} of {n_points} '
 */
      __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_13 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_extract_strahler_streams_d8_str);
      __pyx_t_13 += 55;
      __Pyx_GIVEREF(__pyx_kp_u_extract_strahler_streams_d8_str);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_extract_strahler_streams_d8_str);

      /* "src/geoprocessing/routing/routing.pyx":3324
 *                 '(extract_strahler_streams_d8): '
 *                 'stream segment creation '
 *                 f'{n_points-source_point_stack.size()} of {n_points} '             # <<<<<<<<<<<<<<
 *                 'source points complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_source_point_stack.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_n_points, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_16;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_13 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_of);
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_n_points, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_16;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_source_points_complete);
      __pyx_t_13 += 23;
      __Pyx_GIVEREF(__pyx_kp_u_source_points_complete);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_kp_u_source_points_complete);

      /* "src/geoprocessing/routing/routing.pyx":3322
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'stream segment creation '
 *                 f'{n_points-source_point_stack.size()} of {n_points} '
 */
      __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_9, 5, __pyx_t_13, __pyx_t_16); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3326
 *                 f'{n_points-source_point_stack.size()} of {n_points} '
 *                 'source points complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *         # This coordinate is the downstream end of the stream
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":3320
 * 
 *     while not source_point_stack.empty():
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3329
 * 
 *         # This coordinate is the downstream end of the stream
 *         source_stream_point = source_point_stack.top()             # <<<<<<<<<<<<<<
 *         source_point_stack.pop()
 * 
 */
    __pyx_v_source_stream_point = __pyx_v_source_point_stack.top();

    /* "src/geoprocessing/routing/routing.pyx":3330
 *         # This coordinate is the downstream end of the stream
 *         source_stream_point = source_point_stack.top()
 *         source_point_stack.pop()             # <<<<<<<<<<<<<<
 * 
 *         payload = _calculate_stream_geometry(
 */
    __pyx_v_source_point_stack.pop();

    /* "src/geoprocessing/routing/routing.pyx":3335
 *             source_stream_point.xi, source_stream_point.yi,
 *             source_stream_point.upstream_d8_dir,
 *             flow_dir_info['geotransform'], n_cols, n_rows,             # <<<<<<<<<<<<<<
 *             flow_accum_managed_raster, flow_dir_managed_raster, flow_nodata,
 *             min_flow_accum_threshold, coord_to_stream_ids)
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_geotransform); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "src/geoprocessing/routing/routing.pyx":3332
 *         source_point_stack.pop()
 * 
 *         payload = _calculate_stream_geometry(             # <<<<<<<<<<<<<<
 *             source_stream_point.xi, source_stream_point.yi,
 *             source_stream_point.upstream_d8_dir,
 */
    __pyx_t_2 = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__calculate_stream_geometry(__pyx_v_source_stream_point.xi, __pyx_v_source_stream_point.yi, __pyx_v_source_stream_point.upstream_d8_dir, __pyx_t_3, __pyx_v_n_cols, __pyx_v_n_rows, __pyx_v_flow_accum_managed_raster, __pyx_v_flow_dir_managed_raster, __pyx_v_flow_nodata, __pyx_v_min_flow_accum_threshold, __pyx_v_coord_to_stream_ids); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_payload, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3338
 *             flow_accum_managed_raster, flow_dir_managed_raster, flow_nodata,
 *             min_flow_accum_threshold, coord_to_stream_ids)
 *         if payload is None:             # <<<<<<<<<<<<<<
 *             continue
 *         x_u, y_u, ds_x_1, ds_y_1, upstream_id_list, stream_line = payload
 */
    __pyx_t_5 = (__pyx_v_payload == Py_None);
    __pyx_t_21 = (__pyx_t_5 != 0);
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3339
 *             min_flow_accum_threshold, coord_to_stream_ids)
 *         if payload is None:
 *             continue             # <<<<<<<<<<<<<<
 *         x_u, y_u, ds_x_1, ds_y_1, upstream_id_list, stream_line = payload
 * 
 */
      goto __pyx_L39_continue;

      /* "src/geoprocessing/routing/routing.pyx":3338
 *             flow_accum_managed_raster, flow_dir_managed_raster, flow_nodata,
 *             min_flow_accum_threshold, coord_to_stream_ids)
 *         if payload is None:             # <<<<<<<<<<<<<<
 *             continue
 *         x_u, y_u, ds_x_1, ds_y_1, upstream_id_list, stream_line = payload
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3340
 *         if payload is None:
 *             continue
 *         x_u, y_u, ds_x_1, ds_y_1, upstream_id_list, stream_line = payload             # <<<<<<<<<<<<<<
 * 
 *         downstream_dem = dem_managed_raster.get(
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_payload))) || (PyList_CheckExact(__pyx_v_payload))) {
      PyObject* sequence = __pyx_v_payload;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 6)) {
        if (size > 6) __Pyx_RaiseTooManyValuesError(6);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 3340, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_7,&__pyx_t_9,&__pyx_t_1,&__pyx_t_8};
        for (i=0; i < 6; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 3340, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_7,&__pyx_t_9,&__pyx_t_1,&__pyx_t_8};
      __pyx_t_4 = PyObject_GetIter(__pyx_v_payload); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext;
      for (index=0; index < 6; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_4); if (unlikely(!item)) goto __pyx_L43_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_4), 6) < 0) __PYX_ERR(0, 3340, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L44_unpacking_done;
      __pyx_L43_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 3340, __pyx_L1_error)
      __pyx_L44_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_x_u, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y_u, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ds_x_1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ds_y_1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_upstream_id_list, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_stream_line, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3342
 *         x_u, y_u, ds_x_1, ds_y_1, upstream_id_list, stream_line = payload
 * 
 *         downstream_dem = dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *             source_stream_point.xi, source_stream_point.yi)
 * 
 */
    __pyx_v_downstream_dem = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_v_source_stream_point.xi, __pyx_v_source_stream_point.yi);

    /* "src/geoprocessing/routing/routing.pyx":3345
 *             source_stream_point.xi, source_stream_point.yi)
 * 
 *         stream_feature = stream_layer.GetFeature(             # <<<<<<<<<<<<<<
 *             source_stream_point.source_id)
 *         stream_feature.SetField(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":3346
 * 
 *         stream_feature = stream_layer.GetFeature(
 *             source_stream_point.source_id)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField(
 *             'ds_fa', flow_accum_managed_raster.get(
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_source_stream_point.source_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_stream_feature, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3347
 *         stream_feature = stream_layer.GetFeature(
 *             source_stream_point.source_id)
 *         stream_feature.SetField(             # <<<<<<<<<<<<<<
 *             'ds_fa', flow_accum_managed_raster.get(
 *                 source_stream_point.xi, source_stream_point.yi))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":3348
 *             source_stream_point.source_id)
 *         stream_feature.SetField(
 *             'ds_fa', flow_accum_managed_raster.get(             # <<<<<<<<<<<<<<
 *                 source_stream_point.xi, source_stream_point.yi))
 *         stream_feature.SetField('ds_x', source_stream_point.xi)
 */
    __pyx_t_9 = PyFloat_FromDouble(__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_source_stream_point.xi, __pyx_v_source_stream_point.yi)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_ds_fa, __pyx_t_9};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3347, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_ds_fa, __pyx_t_9};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3347, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_ds_fa);
      __Pyx_GIVEREF(__pyx_n_u_ds_fa);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_n_u_ds_fa);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3350
 *             'ds_fa', flow_accum_managed_raster.get(
 *                 source_stream_point.xi, source_stream_point.yi))
 *         stream_feature.SetField('ds_x', source_stream_point.xi)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('ds_y', source_stream_point.yi)
 *         stream_feature.SetField('ds_x_1', ds_x_1)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_source_stream_point.xi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_x, __pyx_t_3};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_x, __pyx_t_3};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_ds_x);
      __Pyx_GIVEREF(__pyx_n_u_ds_x);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_n_u_ds_x);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3351
 *                 source_stream_point.xi, source_stream_point.yi))
 *         stream_feature.SetField('ds_x', source_stream_point.xi)
 *         stream_feature.SetField('ds_y', source_stream_point.yi)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('ds_x_1', ds_x_1)
 *         stream_feature.SetField('ds_y_1', ds_y_1)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_source_stream_point.yi); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_ds_y, __pyx_t_7};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_ds_y, __pyx_t_7};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_ds_y);
      __Pyx_GIVEREF(__pyx_n_u_ds_y);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_n_u_ds_y);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3352
 *         stream_feature.SetField('ds_x', source_stream_point.xi)
 *         stream_feature.SetField('ds_y', source_stream_point.yi)
 *         stream_feature.SetField('ds_x_1', ds_x_1)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('ds_y_1', ds_y_1)
 *         stream_feature.SetField('us_x', x_u)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_x_1, __pyx_v_ds_x_1};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3352, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_ds_x_1, __pyx_v_ds_x_1};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3352, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_ds_x_1);
      __Pyx_GIVEREF(__pyx_n_u_ds_x_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_n_u_ds_x_1);
      __Pyx_INCREF(__pyx_v_ds_x_1);
      __Pyx_GIVEREF(__pyx_v_ds_x_1);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_v_ds_x_1);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3353
 *         stream_feature.SetField('ds_y', source_stream_point.yi)
 *         stream_feature.SetField('ds_x_1', ds_x_1)
 *         stream_feature.SetField('ds_y_1', ds_y_1)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('us_x', x_u)
 *         stream_feature.SetField('us_y', y_u)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_ds_y_1, __pyx_v_ds_y_1};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3353, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_ds_y_1, __pyx_v_ds_y_1};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3353, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_ds_y_1);
      __Pyx_GIVEREF(__pyx_n_u_ds_y_1);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_n_u_ds_y_1);
      __Pyx_INCREF(__pyx_v_ds_y_1);
      __Pyx_GIVEREF(__pyx_v_ds_y_1);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_v_ds_y_1);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3354
 *         stream_feature.SetField('ds_x_1', ds_x_1)
 *         stream_feature.SetField('ds_y_1', ds_y_1)
 *         stream_feature.SetField('us_x', x_u)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('us_y', y_u)
 *         stream_feature.SetField(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_us_x, __pyx_v_x_u};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3354, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_us_x, __pyx_v_x_u};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3354, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_us_x);
      __Pyx_GIVEREF(__pyx_n_u_us_x);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_n_u_us_x);
      __Pyx_INCREF(__pyx_v_x_u);
      __Pyx_GIVEREF(__pyx_v_x_u);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_v_x_u);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3355
 *         stream_feature.SetField('ds_y_1', ds_y_1)
 *         stream_feature.SetField('us_x', x_u)
 *         stream_feature.SetField('us_y', y_u)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField(
 *             'upstream_d8_dir', source_stream_point.upstream_d8_dir)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_us_y, __pyx_v_y_u};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_us_y, __pyx_v_y_u};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_us_y);
      __Pyx_GIVEREF(__pyx_n_u_us_y);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_n_u_us_y);
      __Pyx_INCREF(__pyx_v_y_u);
      __Pyx_GIVEREF(__pyx_v_y_u);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_v_y_u);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3356
 *         stream_feature.SetField('us_x', x_u)
 *         stream_feature.SetField('us_y', y_u)
 *         stream_feature.SetField(             # <<<<<<<<<<<<<<
 *             'upstream_d8_dir', source_stream_point.upstream_d8_dir)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":3357
 *         stream_feature.SetField('us_y', y_u)
 *         stream_feature.SetField(
 *             'upstream_d8_dir', source_stream_point.upstream_d8_dir)             # <<<<<<<<<<<<<<
 * 
 *         # record the downstream connected component for all the upstream
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_source_stream_point.upstream_d8_dir); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_upstream_d8_dir, __pyx_t_9};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3356, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_upstream_d8_dir, __pyx_t_9};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3356, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_upstream_d8_dir);
      __Pyx_GIVEREF(__pyx_n_u_upstream_d8_dir);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_n_u_upstream_d8_dir);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3361
 *         # record the downstream connected component for all the upstream
 *         # connected components
 *         for upstream_id in upstream_id_list:             # <<<<<<<<<<<<<<
 *             upstream_to_downstream_id[upstream_id] = (
 *                 source_stream_point.source_id)
 */
    if (likely(PyList_CheckExact(__pyx_v_upstream_id_list)) || PyTuple_CheckExact(__pyx_v_upstream_id_list)) {
      __pyx_t_8 = __pyx_v_upstream_id_list; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_upstream_id_list); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3361, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3361, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3361, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3361, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3361, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_14(__pyx_t_8);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 3361, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_upstream_id, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3363
 *         for upstream_id in upstream_id_list:
 *             upstream_to_downstream_id[upstream_id] = (
 *                 source_stream_point.source_id)             # <<<<<<<<<<<<<<
 * 
 *         # record the upstream connected components for the downstream component
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_source_stream_point.source_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "src/geoprocessing/routing/routing.pyx":3362
 *         # connected components
 *         for upstream_id in upstream_id_list:
 *             upstream_to_downstream_id[upstream_id] = (             # <<<<<<<<<<<<<<
 *                 source_stream_point.source_id)
 * 
 */
      if (unlikely(PyDict_SetItem(__pyx_v_upstream_to_downstream_id, __pyx_v_upstream_id, __pyx_t_1) < 0)) __PYX_ERR(0, 3362, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3361
 *         # record the downstream connected component for all the upstream
 *         # connected components
 *         for upstream_id in upstream_id_list:             # <<<<<<<<<<<<<<
 *             upstream_to_downstream_id[upstream_id] = (
 *                 source_stream_point.source_id)
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3366
 * 
 *         # record the upstream connected components for the downstream component
 *         downstream_to_upstream_ids[source_stream_point.source_id] = (             # <<<<<<<<<<<<<<
 *             upstream_id_list)
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_source_stream_point.source_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(PyDict_SetItem(__pyx_v_downstream_to_upstream_ids, __pyx_t_8, __pyx_v_upstream_id_list) < 0)) __PYX_ERR(0, 3366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3370
 * 
 *         # if no upstream it means it is an order 1 source stream
 *         if not upstream_id_list:             # <<<<<<<<<<<<<<
 *             stream_feature.SetField('order', 1)
 *         stream_feature.SetGeometry(stream_line)
 */
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_upstream_id_list); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3370, __pyx_L1_error)
    __pyx_t_5 = ((!__pyx_t_21) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":3371
 *         # if no upstream it means it is an order 1 source stream
 *         if not upstream_id_list:
 *             stream_feature.SetField('order', 1)             # <<<<<<<<<<<<<<
 *         stream_feature.SetGeometry(stream_line)
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3370
 * 
 *         # if no upstream it means it is an order 1 source stream
 *         if not upstream_id_list:             # <<<<<<<<<<<<<<
 *             stream_feature.SetField('order', 1)
 *         stream_feature.SetGeometry(stream_line)
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3372
 *         if not upstream_id_list:
 *             stream_feature.SetField('order', 1)
 *         stream_feature.SetGeometry(stream_line)             # <<<<<<<<<<<<<<
 * 
 *         # calculate the drop distance
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_v_stream_line) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_stream_line);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3375
 * 
 *         # calculate the drop distance
 *         upstream_dem = dem_managed_raster.get(x_u, y_u)             # <<<<<<<<<<<<<<
 *         drop_distance = upstream_dem - downstream_dem
 *         stream_feature.SetField('drop_distance', drop_distance)
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_x_u); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3375, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_y_u); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3375, __pyx_L1_error)
    __pyx_v_upstream_dem = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_t_11, __pyx_t_6);

    /* "src/geoprocessing/routing/routing.pyx":3376
 *         # calculate the drop distance
 *         upstream_dem = dem_managed_raster.get(x_u, y_u)
 *         drop_distance = upstream_dem - downstream_dem             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('drop_distance', drop_distance)
 *         stream_feature.SetField(
 */
    __pyx_v_drop_distance = (__pyx_v_upstream_dem - __pyx_v_downstream_dem);

    /* "src/geoprocessing/routing/routing.pyx":3377
 *         upstream_dem = dem_managed_raster.get(x_u, y_u)
 *         drop_distance = upstream_dem - downstream_dem
 *         stream_feature.SetField('drop_distance', drop_distance)             # <<<<<<<<<<<<<<
 *         stream_feature.SetField(
 *             'us_fa', flow_accum_managed_raster.get(x_u, y_u))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_drop_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_drop_distance, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_u_drop_distance, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_drop_distance);
      __Pyx_GIVEREF(__pyx_n_u_drop_distance);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_drop_distance);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3378
 *         drop_distance = upstream_dem - downstream_dem
 *         stream_feature.SetField('drop_distance', drop_distance)
 *         stream_feature.SetField(             # <<<<<<<<<<<<<<
 *             'us_fa', flow_accum_managed_raster.get(x_u, y_u))
 *         stream_feature.SetField('thresh_fa', min_flow_accum_threshold)
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "src/geoprocessing/routing/routing.pyx":3379
 *         stream_feature.SetField('drop_distance', drop_distance)
 *         stream_feature.SetField(
 *             'us_fa', flow_accum_managed_raster.get(x_u, y_u))             # <<<<<<<<<<<<<<
 *         stream_feature.SetField('thresh_fa', min_flow_accum_threshold)
 *         stream_layer.SetFeature(stream_feature)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_x_u); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3379, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_y_u); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3379, __pyx_L1_error)
    __pyx_t_7 = PyFloat_FromDouble(__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_t_6, __pyx_t_11)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_us_fa, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3378, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_us_fa, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3378, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_us_fa);
      __Pyx_GIVEREF(__pyx_n_u_us_fa);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_n_u_us_fa);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3380
 *         stream_feature.SetField(
 *             'us_fa', flow_accum_managed_raster.get(x_u, y_u))
 *         stream_feature.SetField('thresh_fa', min_flow_accum_threshold)             # <<<<<<<<<<<<<<
 *         stream_layer.SetFeature(stream_feature)
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_min_flow_accum_threshold); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_thresh_fa, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_thresh_fa, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3380, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_thresh_fa);
      __Pyx_GIVEREF(__pyx_n_u_thresh_fa);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_n_u_thresh_fa);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3381
 *             'us_fa', flow_accum_managed_raster.get(x_u, y_u))
 *         stream_feature.SetField('thresh_fa', min_flow_accum_threshold)
 *         stream_layer.SetFeature(stream_feature)             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info(
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_stream_feature);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_L39_continue:;
  }

  /* "src/geoprocessing/routing/routing.pyx":3383
 *         stream_layer.SetFeature(stream_feature)
 * 
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): stream segment creation complete')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_kp_u_extract_strahler_streams_d8_str_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_extract_strahler_streams_d8_str_2);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3386
 *         '(extract_strahler_streams_d8): stream segment creation complete')
 * 
 *     LOGGER.info('(extract_strahler_streams_d8): determining stream order')             # <<<<<<<<<<<<<<
 *     # seed the list with all order 1 streams
 *     stream_layer.SetAttributeFilter('"order"=1')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_kp_u_extract_strahler_streams_d8_det) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_extract_strahler_streams_d8_det);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3388
 *     LOGGER.info('(extract_strahler_streams_d8): determining stream order')
 *     # seed the list with all order 1 streams
 *     stream_layer.SetAttributeFilter('"order"=1')             # <<<<<<<<<<<<<<
 *     streams_to_process = [stream_feature for stream_feature in stream_layer]
 *     base_feature_count = len(streams_to_process)
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetAttributeFilter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_kp_u_order_1) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_order_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3389
 *     # seed the list with all order 1 streams
 *     stream_layer.SetAttributeFilter('"order"=1')
 *     streams_to_process = [stream_feature for stream_feature in stream_layer]             # <<<<<<<<<<<<<<
 *     base_feature_count = len(streams_to_process)
 *     outlet_fid_list = []
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3389, __pyx_L50_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_stream_layer)) || PyTuple_CheckExact(__pyx_v_stream_layer)) {
      __pyx_t_8 = __pyx_v_stream_layer; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_stream_layer); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3389, __pyx_L50_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3389, __pyx_L50_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3389, __pyx_L50_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3389, __pyx_L50_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3389, __pyx_L50_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3389, __pyx_L50_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_14(__pyx_t_8);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 3389, __pyx_L50_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_stream_feature, __pyx_t_3);
      __pyx_t_3 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_stream_feature))) __PYX_ERR(0, 3389, __pyx_L50_error)
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_stream_feature); __pyx_7genexpr__pyx_v_stream_feature = 0;
    goto __pyx_L53_exit_scope;
    __pyx_L50_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_stream_feature); __pyx_7genexpr__pyx_v_stream_feature = 0;
    goto __pyx_L1_error;
    __pyx_L53_exit_scope:;
  } /* exit inner scope */
  __pyx_v_streams_to_process = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3390
 *     stream_layer.SetAttributeFilter('"order"=1')
 *     streams_to_process = [stream_feature for stream_feature in stream_layer]
 *     base_feature_count = len(streams_to_process)             # <<<<<<<<<<<<<<
 *     outlet_fid_list = []
 *     while streams_to_process:
 */
  __pyx_t_13 = PyList_GET_SIZE(__pyx_v_streams_to_process); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3390, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_feature_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3391
 *     streams_to_process = [stream_feature for stream_feature in stream_layer]
 *     base_feature_count = len(streams_to_process)
 *     outlet_fid_list = []             # <<<<<<<<<<<<<<
 *     while streams_to_process:
 *         if ctime(NULL)-last_log_time > 2.0:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_outlet_fid_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3392
 *     base_feature_count = len(streams_to_process)
 *     outlet_fid_list = []
 *     while streams_to_process:             # <<<<<<<<<<<<<<
 *         if ctime(NULL)-last_log_time > 2.0:
 *             LOGGER.info(
 */
  while (1) {
    __pyx_t_5 = (PyList_GET_SIZE(__pyx_v_streams_to_process) != 0);
    if (!__pyx_t_5) break;

    /* "src/geoprocessing/routing/routing.pyx":3393
 *     outlet_fid_list = []
 *     while streams_to_process:
 *         if ctime(NULL)-last_log_time > 2.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > 2.0) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":3394
 *     while streams_to_process:
 *         if ctime(NULL)-last_log_time > 2.0:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(extract_strahler_streams_d8): '
 *                 'stream order processing: '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3395
 *         if ctime(NULL)-last_log_time > 2.0:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'stream order processing: '
 *                 f'{base_feature_count-len(streams_to_process)} of '
 */
      __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_13 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_extract_strahler_streams_d8_str_3);
      __pyx_t_13 += 56;
      __Pyx_GIVEREF(__pyx_kp_u_extract_strahler_streams_d8_str_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_extract_strahler_streams_d8_str_3);

      /* "src/geoprocessing/routing/routing.pyx":3397
 *                 '(extract_strahler_streams_d8): '
 *                 'stream order processing: '
 *                 f'{base_feature_count-len(streams_to_process)} of '             # <<<<<<<<<<<<<<
 *                 f'{base_feature_count} stream fragments complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_15 = PyList_GET_SIZE(__pyx_v_streams_to_process); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3397, __pyx_L1_error)
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyNumber_Subtract(__pyx_v_base_feature_count, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_16;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_13 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_of);

      /* "src/geoprocessing/routing/routing.pyx":3398
 *                 'stream order processing: '
 *                 f'{base_feature_count-len(streams_to_process)} of '
 *                 f'{base_feature_count} stream fragments complete')             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *         # fetch the downstream and connected upstream ids
 */
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_base_feature_count, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_16;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u_stream_fragments_complete);
      __pyx_t_13 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_stream_fragments_complete);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u_stream_fragments_complete);

      /* "src/geoprocessing/routing/routing.pyx":3395
 *         if ctime(NULL)-last_log_time > 2.0:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'stream order processing: '
 *                 f'{base_feature_count-len(streams_to_process)} of '
 */
      __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_8, 5, __pyx_t_13, __pyx_t_16); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3399
 *                 f'{base_feature_count-len(streams_to_process)} of '
 *                 f'{base_feature_count} stream fragments complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         # fetch the downstream and connected upstream ids
 *         stream_feature = streams_to_process.pop(0)
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":3393
 *     outlet_fid_list = []
 *     while streams_to_process:
 *         if ctime(NULL)-last_log_time > 2.0:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3401
 *             last_log_time = ctime(NULL)
 *         # fetch the downstream and connected upstream ids
 *         stream_feature = streams_to_process.pop(0)             # <<<<<<<<<<<<<<
 *         stream_fid = stream_feature.GetFID()
 *         if stream_fid not in upstream_to_downstream_id:
 */
    __pyx_t_1 = __Pyx_PyList_PopIndex(__pyx_v_streams_to_process, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_stream_feature, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3402
 *         # fetch the downstream and connected upstream ids
 *         stream_feature = streams_to_process.pop(0)
 *         stream_fid = stream_feature.GetFID()             # <<<<<<<<<<<<<<
 *         if stream_fid not in upstream_to_downstream_id:
 *             # it's an outlet so no downstream to process
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_stream_fid, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3403
 *         stream_feature = streams_to_process.pop(0)
 *         stream_fid = stream_feature.GetFID()
 *         if stream_fid not in upstream_to_downstream_id:             # <<<<<<<<<<<<<<
 *             # it's an outlet so no downstream to process
 *             stream_feature.SetField('outlet', 1)
 */
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_stream_fid, __pyx_v_upstream_to_downstream_id, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 3403, __pyx_L1_error)
    __pyx_t_21 = (__pyx_t_5 != 0);
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3405
 *         if stream_fid not in upstream_to_downstream_id:
 *             # it's an outlet so no downstream to process
 *             stream_feature.SetField('outlet', 1)             # <<<<<<<<<<<<<<
 *             stream_layer.SetFeature(stream_feature)
 *             outlet_fid_list.append(stream_feature.GetFID())
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3406
 *             # it's an outlet so no downstream to process
 *             stream_feature.SetField('outlet', 1)
 *             stream_layer.SetFeature(stream_feature)             # <<<<<<<<<<<<<<
 *             outlet_fid_list.append(stream_feature.GetFID())
 *             stream_feature = None
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_stream_feature);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3407
 *             stream_feature.SetField('outlet', 1)
 *             stream_layer.SetFeature(stream_feature)
 *             outlet_fid_list.append(stream_feature.GetFID())             # <<<<<<<<<<<<<<
 *             stream_feature = None
 *             continue
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_outlet_fid_list, __pyx_t_3); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3407, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3408
 *             stream_layer.SetFeature(stream_feature)
 *             outlet_fid_list.append(stream_feature.GetFID())
 *             stream_feature = None             # <<<<<<<<<<<<<<
 *             continue
 *         downstream_fid = upstream_to_downstream_id[stream_fid]
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_stream_feature, Py_None);

      /* "src/geoprocessing/routing/routing.pyx":3409
 *             outlet_fid_list.append(stream_feature.GetFID())
 *             stream_feature = None
 *             continue             # <<<<<<<<<<<<<<
 *         downstream_fid = upstream_to_downstream_id[stream_fid]
 *         downstream_feature = stream_layer.GetFeature(downstream_fid)
 */
      goto __pyx_L54_continue;

      /* "src/geoprocessing/routing/routing.pyx":3403
 *         stream_feature = streams_to_process.pop(0)
 *         stream_fid = stream_feature.GetFID()
 *         if stream_fid not in upstream_to_downstream_id:             # <<<<<<<<<<<<<<
 *             # it's an outlet so no downstream to process
 *             stream_feature.SetField('outlet', 1)
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3410
 *             stream_feature = None
 *             continue
 *         downstream_fid = upstream_to_downstream_id[stream_fid]             # <<<<<<<<<<<<<<
 *         downstream_feature = stream_layer.GetFeature(downstream_fid)
 *         if downstream_feature.GetField('order') is not None:
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_upstream_to_downstream_id, __pyx_v_stream_fid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_downstream_fid, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3411
 *             continue
 *         downstream_fid = upstream_to_downstream_id[stream_fid]
 *         downstream_feature = stream_layer.GetFeature(downstream_fid)             # <<<<<<<<<<<<<<
 *         if downstream_feature.GetField('order') is not None:
 *             # downstream component already processed
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_v_downstream_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_downstream_fid);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_downstream_feature, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3412
 *         downstream_fid = upstream_to_downstream_id[stream_fid]
 *         downstream_feature = stream_layer.GetFeature(downstream_fid)
 *         if downstream_feature.GetField('order') is not None:             # <<<<<<<<<<<<<<
 *             # downstream component already processed
 *             downstream_feature = None
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_downstream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_n_u_order) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_order);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_21 = (__pyx_t_3 != Py_None);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_21 != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":3414
 *         if downstream_feature.GetField('order') is not None:
 *             # downstream component already processed
 *             downstream_feature = None             # <<<<<<<<<<<<<<
 *             continue
 *         connected_upstream_fids = downstream_to_upstream_ids[downstream_fid]
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_downstream_feature, Py_None);

      /* "src/geoprocessing/routing/routing.pyx":3415
 *             # downstream component already processed
 *             downstream_feature = None
 *             continue             # <<<<<<<<<<<<<<
 *         connected_upstream_fids = downstream_to_upstream_ids[downstream_fid]
 *         # check that all upstream IDs are defined and construct stream order
 */
      goto __pyx_L54_continue;

      /* "src/geoprocessing/routing/routing.pyx":3412
 *         downstream_fid = upstream_to_downstream_id[stream_fid]
 *         downstream_feature = stream_layer.GetFeature(downstream_fid)
 *         if downstream_feature.GetField('order') is not None:             # <<<<<<<<<<<<<<
 *             # downstream component already processed
 *             downstream_feature = None
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3416
 *             downstream_feature = None
 *             continue
 *         connected_upstream_fids = downstream_to_upstream_ids[downstream_fid]             # <<<<<<<<<<<<<<
 *         # check that all upstream IDs are defined and construct stream order
 *         # list
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_downstream_fid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_connected_upstream_fids, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3419
 *         # check that all upstream IDs are defined and construct stream order
 *         # list
 *         stream_order_list = []             # <<<<<<<<<<<<<<
 *         all_defined = True
 *         for upstream_fid in connected_upstream_fids:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_stream_order_list, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3420
 *         # list
 *         stream_order_list = []
 *         all_defined = True             # <<<<<<<<<<<<<<
 *         for upstream_fid in connected_upstream_fids:
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)
 */
    __pyx_v_all_defined = 1;

    /* "src/geoprocessing/routing/routing.pyx":3421
 *         stream_order_list = []
 *         all_defined = True
 *         for upstream_fid in connected_upstream_fids:             # <<<<<<<<<<<<<<
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)
 *             upstream_order = upstream_feature.GetField('order')
 */
    if (likely(PyList_CheckExact(__pyx_v_connected_upstream_fids)) || PyTuple_CheckExact(__pyx_v_connected_upstream_fids)) {
      __pyx_t_3 = __pyx_v_connected_upstream_fids; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_connected_upstream_fids); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3421, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3421, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3421, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_14(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 3421, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_upstream_fid, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3422
 *         all_defined = True
 *         for upstream_fid in connected_upstream_fids:
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)             # <<<<<<<<<<<<<<
 *             upstream_order = upstream_feature.GetField('order')
 *             if upstream_order is not None:
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_v_upstream_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_upstream_fid);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_upstream_feature, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3423
 *         for upstream_fid in connected_upstream_fids:
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)
 *             upstream_order = upstream_feature.GetField('order')             # <<<<<<<<<<<<<<
 *             if upstream_order is not None:
 *                 stream_order_list.append(upstream_order)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_upstream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_n_u_order) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_n_u_order);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_upstream_order, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3424
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)
 *             upstream_order = upstream_feature.GetField('order')
 *             if upstream_order is not None:             # <<<<<<<<<<<<<<
 *                 stream_order_list.append(upstream_order)
 *             else:
 */
      __pyx_t_5 = (__pyx_v_upstream_order != Py_None);
      __pyx_t_21 = (__pyx_t_5 != 0);
      if (__pyx_t_21) {

        /* "src/geoprocessing/routing/routing.pyx":3425
 *             upstream_order = upstream_feature.GetField('order')
 *             if upstream_order is not None:
 *                 stream_order_list.append(upstream_order)             # <<<<<<<<<<<<<<
 *             else:
 *                 # found an upstream not defined, that means it'll be processed
 */
        __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_stream_order_list, __pyx_v_upstream_order); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3425, __pyx_L1_error)

        /* "src/geoprocessing/routing/routing.pyx":3424
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)
 *             upstream_order = upstream_feature.GetField('order')
 *             if upstream_order is not None:             # <<<<<<<<<<<<<<
 *                 stream_order_list.append(upstream_order)
 *             else:
 */
        goto __pyx_L61;
      }

      /* "src/geoprocessing/routing/routing.pyx":3429
 *                 # found an upstream not defined, that means it'll be processed
 *                 # later
 *                 all_defined = False             # <<<<<<<<<<<<<<
 *                 break
 *         if not all_defined:
 */
      /*else*/ {
        __pyx_v_all_defined = 0;

        /* "src/geoprocessing/routing/routing.pyx":3430
 *                 # later
 *                 all_defined = False
 *                 break             # <<<<<<<<<<<<<<
 *         if not all_defined:
 *             # we'll revisit this stream later when the other connected
 */
        goto __pyx_L60_break;
      }
      __pyx_L61:;

      /* "src/geoprocessing/routing/routing.pyx":3421
 *         stream_order_list = []
 *         all_defined = True
 *         for upstream_fid in connected_upstream_fids:             # <<<<<<<<<<<<<<
 *             upstream_feature = stream_layer.GetFeature(upstream_fid)
 *             upstream_order = upstream_feature.GetField('order')
 */
    }
    __pyx_L60_break:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3431
 *                 all_defined = False
 *                 break
 *         if not all_defined:             # <<<<<<<<<<<<<<
 *             # we'll revisit this stream later when the other connected
 *             # components are processed
 */
    __pyx_t_21 = ((!(__pyx_v_all_defined != 0)) != 0);
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3434
 *             # we'll revisit this stream later when the other connected
 *             # components are processed
 *             continue             # <<<<<<<<<<<<<<
 *         sorted_stream_order_list = sorted(stream_order_list)
 *         downstream_order = sorted_stream_order_list[-1]
 */
      goto __pyx_L54_continue;

      /* "src/geoprocessing/routing/routing.pyx":3431
 *                 all_defined = False
 *                 break
 *         if not all_defined:             # <<<<<<<<<<<<<<
 *             # we'll revisit this stream later when the other connected
 *             # components are processed
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3435
 *             # components are processed
 *             continue
 *         sorted_stream_order_list = sorted(stream_order_list)             # <<<<<<<<<<<<<<
 *         downstream_order = sorted_stream_order_list[-1]
 *         if len(sorted_stream_order_list) > 1 and (
 */
    __pyx_t_1 = PySequence_List(__pyx_v_stream_order_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_27 = PyList_Sort(__pyx_t_3); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3435, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_sorted_stream_order_list, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3436
 *             continue
 *         sorted_stream_order_list = sorted(stream_order_list)
 *         downstream_order = sorted_stream_order_list[-1]             # <<<<<<<<<<<<<<
 *         if len(sorted_stream_order_list) > 1 and (
 *                 sorted_stream_order_list[-1] ==
 */
    if (unlikely(__pyx_v_sorted_stream_order_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 3436, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_sorted_stream_order_list, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_downstream_order, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3437
 *         sorted_stream_order_list = sorted(stream_order_list)
 *         downstream_order = sorted_stream_order_list[-1]
 *         if len(sorted_stream_order_list) > 1 and (             # <<<<<<<<<<<<<<
 *                 sorted_stream_order_list[-1] ==
 *                 sorted_stream_order_list[-2]):
 */
    if (unlikely(__pyx_v_sorted_stream_order_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 3437, __pyx_L1_error)
    }
    __pyx_t_13 = PyList_GET_SIZE(__pyx_v_sorted_stream_order_list); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3437, __pyx_L1_error)
    __pyx_t_5 = ((__pyx_t_13 > 1) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_21 = __pyx_t_5;
      goto __pyx_L64_bool_binop_done;
    }

    /* "src/geoprocessing/routing/routing.pyx":3438
 *         downstream_order = sorted_stream_order_list[-1]
 *         if len(sorted_stream_order_list) > 1 and (
 *                 sorted_stream_order_list[-1] ==             # <<<<<<<<<<<<<<
 *                 sorted_stream_order_list[-2]):
 *             # if there are at least two equal order streams feeding in,
 */
    if (unlikely(__pyx_v_sorted_stream_order_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 3438, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_sorted_stream_order_list, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "src/geoprocessing/routing/routing.pyx":3439
 *         if len(sorted_stream_order_list) > 1 and (
 *                 sorted_stream_order_list[-1] ==
 *                 sorted_stream_order_list[-2]):             # <<<<<<<<<<<<<<
 *             # if there are at least two equal order streams feeding in,
 *             # we go up one order
 */
    if (unlikely(__pyx_v_sorted_stream_order_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 3439, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_sorted_stream_order_list, -2L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3438
 *         downstream_order = sorted_stream_order_list[-1]
 *         if len(sorted_stream_order_list) > 1 and (
 *                 sorted_stream_order_list[-1] ==             # <<<<<<<<<<<<<<
 *                 sorted_stream_order_list[-2]):
 *             # if there are at least two equal order streams feeding in,
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 3438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_21 = __pyx_t_5;
    __pyx_L64_bool_binop_done:;

    /* "src/geoprocessing/routing/routing.pyx":3437
 *         sorted_stream_order_list = sorted(stream_order_list)
 *         downstream_order = sorted_stream_order_list[-1]
 *         if len(sorted_stream_order_list) > 1 and (             # <<<<<<<<<<<<<<
 *                 sorted_stream_order_list[-1] ==
 *                 sorted_stream_order_list[-2]):
 */
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3442
 *             # if there are at least two equal order streams feeding in,
 *             # we go up one order
 *             downstream_order += 1             # <<<<<<<<<<<<<<
 *         downstream_feature.SetField('order', downstream_order)
 *         stream_layer.SetFeature(downstream_feature)
 */
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_downstream_order, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF_SET(__pyx_v_downstream_order, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3437
 *         sorted_stream_order_list = sorted(stream_order_list)
 *         downstream_order = sorted_stream_order_list[-1]
 *         if len(sorted_stream_order_list) > 1 and (             # <<<<<<<<<<<<<<
 *                 sorted_stream_order_list[-1] ==
 *                 sorted_stream_order_list[-2]):
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3443
 *             # we go up one order
 *             downstream_order += 1
 *         downstream_feature.SetField('order', downstream_order)             # <<<<<<<<<<<<<<
 *         stream_layer.SetFeature(downstream_feature)
 *         streams_to_process.append(downstream_feature)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_downstream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_order, __pyx_v_downstream_order};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3443, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_order, __pyx_v_downstream_order};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3443, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_order);
      __Pyx_GIVEREF(__pyx_n_u_order);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_11, __pyx_n_u_order);
      __Pyx_INCREF(__pyx_v_downstream_order);
      __Pyx_GIVEREF(__pyx_v_downstream_order);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_11, __pyx_v_downstream_order);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3444
 *             downstream_order += 1
 *         downstream_feature.SetField('order', downstream_order)
 *         stream_layer.SetFeature(downstream_feature)             # <<<<<<<<<<<<<<
 *         streams_to_process.append(downstream_feature)
 *         downstream_feature = None
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_9 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_8, __pyx_v_downstream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_downstream_feature);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3445
 *         downstream_feature.SetField('order', downstream_order)
 *         stream_layer.SetFeature(downstream_feature)
 *         streams_to_process.append(downstream_feature)             # <<<<<<<<<<<<<<
 *         downstream_feature = None
 *     LOGGER.info(
 */
    __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_streams_to_process, __pyx_v_downstream_feature); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3445, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":3446
 *         stream_layer.SetFeature(downstream_feature)
 *         streams_to_process.append(downstream_feature)
 *         downstream_feature = None             # <<<<<<<<<<<<<<
 *     LOGGER.info(
 *         '(extract_strahler_streams_d8): stream order processing complete')
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_downstream_feature, Py_None);
    __pyx_L54_continue:;
  }

  /* "src/geoprocessing/routing/routing.pyx":3447
 *         streams_to_process.append(downstream_feature)
 *         downstream_feature = None
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): stream order processing complete')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_1, __pyx_kp_u_extract_strahler_streams_d8_str_4) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_extract_strahler_streams_d8_str_4);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3450
 *         '(extract_strahler_streams_d8): stream order processing complete')
 * 
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): determine rivers')
 *     working_river_id = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_9 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_8, __pyx_kp_u_extract_strahler_streams_d8_det_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_extract_strahler_streams_d8_det_2);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3452
 *     LOGGER.info(
 *         '(extract_strahler_streams_d8): determine rivers')
 *     working_river_id = 0             # <<<<<<<<<<<<<<
 *     for outlet_index, outlet_fid in enumerate(outlet_fid_list):
 *         # walk upstream starting from this outlet to search for rivers
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_working_river_id = __pyx_int_0;

  /* "src/geoprocessing/routing/routing.pyx":3453
 *         '(extract_strahler_streams_d8): determine rivers')
 *     working_river_id = 0
 *     for outlet_index, outlet_fid in enumerate(outlet_fid_list):             # <<<<<<<<<<<<<<
 *         # walk upstream starting from this outlet to search for rivers
 *         # defined as stream segments whose order is <= river_order. Note it
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_9 = __pyx_int_0;
  __pyx_t_1 = __pyx_v_outlet_fid_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_13 = 0;
  for (;;) {
    if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 3453, __pyx_L1_error)
    #else
    __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_outlet_fid, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_outlet_index, __pyx_t_9);
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9);
    __pyx_t_9 = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3458
 *         # can be < river_order because we may have some streams that have
 *         # outlets for shorter rivers that can't get to river_order.
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    __pyx_t_21 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3459
 *         # outlets for shorter rivers that can't get to river_order.
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(extract_strahler_streams_d8): '
 *                 'flow accumulation adjustment '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3460
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'flow accumulation adjustment '
 *                 f'{outlet_index+1} of {len(outlet_fid_list)} '
 */
      __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_15 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_extract_strahler_streams_d8_flo);
      __pyx_t_15 += 60;
      __Pyx_GIVEREF(__pyx_kp_u_extract_strahler_streams_d8_flo);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_extract_strahler_streams_d8_flo);

      /* "src/geoprocessing/routing/routing.pyx":3462
 *                 '(extract_strahler_streams_d8): '
 *                 'flow accumulation adjustment '
 *                 f'{outlet_index+1} of {len(outlet_fid_list)} '             # <<<<<<<<<<<<<<
 *                 'outlets complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_outlet_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_15 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_of);
      __pyx_t_28 = PyList_GET_SIZE(__pyx_v_outlet_fid_list); if (unlikely(__pyx_t_28 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3462, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_28, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_outlets_complete);
      __pyx_t_15 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_outlets_complete);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_outlets_complete);

      /* "src/geoprocessing/routing/routing.pyx":3460
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'flow accumulation adjustment '
 *                 f'{outlet_index+1} of {len(outlet_fid_list)} '
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3464
 *                 f'{outlet_index+1} of {len(outlet_fid_list)} '
 *                 'outlets complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         search_stack = [outlet_fid]
 *         while search_stack:
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":3458
 *         # can be < river_order because we may have some streams that have
 *         # outlets for shorter rivers that can't get to river_order.
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3465
 *                 'outlets complete')
 *             last_log_time = ctime(NULL)
 *         search_stack = [outlet_fid]             # <<<<<<<<<<<<<<
 *         while search_stack:
 *             stream_layer.CommitTransaction()
 */
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_outlet_fid);
    __Pyx_GIVEREF(__pyx_v_outlet_fid);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_outlet_fid);
    __Pyx_XDECREF_SET(__pyx_v_search_stack, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3466
 *             last_log_time = ctime(NULL)
 *         search_stack = [outlet_fid]
 *         while search_stack:             # <<<<<<<<<<<<<<
 *             stream_layer.CommitTransaction()
 *             stream_layer.StartTransaction()
 */
    while (1) {
      __pyx_t_21 = (PyList_GET_SIZE(__pyx_v_search_stack) != 0);
      if (!__pyx_t_21) break;

      /* "src/geoprocessing/routing/routing.pyx":3467
 *         search_stack = [outlet_fid]
 *         while search_stack:
 *             stream_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 *             stream_layer.StartTransaction()
 *             feature_id = search_stack.pop()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3468
 *         while search_stack:
 *             stream_layer.CommitTransaction()
 *             stream_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *             feature_id = search_stack.pop()
 *             stream_feature = stream_layer.GetFeature(feature_id)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3469
 *             stream_layer.CommitTransaction()
 *             stream_layer.StartTransaction()
 *             feature_id = search_stack.pop()             # <<<<<<<<<<<<<<
 *             stream_feature = stream_layer.GetFeature(feature_id)
 *             stream_order = stream_feature.GetField('order')
 */
      __pyx_t_8 = __Pyx_PyList_Pop(__pyx_v_search_stack); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_feature_id, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3470
 *             stream_layer.StartTransaction()
 *             feature_id = search_stack.pop()
 *             stream_feature = stream_layer.GetFeature(feature_id)             # <<<<<<<<<<<<<<
 *             stream_order = stream_feature.GetField('order')
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_v_feature_id) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_feature_id);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_stream_feature, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3471
 *             feature_id = search_stack.pop()
 *             stream_feature = stream_layer.GetFeature(feature_id)
 *             stream_order = stream_feature.GetField('order')             # <<<<<<<<<<<<<<
 * 
 *             if (stream_order > river_order or
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_n_u_order) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_order);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_stream_order, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3473
 *             stream_order = stream_feature.GetField('order')
 * 
 *             if (stream_order > river_order or             # <<<<<<<<<<<<<<
 *                     stream_feature.GetField('river_id') is not None):
 *                 # keep walking upstream until there's an order <= river_order
 */
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_river_order); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_stream_order, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3473, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 3473, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_5) {
      } else {
        __pyx_t_21 = __pyx_t_5;
        goto __pyx_L72_bool_binop_done;
      }

      /* "src/geoprocessing/routing/routing.pyx":3474
 * 
 *             if (stream_order > river_order or
 *                     stream_feature.GetField('river_id') is not None):             # <<<<<<<<<<<<<<
 *                 # keep walking upstream until there's an order <= river_order
 *                 search_stack.extend(
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, __pyx_n_u_river_id) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_n_u_river_id);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_5 = (__pyx_t_7 != Py_None);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_29 = (__pyx_t_5 != 0);
      __pyx_t_21 = __pyx_t_29;
      __pyx_L72_bool_binop_done:;

      /* "src/geoprocessing/routing/routing.pyx":3473
 *             stream_order = stream_feature.GetField('order')
 * 
 *             if (stream_order > river_order or             # <<<<<<<<<<<<<<
 *                     stream_feature.GetField('river_id') is not None):
 *                 # keep walking upstream until there's an order <= river_order
 */
      if (__pyx_t_21) {

        /* "src/geoprocessing/routing/routing.pyx":3477
 *                 # keep walking upstream until there's an order <= river_order
 *                 search_stack.extend(
 *                     downstream_to_upstream_ids[feature_id])             # <<<<<<<<<<<<<<
 *             else:
 *                 # walk up the stream setting every upstream segment's
 */
        __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_feature_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3477, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "src/geoprocessing/routing/routing.pyx":3476
 *                     stream_feature.GetField('river_id') is not None):
 *                 # keep walking upstream until there's an order <= river_order
 *                 search_stack.extend(             # <<<<<<<<<<<<<<
 *                     downstream_to_upstream_ids[feature_id])
 *             else:
 */
        __pyx_t_27 = __Pyx_PyList_Extend(__pyx_v_search_stack, __pyx_t_7); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3476, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3473
 *             stream_order = stream_feature.GetField('order')
 * 
 *             if (stream_order > river_order or             # <<<<<<<<<<<<<<
 *                     stream_feature.GetField('river_id') is not None):
 *                 # keep walking upstream until there's an order <= river_order
 */
        goto __pyx_L71;
      }

      /* "src/geoprocessing/routing/routing.pyx":3481
 *                 # walk up the stream setting every upstream segment's
 *                 # river_id to working_river_id
 *                 stream_layer.SetFeature(stream_feature)             # <<<<<<<<<<<<<<
 *                 upstream_stack = [feature_id]
 * 
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_stream_feature);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3482
 *                 # river_id to working_river_id
 *                 stream_layer.SetFeature(stream_feature)
 *                 upstream_stack = [feature_id]             # <<<<<<<<<<<<<<
 * 
 *                 streams_by_order = collections.defaultdict(list)
 */
        __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_feature_id);
        __Pyx_GIVEREF(__pyx_v_feature_id);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_feature_id);
        __Pyx_XDECREF_SET(__pyx_v_upstream_stack, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3484
 *                 upstream_stack = [feature_id]
 * 
 *                 streams_by_order = collections.defaultdict(list)             # <<<<<<<<<<<<<<
 *                 drop_distance_collection = collections.defaultdict(list)
 *                 max_upstream_flow_accum = collections.defaultdict(int)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_collections); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, ((PyObject *)(&PyList_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)(&PyList_Type)));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_streams_by_order, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3485
 * 
 *                 streams_by_order = collections.defaultdict(list)
 *                 drop_distance_collection = collections.defaultdict(list)             # <<<<<<<<<<<<<<
 *                 max_upstream_flow_accum = collections.defaultdict(int)
 *                 while upstream_stack:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_collections); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, ((PyObject *)(&PyList_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_8, ((PyObject *)(&PyList_Type)));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_drop_distance_collection, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3486
 *                 streams_by_order = collections.defaultdict(list)
 *                 drop_distance_collection = collections.defaultdict(list)
 *                 max_upstream_flow_accum = collections.defaultdict(int)             # <<<<<<<<<<<<<<
 *                 while upstream_stack:
 *                     feature_id = upstream_stack.pop()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_collections); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3486, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3486, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, ((PyObject *)(&PyInt_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)(&PyInt_Type)));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3486, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_max_upstream_flow_accum, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3487
 *                 drop_distance_collection = collections.defaultdict(list)
 *                 max_upstream_flow_accum = collections.defaultdict(int)
 *                 while upstream_stack:             # <<<<<<<<<<<<<<
 *                     feature_id = upstream_stack.pop()
 *                     stream_feature = stream_layer.GetFeature(feature_id)
 */
        while (1) {
          __pyx_t_21 = (PyList_GET_SIZE(__pyx_v_upstream_stack) != 0);
          if (!__pyx_t_21) break;

          /* "src/geoprocessing/routing/routing.pyx":3488
 *                 max_upstream_flow_accum = collections.defaultdict(int)
 *                 while upstream_stack:
 *                     feature_id = upstream_stack.pop()             # <<<<<<<<<<<<<<
 *                     stream_feature = stream_layer.GetFeature(feature_id)
 *                     stream_feature.SetField('river_id', working_river_id)
 */
          __pyx_t_7 = __Pyx_PyList_Pop(__pyx_v_upstream_stack); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF_SET(__pyx_v_feature_id, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3489
 *                 while upstream_stack:
 *                     feature_id = upstream_stack.pop()
 *                     stream_feature = stream_layer.GetFeature(feature_id)             # <<<<<<<<<<<<<<
 *                     stream_feature.SetField('river_id', working_river_id)
 *                     stream_layer.SetFeature(stream_feature)
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3489, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_v_feature_id) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_feature_id);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3489, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF_SET(__pyx_v_stream_feature, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3490
 *                     feature_id = upstream_stack.pop()
 *                     stream_feature = stream_layer.GetFeature(feature_id)
 *                     stream_feature.SetField('river_id', working_river_id)             # <<<<<<<<<<<<<<
 *                     stream_layer.SetFeature(stream_feature)
 *                     order = stream_feature.GetField('order')
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3490, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          __pyx_t_11 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_11 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_river_id, __pyx_v_working_river_id};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3490, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_7);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_river_id, __pyx_v_working_river_id};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3490, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_7);
          } else
          #endif
          {
            __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3490, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (__pyx_t_8) {
              __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
            }
            __Pyx_INCREF(__pyx_n_u_river_id);
            __Pyx_GIVEREF(__pyx_n_u_river_id);
            PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_n_u_river_id);
            __Pyx_INCREF(__pyx_v_working_river_id);
            __Pyx_GIVEREF(__pyx_v_working_river_id);
            PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_v_working_river_id);
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3490, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3491
 *                     stream_feature = stream_layer.GetFeature(feature_id)
 *                     stream_feature.SetField('river_id', working_river_id)
 *                     stream_layer.SetFeature(stream_feature)             # <<<<<<<<<<<<<<
 *                     order = stream_feature.GetField('order')
 *                     streams_by_order[order].append(stream_feature)
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stream_feature);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3492
 *                     stream_feature.SetField('river_id', working_river_id)
 *                     stream_layer.SetFeature(stream_feature)
 *                     order = stream_feature.GetField('order')             # <<<<<<<<<<<<<<
 *                     streams_by_order[order].append(stream_feature)
 *                     drop_distance_collection[order].append(
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_n_u_order) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_order);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3493
 *                     stream_layer.SetFeature(stream_feature)
 *                     order = stream_feature.GetField('order')
 *                     streams_by_order[order].append(stream_feature)             # <<<<<<<<<<<<<<
 *                     drop_distance_collection[order].append(
 *                         stream_feature.GetField('drop_distance'))
 */
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_streams_by_order, __pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3493, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_27 = __Pyx_PyObject_Append(__pyx_t_7, __pyx_v_stream_feature); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3493, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3494
 *                     order = stream_feature.GetField('order')
 *                     streams_by_order[order].append(stream_feature)
 *                     drop_distance_collection[order].append(             # <<<<<<<<<<<<<<
 *                         stream_feature.GetField('drop_distance'))
 *                     max_upstream_flow_accum[order] = max(
 */
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3494, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);

          /* "src/geoprocessing/routing/routing.pyx":3495
 *                     streams_by_order[order].append(stream_feature)
 *                     drop_distance_collection[order].append(
 *                         stream_feature.GetField('drop_distance'))             # <<<<<<<<<<<<<<
 *                     max_upstream_flow_accum[order] = max(
 *                         max_upstream_flow_accum[order],
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_n_u_drop_distance) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_drop_distance);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3494
 *                     order = stream_feature.GetField('order')
 *                     streams_by_order[order].append(stream_feature)
 *                     drop_distance_collection[order].append(             # <<<<<<<<<<<<<<
 *                         stream_feature.GetField('drop_distance'))
 *                     max_upstream_flow_accum[order] = max(
 */
          __pyx_t_27 = __Pyx_PyObject_Append(__pyx_t_7, __pyx_t_4); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3494, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3498
 *                     max_upstream_flow_accum[order] = max(
 *                         max_upstream_flow_accum[order],
 *                         stream_feature.GetField('us_fa'))             # <<<<<<<<<<<<<<
 *                     stream_feature = None
 *                     upstream_stack.extend(
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3498, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_n_u_us_fa) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_us_fa);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3498, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3497
 *                         stream_feature.GetField('drop_distance'))
 *                     max_upstream_flow_accum[order] = max(
 *                         max_upstream_flow_accum[order],             # <<<<<<<<<<<<<<
 *                         stream_feature.GetField('us_fa'))
 *                     stream_feature = None
 */
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_max_upstream_flow_accum, __pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3497, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);

          /* "src/geoprocessing/routing/routing.pyx":3498
 *                     max_upstream_flow_accum[order] = max(
 *                         max_upstream_flow_accum[order],
 *                         stream_feature.GetField('us_fa'))             # <<<<<<<<<<<<<<
 *                     stream_feature = None
 *                     upstream_stack.extend(
 */
          __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3498, __pyx_L1_error)
          __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3498, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (__pyx_t_21) {
            __Pyx_INCREF(__pyx_t_4);
            __pyx_t_3 = __pyx_t_4;
          } else {
            __Pyx_INCREF(__pyx_t_7);
            __pyx_t_3 = __pyx_t_7;
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __pyx_t_3;
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3496
 *                     drop_distance_collection[order].append(
 *                         stream_feature.GetField('drop_distance'))
 *                     max_upstream_flow_accum[order] = max(             # <<<<<<<<<<<<<<
 *                         max_upstream_flow_accum[order],
 *                         stream_feature.GetField('us_fa'))
 */
          if (unlikely(PyObject_SetItem(__pyx_v_max_upstream_flow_accum, __pyx_v_order, __pyx_t_4) < 0)) __PYX_ERR(0, 3496, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3499
 *                         max_upstream_flow_accum[order],
 *                         stream_feature.GetField('us_fa'))
 *                     stream_feature = None             # <<<<<<<<<<<<<<
 *                     upstream_stack.extend(
 *                         downstream_to_upstream_ids[feature_id])
 */
          __Pyx_INCREF(Py_None);
          __Pyx_DECREF_SET(__pyx_v_stream_feature, Py_None);

          /* "src/geoprocessing/routing/routing.pyx":3501
 *                     stream_feature = None
 *                     upstream_stack.extend(
 *                         downstream_to_upstream_ids[feature_id])             # <<<<<<<<<<<<<<
 * 
 *                 working_flow_accum_threshold = min_flow_accum_threshold
 */
          __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_feature_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3501, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "src/geoprocessing/routing/routing.pyx":3500
 *                         stream_feature.GetField('us_fa'))
 *                     stream_feature = None
 *                     upstream_stack.extend(             # <<<<<<<<<<<<<<
 *                         downstream_to_upstream_ids[feature_id])
 * 
 */
          __pyx_t_27 = __Pyx_PyList_Extend(__pyx_v_upstream_stack, __pyx_t_4); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3500, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }

        /* "src/geoprocessing/routing/routing.pyx":3503
 *                         downstream_to_upstream_ids[feature_id])
 * 
 *                 working_flow_accum_threshold = min_flow_accum_threshold             # <<<<<<<<<<<<<<
 *                 while drop_distance_collection and autotune_flow_accumulation:
 *                     stream_layer.CommitTransaction()
 */
        __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_min_flow_accum_threshold); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_working_flow_accum_threshold, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3504
 * 
 *                 working_flow_accum_threshold = min_flow_accum_threshold
 *                 while drop_distance_collection and autotune_flow_accumulation:             # <<<<<<<<<<<<<<
 *                     stream_layer.CommitTransaction()
 *                     stream_layer.StartTransaction()
 */
        while (1) {
          __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_v_drop_distance_collection); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3504, __pyx_L1_error)
          if (__pyx_t_29) {
          } else {
            __pyx_t_21 = __pyx_t_29;
            goto __pyx_L78_bool_binop_done;
          }
          __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_v_autotune_flow_accumulation); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3504, __pyx_L1_error)
          __pyx_t_21 = __pyx_t_29;
          __pyx_L78_bool_binop_done:;
          if (!__pyx_t_21) break;

          /* "src/geoprocessing/routing/routing.pyx":3505
 *                 working_flow_accum_threshold = min_flow_accum_threshold
 *                 while drop_distance_collection and autotune_flow_accumulation:
 *                     stream_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 *                     stream_layer.StartTransaction()
 *                     # decide how much bigger to make the flow_accum
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3505, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3505, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3506
 *                 while drop_distance_collection and autotune_flow_accumulation:
 *                     stream_layer.CommitTransaction()
 *                     stream_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *                     # decide how much bigger to make the flow_accum
 *                     # find a test_order that tests p_val > 0.5 then retest
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3509
 *                     # decide how much bigger to make the flow_accum
 *                     # find a test_order that tests p_val > 0.5 then retest
 *                     test_order = min(drop_distance_collection)             # <<<<<<<<<<<<<<
 *                     while test_order+1 <= max(drop_distance_collection):
 *                         if (len(drop_distance_collection[test_order]) < 3 or
 */
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_v_drop_distance_collection); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3509, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_v_test_order, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3510
 *                     # find a test_order that tests p_val > 0.5 then retest
 *                     test_order = min(drop_distance_collection)
 *                     while test_order+1 <= max(drop_distance_collection):             # <<<<<<<<<<<<<<
 *                         if (len(drop_distance_collection[test_order]) < 3 or
 *                                 len(drop_distance_collection[
 */
          while (1) {
            __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_test_order, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3510, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_drop_distance_collection); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3510, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3510, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3510, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (!__pyx_t_21) break;

            /* "src/geoprocessing/routing/routing.pyx":3511
 *                     test_order = min(drop_distance_collection)
 *                     while test_order+1 <= max(drop_distance_collection):
 *                         if (len(drop_distance_collection[test_order]) < 3 or             # <<<<<<<<<<<<<<
 *                                 len(drop_distance_collection[
 *                                     test_order+1]) < 3):
 */
            __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_v_test_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_15 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3511, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_29 = ((__pyx_t_15 < 3) != 0);
            if (!__pyx_t_29) {
            } else {
              __pyx_t_21 = __pyx_t_29;
              goto __pyx_L83_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":3513
 *                         if (len(drop_distance_collection[test_order]) < 3 or
 *                                 len(drop_distance_collection[
 *                                     test_order+1]) < 3):             # <<<<<<<<<<<<<<
 *                             # too small to test so it's not significant
 *                             break
 */
            __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_test_order, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);

            /* "src/geoprocessing/routing/routing.pyx":3512
 *                     while test_order+1 <= max(drop_distance_collection):
 *                         if (len(drop_distance_collection[test_order]) < 3 or
 *                                 len(drop_distance_collection[             # <<<<<<<<<<<<<<
 *                                     test_order+1]) < 3):
 *                             # too small to test so it's not significant
 */
            __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3512, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_15 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3512, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3513
 *                         if (len(drop_distance_collection[test_order]) < 3 or
 *                                 len(drop_distance_collection[
 *                                     test_order+1]) < 3):             # <<<<<<<<<<<<<<
 *                             # too small to test so it's not significant
 *                             break
 */
            __pyx_t_29 = ((__pyx_t_15 < 3) != 0);
            __pyx_t_21 = __pyx_t_29;
            __pyx_L83_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":3511
 *                     test_order = min(drop_distance_collection)
 *                     while test_order+1 <= max(drop_distance_collection):
 *                         if (len(drop_distance_collection[test_order]) < 3 or             # <<<<<<<<<<<<<<
 *                                 len(drop_distance_collection[
 *                                     test_order+1]) < 3):
 */
            if (__pyx_t_21) {

              /* "src/geoprocessing/routing/routing.pyx":3515
 *                                     test_order+1]) < 3):
 *                             # too small to test so it's not significant
 *                             break             # <<<<<<<<<<<<<<
 *                         _, p_val = scipy.stats.ttest_ind(
 *                             drop_distance_collection[test_order],
 */
              goto __pyx_L81_break;

              /* "src/geoprocessing/routing/routing.pyx":3511
 *                     test_order = min(drop_distance_collection)
 *                     while test_order+1 <= max(drop_distance_collection):
 *                         if (len(drop_distance_collection[test_order]) < 3 or             # <<<<<<<<<<<<<<
 *                                 len(drop_distance_collection[
 *                                     test_order+1]) < 3):
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3516
 *                             # too small to test so it's not significant
 *                             break
 *                         _, p_val = scipy.stats.ttest_ind(             # <<<<<<<<<<<<<<
 *                             drop_distance_collection[test_order],
 *                             drop_distance_collection[test_order+1],
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_scipy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3516, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stats); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3516, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_ttest_ind); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3516, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3517
 *                             break
 *                         _, p_val = scipy.stats.ttest_ind(
 *                             drop_distance_collection[test_order],             # <<<<<<<<<<<<<<
 *                             drop_distance_collection[test_order+1],
 *                             equal_var=True)
 */
            __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_v_test_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3517, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);

            /* "src/geoprocessing/routing/routing.pyx":3518
 *                         _, p_val = scipy.stats.ttest_ind(
 *                             drop_distance_collection[test_order],
 *                             drop_distance_collection[test_order+1],             # <<<<<<<<<<<<<<
 *                             equal_var=True)
 *                         if p_val > min_p_val or numpy.isnan(p_val):
 */
            __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_test_order, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3518, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3518, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3516
 *                             # too small to test so it's not significant
 *                             break
 *                         _, p_val = scipy.stats.ttest_ind(             # <<<<<<<<<<<<<<
 *                             drop_distance_collection[test_order],
 *                             drop_distance_collection[test_order+1],
 */
            __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3516, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
            __pyx_t_7 = 0;
            __pyx_t_8 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3519
 *                             drop_distance_collection[test_order],
 *                             drop_distance_collection[test_order+1],
 *                             equal_var=True)             # <<<<<<<<<<<<<<
 *                         if p_val > min_p_val or numpy.isnan(p_val):
 *                             # not too big or just too few elements
 */
            __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3519, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_equal_var, Py_True) < 0) __PYX_ERR(0, 3519, __pyx_L1_error)

            /* "src/geoprocessing/routing/routing.pyx":3516
 *                             # too small to test so it's not significant
 *                             break
 *                         _, p_val = scipy.stats.ttest_ind(             # <<<<<<<<<<<<<<
 *                             drop_distance_collection[test_order],
 *                             drop_distance_collection[test_order+1],
 */
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3516, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
              PyObject* sequence = __pyx_t_7;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 2)) {
                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 3516, __pyx_L1_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
              } else {
                __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
              }
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_4);
              #else
              __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3516, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3516, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3516, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
              index = 0; __pyx_t_8 = __pyx_t_10(__pyx_t_3); if (unlikely(!__pyx_t_8)) goto __pyx_L85_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_8);
              index = 1; __pyx_t_4 = __pyx_t_10(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L85_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_4);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_3), 2) < 0) __PYX_ERR(0, 3516, __pyx_L1_error)
              __pyx_t_10 = NULL;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              goto __pyx_L86_unpacking_done;
              __pyx_L85_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_10 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 3516, __pyx_L1_error)
              __pyx_L86_unpacking_done:;
            }
            __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_8);
            __pyx_t_8 = 0;
            __Pyx_XDECREF_SET(__pyx_v_p_val, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3520
 *                             drop_distance_collection[test_order+1],
 *                             equal_var=True)
 *                         if p_val > min_p_val or numpy.isnan(p_val):             # <<<<<<<<<<<<<<
 *                             # not too big or just too few elements
 *                             break
 */
            __pyx_t_7 = PyFloat_FromDouble(__pyx_v_min_p_val); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_4 = PyObject_RichCompare(__pyx_v_p_val, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (!__pyx_t_29) {
            } else {
              __pyx_t_21 = __pyx_t_29;
              goto __pyx_L88_bool_binop_done;
            }
            __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_isnan); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_p_val) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_p_val);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3520, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_21 = __pyx_t_29;
            __pyx_L88_bool_binop_done:;
            if (__pyx_t_21) {

              /* "src/geoprocessing/routing/routing.pyx":3522
 *                         if p_val > min_p_val or numpy.isnan(p_val):
 *                             # not too big or just too few elements
 *                             break             # <<<<<<<<<<<<<<
 *                         test_order += 1
 *                     if test_order == min(drop_distance_collection):
 */
              goto __pyx_L81_break;

              /* "src/geoprocessing/routing/routing.pyx":3520
 *                             drop_distance_collection[test_order+1],
 *                             equal_var=True)
 *                         if p_val > min_p_val or numpy.isnan(p_val):             # <<<<<<<<<<<<<<
 *                             # not too big or just too few elements
 *                             break
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3523
 *                             # not too big or just too few elements
 *                             break
 *                         test_order += 1             # <<<<<<<<<<<<<<
 *                     if test_order == min(drop_distance_collection):
 *                         # order 1/2 streams are not statistically different
 */
            __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_test_order, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3523, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF_SET(__pyx_v_test_order, __pyx_t_4);
            __pyx_t_4 = 0;
          }
          __pyx_L81_break:;

          /* "src/geoprocessing/routing/routing.pyx":3524
 *                             break
 *                         test_order += 1
 *                     if test_order == min(drop_distance_collection):             # <<<<<<<<<<<<<<
 *                         # order 1/2 streams are not statistically different
 *                         break
 */
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_v_drop_distance_collection); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3524, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyObject_RichCompare(__pyx_v_test_order, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3524, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3524, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (__pyx_t_21) {

            /* "src/geoprocessing/routing/routing.pyx":3526
 *                     if test_order == min(drop_distance_collection):
 *                         # order 1/2 streams are not statistically different
 *                         break             # <<<<<<<<<<<<<<
 *                     # try to make a reasonable estimate for flow accum
 *                     working_flow_accum_threshold *= 1.25
 */
            goto __pyx_L77_break;

            /* "src/geoprocessing/routing/routing.pyx":3524
 *                             break
 *                         test_order += 1
 *                     if test_order == min(drop_distance_collection):             # <<<<<<<<<<<<<<
 *                         # order 1/2 streams are not statistically different
 *                         break
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":3528
 *                         break
 *                     # try to make a reasonable estimate for flow accum
 *                     working_flow_accum_threshold *= 1.25             # <<<<<<<<<<<<<<
 *                     # reconstruct stream segments of <= test_order
 *                     for order in range(1, test_order+1):
 */
          __pyx_t_8 = PyNumber_InPlaceMultiply(__pyx_v_working_flow_accum_threshold, __pyx_float_1_25); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF_SET(__pyx_v_working_flow_accum_threshold, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "src/geoprocessing/routing/routing.pyx":3530
 *                     working_flow_accum_threshold *= 1.25
 *                     # reconstruct stream segments of <= test_order
 *                     for order in range(1, test_order+1):             # <<<<<<<<<<<<<<
 *                         # This will build up a list of kept or reconstructed
 *                         # streams. Other streams will be deleted.
 */
          __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_test_order, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_1);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
            __pyx_t_4 = __pyx_t_8; __Pyx_INCREF(__pyx_t_4); __pyx_t_15 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_15 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3530, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3530, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_8); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3530, __pyx_L1_error)
                #else
                __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3530, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                #endif
              } else {
                if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_15); __Pyx_INCREF(__pyx_t_8); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3530, __pyx_L1_error)
                #else
                __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3530, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                #endif
              }
            } else {
              __pyx_t_8 = __pyx_t_14(__pyx_t_4);
              if (unlikely(!__pyx_t_8)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 3530, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_8);
            }
            __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_8);
            __pyx_t_8 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3533
 *                         # This will build up a list of kept or reconstructed
 *                         # streams. Other streams will be deleted.
 *                         streams_to_retest = []             # <<<<<<<<<<<<<<
 *                         # The drop distance set will be recalculated
 *                         # dynamically for the next loop
 */
            __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3533, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_XDECREF_SET(__pyx_v_streams_to_retest, ((PyObject*)__pyx_t_8));
            __pyx_t_8 = 0;

            /* "src/geoprocessing/routing/routing.pyx":3536
 *                         # The drop distance set will be recalculated
 *                         # dynamically for the next loop
 *                         if order in max_upstream_flow_accum:             # <<<<<<<<<<<<<<
 *                             del max_upstream_flow_accum[order]
 *                         if order in drop_distance_collection:
 */
            __pyx_t_21 = (__Pyx_PySequence_ContainsTF(__pyx_v_order, __pyx_v_max_upstream_flow_accum, Py_EQ)); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3536, __pyx_L1_error)
            __pyx_t_29 = (__pyx_t_21 != 0);
            if (__pyx_t_29) {

              /* "src/geoprocessing/routing/routing.pyx":3537
 *                         # dynamically for the next loop
 *                         if order in max_upstream_flow_accum:
 *                             del max_upstream_flow_accum[order]             # <<<<<<<<<<<<<<
 *                         if order in drop_distance_collection:
 *                             del drop_distance_collection[order]
 */
              if (unlikely(PyObject_DelItem(__pyx_v_max_upstream_flow_accum, __pyx_v_order) < 0)) __PYX_ERR(0, 3537, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3536
 *                         # The drop distance set will be recalculated
 *                         # dynamically for the next loop
 *                         if order in max_upstream_flow_accum:             # <<<<<<<<<<<<<<
 *                             del max_upstream_flow_accum[order]
 *                         if order in drop_distance_collection:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3538
 *                         if order in max_upstream_flow_accum:
 *                             del max_upstream_flow_accum[order]
 *                         if order in drop_distance_collection:             # <<<<<<<<<<<<<<
 *                             del drop_distance_collection[order]
 *                         while streams_by_order[order]:
 */
            __pyx_t_29 = (__Pyx_PySequence_ContainsTF(__pyx_v_order, __pyx_v_drop_distance_collection, Py_EQ)); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3538, __pyx_L1_error)
            __pyx_t_21 = (__pyx_t_29 != 0);
            if (__pyx_t_21) {

              /* "src/geoprocessing/routing/routing.pyx":3539
 *                             del max_upstream_flow_accum[order]
 *                         if order in drop_distance_collection:
 *                             del drop_distance_collection[order]             # <<<<<<<<<<<<<<
 *                         while streams_by_order[order]:
 *                             stream_feature = streams_by_order[order].pop()
 */
              if (unlikely(PyObject_DelItem(__pyx_v_drop_distance_collection, __pyx_v_order) < 0)) __PYX_ERR(0, 3539, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3538
 *                         if order in max_upstream_flow_accum:
 *                             del max_upstream_flow_accum[order]
 *                         if order in drop_distance_collection:             # <<<<<<<<<<<<<<
 *                             del drop_distance_collection[order]
 *                         while streams_by_order[order]:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3540
 *                         if order in drop_distance_collection:
 *                             del drop_distance_collection[order]
 *                         while streams_by_order[order]:             # <<<<<<<<<<<<<<
 *                             stream_feature = streams_by_order[order].pop()
 *                             if (stream_feature.GetField('ds_fa') <
 */
            while (1) {
              __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_streams_by_order, __pyx_v_order); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3540, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3540, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (!__pyx_t_21) break;

              /* "src/geoprocessing/routing/routing.pyx":3541
 *                             del drop_distance_collection[order]
 *                         while streams_by_order[order]:
 *                             stream_feature = streams_by_order[order].pop()             # <<<<<<<<<<<<<<
 *                             if (stream_feature.GetField('ds_fa') <
 *                                     working_flow_accum_threshold):
 */
              __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_streams_by_order, __pyx_v_order); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3541, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = __Pyx_PyObject_Pop(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3541, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF_SET(__pyx_v_stream_feature, __pyx_t_7);
              __pyx_t_7 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3542
 *                         while streams_by_order[order]:
 *                             stream_feature = streams_by_order[order].pop()
 *                             if (stream_feature.GetField('ds_fa') <             # <<<<<<<<<<<<<<
 *                                     working_flow_accum_threshold):
 *                                 # this flow accumulation is too small, it's
 */
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3542, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_3 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_8, function);
                }
              }
              __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_n_u_ds_fa) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_n_u_ds_fa);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3542, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3543
 *                             stream_feature = streams_by_order[order].pop()
 *                             if (stream_feature.GetField('ds_fa') <
 *                                     working_flow_accum_threshold):             # <<<<<<<<<<<<<<
 *                                 # this flow accumulation is too small, it's
 *                                 # not relevant anymore
 */
              __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_working_flow_accum_threshold, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3542, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3542
 *                         while streams_by_order[order]:
 *                             stream_feature = streams_by_order[order].pop()
 *                             if (stream_feature.GetField('ds_fa') <             # <<<<<<<<<<<<<<
 *                                     working_flow_accum_threshold):
 *                                 # this flow accumulation is too small, it's
 */
              __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3542, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (__pyx_t_21) {

                /* "src/geoprocessing/routing/routing.pyx":3547
 *                                 # not relevant anymore
 *                                 # remove from connectivity and delete
 *                                 _delete_feature(             # <<<<<<<<<<<<<<
 *                                     stream_feature, stream_layer,
 *                                     upstream_to_downstream_id,
 */
                __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_delete_feature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3547, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);

                /* "src/geoprocessing/routing/routing.pyx":3550
 *                                     stream_feature, stream_layer,
 *                                     upstream_to_downstream_id,
 *                                     downstream_to_upstream_ids)             # <<<<<<<<<<<<<<
 *                                 continue
 *                             if (stream_feature.GetField('us_fa') >=
 */
                __pyx_t_3 = NULL;
                __pyx_t_11 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
                  __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
                  if (likely(__pyx_t_3)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                    __Pyx_INCREF(__pyx_t_3);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_7, function);
                    __pyx_t_11 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_7)) {
                  PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_stream_feature, __pyx_v_stream_layer, __pyx_v_upstream_to_downstream_id, __pyx_v_downstream_to_upstream_ids};
                  __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 4+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3547, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_GOTREF(__pyx_t_8);
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
                  PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_stream_feature, __pyx_v_stream_layer, __pyx_v_upstream_to_downstream_id, __pyx_v_downstream_to_upstream_ids};
                  __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 4+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3547, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_GOTREF(__pyx_t_8);
                } else
                #endif
                {
                  __pyx_t_2 = PyTuple_New(4+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3547, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  if (__pyx_t_3) {
                    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
                  }
                  __Pyx_INCREF(__pyx_v_stream_feature);
                  __Pyx_GIVEREF(__pyx_v_stream_feature);
                  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_11, __pyx_v_stream_feature);
                  __Pyx_INCREF(__pyx_v_stream_layer);
                  __Pyx_GIVEREF(__pyx_v_stream_layer);
                  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_11, __pyx_v_stream_layer);
                  __Pyx_INCREF(__pyx_v_upstream_to_downstream_id);
                  __Pyx_GIVEREF(__pyx_v_upstream_to_downstream_id);
                  PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_11, __pyx_v_upstream_to_downstream_id);
                  __Pyx_INCREF(__pyx_v_downstream_to_upstream_ids);
                  __Pyx_GIVEREF(__pyx_v_downstream_to_upstream_ids);
                  PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_11, __pyx_v_downstream_to_upstream_ids);
                  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3547, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                }
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3551
 *                                     upstream_to_downstream_id,
 *                                     downstream_to_upstream_ids)
 *                                 continue             # <<<<<<<<<<<<<<
 *                             if (stream_feature.GetField('us_fa') >=
 *                                     working_flow_accum_threshold):
 */
                goto __pyx_L95_continue;

                /* "src/geoprocessing/routing/routing.pyx":3542
 *                         while streams_by_order[order]:
 *                             stream_feature = streams_by_order[order].pop()
 *                             if (stream_feature.GetField('ds_fa') <             # <<<<<<<<<<<<<<
 *                                     working_flow_accum_threshold):
 *                                 # this flow accumulation is too small, it's
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":3552
 *                                     downstream_to_upstream_ids)
 *                                 continue
 *                             if (stream_feature.GetField('us_fa') >=             # <<<<<<<<<<<<<<
 *                                     working_flow_accum_threshold):
 *                                 # this whole stream still fits in the
 */
              __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3552, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_2 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
                __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
                if (likely(__pyx_t_2)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                  __Pyx_INCREF(__pyx_t_2);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_7, function);
                }
              }
              __pyx_t_8 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_n_u_us_fa) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_us_fa);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3552, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3553
 *                                 continue
 *                             if (stream_feature.GetField('us_fa') >=
 *                                     working_flow_accum_threshold):             # <<<<<<<<<<<<<<
 *                                 # this whole stream still fits in the
 *                                 # threshold so keep it
 */
              __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_v_working_flow_accum_threshold, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3552, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3552
 *                                     downstream_to_upstream_ids)
 *                                 continue
 *                             if (stream_feature.GetField('us_fa') >=             # <<<<<<<<<<<<<<
 *                                     working_flow_accum_threshold):
 *                                 # this whole stream still fits in the
 */
              __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3552, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (__pyx_t_21) {

                /* "src/geoprocessing/routing/routing.pyx":3557
 *                                 # threshold so keep it
 *                                 # add drop distance to working set
 *                                 drop_distance_collection[order].append(             # <<<<<<<<<<<<<<
 *                                     stream_feature.GetField('drop_distance'))
 *                                 max_upstream_flow_accum[order] = max(
 */
                __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3557, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);

                /* "src/geoprocessing/routing/routing.pyx":3558
 *                                 # add drop distance to working set
 *                                 drop_distance_collection[order].append(
 *                                     stream_feature.GetField('drop_distance'))             # <<<<<<<<<<<<<<
 *                                 max_upstream_flow_accum[order] = max(
 *                                     max_upstream_flow_accum[order],
 */
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3558, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_3 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                  __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
                  if (likely(__pyx_t_3)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                    __Pyx_INCREF(__pyx_t_3);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_2, function);
                  }
                }
                __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_drop_distance) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_drop_distance);
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3558, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3557
 *                                 # threshold so keep it
 *                                 # add drop distance to working set
 *                                 drop_distance_collection[order].append(             # <<<<<<<<<<<<<<
 *                                     stream_feature.GetField('drop_distance'))
 *                                 max_upstream_flow_accum[order] = max(
 */
                __pyx_t_27 = __Pyx_PyObject_Append(__pyx_t_7, __pyx_t_8); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3557, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3561
 *                                 max_upstream_flow_accum[order] = max(
 *                                     max_upstream_flow_accum[order],
 *                                     stream_feature.GetField('us_fa'))             # <<<<<<<<<<<<<<
 *                                 stream_layer.SetFeature(stream_feature)
 *                                 streams_to_retest.append(stream_feature)
 */
                __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3561, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_2 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
                  __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
                  if (likely(__pyx_t_2)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                    __Pyx_INCREF(__pyx_t_2);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_7, function);
                  }
                }
                __pyx_t_8 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_n_u_us_fa) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_us_fa);
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3561, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3560
 *                                     stream_feature.GetField('drop_distance'))
 *                                 max_upstream_flow_accum[order] = max(
 *                                     max_upstream_flow_accum[order],             # <<<<<<<<<<<<<<
 *                                     stream_feature.GetField('us_fa'))
 *                                 stream_layer.SetFeature(stream_feature)
 */
                __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_max_upstream_flow_accum, __pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3560, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);

                /* "src/geoprocessing/routing/routing.pyx":3561
 *                                 max_upstream_flow_accum[order] = max(
 *                                     max_upstream_flow_accum[order],
 *                                     stream_feature.GetField('us_fa'))             # <<<<<<<<<<<<<<
 *                                 stream_layer.SetFeature(stream_feature)
 *                                 streams_to_retest.append(stream_feature)
 */
                __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3561, __pyx_L1_error)
                __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3561, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_21) {
                  __Pyx_INCREF(__pyx_t_8);
                  __pyx_t_2 = __pyx_t_8;
                } else {
                  __Pyx_INCREF(__pyx_t_7);
                  __pyx_t_2 = __pyx_t_7;
                }
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = __pyx_t_2;
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3559
 *                                 drop_distance_collection[order].append(
 *                                     stream_feature.GetField('drop_distance'))
 *                                 max_upstream_flow_accum[order] = max(             # <<<<<<<<<<<<<<
 *                                     max_upstream_flow_accum[order],
 *                                     stream_feature.GetField('us_fa'))
 */
                if (unlikely(PyObject_SetItem(__pyx_v_max_upstream_flow_accum, __pyx_v_order, __pyx_t_8) < 0)) __PYX_ERR(0, 3559, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3562
 *                                     max_upstream_flow_accum[order],
 *                                     stream_feature.GetField('us_fa'))
 *                                 stream_layer.SetFeature(stream_feature)             # <<<<<<<<<<<<<<
 *                                 streams_to_retest.append(stream_feature)
 *                                 continue
 */
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3562, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_7 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                  __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
                  if (likely(__pyx_t_7)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                    __Pyx_INCREF(__pyx_t_7);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_2, function);
                  }
                }
                __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_stream_feature);
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3562, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3563
 *                                     stream_feature.GetField('us_fa'))
 *                                 stream_layer.SetFeature(stream_feature)
 *                                 streams_to_retest.append(stream_feature)             # <<<<<<<<<<<<<<
 *                                 continue
 *                             # recalculate stream geometry
 */
                __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_streams_to_retest, __pyx_v_stream_feature); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3563, __pyx_L1_error)

                /* "src/geoprocessing/routing/routing.pyx":3564
 *                                 stream_layer.SetFeature(stream_feature)
 *                                 streams_to_retest.append(stream_feature)
 *                                 continue             # <<<<<<<<<<<<<<
 *                             # recalculate stream geometry
 *                             ds_x = stream_feature.GetField('ds_x')
 */
                goto __pyx_L95_continue;

                /* "src/geoprocessing/routing/routing.pyx":3552
 *                                     downstream_to_upstream_ids)
 *                                 continue
 *                             if (stream_feature.GetField('us_fa') >=             # <<<<<<<<<<<<<<
 *                                     working_flow_accum_threshold):
 *                                 # this whole stream still fits in the
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":3566
 *                                 continue
 *                             # recalculate stream geometry
 *                             ds_x = stream_feature.GetField('ds_x')             # <<<<<<<<<<<<<<
 *                             ds_y = stream_feature.GetField('ds_y')
 *                             upstream_d8_dir = stream_feature.GetField(
 */
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3566, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_2, function);
                }
              }
              __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_n_u_ds_x) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ds_x);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3566, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ds_x, __pyx_t_8);
              __pyx_t_8 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3567
 *                             # recalculate stream geometry
 *                             ds_x = stream_feature.GetField('ds_x')
 *                             ds_y = stream_feature.GetField('ds_y')             # <<<<<<<<<<<<<<
 *                             upstream_d8_dir = stream_feature.GetField(
 *                                 'upstream_d8_dir')
 */
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3567, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_2, function);
                }
              }
              __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_n_u_ds_y) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ds_y);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3567, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ds_y, __pyx_t_8);
              __pyx_t_8 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3568
 *                             ds_x = stream_feature.GetField('ds_x')
 *                             ds_y = stream_feature.GetField('ds_y')
 *                             upstream_d8_dir = stream_feature.GetField(             # <<<<<<<<<<<<<<
 *                                 'upstream_d8_dir')
 *                             payload = _calculate_stream_geometry(
 */
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3568, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_2, function);
                }
              }
              __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_n_u_upstream_d8_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_upstream_d8_dir);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3568, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF_SET(__pyx_v_upstream_d8_dir, __pyx_t_8);
              __pyx_t_8 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3571
 *                                 'upstream_d8_dir')
 *                             payload = _calculate_stream_geometry(
 *                                 ds_x, ds_y, upstream_d8_dir,             # <<<<<<<<<<<<<<
 *                                 flow_dir_info['geotransform'], n_cols, n_rows,
 *                                 flow_accum_managed_raster,
 */
              __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_ds_x); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3571, __pyx_L1_error)
              __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_ds_y); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3571, __pyx_L1_error)
              __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_upstream_d8_dir); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3571, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3572
 *                             payload = _calculate_stream_geometry(
 *                                 ds_x, ds_y, upstream_d8_dir,
 *                                 flow_dir_info['geotransform'], n_cols, n_rows,             # <<<<<<<<<<<<<<
 *                                 flow_accum_managed_raster,
 *                                 flow_dir_managed_raster, flow_nodata,
 */
              __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_geotransform); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3572, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);

              /* "src/geoprocessing/routing/routing.pyx":3575
 *                                 flow_accum_managed_raster,
 *                                 flow_dir_managed_raster, flow_nodata,
 *                                 working_flow_accum_threshold,             # <<<<<<<<<<<<<<
 *                                 coord_to_stream_ids)
 *                             if payload is None:
 */
              __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_working_flow_accum_threshold); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3575, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3570
 *                             upstream_d8_dir = stream_feature.GetField(
 *                                 'upstream_d8_dir')
 *                             payload = _calculate_stream_geometry(             # <<<<<<<<<<<<<<
 *                                 ds_x, ds_y, upstream_d8_dir,
 *                                 flow_dir_info['geotransform'], n_cols, n_rows,
 */
              __pyx_t_2 = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__calculate_stream_geometry(__pyx_t_11, __pyx_t_6, __pyx_t_17, __pyx_t_8, __pyx_v_n_cols, __pyx_v_n_rows, __pyx_v_flow_accum_managed_raster, __pyx_v_flow_dir_managed_raster, __pyx_v_flow_nodata, __pyx_t_18, __pyx_v_coord_to_stream_ids); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3570, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_XDECREF_SET(__pyx_v_payload, __pyx_t_2);
              __pyx_t_2 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3577
 *                                 working_flow_accum_threshold,
 *                                 coord_to_stream_ids)
 *                             if payload is None:             # <<<<<<<<<<<<<<
 *                                 _delete_feature(
 *                                     stream_feature, stream_layer,
 */
              __pyx_t_21 = (__pyx_v_payload == Py_None);
              __pyx_t_29 = (__pyx_t_21 != 0);
              if (__pyx_t_29) {

                /* "src/geoprocessing/routing/routing.pyx":3578
 *                                 coord_to_stream_ids)
 *                             if payload is None:
 *                                 _delete_feature(             # <<<<<<<<<<<<<<
 *                                     stream_feature, stream_layer,
 *                                     upstream_to_downstream_id,
 */
                __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_delete_feature); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3578, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);

                /* "src/geoprocessing/routing/routing.pyx":3581
 *                                     stream_feature, stream_layer,
 *                                     upstream_to_downstream_id,
 *                                     downstream_to_upstream_ids)             # <<<<<<<<<<<<<<
 *                                 continue
 *                             (x_u, y_u, ds_x_1, ds_y_1, upstream_id_list,
 */
                __pyx_t_7 = NULL;
                __pyx_t_18 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_7)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_7);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                    __pyx_t_18 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_8)) {
                  PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_v_stream_feature, __pyx_v_stream_layer, __pyx_v_upstream_to_downstream_id, __pyx_v_downstream_to_upstream_ids};
                  __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_18, 4+__pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3578, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_2);
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
                  PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_v_stream_feature, __pyx_v_stream_layer, __pyx_v_upstream_to_downstream_id, __pyx_v_downstream_to_upstream_ids};
                  __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_18, 4+__pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3578, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_2);
                } else
                #endif
                {
                  __pyx_t_3 = PyTuple_New(4+__pyx_t_18); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3578, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  if (__pyx_t_7) {
                    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
                  }
                  __Pyx_INCREF(__pyx_v_stream_feature);
                  __Pyx_GIVEREF(__pyx_v_stream_feature);
                  PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_18, __pyx_v_stream_feature);
                  __Pyx_INCREF(__pyx_v_stream_layer);
                  __Pyx_GIVEREF(__pyx_v_stream_layer);
                  PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_18, __pyx_v_stream_layer);
                  __Pyx_INCREF(__pyx_v_upstream_to_downstream_id);
                  __Pyx_GIVEREF(__pyx_v_upstream_to_downstream_id);
                  PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_18, __pyx_v_upstream_to_downstream_id);
                  __Pyx_INCREF(__pyx_v_downstream_to_upstream_ids);
                  __Pyx_GIVEREF(__pyx_v_downstream_to_upstream_ids);
                  PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_18, __pyx_v_downstream_to_upstream_ids);
                  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3578, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                /* "src/geoprocessing/routing/routing.pyx":3582
 *                                     upstream_to_downstream_id,
 *                                     downstream_to_upstream_ids)
 *                                 continue             # <<<<<<<<<<<<<<
 *                             (x_u, y_u, ds_x_1, ds_y_1, upstream_id_list,
 *                                 stream_line) = payload
 */
                goto __pyx_L95_continue;

                /* "src/geoprocessing/routing/routing.pyx":3577
 *                                 working_flow_accum_threshold,
 *                                 coord_to_stream_ids)
 *                             if payload is None:             # <<<<<<<<<<<<<<
 *                                 _delete_feature(
 *                                     stream_feature, stream_layer,
 */
              }

              /* "src/geoprocessing/routing/routing.pyx":3584
 *                                 continue
 *                             (x_u, y_u, ds_x_1, ds_y_1, upstream_id_list,
 *                                 stream_line) = payload             # <<<<<<<<<<<<<<
 *                             # recalculate the drop distance set
 *                             stream_feature.SetGeometry(stream_line)
 */
              if ((likely(PyTuple_CheckExact(__pyx_v_payload))) || (PyList_CheckExact(__pyx_v_payload))) {
                PyObject* sequence = __pyx_v_payload;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 6)) {
                  if (size > 6) __Pyx_RaiseTooManyValuesError(6);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 3583, __pyx_L1_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
                  __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
                  __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
                  __pyx_t_30 = PyTuple_GET_ITEM(sequence, 4); 
                  __pyx_t_31 = PyTuple_GET_ITEM(sequence, 5); 
                } else {
                  __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
                  __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
                  __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
                  __pyx_t_30 = PyList_GET_ITEM(sequence, 4); 
                  __pyx_t_31 = PyList_GET_ITEM(sequence, 5); 
                }
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_30);
                __Pyx_INCREF(__pyx_t_31);
                #else
                {
                  Py_ssize_t i;
                  PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_8,&__pyx_t_3,&__pyx_t_7,&__pyx_t_30,&__pyx_t_31};
                  for (i=0; i < 6; i++) {
                    PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 3583, __pyx_L1_error)
                    __Pyx_GOTREF(item);
                    *(temps[i]) = item;
                  }
                }
                #endif
              } else {
                Py_ssize_t index = -1;
                PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_8,&__pyx_t_3,&__pyx_t_7,&__pyx_t_30,&__pyx_t_31};
                __pyx_t_32 = PyObject_GetIter(__pyx_v_payload); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 3583, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_10 = Py_TYPE(__pyx_t_32)->tp_iternext;
                for (index=0; index < 6; index++) {
                  PyObject* item = __pyx_t_10(__pyx_t_32); if (unlikely(!item)) goto __pyx_L100_unpacking_failed;
                  __Pyx_GOTREF(item);
                  *(temps[index]) = item;
                }
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_32), 6) < 0) __PYX_ERR(0, 3583, __pyx_L1_error)
                __pyx_t_10 = NULL;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                goto __pyx_L101_unpacking_done;
                __pyx_L100_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                __pyx_t_10 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 3583, __pyx_L1_error)
                __pyx_L101_unpacking_done:;
              }

              /* "src/geoprocessing/routing/routing.pyx":3583
 *                                     downstream_to_upstream_ids)
 *                                 continue
 *                             (x_u, y_u, ds_x_1, ds_y_1, upstream_id_list,             # <<<<<<<<<<<<<<
 *                                 stream_line) = payload
 *                             # recalculate the drop distance set
 */
              __Pyx_XDECREF_SET(__pyx_v_x_u, __pyx_t_2);
              __pyx_t_2 = 0;
              __Pyx_XDECREF_SET(__pyx_v_y_u, __pyx_t_8);
              __pyx_t_8 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ds_x_1, __pyx_t_3);
              __pyx_t_3 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ds_y_1, __pyx_t_7);
              __pyx_t_7 = 0;
              __Pyx_XDECREF_SET(__pyx_v_upstream_id_list, __pyx_t_30);
              __pyx_t_30 = 0;
              __Pyx_XDECREF_SET(__pyx_v_stream_line, __pyx_t_31);
              __pyx_t_31 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3586
 *                                 stream_line) = payload
 *                             # recalculate the drop distance set
 *                             stream_feature.SetGeometry(stream_line)             # <<<<<<<<<<<<<<
 *                             upstream_dem = dem_managed_raster.get(x_u, y_u)
 *                             downstream_dem = dem_managed_raster.get(
 */
              __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3586, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_30);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_30))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_30);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_30);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_30, function);
                }
              }
              __pyx_t_31 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_30, __pyx_t_7, __pyx_v_stream_line) : __Pyx_PyObject_CallOneArg(__pyx_t_30, __pyx_v_stream_line);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3586, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3587
 *                             # recalculate the drop distance set
 *                             stream_feature.SetGeometry(stream_line)
 *                             upstream_dem = dem_managed_raster.get(x_u, y_u)             # <<<<<<<<<<<<<<
 *                             downstream_dem = dem_managed_raster.get(
 *                                 ds_x, ds_y)
 */
              __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_x_u); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3587, __pyx_L1_error)
              __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_y_u); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3587, __pyx_L1_error)
              __pyx_v_upstream_dem = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_t_18, __pyx_t_17);

              /* "src/geoprocessing/routing/routing.pyx":3589
 *                             upstream_dem = dem_managed_raster.get(x_u, y_u)
 *                             downstream_dem = dem_managed_raster.get(
 *                                 ds_x, ds_y)             # <<<<<<<<<<<<<<
 *                             drop_distance = upstream_dem - downstream_dem
 *                             drop_distance_collection[order].append(
 */
              __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_ds_x); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3589, __pyx_L1_error)
              __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_ds_y); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3589, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3588
 *                             stream_feature.SetGeometry(stream_line)
 *                             upstream_dem = dem_managed_raster.get(x_u, y_u)
 *                             downstream_dem = dem_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                 ds_x, ds_y)
 *                             drop_distance = upstream_dem - downstream_dem
 */
              __pyx_v_downstream_dem = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_t_17, __pyx_t_18);

              /* "src/geoprocessing/routing/routing.pyx":3590
 *                             downstream_dem = dem_managed_raster.get(
 *                                 ds_x, ds_y)
 *                             drop_distance = upstream_dem - downstream_dem             # <<<<<<<<<<<<<<
 *                             drop_distance_collection[order].append(
 *                                 drop_distance)
 */
              __pyx_v_drop_distance = (__pyx_v_upstream_dem - __pyx_v_downstream_dem);

              /* "src/geoprocessing/routing/routing.pyx":3591
 *                                 ds_x, ds_y)
 *                             drop_distance = upstream_dem - downstream_dem
 *                             drop_distance_collection[order].append(             # <<<<<<<<<<<<<<
 *                                 drop_distance)
 *                             stream_feature.SetField(
 */
              __pyx_t_31 = __Pyx_PyObject_GetItem(__pyx_v_drop_distance_collection, __pyx_v_order); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3591, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3592
 *                             drop_distance = upstream_dem - downstream_dem
 *                             drop_distance_collection[order].append(
 *                                 drop_distance)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'drop_distance', drop_distance)
 */
              __pyx_t_30 = PyFloat_FromDouble(__pyx_v_drop_distance); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3592, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_30);

              /* "src/geoprocessing/routing/routing.pyx":3591
 *                                 ds_x, ds_y)
 *                             drop_distance = upstream_dem - downstream_dem
 *                             drop_distance_collection[order].append(             # <<<<<<<<<<<<<<
 *                                 drop_distance)
 *                             stream_feature.SetField(
 */
              __pyx_t_27 = __Pyx_PyObject_Append(__pyx_t_31, __pyx_t_30); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3591, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3593
 *                             drop_distance_collection[order].append(
 *                                 drop_distance)
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'drop_distance', drop_distance)
 *                             stream_feature.SetField(
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3593, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3594
 *                                 drop_distance)
 *                             stream_feature.SetField(
 *                                 'drop_distance', drop_distance)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'us_fa', flow_accum_managed_raster.get(
 */
              __pyx_t_7 = PyFloat_FromDouble(__pyx_v_drop_distance); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3594, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_3 = NULL;
              __pyx_t_18 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_18 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_drop_distance, __pyx_t_7};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_18, 2+__pyx_t_18); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3593, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_drop_distance, __pyx_t_7};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_18, 2+__pyx_t_18); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3593, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(2+__pyx_t_18); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (__pyx_t_3) {
                  __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_drop_distance);
                __Pyx_GIVEREF(__pyx_n_u_drop_distance);
                PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_18, __pyx_n_u_drop_distance);
                __Pyx_GIVEREF(__pyx_t_7);
                PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_18, __pyx_t_7);
                __pyx_t_7 = 0;
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_8, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3595
 *                             stream_feature.SetField(
 *                                 'drop_distance', drop_distance)
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'us_fa', flow_accum_managed_raster.get(
 *                                     x_u, y_u))
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3597
 *                             stream_feature.SetField(
 *                                 'us_fa', flow_accum_managed_raster.get(
 *                                     x_u, y_u))             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'thresh_fa', working_flow_accum_threshold)
 */
              __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_x_u); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3597, __pyx_L1_error)
              __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_y_u); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3597, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3596
 *                                 'drop_distance', drop_distance)
 *                             stream_feature.SetField(
 *                                 'us_fa', flow_accum_managed_raster.get(             # <<<<<<<<<<<<<<
 *                                     x_u, y_u))
 *                             stream_feature.SetField(
 */
              __pyx_t_8 = PyFloat_FromDouble(__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_t_18, __pyx_t_17)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3596, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_us_fa, __pyx_t_8};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3595, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_us_fa, __pyx_t_8};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3595, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              } else
              #endif
              {
                __pyx_t_3 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3595, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                if (__pyx_t_7) {
                  __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_us_fa);
                __Pyx_GIVEREF(__pyx_n_u_us_fa);
                PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_17, __pyx_n_u_us_fa);
                __Pyx_GIVEREF(__pyx_t_8);
                PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_17, __pyx_t_8);
                __pyx_t_8 = 0;
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_3, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3595, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3598
 *                                 'us_fa', flow_accum_managed_raster.get(
 *                                     x_u, y_u))
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'thresh_fa', working_flow_accum_threshold)
 *                             stream_feature.SetField(
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3599
 *                                     x_u, y_u))
 *                             stream_feature.SetField(
 *                                 'thresh_fa', working_flow_accum_threshold)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'ds_x', ds_x)
 */
              __pyx_t_3 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_thresh_fa, __pyx_v_working_flow_accum_threshold};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3598, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_thresh_fa, __pyx_v_working_flow_accum_threshold};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3598, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3598, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (__pyx_t_3) {
                  __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_thresh_fa);
                __Pyx_GIVEREF(__pyx_n_u_thresh_fa);
                PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_17, __pyx_n_u_thresh_fa);
                __Pyx_INCREF(__pyx_v_working_flow_accum_threshold);
                __Pyx_GIVEREF(__pyx_v_working_flow_accum_threshold);
                PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_17, __pyx_v_working_flow_accum_threshold);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_8, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3598, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3600
 *                             stream_feature.SetField(
 *                                 'thresh_fa', working_flow_accum_threshold)
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'ds_x', ds_x)
 *                             stream_feature.SetField(
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3600, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3601
 *                                 'thresh_fa', working_flow_accum_threshold)
 *                             stream_feature.SetField(
 *                                 'ds_x', ds_x)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'ds_y', ds_y)
 */
              __pyx_t_8 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_8)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_8);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_ds_x, __pyx_v_ds_x};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3600, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_ds_x, __pyx_v_ds_x};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3600, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_3 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3600, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                if (__pyx_t_8) {
                  __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_ds_x);
                __Pyx_GIVEREF(__pyx_n_u_ds_x);
                PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_17, __pyx_n_u_ds_x);
                __Pyx_INCREF(__pyx_v_ds_x);
                __Pyx_GIVEREF(__pyx_v_ds_x);
                PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_17, __pyx_v_ds_x);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_3, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3600, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3602
 *                             stream_feature.SetField(
 *                                 'ds_x', ds_x)
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'ds_y', ds_y)
 *                             stream_feature.SetField(
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3602, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3603
 *                                 'ds_x', ds_x)
 *                             stream_feature.SetField(
 *                                 'ds_y', ds_y)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'ds_x_1', ds_x_1)
 */
              __pyx_t_3 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_ds_y, __pyx_v_ds_y};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3602, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_ds_y, __pyx_v_ds_y};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3602, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3602, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (__pyx_t_3) {
                  __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_ds_y);
                __Pyx_GIVEREF(__pyx_n_u_ds_y);
                PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_17, __pyx_n_u_ds_y);
                __Pyx_INCREF(__pyx_v_ds_y);
                __Pyx_GIVEREF(__pyx_v_ds_y);
                PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_17, __pyx_v_ds_y);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_8, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3602, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3604
 *                             stream_feature.SetField(
 *                                 'ds_y', ds_y)
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'ds_x_1', ds_x_1)
 *                             stream_feature.SetField(
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3604, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3605
 *                                 'ds_y', ds_y)
 *                             stream_feature.SetField(
 *                                 'ds_x_1', ds_x_1)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField(
 *                                 'ds_y_1', ds_y_1)
 */
              __pyx_t_8 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_8)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_8);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_ds_x_1, __pyx_v_ds_x_1};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3604, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_ds_x_1, __pyx_v_ds_x_1};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3604, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_3 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3604, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                if (__pyx_t_8) {
                  __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_ds_x_1);
                __Pyx_GIVEREF(__pyx_n_u_ds_x_1);
                PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_17, __pyx_n_u_ds_x_1);
                __Pyx_INCREF(__pyx_v_ds_x_1);
                __Pyx_GIVEREF(__pyx_v_ds_x_1);
                PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_17, __pyx_v_ds_x_1);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_3, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3604, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3606
 *                             stream_feature.SetField(
 *                                 'ds_x_1', ds_x_1)
 *                             stream_feature.SetField(             # <<<<<<<<<<<<<<
 *                                 'ds_y_1', ds_y_1)
 *                             stream_feature.SetField('us_x', x_u)
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3606, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "src/geoprocessing/routing/routing.pyx":3607
 *                                 'ds_x_1', ds_x_1)
 *                             stream_feature.SetField(
 *                                 'ds_y_1', ds_y_1)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField('us_x', x_u)
 *                             stream_feature.SetField('us_y', y_u)
 */
              __pyx_t_3 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_ds_y_1, __pyx_v_ds_y_1};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3606, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_ds_y_1, __pyx_v_ds_y_1};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3606, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (__pyx_t_3) {
                  __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_ds_y_1);
                __Pyx_GIVEREF(__pyx_n_u_ds_y_1);
                PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_17, __pyx_n_u_ds_y_1);
                __Pyx_INCREF(__pyx_v_ds_y_1);
                __Pyx_GIVEREF(__pyx_v_ds_y_1);
                PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_17, __pyx_v_ds_y_1);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_8, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3608
 *                             stream_feature.SetField(
 *                                 'ds_y_1', ds_y_1)
 *                             stream_feature.SetField('us_x', x_u)             # <<<<<<<<<<<<<<
 *                             stream_feature.SetField('us_y', y_u)
 * 
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3608, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              __pyx_t_8 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_8)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_8);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_us_x, __pyx_v_x_u};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3608, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_us_x, __pyx_v_x_u};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3608, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_3 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3608, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                if (__pyx_t_8) {
                  __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_us_x);
                __Pyx_GIVEREF(__pyx_n_u_us_x);
                PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_17, __pyx_n_u_us_x);
                __Pyx_INCREF(__pyx_v_x_u);
                __Pyx_GIVEREF(__pyx_v_x_u);
                PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_17, __pyx_v_x_u);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_3, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3608, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3609
 *                                 'ds_y_1', ds_y_1)
 *                             stream_feature.SetField('us_x', x_u)
 *                             stream_feature.SetField('us_y', y_u)             # <<<<<<<<<<<<<<
 * 
 *                             streams_to_retest.append(stream_feature)
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3609, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              __pyx_t_3 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_3)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_3);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_us_y, __pyx_v_y_u};
                __pyx_t_30 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3609, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_us_y, __pyx_v_y_u};
                __pyx_t_30 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3609, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_30);
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3609, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (__pyx_t_3) {
                  __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
                }
                __Pyx_INCREF(__pyx_n_u_us_y);
                __Pyx_GIVEREF(__pyx_n_u_us_y);
                PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_17, __pyx_n_u_us_y);
                __Pyx_INCREF(__pyx_v_y_u);
                __Pyx_GIVEREF(__pyx_v_y_u);
                PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_17, __pyx_v_y_u);
                __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_8, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3609, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_30);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

              /* "src/geoprocessing/routing/routing.pyx":3611
 *                             stream_feature.SetField('us_y', y_u)
 * 
 *                             streams_to_retest.append(stream_feature)             # <<<<<<<<<<<<<<
 *                             stream_layer.SetFeature(stream_feature)
 * 
 */
              __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_streams_to_retest, __pyx_v_stream_feature); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3611, __pyx_L1_error)

              /* "src/geoprocessing/routing/routing.pyx":3612
 * 
 *                             streams_to_retest.append(stream_feature)
 *                             stream_layer.SetFeature(stream_feature)             # <<<<<<<<<<<<<<
 * 
 *                         streams_by_order[order] = streams_to_retest
 */
              __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3612, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              __pyx_t_8 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_8)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_8);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                }
              }
              __pyx_t_30 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_8, __pyx_v_stream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_stream_feature);
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3612, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_30);
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
              __pyx_L95_continue:;
            }

            /* "src/geoprocessing/routing/routing.pyx":3614
 *                             stream_layer.SetFeature(stream_feature)
 * 
 *                         streams_by_order[order] = streams_to_retest             # <<<<<<<<<<<<<<
 *                 working_river_id += 1
 * 
 */
            if (unlikely(PyObject_SetItem(__pyx_v_streams_by_order, __pyx_v_order, __pyx_v_streams_to_retest) < 0)) __PYX_ERR(0, 3614, __pyx_L1_error)

            /* "src/geoprocessing/routing/routing.pyx":3530
 *                     working_flow_accum_threshold *= 1.25
 *                     # reconstruct stream segments of <= test_order
 *                     for order in range(1, test_order+1):             # <<<<<<<<<<<<<<
 *                         # This will build up a list of kept or reconstructed
 *                         # streams. Other streams will be deleted.
 */
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_L77_break:;

        /* "src/geoprocessing/routing/routing.pyx":3615
 * 
 *                         streams_by_order[order] = streams_to_retest
 *                 working_river_id += 1             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info(
 */
        __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_working_river_id, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF_SET(__pyx_v_working_river_id, __pyx_t_4);
        __pyx_t_4 = 0;
      }
      __pyx_L71:;
    }

    /* "src/geoprocessing/routing/routing.pyx":3453
 *         '(extract_strahler_streams_d8): determine rivers')
 *     working_river_id = 0
 *     for outlet_index, outlet_fid in enumerate(outlet_fid_list):             # <<<<<<<<<<<<<<
 *         # walk upstream starting from this outlet to search for rivers
 *         # defined as stream segments whose order is <= river_order. Note it
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3617
 *                 working_river_id += 1
 * 
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): '
 *         'flow accumulation adjustment complete')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_kp_u_extract_strahler_streams_d8_flo_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_extract_strahler_streams_d8_flo_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3621
 *         'flow accumulation adjustment complete')
 * 
 *     stream_layer.DeleteField(             # <<<<<<<<<<<<<<
 *         stream_layer.FindFieldIndex('upstream_d8_dir', 1))
 *     stream_layer.CommitTransaction()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_DeleteField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":3622
 * 
 *     stream_layer.DeleteField(
 *         stream_layer.FindFieldIndex('upstream_d8_dir', 1))             # <<<<<<<<<<<<<<
 *     stream_layer.CommitTransaction()
 *     stream_layer.StartTransaction()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_FindFieldIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_30) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_30);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3623
 *     stream_layer.DeleteField(
 *         stream_layer.FindFieldIndex('upstream_d8_dir', 1))
 *     stream_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 *     stream_layer.StartTransaction()
 *     LOGGER.info(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_30 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_30 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_30)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_30);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_30) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_30) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3624
 *         stream_layer.FindFieldIndex('upstream_d8_dir', 1))
 *     stream_layer.CommitTransaction()
 *     stream_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *     LOGGER.info(
 *         '(extract_strahler_streams_d8): '
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_30 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_30 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_30)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_30);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_30) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_30) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3625
 *     stream_layer.CommitTransaction()
 *     stream_layer.StartTransaction()
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): '
 *         'final pass on stream order and geometry')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_30))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_30);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_30);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_30, function);
    }
  }
  __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_30, __pyx_t_4, __pyx_kp_u_extract_strahler_streams_d8_fin) : __Pyx_PyObject_CallOneArg(__pyx_t_30, __pyx_kp_u_extract_strahler_streams_d8_fin);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3630
 * 
 *     # seed the stack with all the upstream orders
 *     working_stack = [             # <<<<<<<<<<<<<<
 *         fid for fid in downstream_to_upstream_ids if
 *         not downstream_to_upstream_ids[fid]]
 */
  { /* enter inner scope */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3630, __pyx_L104_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "src/geoprocessing/routing/routing.pyx":3631
 *     # seed the stack with all the upstream orders
 *     working_stack = [
 *         fid for fid in downstream_to_upstream_ids if             # <<<<<<<<<<<<<<
 *         not downstream_to_upstream_ids[fid]]
 *     fid_to_order = {}
 */
    __pyx_t_13 = 0;
    __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_downstream_to_upstream_ids, 1, ((PyObject *)NULL), (&__pyx_t_15), (&__pyx_t_17)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3631, __pyx_L104_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_30);
    __pyx_t_30 = __pyx_t_4;
    __pyx_t_4 = 0;
    while (1) {
      __pyx_t_18 = __Pyx_dict_iter_next(__pyx_t_30, __pyx_t_15, &__pyx_t_13, &__pyx_t_4, NULL, NULL, __pyx_t_17);
      if (unlikely(__pyx_t_18 == 0)) break;
      if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 3631, __pyx_L104_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_fid, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3632
 *     working_stack = [
 *         fid for fid in downstream_to_upstream_ids if
 *         not downstream_to_upstream_ids[fid]]             # <<<<<<<<<<<<<<
 *     fid_to_order = {}
 *     processed_segments = 0
 */
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_8genexpr1__pyx_v_fid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3632, __pyx_L104_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3632, __pyx_L104_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_21 = ((!__pyx_t_29) != 0);

      /* "src/geoprocessing/routing/routing.pyx":3631
 *     # seed the stack with all the upstream orders
 *     working_stack = [
 *         fid for fid in downstream_to_upstream_ids if             # <<<<<<<<<<<<<<
 *         not downstream_to_upstream_ids[fid]]
 *     fid_to_order = {}
 */
      if (__pyx_t_21) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_8genexpr1__pyx_v_fid))) __PYX_ERR(0, 3630, __pyx_L104_error)
      }
    }
    __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_fid); __pyx_8genexpr1__pyx_v_fid = 0;
    goto __pyx_L108_exit_scope;
    __pyx_L104_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_fid); __pyx_8genexpr1__pyx_v_fid = 0;
    goto __pyx_L1_error;
    __pyx_L108_exit_scope:;
  } /* exit inner scope */
  __pyx_v_working_stack = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3633
 *         fid for fid in downstream_to_upstream_ids if
 *         not downstream_to_upstream_ids[fid]]
 *     fid_to_order = {}             # <<<<<<<<<<<<<<
 *     processed_segments = 0
 *     segments_to_process = len(downstream_to_upstream_ids)
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_v_fid_to_order = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3634
 *         not downstream_to_upstream_ids[fid]]
 *     fid_to_order = {}
 *     processed_segments = 0             # <<<<<<<<<<<<<<
 *     segments_to_process = len(downstream_to_upstream_ids)
 *     deleted_set = set()
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_processed_segments = __pyx_int_0;

  /* "src/geoprocessing/routing/routing.pyx":3635
 *     fid_to_order = {}
 *     processed_segments = 0
 *     segments_to_process = len(downstream_to_upstream_ids)             # <<<<<<<<<<<<<<
 *     deleted_set = set()
 *     while working_stack:
 */
  __pyx_t_15 = PyDict_Size(__pyx_v_downstream_to_upstream_ids); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3635, __pyx_L1_error)
  __pyx_v_segments_to_process = __pyx_t_15;

  /* "src/geoprocessing/routing/routing.pyx":3636
 *     processed_segments = 0
 *     segments_to_process = len(downstream_to_upstream_ids)
 *     deleted_set = set()             # <<<<<<<<<<<<<<
 *     while working_stack:
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 */
  __pyx_t_9 = PySet_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_v_deleted_set = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3637
 *     segments_to_process = len(downstream_to_upstream_ids)
 *     deleted_set = set()
 *     while working_stack:             # <<<<<<<<<<<<<<
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 */
  while (1) {
    __pyx_t_21 = (PyList_GET_SIZE(__pyx_v_working_stack) != 0);
    if (!__pyx_t_21) break;

    /* "src/geoprocessing/routing/routing.pyx":3638
 *     deleted_set = set()
 *     while working_stack:
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    __pyx_t_21 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3639
 *     while working_stack:
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(extract_strahler_streams_d8): '
 *                 'final pass on stream order '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_30, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3640
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'final pass on stream order '
 *                 f'{processed_segments} of {segments_to_process} '
 */
      __pyx_t_30 = PyTuple_New(5); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __pyx_t_15 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_extract_strahler_streams_d8_fin_2);
      __pyx_t_15 += 58;
      __Pyx_GIVEREF(__pyx_kp_u_extract_strahler_streams_d8_fin_2);
      PyTuple_SET_ITEM(__pyx_t_30, 0, __pyx_kp_u_extract_strahler_streams_d8_fin_2);

      /* "src/geoprocessing/routing/routing.pyx":3642
 *                 '(extract_strahler_streams_d8): '
 *                 'final pass on stream order '
 *                 f'{processed_segments} of {segments_to_process} '             # <<<<<<<<<<<<<<
 *                 'segments complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_processed_segments, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_30, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_15 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_30, 2, __pyx_kp_u_of);
      __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_segments_to_process, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_30, 3, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_segments_complete);
      __pyx_t_15 += 18;
      __Pyx_GIVEREF(__pyx_kp_u_segments_complete);
      PyTuple_SET_ITEM(__pyx_t_30, 4, __pyx_kp_u_segments_complete);

      /* "src/geoprocessing/routing/routing.pyx":3640
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '             # <<<<<<<<<<<<<<
 *                 'final pass on stream order '
 *                 f'{processed_segments} of {segments_to_process} '
 */
      __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_30, 5, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __pyx_t_30 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_30 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_30)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_30);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_9 = (__pyx_t_30) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_30, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3644
 *                 f'{processed_segments} of {segments_to_process} '
 *                 'segments complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         processed_segments += 1
 * 
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":3638
 *     deleted_set = set()
 *     while working_stack:
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(extract_strahler_streams_d8): '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3645
 *                 'segments complete')
 *             last_log_time = ctime(NULL)
 *         processed_segments += 1             # <<<<<<<<<<<<<<
 * 
 *         working_fid = working_stack.pop()
 */
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_processed_segments, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF_SET(__pyx_v_processed_segments, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3647
 *         processed_segments += 1
 * 
 *         working_fid = working_stack.pop()             # <<<<<<<<<<<<<<
 *         # invariant: working_fid and all upstream are processed, order not set
 * 
 */
    __pyx_t_9 = __Pyx_PyList_Pop(__pyx_v_working_stack); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_working_fid, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3650
 *         # invariant: working_fid and all upstream are processed, order not set
 * 
 *         upstream_fid_list = downstream_to_upstream_ids[working_fid]             # <<<<<<<<<<<<<<
 *         if upstream_fid_list:
 *             order_count = collections.defaultdict(int)
 */
    __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_working_fid); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_upstream_fid_list, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3651
 * 
 *         upstream_fid_list = downstream_to_upstream_ids[working_fid]
 *         if upstream_fid_list:             # <<<<<<<<<<<<<<
 *             order_count = collections.defaultdict(int)
 *             for upstream_fid in upstream_fid_list:
 */
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_upstream_fid_list); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3651, __pyx_L1_error)
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3652
 *         upstream_fid_list = downstream_to_upstream_ids[working_fid]
 *         if upstream_fid_list:
 *             order_count = collections.defaultdict(int)             # <<<<<<<<<<<<<<
 *             for upstream_fid in upstream_fid_list:
 *                 order_count[fid_to_order[upstream_fid]] += 1
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_collections); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, ((PyObject *)(&PyInt_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)(&PyInt_Type)));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_order_count, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3653
 *         if upstream_fid_list:
 *             order_count = collections.defaultdict(int)
 *             for upstream_fid in upstream_fid_list:             # <<<<<<<<<<<<<<
 *                 order_count[fid_to_order[upstream_fid]] += 1
 *             working_order = max(order_count)
 */
      if (likely(PyList_CheckExact(__pyx_v_upstream_fid_list)) || PyTuple_CheckExact(__pyx_v_upstream_fid_list)) {
        __pyx_t_9 = __pyx_v_upstream_fid_list; __Pyx_INCREF(__pyx_t_9); __pyx_t_15 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_15 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_upstream_fid_list); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3653, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3653, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3653, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3653, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3653, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_14(__pyx_t_9);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 3653, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_upstream_fid, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3654
 *             order_count = collections.defaultdict(int)
 *             for upstream_fid in upstream_fid_list:
 *                 order_count[fid_to_order[upstream_fid]] += 1             # <<<<<<<<<<<<<<
 *             working_order = max(order_count)
 *             if order_count[working_order] > 1:
 */
        __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fid_to_order, __pyx_v_upstream_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_order_count, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_30 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_30);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_order_count, __pyx_t_1, __pyx_t_30) < 0)) __PYX_ERR(0, 3654, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3653
 *         if upstream_fid_list:
 *             order_count = collections.defaultdict(int)
 *             for upstream_fid in upstream_fid_list:             # <<<<<<<<<<<<<<
 *                 order_count[fid_to_order[upstream_fid]] += 1
 *             working_order = max(order_count)
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3655
 *             for upstream_fid in upstream_fid_list:
 *                 order_count[fid_to_order[upstream_fid]] += 1
 *             working_order = max(order_count)             # <<<<<<<<<<<<<<
 *             if order_count[working_order] > 1:
 *                 working_order += 1
 */
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_order_count); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_working_order, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3656
 *                 order_count[fid_to_order[upstream_fid]] += 1
 *             working_order = max(order_count)
 *             if order_count[working_order] > 1:             # <<<<<<<<<<<<<<
 *                 working_order += 1
 *             fid_to_order[working_fid] = working_order
 */
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_order_count, __pyx_v_working_order); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_9, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3656, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3656, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_21) {

        /* "src/geoprocessing/routing/routing.pyx":3657
 *             working_order = max(order_count)
 *             if order_count[working_order] > 1:
 *                 working_order += 1             # <<<<<<<<<<<<<<
 *             fid_to_order[working_fid] = working_order
 *         else:
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_working_order, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_working_order, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3656
 *                 order_count[fid_to_order[upstream_fid]] += 1
 *             working_order = max(order_count)
 *             if order_count[working_order] > 1:             # <<<<<<<<<<<<<<
 *                 working_order += 1
 *             fid_to_order[working_fid] = working_order
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":3658
 *             if order_count[working_order] > 1:
 *                 working_order += 1
 *             fid_to_order[working_fid] = working_order             # <<<<<<<<<<<<<<
 *         else:
 *             fid_to_order[working_fid] = 1
 */
      if (unlikely(PyDict_SetItem(__pyx_v_fid_to_order, __pyx_v_working_fid, __pyx_v_working_order) < 0)) __PYX_ERR(0, 3658, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":3651
 * 
 *         upstream_fid_list = downstream_to_upstream_ids[working_fid]
 *         if upstream_fid_list:             # <<<<<<<<<<<<<<
 *             order_count = collections.defaultdict(int)
 *             for upstream_fid in upstream_fid_list:
 */
      goto __pyx_L112;
    }

    /* "src/geoprocessing/routing/routing.pyx":3660
 *             fid_to_order[working_fid] = working_order
 *         else:
 *             fid_to_order[working_fid] = 1             # <<<<<<<<<<<<<<
 * 
 *         working_feature = stream_layer.GetFeature(working_fid)
 */
    /*else*/ {
      if (unlikely(PyDict_SetItem(__pyx_v_fid_to_order, __pyx_v_working_fid, __pyx_int_1) < 0)) __PYX_ERR(0, 3660, __pyx_L1_error)
    }
    __pyx_L112:;

    /* "src/geoprocessing/routing/routing.pyx":3662
 *             fid_to_order[working_fid] = 1
 * 
 *         working_feature = stream_layer.GetFeature(working_fid)             # <<<<<<<<<<<<<<
 *         working_feature.SetField('order', fid_to_order[working_fid])
 *         stream_layer.SetFeature(working_feature)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_30 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_30 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_30)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_30);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_30) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_30, __pyx_v_working_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_working_fid);
    __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_working_feature, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3663
 * 
 *         working_feature = stream_layer.GetFeature(working_fid)
 *         working_feature.SetField('order', fid_to_order[working_fid])             # <<<<<<<<<<<<<<
 *         stream_layer.SetFeature(working_feature)
 *         working_feature = None
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_30 = __Pyx_PyDict_GetItem(__pyx_v_fid_to_order, __pyx_v_working_fid); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_30);
    __pyx_t_4 = NULL;
    __pyx_t_17 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_17 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_order, __pyx_t_30};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3663, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_order, __pyx_t_30};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3663, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
    } else
    #endif
    {
      __pyx_t_31 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_order);
      __Pyx_GIVEREF(__pyx_n_u_order);
      PyTuple_SET_ITEM(__pyx_t_31, 0+__pyx_t_17, __pyx_n_u_order);
      __Pyx_GIVEREF(__pyx_t_30);
      PyTuple_SET_ITEM(__pyx_t_31, 1+__pyx_t_17, __pyx_t_30);
      __pyx_t_30 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3664
 *         working_feature = stream_layer.GetFeature(working_fid)
 *         working_feature.SetField('order', fid_to_order[working_fid])
 *         stream_layer.SetFeature(working_feature)             # <<<<<<<<<<<<<<
 *         working_feature = None
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_31 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_31)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_31);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_31, __pyx_v_working_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_working_feature);
    __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3665
 *         working_feature.SetField('order', fid_to_order[working_fid])
 *         stream_layer.SetFeature(working_feature)
 *         working_feature = None             # <<<<<<<<<<<<<<
 * 
 *         if working_fid not in upstream_to_downstream_id:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_working_feature, Py_None);

    /* "src/geoprocessing/routing/routing.pyx":3667
 *         working_feature = None
 * 
 *         if working_fid not in upstream_to_downstream_id:             # <<<<<<<<<<<<<<
 *             # nothing downstream so it's done
 *             continue
 */
    __pyx_t_21 = (__Pyx_PyDict_ContainsTF(__pyx_v_working_fid, __pyx_v_upstream_to_downstream_id, Py_NE)); if (unlikely(__pyx_t_21 < 0)) __PYX_ERR(0, 3667, __pyx_L1_error)
    __pyx_t_29 = (__pyx_t_21 != 0);
    if (__pyx_t_29) {

      /* "src/geoprocessing/routing/routing.pyx":3669
 *         if working_fid not in upstream_to_downstream_id:
 *             # nothing downstream so it's done
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         downstream_fid = upstream_to_downstream_id[working_fid]
 */
      goto __pyx_L109_continue;

      /* "src/geoprocessing/routing/routing.pyx":3667
 *         working_feature = None
 * 
 *         if working_fid not in upstream_to_downstream_id:             # <<<<<<<<<<<<<<
 *             # nothing downstream so it's done
 *             continue
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3671
 *             continue
 * 
 *         downstream_fid = upstream_to_downstream_id[working_fid]             # <<<<<<<<<<<<<<
 *         connected_fids = downstream_to_upstream_ids[downstream_fid]
 *         if len(connected_fids) == 1:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_upstream_to_downstream_id, __pyx_v_working_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_downstream_fid, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3672
 * 
 *         downstream_fid = upstream_to_downstream_id[working_fid]
 *         connected_fids = downstream_to_upstream_ids[downstream_fid]             # <<<<<<<<<<<<<<
 *         if len(connected_fids) == 1:
 *             # There's only one downstream, join it.
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_downstream_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_connected_fids, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3673
 *         downstream_fid = upstream_to_downstream_id[working_fid]
 *         connected_fids = downstream_to_upstream_ids[downstream_fid]
 *         if len(connected_fids) == 1:             # <<<<<<<<<<<<<<
 *             # There's only one downstream, join it.
 *             # Downstream order is the same as upstream
 */
    __pyx_t_15 = PyObject_Length(__pyx_v_connected_fids); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3673, __pyx_L1_error)
    __pyx_t_29 = ((__pyx_t_15 == 1) != 0);
    if (__pyx_t_29) {

      /* "src/geoprocessing/routing/routing.pyx":3676
 *             # There's only one downstream, join it.
 *             # Downstream order is the same as upstream
 *             fid_to_order[downstream_fid] = fid_to_order[working_fid]             # <<<<<<<<<<<<<<
 *             del fid_to_order[working_fid]
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fid_to_order, __pyx_v_working_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(PyDict_SetItem(__pyx_v_fid_to_order, __pyx_v_downstream_fid, __pyx_t_1) < 0)) __PYX_ERR(0, 3676, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3677
 *             # Downstream order is the same as upstream
 *             fid_to_order[downstream_fid] = fid_to_order[working_fid]
 *             del fid_to_order[working_fid]             # <<<<<<<<<<<<<<
 * 
 *             # set downstream order to working order
 */
      if (unlikely(PyDict_DelItem(__pyx_v_fid_to_order, __pyx_v_working_fid) < 0)) __PYX_ERR(0, 3677, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":3681
 *             # set downstream order to working order
 *             downstream_to_upstream_ids[downstream_fid] = (
 *                 downstream_to_upstream_ids[working_fid])             # <<<<<<<<<<<<<<
 *             # since we're deleting the upstream segment we need upstream
 *             # connecting segments to connect to the new downstream
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_working_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "src/geoprocessing/routing/routing.pyx":3680
 * 
 *             # set downstream order to working order
 *             downstream_to_upstream_ids[downstream_fid] = (             # <<<<<<<<<<<<<<
 *                 downstream_to_upstream_ids[working_fid])
 *             # since we're deleting the upstream segment we need upstream
 */
      if (unlikely(PyDict_SetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_downstream_fid, __pyx_t_1) < 0)) __PYX_ERR(0, 3680, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3684
 *             # since we're deleting the upstream segment we need upstream
 *             # connecting segments to connect to the new downstream
 *             for upstream_fid in downstream_to_upstream_ids[downstream_fid]:             # <<<<<<<<<<<<<<
 *                 upstream_to_downstream_id[upstream_fid] = downstream_fid
 *             del downstream_to_upstream_ids[working_fid]
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_downstream_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_15 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_15 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3684, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3684, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3684, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3684, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3684, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_14(__pyx_t_9);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 3684, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_upstream_fid, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":3685
 *             # connecting segments to connect to the new downstream
 *             for upstream_fid in downstream_to_upstream_ids[downstream_fid]:
 *                 upstream_to_downstream_id[upstream_fid] = downstream_fid             # <<<<<<<<<<<<<<
 *             del downstream_to_upstream_ids[working_fid]
 *             del upstream_to_downstream_id[working_fid]
 */
        if (unlikely(PyDict_SetItem(__pyx_v_upstream_to_downstream_id, __pyx_v_upstream_fid, __pyx_v_downstream_fid) < 0)) __PYX_ERR(0, 3685, __pyx_L1_error)

        /* "src/geoprocessing/routing/routing.pyx":3684
 *             # since we're deleting the upstream segment we need upstream
 *             # connecting segments to connect to the new downstream
 *             for upstream_fid in downstream_to_upstream_ids[downstream_fid]:             # <<<<<<<<<<<<<<
 *                 upstream_to_downstream_id[upstream_fid] = downstream_fid
 *             del downstream_to_upstream_ids[working_fid]
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3686
 *             for upstream_fid in downstream_to_upstream_ids[downstream_fid]:
 *                 upstream_to_downstream_id[upstream_fid] = downstream_fid
 *             del downstream_to_upstream_ids[working_fid]             # <<<<<<<<<<<<<<
 *             del upstream_to_downstream_id[working_fid]
 * 
 */
      if (unlikely(PyDict_DelItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_working_fid) < 0)) __PYX_ERR(0, 3686, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":3687
 *                 upstream_to_downstream_id[upstream_fid] = downstream_fid
 *             del downstream_to_upstream_ids[working_fid]
 *             del upstream_to_downstream_id[working_fid]             # <<<<<<<<<<<<<<
 * 
 *             # join working line with downstream line
 */
      if (unlikely(PyDict_DelItem(__pyx_v_upstream_to_downstream_id, __pyx_v_working_fid) < 0)) __PYX_ERR(0, 3687, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":3690
 * 
 *             # join working line with downstream line
 *             working_feature = stream_layer.GetFeature(working_fid)             # <<<<<<<<<<<<<<
 *             downstream_feature = stream_layer.GetFeature(downstream_fid)
 *             downstream_geom = downstream_feature.GetGeometryRef()
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_31 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_31)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_31);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_31, __pyx_v_working_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_working_fid);
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_working_feature, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3691
 *             # join working line with downstream line
 *             working_feature = stream_layer.GetFeature(working_fid)
 *             downstream_feature = stream_layer.GetFeature(downstream_fid)             # <<<<<<<<<<<<<<
 *             downstream_geom = downstream_feature.GetGeometryRef()
 *             working_geom = working_feature.GetGeometryRef()
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_31 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_31)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_31);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_31, __pyx_v_downstream_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_downstream_fid);
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_downstream_feature, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3692
 *             working_feature = stream_layer.GetFeature(working_fid)
 *             downstream_feature = stream_layer.GetFeature(downstream_fid)
 *             downstream_geom = downstream_feature.GetGeometryRef()             # <<<<<<<<<<<<<<
 *             working_geom = working_feature.GetGeometryRef()
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_downstream_feature, __pyx_n_s_GetGeometryRef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_31 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_31)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_31);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_31) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_downstream_geom, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3693
 *             downstream_feature = stream_layer.GetFeature(downstream_fid)
 *             downstream_geom = downstream_feature.GetGeometryRef()
 *             working_geom = working_feature.GetGeometryRef()             # <<<<<<<<<<<<<<
 * 
 *             # Union creates a multiline string by default but we know it's
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetGeometryRef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3693, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_31 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_31)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_31);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_31) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3693, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_working_geom, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3698
 *             # connected only at one point, so the next step ensures it's a
 *             # regular linestring
 *             multi_line = working_geom.Union(downstream_geom)             # <<<<<<<<<<<<<<
 *             joined_line = ogr.CreateGeometryFromWkb(
 *                 shapely.ops.linemerge(shapely.wkb.loads(
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_geom, __pyx_n_s_Union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_31 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_31)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_31);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_31, __pyx_v_downstream_geom) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_downstream_geom);
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_multi_line, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3699
 *             # regular linestring
 *             multi_line = working_geom.Union(downstream_geom)
 *             joined_line = ogr.CreateGeometryFromWkb(             # <<<<<<<<<<<<<<
 *                 shapely.ops.linemerge(shapely.wkb.loads(
 *                     bytes(multi_line.ExportToWkb()))).wkb)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_CreateGeometryFromWkb); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3700
 *             multi_line = working_geom.Union(downstream_geom)
 *             joined_line = ogr.CreateGeometryFromWkb(
 *                 shapely.ops.linemerge(shapely.wkb.loads(             # <<<<<<<<<<<<<<
 *                     bytes(multi_line.ExportToWkb()))).wkb)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_30, __pyx_n_s_shapely); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_ops); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_linemerge); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_shapely); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_wkb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_loads); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3701
 *             joined_line = ogr.CreateGeometryFromWkb(
 *                 shapely.ops.linemerge(shapely.wkb.loads(
 *                     bytes(multi_line.ExportToWkb()))).wkb)             # <<<<<<<<<<<<<<
 * 
 *             downstream_feature.SetGeometry(joined_line)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_multi_line, __pyx_n_s_ExportToWkb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_30))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_30);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_30);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_30, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_30, __pyx_t_8, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_30, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_wkb); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_31);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_31, function);
        }
      }
      __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_1, __pyx_t_30) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_t_30);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_XDECREF_SET(__pyx_v_joined_line, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3703
 *                     bytes(multi_line.ExportToWkb()))).wkb)
 * 
 *             downstream_feature.SetGeometry(joined_line)             # <<<<<<<<<<<<<<
 *             downstream_feature.SetField(
 *                 'us_x', working_feature.GetField('us_x'))
 */
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_downstream_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __pyx_t_30 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
        __pyx_t_30 = PyMethod_GET_SELF(__pyx_t_31);
        if (likely(__pyx_t_30)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
          __Pyx_INCREF(__pyx_t_30);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_31, function);
        }
      }
      __pyx_t_9 = (__pyx_t_30) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_30, __pyx_v_joined_line) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_joined_line);
      __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3704
 * 
 *             downstream_feature.SetGeometry(joined_line)
 *             downstream_feature.SetField(             # <<<<<<<<<<<<<<
 *                 'us_x', working_feature.GetField('us_x'))
 *             downstream_feature.SetField(
 */
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_downstream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);

      /* "src/geoprocessing/routing/routing.pyx":3705
 *             downstream_feature.SetGeometry(joined_line)
 *             downstream_feature.SetField(
 *                 'us_x', working_feature.GetField('us_x'))             # <<<<<<<<<<<<<<
 *             downstream_feature.SetField(
 *                 'us_y', working_feature.GetField('us_y'))
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_30 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_n_u_us_x) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_us_x);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_17 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_31);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_31, function);
          __pyx_t_17 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_31)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_us_x, __pyx_t_30};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3704, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_us_x, __pyx_t_30};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3704, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3704, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_us_x);
        __Pyx_GIVEREF(__pyx_n_u_us_x);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_17, __pyx_n_u_us_x);
        __Pyx_GIVEREF(__pyx_t_30);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_17, __pyx_t_30);
        __pyx_t_30 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3704, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3706
 *             downstream_feature.SetField(
 *                 'us_x', working_feature.GetField('us_x'))
 *             downstream_feature.SetField(             # <<<<<<<<<<<<<<
 *                 'us_y', working_feature.GetField('us_y'))
 *             stream_layer.SetFeature(downstream_feature)
 */
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_downstream_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);

      /* "src/geoprocessing/routing/routing.pyx":3707
 *                 'us_x', working_feature.GetField('us_x'))
 *             downstream_feature.SetField(
 *                 'us_y', working_feature.GetField('us_y'))             # <<<<<<<<<<<<<<
 *             stream_layer.SetFeature(downstream_feature)
 *             working_feature = None
 */
      __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 3707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_30))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_30);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_30);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_30, function);
        }
      }
      __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_30, __pyx_t_1, __pyx_n_u_us_y) : __Pyx_PyObject_CallOneArg(__pyx_t_30, __pyx_n_u_us_y);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __pyx_t_30 = NULL;
      __pyx_t_17 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
        __pyx_t_30 = PyMethod_GET_SELF(__pyx_t_31);
        if (likely(__pyx_t_30)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
          __Pyx_INCREF(__pyx_t_30);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_31, function);
          __pyx_t_17 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_31)) {
        PyObject *__pyx_temp[3] = {__pyx_t_30, __pyx_n_u_us_y, __pyx_t_4};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3706, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
        PyObject *__pyx_temp[3] = {__pyx_t_30, __pyx_n_u_us_y, __pyx_t_4};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3706, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_30) {
          __Pyx_GIVEREF(__pyx_t_30); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_30); __pyx_t_30 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_us_y);
        __Pyx_GIVEREF(__pyx_n_u_us_y);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_17, __pyx_n_u_us_y);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_17, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_1, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3708
 *             downstream_feature.SetField(
 *                 'us_y', working_feature.GetField('us_y'))
 *             stream_layer.SetFeature(downstream_feature)             # <<<<<<<<<<<<<<
 *             working_feature = None
 *             downstream_feature = None
 */
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetFeature); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_31);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_31, function);
        }
      }
      __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_1, __pyx_v_downstream_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_downstream_feature);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3709
 *                 'us_y', working_feature.GetField('us_y'))
 *             stream_layer.SetFeature(downstream_feature)
 *             working_feature = None             # <<<<<<<<<<<<<<
 *             downstream_feature = None
 *             multi_line = None
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_working_feature, Py_None);

      /* "src/geoprocessing/routing/routing.pyx":3710
 *             stream_layer.SetFeature(downstream_feature)
 *             working_feature = None
 *             downstream_feature = None             # <<<<<<<<<<<<<<
 *             multi_line = None
 *             joined_line = None
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_downstream_feature, Py_None);

      /* "src/geoprocessing/routing/routing.pyx":3711
 *             working_feature = None
 *             downstream_feature = None
 *             multi_line = None             # <<<<<<<<<<<<<<
 *             joined_line = None
 * 
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_multi_line, Py_None);

      /* "src/geoprocessing/routing/routing.pyx":3712
 *             downstream_feature = None
 *             multi_line = None
 *             joined_line = None             # <<<<<<<<<<<<<<
 * 
 *             # delete working line
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF_SET(__pyx_v_joined_line, Py_None);

      /* "src/geoprocessing/routing/routing.pyx":3715
 * 
 *             # delete working line
 *             stream_layer.DeleteFeature(working_fid)             # <<<<<<<<<<<<<<
 *             deleted_set.add(working_fid)
 * 
 */
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_DeleteFeature); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_31);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_31, function);
        }
      }
      __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_1, __pyx_v_working_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_working_fid);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3716
 *             # delete working line
 *             stream_layer.DeleteFeature(working_fid)
 *             deleted_set.add(working_fid)             # <<<<<<<<<<<<<<
 * 
 *             # push downstream line for processing
 */
      __pyx_t_27 = PySet_Add(__pyx_v_deleted_set, __pyx_v_working_fid); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3716, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":3719
 * 
 *             # push downstream line for processing
 *             working_stack.append(downstream_fid)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_working_stack, __pyx_v_downstream_fid); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3719, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":3720
 *             # push downstream line for processing
 *             working_stack.append(downstream_fid)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         # otherwise check if connected streams are all defined and if so
 */
      goto __pyx_L109_continue;

      /* "src/geoprocessing/routing/routing.pyx":3673
 *         downstream_fid = upstream_to_downstream_id[working_fid]
 *         connected_fids = downstream_to_upstream_ids[downstream_fid]
 *         if len(connected_fids) == 1:             # <<<<<<<<<<<<<<
 *             # There's only one downstream, join it.
 *             # Downstream order is the same as upstream
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3724
 *         # otherwise check if connected streams are all defined and if so
 *         # set a new downstream order
 *         upstream_all_defined = True             # <<<<<<<<<<<<<<
 *         for connected_fid in connected_fids:
 *             if connected_fid == working_fid:
 */
    __pyx_v_upstream_all_defined = 1;

    /* "src/geoprocessing/routing/routing.pyx":3725
 *         # set a new downstream order
 *         upstream_all_defined = True
 *         for connected_fid in connected_fids:             # <<<<<<<<<<<<<<
 *             if connected_fid == working_fid:
 *                 # skip current
 */
    if (likely(PyList_CheckExact(__pyx_v_connected_fids)) || PyTuple_CheckExact(__pyx_v_connected_fids)) {
      __pyx_t_9 = __pyx_v_connected_fids; __Pyx_INCREF(__pyx_t_9); __pyx_t_15 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_15 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_connected_fids); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 3725, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_31 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_15); __Pyx_INCREF(__pyx_t_31); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3725, __pyx_L1_error)
          #else
          __pyx_t_31 = PySequence_ITEM(__pyx_t_9, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          #endif
        } else {
          if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_31 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_15); __Pyx_INCREF(__pyx_t_31); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 3725, __pyx_L1_error)
          #else
          __pyx_t_31 = PySequence_ITEM(__pyx_t_9, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          #endif
        }
      } else {
        __pyx_t_31 = __pyx_t_14(__pyx_t_9);
        if (unlikely(!__pyx_t_31)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 3725, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_31);
      }
      __Pyx_XDECREF_SET(__pyx_v_connected_fid, __pyx_t_31);
      __pyx_t_31 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3726
 *         upstream_all_defined = True
 *         for connected_fid in connected_fids:
 *             if connected_fid == working_fid:             # <<<<<<<<<<<<<<
 *                 # skip current
 *                 continue
 */
      __pyx_t_31 = PyObject_RichCompare(__pyx_v_connected_fid, __pyx_v_working_fid, Py_EQ); __Pyx_XGOTREF(__pyx_t_31); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3726, __pyx_L1_error)
      __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_t_31); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3726, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      if (__pyx_t_29) {

        /* "src/geoprocessing/routing/routing.pyx":3728
 *             if connected_fid == working_fid:
 *                 # skip current
 *                 continue             # <<<<<<<<<<<<<<
 *             if connected_fid not in fid_to_order:
 *                 # upstream not defined so skip it and it will be processed
 */
        goto __pyx_L120_continue;

        /* "src/geoprocessing/routing/routing.pyx":3726
 *         upstream_all_defined = True
 *         for connected_fid in connected_fids:
 *             if connected_fid == working_fid:             # <<<<<<<<<<<<<<
 *                 # skip current
 *                 continue
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":3729
 *                 # skip current
 *                 continue
 *             if connected_fid not in fid_to_order:             # <<<<<<<<<<<<<<
 *                 # upstream not defined so skip it and it will be processed
 *                 # on another iteration
 */
      __pyx_t_29 = (__Pyx_PyDict_ContainsTF(__pyx_v_connected_fid, __pyx_v_fid_to_order, Py_NE)); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 3729, __pyx_L1_error)
      __pyx_t_21 = (__pyx_t_29 != 0);
      if (__pyx_t_21) {

        /* "src/geoprocessing/routing/routing.pyx":3732
 *                 # upstream not defined so skip it and it will be processed
 *                 # on another iteration
 *                 upstream_all_defined = False             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_upstream_all_defined = 0;

        /* "src/geoprocessing/routing/routing.pyx":3733
 *                 # on another iteration
 *                 upstream_all_defined = False
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         if not upstream_all_defined:
 */
        goto __pyx_L121_break;

        /* "src/geoprocessing/routing/routing.pyx":3729
 *                 # skip current
 *                 continue
 *             if connected_fid not in fid_to_order:             # <<<<<<<<<<<<<<
 *                 # upstream not defined so skip it and it will be processed
 *                 # on another iteration
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":3725
 *         # set a new downstream order
 *         upstream_all_defined = True
 *         for connected_fid in connected_fids:             # <<<<<<<<<<<<<<
 *             if connected_fid == working_fid:
 *                 # skip current
 */
      __pyx_L120_continue:;
    }
    __pyx_L121_break:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3735
 *                 break
 * 
 *         if not upstream_all_defined:             # <<<<<<<<<<<<<<
 *             # wait for other upstream components to be defined
 *             continue
 */
    __pyx_t_21 = ((!(__pyx_v_upstream_all_defined != 0)) != 0);
    if (__pyx_t_21) {

      /* "src/geoprocessing/routing/routing.pyx":3737
 *         if not upstream_all_defined:
 *             # wait for other upstream components to be defined
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         # all upstream components of this fid are calculated so it can be
 */
      goto __pyx_L109_continue;

      /* "src/geoprocessing/routing/routing.pyx":3735
 *                 break
 * 
 *         if not upstream_all_defined:             # <<<<<<<<<<<<<<
 *             # wait for other upstream components to be defined
 *             continue
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3741
 *         # all upstream components of this fid are calculated so it can be
 *         # calculated now too
 *         working_stack.append(downstream_fid)             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info(
 */
    __pyx_t_27 = __Pyx_PyList_Append(__pyx_v_working_stack, __pyx_v_downstream_fid); if (unlikely(__pyx_t_27 == ((int)-1))) __PYX_ERR(0, 3741, __pyx_L1_error)
    __pyx_L109_continue:;
  }

  /* "src/geoprocessing/routing/routing.pyx":3743
 *         working_stack.append(downstream_fid)
 * 
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): '
 *         'final pass on stream order complete')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_31)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_31);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_31, __pyx_kp_u_extract_strahler_streams_d8_fin_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_extract_strahler_streams_d8_fin_3);
  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3746
 *         '(extract_strahler_streams_d8): '
 *         'final pass on stream order complete')
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(extract_strahler_streams_d8): '
 *         'commit transaction due to stream joining')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_31);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_31, function);
    }
  }
  __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_1, __pyx_kp_u_extract_strahler_streams_d8_com) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_kp_u_extract_strahler_streams_d8_com);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3749
 *         '(extract_strahler_streams_d8): '
 *         'commit transaction due to stream joining')
 *     stream_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 *     stream_layer = None
 *     stream_vector = None
 */
  __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_31))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_31);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_31, function);
    }
  }
  __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3750
 *         'commit transaction due to stream joining')
 *     stream_layer.CommitTransaction()
 *     stream_layer = None             # <<<<<<<<<<<<<<
 *     stream_vector = None
 *     LOGGER.info('(extract_strahler_streams_d8): all done')
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_stream_layer, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":3751
 *     stream_layer.CommitTransaction()
 *     stream_layer = None
 *     stream_vector = None             # <<<<<<<<<<<<<<
 *     LOGGER.info('(extract_strahler_streams_d8): all done')
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_stream_vector, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":3752
 *     stream_layer = None
 *     stream_vector = None
 *     LOGGER.info('(extract_strahler_streams_d8): all done')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 3752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_31)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_31);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_9 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_31, __pyx_kp_u_extract_strahler_streams_d8_all) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_extract_strahler_streams_d8_all);
  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3080
 * 
 * 
 * def extract_strahler_streams_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, flow_accum_raster_path_band,
 *         dem_raster_path_band,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.extract_strahler_streams_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_flow_dir_info);
  __Pyx_XDECREF(__pyx_v_flow_dir_srs);
  __Pyx_XDECREF(__pyx_v_gpkg_driver);
  __Pyx_XDECREF(__pyx_v_stream_vector);
  __Pyx_XDECREF(__pyx_v_stream_basename);
  __Pyx_XDECREF(__pyx_v_stream_layer);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_accum_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_managed_raster);
  __Pyx_XDECREF(__pyx_v_coord_to_stream_ids);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_stream_feature);
  __Pyx_XDECREF(__pyx_v_stream_fid);
  __Pyx_XDECREF(__pyx_v_n_points);
  __Pyx_XDECREF(__pyx_v_downstream_to_upstream_ids);
  __Pyx_XDECREF(__pyx_v_upstream_to_downstream_id);
  __Pyx_XDECREF(__pyx_v_payload);
  __Pyx_XDECREF(__pyx_v_x_u);
  __Pyx_XDECREF(__pyx_v_y_u);
  __Pyx_XDECREF(__pyx_v_ds_x_1);
  __Pyx_XDECREF(__pyx_v_ds_y_1);
  __Pyx_XDECREF(__pyx_v_upstream_id_list);
  __Pyx_XDECREF(__pyx_v_stream_line);
  __Pyx_XDECREF(__pyx_v_upstream_id);
  __Pyx_XDECREF(__pyx_v_streams_to_process);
  __Pyx_XDECREF(__pyx_v_base_feature_count);
  __Pyx_XDECREF(__pyx_v_outlet_fid_list);
  __Pyx_XDECREF(__pyx_v_downstream_fid);
  __Pyx_XDECREF(__pyx_v_downstream_feature);
  __Pyx_XDECREF(__pyx_v_connected_upstream_fids);
  __Pyx_XDECREF(__pyx_v_stream_order_list);
  __Pyx_XDECREF(__pyx_v_upstream_fid);
  __Pyx_XDECREF(__pyx_v_upstream_feature);
  __Pyx_XDECREF(__pyx_v_upstream_order);
  __Pyx_XDECREF(__pyx_v_sorted_stream_order_list);
  __Pyx_XDECREF(__pyx_v_downstream_order);
  __Pyx_XDECREF(__pyx_v_working_river_id);
  __Pyx_XDECREF(__pyx_v_outlet_index);
  __Pyx_XDECREF(__pyx_v_outlet_fid);
  __Pyx_XDECREF(__pyx_v_search_stack);
  __Pyx_XDECREF(__pyx_v_feature_id);
  __Pyx_XDECREF(__pyx_v_stream_order);
  __Pyx_XDECREF(__pyx_v_upstream_stack);
  __Pyx_XDECREF(__pyx_v_streams_by_order);
  __Pyx_XDECREF(__pyx_v_drop_distance_collection);
  __Pyx_XDECREF(__pyx_v_max_upstream_flow_accum);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_working_flow_accum_threshold);
  __Pyx_XDECREF(__pyx_v_test_order);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_p_val);
  __Pyx_XDECREF(__pyx_v_streams_to_retest);
  __Pyx_XDECREF(__pyx_v_ds_x);
  __Pyx_XDECREF(__pyx_v_ds_y);
  __Pyx_XDECREF(__pyx_v_upstream_d8_dir);
  __Pyx_XDECREF(__pyx_v_working_stack);
  __Pyx_XDECREF(__pyx_v_fid_to_order);
  __Pyx_XDECREF(__pyx_v_processed_segments);
  __Pyx_XDECREF(__pyx_v_deleted_set);
  __Pyx_XDECREF(__pyx_v_working_fid);
  __Pyx_XDECREF(__pyx_v_upstream_fid_list);
  __Pyx_XDECREF(__pyx_v_order_count);
  __Pyx_XDECREF(__pyx_v_working_order);
  __Pyx_XDECREF(__pyx_v_working_feature);
  __Pyx_XDECREF(__pyx_v_connected_fids);
  __Pyx_XDECREF(__pyx_v_downstream_geom);
  __Pyx_XDECREF(__pyx_v_working_geom);
  __Pyx_XDECREF(__pyx_v_multi_line);
  __Pyx_XDECREF(__pyx_v_joined_line);
  __Pyx_XDECREF(__pyx_v_connected_fid);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_stream_feature);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_fid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":3755
 * 
 * 
 * def _build_discovery_finish_rasters(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, target_discovery_raster_path,
 *         target_finish_raster_path):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_23_build_discovery_finish_rasters(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_22_build_discovery_finish_rasters[] = "Generates a discovery and finish time raster for a given d8 flow path.\n\n    Args:\n        flow_dir_d8_raster_path_band (tuple): a D8 flow raster path band tuple\n        target_discovery_raster_path (str): path to a generated raster that\n            creates discovery time (i.e. what count the pixel is visited in)\n        target_finish_raster_path (str): path to generated raster that creates\n            maximum upstream finish time.\n\n    Returns:\n        None\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_23_build_discovery_finish_rasters = {"_build_discovery_finish_rasters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_23_build_discovery_finish_rasters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_22_build_discovery_finish_rasters};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_23_build_discovery_finish_rasters(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_d8_raster_path_band = 0;
  PyObject *__pyx_v_target_discovery_raster_path = 0;
  PyObject *__pyx_v_target_finish_raster_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_build_discovery_finish_rasters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_d8_raster_path_band,&__pyx_n_s_target_discovery_raster_path,&__pyx_n_s_target_finish_raster_path,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_d8_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_discovery_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_build_discovery_finish_rasters", 1, 3, 3, 1); __PYX_ERR(0, 3755, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_finish_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_build_discovery_finish_rasters", 1, 3, 3, 2); __PYX_ERR(0, 3755, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_build_discovery_finish_rasters") < 0)) __PYX_ERR(0, 3755, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_flow_dir_d8_raster_path_band = values[0];
    __pyx_v_target_discovery_raster_path = values[1];
    __pyx_v_target_finish_raster_path = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_build_discovery_finish_rasters", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3755, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._build_discovery_finish_rasters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_22_build_discovery_finish_rasters(__pyx_self, __pyx_v_flow_dir_d8_raster_path_band, __pyx_v_target_discovery_raster_path, __pyx_v_target_finish_raster_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_22_build_discovery_finish_rasters(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_d8_raster_path_band, PyObject *__pyx_v_target_discovery_raster_path, PyObject *__pyx_v_target_finish_raster_path) {
  PyObject *__pyx_v_flow_dir_info = NULL;
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  int __pyx_v_flow_dir_nodata;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_discovery_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_finish_managed_raster = NULL;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType>  __pyx_v_discovery_stack;
  std::stack<struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FinishType>  __pyx_v_finish_stack;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType __pyx_v_raster_coord;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FinishType __pyx_v_finish_coordinate;
  long __pyx_v_discovery_count;
  int __pyx_v_n_processed;
  int __pyx_v_n_pixels;
  time_t __pyx_v_last_log_time;
  int __pyx_v_n_pushed;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  int __pyx_v_x_l;
  int __pyx_v_y_l;
  int __pyx_v_x_n;
  int __pyx_v_y_n;
  int __pyx_v_n_dir;
  int __pyx_v_test_dir;
  PyObject *__pyx_v_offset_dict = NULL;
  int __pyx_v_d_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_CoordinateType __pyx_t_21;
  struct __pyx_t_8ecoshard_13geoprocessing_7routing_7routing_FinishType __pyx_t_22;
  int __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_discovery_finish_rasters", 0);

  /* "src/geoprocessing/routing/routing.pyx":3770
 *         None
 *     """
 *     flow_dir_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0])
 *     cdef int n_cols, n_rows
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3771
 *     """
 *     flow_dir_info = pygeoprocessing.get_raster_info(
 *         flow_dir_d8_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     cdef int n_cols, n_rows
 *     n_cols, n_rows = flow_dir_info['raster_size']
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3773
 *         flow_dir_d8_raster_path_band[0])
 *     cdef int n_cols, n_rows
 *     n_cols, n_rows = flow_dir_info['raster_size']             # <<<<<<<<<<<<<<
 *     cdef int flow_dir_nodata = (
 *         flow_dir_info['nodata'][flow_dir_d8_raster_path_band[1]-1])
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 3773, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 3773, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 3773, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n_cols = __pyx_t_6;
  __pyx_v_n_rows = __pyx_t_7;

  /* "src/geoprocessing/routing/routing.pyx":3775
 *     n_cols, n_rows = flow_dir_info['raster_size']
 *     cdef int flow_dir_nodata = (
 *         flow_dir_info['nodata'][flow_dir_d8_raster_path_band[1]-1])             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow_dir_nodata = __pyx_t_7;

  /* "src/geoprocessing/routing/routing.pyx":3778
 * 
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0], target_discovery_raster_path,
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":3777
 *         flow_dir_info['nodata'][flow_dir_d8_raster_path_band[1]-1])
 * 
 *     flow_dir_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 *     pygeoprocessing.new_raster_from_base(
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3779
 *     flow_dir_managed_raster = _ManagedRaster(
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0], target_discovery_raster_path,
 *         gdal.GDT_Float64, [-1])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3780
 *         flow_dir_d8_raster_path_band[0], flow_dir_d8_raster_path_band[1], 0)
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0], target_discovery_raster_path,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float64, [-1])
 *     discovery_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":3781
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0], target_discovery_raster_path,
 *         gdal.GDT_Float64, [-1])             # <<<<<<<<<<<<<<
 *     discovery_managed_raster = _ManagedRaster(
 *         target_discovery_raster_path, 1, 1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_neg_1);
  __pyx_t_9 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_9, __pyx_t_1, __pyx_v_target_discovery_raster_path, __pyx_t_8, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3779, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_9, __pyx_t_1, __pyx_v_target_discovery_raster_path, __pyx_t_8, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3779, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_target_discovery_raster_path);
    __Pyx_GIVEREF(__pyx_v_target_discovery_raster_path);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_v_target_discovery_raster_path);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_7, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_7, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3782
 *         flow_dir_d8_raster_path_band[0], target_discovery_raster_path,
 *         gdal.GDT_Float64, [-1])
 *     discovery_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         target_discovery_raster_path, 1, 1)
 *     pygeoprocessing.new_raster_from_base(
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_target_discovery_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_discovery_raster_path);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_target_discovery_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_discovery_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3784
 *     discovery_managed_raster = _ManagedRaster(
 *         target_discovery_raster_path, 1, 1)
 *     pygeoprocessing.new_raster_from_base(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band[0], target_finish_raster_path,
 *         gdal.GDT_Float64, [-1])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_new_raster_from_base); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3785
 *         target_discovery_raster_path, 1, 1)
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0], target_finish_raster_path,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Float64, [-1])
 *     finish_managed_raster = _ManagedRaster(target_finish_raster_path, 1, 1)
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_d8_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/geoprocessing/routing/routing.pyx":3786
 *     pygeoprocessing.new_raster_from_base(
 *         flow_dir_d8_raster_path_band[0], target_finish_raster_path,
 *         gdal.GDT_Float64, [-1])             # <<<<<<<<<<<<<<
 *     finish_managed_raster = _ManagedRaster(target_finish_raster_path, 1, 1)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_GDT_Float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_neg_1);
  __pyx_t_1 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_t_3, __pyx_v_target_finish_raster_path, __pyx_t_8, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3784, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[5] = {__pyx_t_1, __pyx_t_3, __pyx_v_target_finish_raster_path, __pyx_t_8, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3784, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_target_finish_raster_path);
    __Pyx_GIVEREF(__pyx_v_target_finish_raster_path);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_v_target_finish_raster_path);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_7, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_7, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3787
 *         flow_dir_d8_raster_path_band[0], target_finish_raster_path,
 *         gdal.GDT_Float64, [-1])
 *     finish_managed_raster = _ManagedRaster(target_finish_raster_path, 1, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef stack[CoordinateType] discovery_stack
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_target_finish_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_finish_raster_path);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_target_finish_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_1);
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_finish_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3794
 *     cdef FinishType finish_coordinate
 * 
 *     cdef long discovery_count = 0             # <<<<<<<<<<<<<<
 *     cdef int n_processed, n_pixels
 *     n_pixels = n_rows * n_cols
 */
  __pyx_v_discovery_count = 0;

  /* "src/geoprocessing/routing/routing.pyx":3796
 *     cdef long discovery_count = 0
 *     cdef int n_processed, n_pixels
 *     n_pixels = n_rows * n_cols             # <<<<<<<<<<<<<<
 *     n_processed = 0
 *     cdef time_t last_log_time = ctime(NULL)
 */
  __pyx_v_n_pixels = (__pyx_v_n_rows * __pyx_v_n_cols);

  /* "src/geoprocessing/routing/routing.pyx":3797
 *     cdef int n_processed, n_pixels
 *     n_pixels = n_rows * n_cols
 *     n_processed = 0             # <<<<<<<<<<<<<<
 *     cdef time_t last_log_time = ctime(NULL)
 *     cdef int n_pushed
 */
  __pyx_v_n_processed = 0;

  /* "src/geoprocessing/routing/routing.pyx":3798
 *     n_pixels = n_rows * n_cols
 *     n_processed = 0
 *     cdef time_t last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *     cdef int n_pushed
 * 
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":3804
 *     cdef int n_dir, test_dir
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         # search raster block by raster block
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3805
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             flow_dir_d8_raster_path_band, offset_only=True):             # <<<<<<<<<<<<<<
 *         # search raster block by raster block
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 */
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_flow_dir_d8_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_d8_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_flow_dir_d8_raster_path_band);
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 3805, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3804
 *     cdef int n_dir, test_dir
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         # search raster block by raster block
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_9 = __pyx_t_4; __Pyx_INCREF(__pyx_t_9); __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_11 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 3804, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 3804, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 3804, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_12(__pyx_t_9);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 3804, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3807
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         # search raster block by raster block
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 f'(discovery time processing): '
 */
    __pyx_t_13 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_13) {

      /* "src/geoprocessing/routing/routing.pyx":3808
 *         # search raster block by raster block
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 f'(discovery time processing): '
 *                 f'{n_processed/n_pixels*100:.1f}% complete')
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3809
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 f'(discovery time processing): '             # <<<<<<<<<<<<<<
 *                 f'{n_processed/n_pixels*100:.1f}% complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_14 = 0;
      __pyx_t_15 = 127;
      __Pyx_INCREF(__pyx_kp_u_discovery_time_processing);
      __pyx_t_14 += 29;
      __Pyx_GIVEREF(__pyx_kp_u_discovery_time_processing);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_discovery_time_processing);

      /* "src/geoprocessing/routing/routing.pyx":3810
 *             LOGGER.info(
 *                 f'(discovery time processing): '
 *                 f'{n_processed/n_pixels*100:.1f}% complete')             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *         xoff = offset_dict['xoff']
 */
      if (unlikely(__pyx_v_n_pixels == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 3810, __pyx_L1_error)
      }
      __pyx_t_8 = PyFloat_FromDouble(((((double)__pyx_v_n_processed) / ((double)__pyx_v_n_pixels)) * 100.0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_Format(__pyx_t_8, __pyx_kp_u_1f); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_15;
      __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_complete);
      __pyx_t_14 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_complete);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_complete);

      /* "src/geoprocessing/routing/routing.pyx":3809
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 f'(discovery time processing): '             # <<<<<<<<<<<<<<
 *                 f'{n_processed/n_pixels*100:.1f}% complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_10, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":3811
 *                 f'(discovery time processing): '
 *                 f'{n_processed/n_pixels*100:.1f}% complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":3807
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         # search raster block by raster block
 *         if ctime(NULL)-last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 f'(discovery time processing): '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":3812
 *                 f'{n_processed/n_pixels*100:.1f}% complete')
 *             last_log_time = ctime(NULL)
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 *         win_xsize = offset_dict['win_xsize']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3812, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_xoff = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":3813
 *             last_log_time = ctime(NULL)
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3813, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_yoff = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":3814
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         n_processed += win_xsize * win_ysize
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3814, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_win_xsize = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":3815
 *         yoff = offset_dict['yoff']
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         n_processed += win_xsize * win_ysize
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3815, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_win_ysize = __pyx_t_7;

    /* "src/geoprocessing/routing/routing.pyx":3816
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         n_processed += win_xsize * win_ysize             # <<<<<<<<<<<<<<
 * 
 *         for i in range(win_xsize):
 */
    __pyx_v_n_processed = (__pyx_v_n_processed + (__pyx_v_win_xsize * __pyx_v_win_ysize));

    /* "src/geoprocessing/routing/routing.pyx":3818
 *         n_processed += win_xsize * win_ysize
 * 
 *         for i in range(win_xsize):             # <<<<<<<<<<<<<<
 *             for j in range(win_ysize):
 *                 x_l = xoff + i
 */
    __pyx_t_7 = __pyx_v_win_xsize;
    __pyx_t_6 = __pyx_t_7;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_6; __pyx_t_16+=1) {
      __pyx_v_i = __pyx_t_16;

      /* "src/geoprocessing/routing/routing.pyx":3819
 * 
 *         for i in range(win_xsize):
 *             for j in range(win_ysize):             # <<<<<<<<<<<<<<
 *                 x_l = xoff + i
 *                 y_l = yoff + j
 */
      __pyx_t_17 = __pyx_v_win_ysize;
      __pyx_t_18 = __pyx_t_17;
      for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
        __pyx_v_j = __pyx_t_19;

        /* "src/geoprocessing/routing/routing.pyx":3820
 *         for i in range(win_xsize):
 *             for j in range(win_ysize):
 *                 x_l = xoff + i             # <<<<<<<<<<<<<<
 *                 y_l = yoff + j
 *                 # check to see if this pixel is a drain
 */
        __pyx_v_x_l = (__pyx_v_xoff + __pyx_v_i);

        /* "src/geoprocessing/routing/routing.pyx":3821
 *             for j in range(win_ysize):
 *                 x_l = xoff + i
 *                 y_l = yoff + j             # <<<<<<<<<<<<<<
 *                 # check to see if this pixel is a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 */
        __pyx_v_y_l = (__pyx_v_yoff + __pyx_v_j);

        /* "src/geoprocessing/routing/routing.pyx":3823
 *                 y_l = yoff + j
 *                 # check to see if this pixel is a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)             # <<<<<<<<<<<<<<
 *                 if d_n == flow_dir_nodata:
 *                     continue
 */
        __pyx_v_d_n = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_l, __pyx_v_y_l));

        /* "src/geoprocessing/routing/routing.pyx":3824
 *                 # check to see if this pixel is a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 *                 if d_n == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_13 = ((__pyx_v_d_n == __pyx_v_flow_dir_nodata) != 0);
        if (__pyx_t_13) {

          /* "src/geoprocessing/routing/routing.pyx":3825
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 *                 if d_n == flow_dir_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # check if downstream neighbor runs off raster or is nodata
 */
          goto __pyx_L10_continue;

          /* "src/geoprocessing/routing/routing.pyx":3824
 *                 # check to see if this pixel is a drain
 *                 d_n = <int>flow_dir_managed_raster.get(x_l, y_l)
 *                 if d_n == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":3828
 * 
 *                 # check if downstream neighbor runs off raster or is nodata
 *                 x_n = x_l + D8_XOFFSET[d_n]             # <<<<<<<<<<<<<<
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 */
        __pyx_v_x_n = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_d_n]));

        /* "src/geoprocessing/routing/routing.pyx":3829
 *                 # check if downstream neighbor runs off raster or is nodata
 *                 x_n = x_l + D8_XOFFSET[d_n]
 *                 y_n = y_l + D8_YOFFSET[d_n]             # <<<<<<<<<<<<<<
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows or
 */
        __pyx_v_y_n = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_d_n]));

        /* "src/geoprocessing/routing/routing.pyx":3831
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows or             # <<<<<<<<<<<<<<
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_dir_nodata):
 */
        __pyx_t_20 = ((__pyx_v_x_n < 0) != 0);
        if (!__pyx_t_20) {
        } else {
          __pyx_t_13 = __pyx_t_20;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_20 = ((__pyx_v_y_n < 0) != 0);
        if (!__pyx_t_20) {
        } else {
          __pyx_t_13 = __pyx_t_20;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_20 = ((__pyx_v_x_n >= __pyx_v_n_cols) != 0);
        if (!__pyx_t_20) {
        } else {
          __pyx_t_13 = __pyx_t_20;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_20 = ((__pyx_v_y_n >= __pyx_v_n_rows) != 0);
        if (!__pyx_t_20) {
        } else {
          __pyx_t_13 = __pyx_t_20;
          goto __pyx_L14_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":3833
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows or
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_dir_nodata):             # <<<<<<<<<<<<<<
 *                     discovery_stack.push(CoordinateType(x_l, y_l))
 *                     finish_stack.push(FinishType(x_l, y_l, 1))
 */
        __pyx_t_20 = ((((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_n, __pyx_v_y_n)) == __pyx_v_flow_dir_nodata) != 0);
        __pyx_t_13 = __pyx_t_20;
        __pyx_L14_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":3831
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows or             # <<<<<<<<<<<<<<
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_dir_nodata):
 */
        if (__pyx_t_13) {

          /* "src/geoprocessing/routing/routing.pyx":3834
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_dir_nodata):
 *                     discovery_stack.push(CoordinateType(x_l, y_l))             # <<<<<<<<<<<<<<
 *                     finish_stack.push(FinishType(x_l, y_l, 1))
 * 
 */
          __pyx_t_21.xi = __pyx_v_x_l;
          __pyx_t_21.yi = __pyx_v_y_l;
          __pyx_v_discovery_stack.push(__pyx_t_21);

          /* "src/geoprocessing/routing/routing.pyx":3835
 *                             x_n, y_n) == flow_dir_nodata):
 *                     discovery_stack.push(CoordinateType(x_l, y_l))
 *                     finish_stack.push(FinishType(x_l, y_l, 1))             # <<<<<<<<<<<<<<
 * 
 *                 while not discovery_stack.empty():
 */
          __pyx_t_22.xi = __pyx_v_x_l;
          __pyx_t_22.yi = __pyx_v_y_l;
          __pyx_t_22.n_pushed = 1;
          __pyx_v_finish_stack.push(__pyx_t_22);

          /* "src/geoprocessing/routing/routing.pyx":3831
 *                 y_n = y_l + D8_YOFFSET[d_n]
 * 
 *                 if (x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows or             # <<<<<<<<<<<<<<
 *                         <int>flow_dir_managed_raster.get(
 *                             x_n, y_n) == flow_dir_nodata):
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":3837
 *                     finish_stack.push(FinishType(x_l, y_l, 1))
 * 
 *                 while not discovery_stack.empty():             # <<<<<<<<<<<<<<
 *                     # This coordinate is the downstream end of the stream
 *                     raster_coord = discovery_stack.top()
 */
        while (1) {
          __pyx_t_13 = ((!(__pyx_v_discovery_stack.empty() != 0)) != 0);
          if (!__pyx_t_13) break;

          /* "src/geoprocessing/routing/routing.pyx":3839
 *                 while not discovery_stack.empty():
 *                     # This coordinate is the downstream end of the stream
 *                     raster_coord = discovery_stack.top()             # <<<<<<<<<<<<<<
 *                     discovery_stack.pop()
 * 
 */
          __pyx_v_raster_coord = __pyx_v_discovery_stack.top();

          /* "src/geoprocessing/routing/routing.pyx":3840
 *                     # This coordinate is the downstream end of the stream
 *                     raster_coord = discovery_stack.top()
 *                     discovery_stack.pop()             # <<<<<<<<<<<<<<
 * 
 *                     discovery_managed_raster.set(
 */
          __pyx_v_discovery_stack.pop();

          /* "src/geoprocessing/routing/routing.pyx":3842
 *                     discovery_stack.pop()
 * 
 *                     discovery_managed_raster.set(             # <<<<<<<<<<<<<<
 *                         raster_coord.xi, raster_coord.yi, discovery_count)
 *                     discovery_count += 1
 */
          __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_discovery_managed_raster, __pyx_v_raster_coord.xi, __pyx_v_raster_coord.yi, __pyx_v_discovery_count);

          /* "src/geoprocessing/routing/routing.pyx":3844
 *                     discovery_managed_raster.set(
 *                         raster_coord.xi, raster_coord.yi, discovery_count)
 *                     discovery_count += 1             # <<<<<<<<<<<<<<
 * 
 *                     n_pushed = 0
 */
          __pyx_v_discovery_count = (__pyx_v_discovery_count + 1);

          /* "src/geoprocessing/routing/routing.pyx":3846
 *                     discovery_count += 1
 * 
 *                     n_pushed = 0             # <<<<<<<<<<<<<<
 *                     # check each neighbor to see if it drains to this cell
 *                     # if so, it's on the traversal path
 */
          __pyx_v_n_pushed = 0;

          /* "src/geoprocessing/routing/routing.pyx":3849
 *                     # check each neighbor to see if it drains to this cell
 *                     # if so, it's on the traversal path
 *                     for test_dir in range(8):             # <<<<<<<<<<<<<<
 *                         x_n = raster_coord.xi + D8_XOFFSET[test_dir % 8]
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]
 */
          for (__pyx_t_23 = 0; __pyx_t_23 < 8; __pyx_t_23+=1) {
            __pyx_v_test_dir = __pyx_t_23;

            /* "src/geoprocessing/routing/routing.pyx":3850
 *                     # if so, it's on the traversal path
 *                     for test_dir in range(8):
 *                         x_n = raster_coord.xi + D8_XOFFSET[test_dir % 8]             # <<<<<<<<<<<<<<
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]
 *                         if x_n < 0 or y_n < 0 or \
 */
            __pyx_v_x_n = (__pyx_v_raster_coord.xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__Pyx_mod_long(__pyx_v_test_dir, 8)]));

            /* "src/geoprocessing/routing/routing.pyx":3851
 *                     for test_dir in range(8):
 *                         x_n = raster_coord.xi + D8_XOFFSET[test_dir % 8]
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]             # <<<<<<<<<<<<<<
 *                         if x_n < 0 or y_n < 0 or \
 *                                 x_n >= n_cols or y_n >= n_rows:
 */
            __pyx_v_y_n = (__pyx_v_raster_coord.yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__Pyx_mod_long(__pyx_v_test_dir, 8)]));

            /* "src/geoprocessing/routing/routing.pyx":3852
 *                         x_n = raster_coord.xi + D8_XOFFSET[test_dir % 8]
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]
 *                         if x_n < 0 or y_n < 0 or \             # <<<<<<<<<<<<<<
 *                                 x_n >= n_cols or y_n >= n_rows:
 *                             continue
 */
            __pyx_t_20 = ((__pyx_v_x_n < 0) != 0);
            if (!__pyx_t_20) {
            } else {
              __pyx_t_13 = __pyx_t_20;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_20 = ((__pyx_v_y_n < 0) != 0);
            if (!__pyx_t_20) {
            } else {
              __pyx_t_13 = __pyx_t_20;
              goto __pyx_L24_bool_binop_done;
            }

            /* "src/geoprocessing/routing/routing.pyx":3853
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]
 *                         if x_n < 0 or y_n < 0 or \
 *                                 x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *                             continue
 *                         n_dir = <int>flow_dir_managed_raster.get(x_n, y_n)
 */
            __pyx_t_20 = ((__pyx_v_x_n >= __pyx_v_n_cols) != 0);
            if (!__pyx_t_20) {
            } else {
              __pyx_t_13 = __pyx_t_20;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_20 = ((__pyx_v_y_n >= __pyx_v_n_rows) != 0);
            __pyx_t_13 = __pyx_t_20;
            __pyx_L24_bool_binop_done:;

            /* "src/geoprocessing/routing/routing.pyx":3852
 *                         x_n = raster_coord.xi + D8_XOFFSET[test_dir % 8]
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]
 *                         if x_n < 0 or y_n < 0 or \             # <<<<<<<<<<<<<<
 *                                 x_n >= n_cols or y_n >= n_rows:
 *                             continue
 */
            if (__pyx_t_13) {

              /* "src/geoprocessing/routing/routing.pyx":3854
 *                         if x_n < 0 or y_n < 0 or \
 *                                 x_n >= n_cols or y_n >= n_rows:
 *                             continue             # <<<<<<<<<<<<<<
 *                         n_dir = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                         if n_dir == flow_dir_nodata:
 */
              goto __pyx_L21_continue;

              /* "src/geoprocessing/routing/routing.pyx":3852
 *                         x_n = raster_coord.xi + D8_XOFFSET[test_dir % 8]
 *                         y_n = raster_coord.yi + D8_YOFFSET[test_dir % 8]
 *                         if x_n < 0 or y_n < 0 or \             # <<<<<<<<<<<<<<
 *                                 x_n >= n_cols or y_n >= n_rows:
 *                             continue
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3855
 *                                 x_n >= n_cols or y_n >= n_rows:
 *                             continue
 *                         n_dir = <int>flow_dir_managed_raster.get(x_n, y_n)             # <<<<<<<<<<<<<<
 *                         if n_dir == flow_dir_nodata:
 *                             continue
 */
            __pyx_v_n_dir = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_n, __pyx_v_y_n));

            /* "src/geoprocessing/routing/routing.pyx":3856
 *                             continue
 *                         n_dir = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                         if n_dir == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:
 */
            __pyx_t_13 = ((__pyx_v_n_dir == __pyx_v_flow_dir_nodata) != 0);
            if (__pyx_t_13) {

              /* "src/geoprocessing/routing/routing.pyx":3857
 *                         n_dir = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                         if n_dir == flow_dir_nodata:
 *                             continue             # <<<<<<<<<<<<<<
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:
 *                             discovery_stack.push(CoordinateType(x_n, y_n))
 */
              goto __pyx_L21_continue;

              /* "src/geoprocessing/routing/routing.pyx":3856
 *                             continue
 *                         n_dir = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                         if n_dir == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                             continue
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3858
 *                         if n_dir == flow_dir_nodata:
 *                             continue
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:             # <<<<<<<<<<<<<<
 *                             discovery_stack.push(CoordinateType(x_n, y_n))
 *                             n_pushed += 1
 */
            __pyx_t_13 = (((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_test_dir]) == __pyx_v_n_dir) != 0);
            if (__pyx_t_13) {

              /* "src/geoprocessing/routing/routing.pyx":3859
 *                             continue
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:
 *                             discovery_stack.push(CoordinateType(x_n, y_n))             # <<<<<<<<<<<<<<
 *                             n_pushed += 1
 *                     # this reference is for the previous top and represents
 */
              __pyx_t_21.xi = __pyx_v_x_n;
              __pyx_t_21.yi = __pyx_v_y_n;
              __pyx_v_discovery_stack.push(__pyx_t_21);

              /* "src/geoprocessing/routing/routing.pyx":3860
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:
 *                             discovery_stack.push(CoordinateType(x_n, y_n))
 *                             n_pushed += 1             # <<<<<<<<<<<<<<
 *                     # this reference is for the previous top and represents
 *                     # how many elements must be processed before finish
 */
              __pyx_v_n_pushed = (__pyx_v_n_pushed + 1);

              /* "src/geoprocessing/routing/routing.pyx":3858
 *                         if n_dir == flow_dir_nodata:
 *                             continue
 *                         if D8_REVERSE_DIRECTION[test_dir] == n_dir:             # <<<<<<<<<<<<<<
 *                             discovery_stack.push(CoordinateType(x_n, y_n))
 *                             n_pushed += 1
 */
            }
            __pyx_L21_continue:;
          }

          /* "src/geoprocessing/routing/routing.pyx":3866
 *                     finish_stack.push(
 *                         FinishType(
 *                             raster_coord.xi, raster_coord.yi, n_pushed))             # <<<<<<<<<<<<<<
 * 
 *                     # pop the finish stack until n_pushed > 1
 */
          __pyx_t_22.xi = __pyx_v_raster_coord.xi;
          __pyx_t_22.yi = __pyx_v_raster_coord.yi;
          __pyx_t_22.n_pushed = __pyx_v_n_pushed;

          /* "src/geoprocessing/routing/routing.pyx":3864
 *                     # how many elements must be processed before finish
 *                     # time can be defined
 *                     finish_stack.push(             # <<<<<<<<<<<<<<
 *                         FinishType(
 *                             raster_coord.xi, raster_coord.yi, n_pushed))
 */
          __pyx_v_finish_stack.push(__pyx_t_22);

          /* "src/geoprocessing/routing/routing.pyx":3869
 * 
 *                     # pop the finish stack until n_pushed > 1
 *                     if n_pushed == 0:             # <<<<<<<<<<<<<<
 *                         while (not finish_stack.empty() and
 *                                finish_stack.top().n_pushed <= 1):
 */
          __pyx_t_13 = ((__pyx_v_n_pushed == 0) != 0);
          if (__pyx_t_13) {

            /* "src/geoprocessing/routing/routing.pyx":3870
 *                     # pop the finish stack until n_pushed > 1
 *                     if n_pushed == 0:
 *                         while (not finish_stack.empty() and             # <<<<<<<<<<<<<<
 *                                finish_stack.top().n_pushed <= 1):
 *                             finish_coordinate = finish_stack.top()
 */
            while (1) {
              __pyx_t_20 = ((!(__pyx_v_finish_stack.empty() != 0)) != 0);
              if (__pyx_t_20) {
              } else {
                __pyx_t_13 = __pyx_t_20;
                goto __pyx_L33_bool_binop_done;
              }

              /* "src/geoprocessing/routing/routing.pyx":3871
 *                     if n_pushed == 0:
 *                         while (not finish_stack.empty() and
 *                                finish_stack.top().n_pushed <= 1):             # <<<<<<<<<<<<<<
 *                             finish_coordinate = finish_stack.top()
 *                             finish_stack.pop()
 */
              __pyx_t_20 = ((__pyx_v_finish_stack.top().n_pushed <= 1) != 0);
              __pyx_t_13 = __pyx_t_20;
              __pyx_L33_bool_binop_done:;
              if (!__pyx_t_13) break;

              /* "src/geoprocessing/routing/routing.pyx":3872
 *                         while (not finish_stack.empty() and
 *                                finish_stack.top().n_pushed <= 1):
 *                             finish_coordinate = finish_stack.top()             # <<<<<<<<<<<<<<
 *                             finish_stack.pop()
 *                             finish_managed_raster.set(
 */
              __pyx_v_finish_coordinate = __pyx_v_finish_stack.top();

              /* "src/geoprocessing/routing/routing.pyx":3873
 *                                finish_stack.top().n_pushed <= 1):
 *                             finish_coordinate = finish_stack.top()
 *                             finish_stack.pop()             # <<<<<<<<<<<<<<
 *                             finish_managed_raster.set(
 *                                 finish_coordinate.xi, finish_coordinate.yi,
 */
              __pyx_v_finish_stack.pop();

              /* "src/geoprocessing/routing/routing.pyx":3874
 *                             finish_coordinate = finish_stack.top()
 *                             finish_stack.pop()
 *                             finish_managed_raster.set(             # <<<<<<<<<<<<<<
 *                                 finish_coordinate.xi, finish_coordinate.yi,
 *                                 discovery_count-1)
 */
              __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_finish_managed_raster, __pyx_v_finish_coordinate.xi, __pyx_v_finish_coordinate.yi, (__pyx_v_discovery_count - 1));
            }

            /* "src/geoprocessing/routing/routing.pyx":3877
 *                                 finish_coordinate.xi, finish_coordinate.yi,
 *                                 discovery_count-1)
 *                         if not finish_stack.empty():             # <<<<<<<<<<<<<<
 *                             # then take one more because one branch is done
 *                             finish_coordinate = finish_stack.top()
 */
            __pyx_t_13 = ((!(__pyx_v_finish_stack.empty() != 0)) != 0);
            if (__pyx_t_13) {

              /* "src/geoprocessing/routing/routing.pyx":3879
 *                         if not finish_stack.empty():
 *                             # then take one more because one branch is done
 *                             finish_coordinate = finish_stack.top()             # <<<<<<<<<<<<<<
 *                             finish_stack.pop()
 *                             finish_coordinate.n_pushed -= 1
 */
              __pyx_v_finish_coordinate = __pyx_v_finish_stack.top();

              /* "src/geoprocessing/routing/routing.pyx":3880
 *                             # then take one more because one branch is done
 *                             finish_coordinate = finish_stack.top()
 *                             finish_stack.pop()             # <<<<<<<<<<<<<<
 *                             finish_coordinate.n_pushed -= 1
 *                             finish_stack.push(finish_coordinate)
 */
              __pyx_v_finish_stack.pop();

              /* "src/geoprocessing/routing/routing.pyx":3881
 *                             finish_coordinate = finish_stack.top()
 *                             finish_stack.pop()
 *                             finish_coordinate.n_pushed -= 1             # <<<<<<<<<<<<<<
 *                             finish_stack.push(finish_coordinate)
 * 
 */
              __pyx_v_finish_coordinate.n_pushed = (__pyx_v_finish_coordinate.n_pushed - 1);

              /* "src/geoprocessing/routing/routing.pyx":3882
 *                             finish_stack.pop()
 *                             finish_coordinate.n_pushed -= 1
 *                             finish_stack.push(finish_coordinate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
              __pyx_v_finish_stack.push(__pyx_v_finish_coordinate);

              /* "src/geoprocessing/routing/routing.pyx":3877
 *                                 finish_coordinate.xi, finish_coordinate.yi,
 *                                 discovery_count-1)
 *                         if not finish_stack.empty():             # <<<<<<<<<<<<<<
 *                             # then take one more because one branch is done
 *                             finish_coordinate = finish_stack.top()
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":3869
 * 
 *                     # pop the finish stack until n_pushed > 1
 *                     if n_pushed == 0:             # <<<<<<<<<<<<<<
 *                         while (not finish_stack.empty() and
 *                                finish_stack.top().n_pushed <= 1):
 */
          }
        }
        __pyx_L10_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":3804
 *     cdef int n_dir, test_dir
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_d8_raster_path_band, offset_only=True):
 *         # search raster block by raster block
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3755
 * 
 * 
 * def _build_discovery_finish_rasters(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, target_discovery_raster_path,
 *         target_finish_raster_path):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._build_discovery_finish_rasters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_flow_dir_info);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_discovery_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_finish_managed_raster);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":3885
 * 
 * 
 * def calculate_subwatershed_boundary(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band,
 *         strahler_stream_vector_path, target_watershed_boundary_vector_path,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_25calculate_subwatershed_boundary(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_24calculate_subwatershed_boundary[] = "Calculate a linestring boundary around all subwatersheds.\n\n    Subwatersheds start where the ``strahler_stream_vector`` has a junction\n    starting at this highest upstream to lowest and ending at the outlet of\n    a river.\n\n    Args:\n        d8_flow_dir_raster_path_band (tuple): raster/path band for d8 flow dir\n            raster\n        strahler_stream_vector_path (str): path to stream segment vector\n        target_watershed_boundary_vector_path (str): path to created vector\n            of linestring for watershed boundaries. Contains the fields:\n\n            * \"stream_id\": this is the stream ID from the\n              ``strahler_stream_vector_path`` that corresponds to this\n              subwatershed.\n            * \"terminated_early\": if set to 1 this watershed generation was\n              terminated before it could be complete. This value should\n              always be 0 unless something is wrong as a software bug\n              or some degenerate case of data.\n            * \"outlet_x\", \"outlet_y\": this is the x/y coordinate in raster\n              space of the outlet of the watershed. It can be useful when\n              determining other properties about the watershed when indexed\n              with underlying raster data that created the streams in\n              ``strahler_stream_vector_path``.\n\n        max_steps_per_watershed (int): maximum number of steps to take when\n            defining a watershed boundary. Useful if the DEM is large and\n            degenerate or some other user known condition to limit long large\n            polygons. Defaults to 1000000.\n        outlet_at_confluence (bool): If True the outlet of subwatersheds\n            starts at the confluence of streams. If False (the default)\n            subwatersheds will start one pixel up from the confluence.\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_25calculate_subwatershed_boundary = {"calculate_subwatershed_boundary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_25calculate_subwatershed_boundary, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_24calculate_subwatershed_boundary};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_25calculate_subwatershed_boundary(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_d8_flow_dir_raster_path_band = 0;
  PyObject *__pyx_v_strahler_stream_vector_path = 0;
  PyObject *__pyx_v_target_watershed_boundary_vector_path = 0;
  PyObject *__pyx_v_max_steps_per_watershed = 0;
  PyObject *__pyx_v_outlet_at_confluence = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_subwatershed_boundary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d8_flow_dir_raster_path_band,&__pyx_n_s_strahler_stream_vector_path,&__pyx_n_s_target_watershed_boundary_vector,&__pyx_n_s_max_steps_per_watershed,&__pyx_n_s_outlet_at_confluence,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_1000000);

    /* "src/geoprocessing/routing/routing.pyx":3889
 *         strahler_stream_vector_path, target_watershed_boundary_vector_path,
 *         max_steps_per_watershed=1000000,
 *         outlet_at_confluence=False):             # <<<<<<<<<<<<<<
 *     """Calculate a linestring boundary around all subwatersheds.
 * 
 */
    values[4] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d8_flow_dir_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strahler_stream_vector_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculate_subwatershed_boundary", 0, 3, 5, 1); __PYX_ERR(0, 3885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_watershed_boundary_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculate_subwatershed_boundary", 0, 3, 5, 2); __PYX_ERR(0, 3885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_steps_per_watershed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outlet_at_confluence);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculate_subwatershed_boundary") < 0)) __PYX_ERR(0, 3885, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_d8_flow_dir_raster_path_band = values[0];
    __pyx_v_strahler_stream_vector_path = values[1];
    __pyx_v_target_watershed_boundary_vector_path = values[2];
    __pyx_v_max_steps_per_watershed = values[3];
    __pyx_v_outlet_at_confluence = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculate_subwatershed_boundary", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3885, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.calculate_subwatershed_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_24calculate_subwatershed_boundary(__pyx_self, __pyx_v_d8_flow_dir_raster_path_band, __pyx_v_strahler_stream_vector_path, __pyx_v_target_watershed_boundary_vector_path, __pyx_v_max_steps_per_watershed, __pyx_v_outlet_at_confluence);

  /* "src/geoprocessing/routing/routing.pyx":3885
 * 
 * 
 * def calculate_subwatershed_boundary(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band,
 *         strahler_stream_vector_path, target_watershed_boundary_vector_path,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_24calculate_subwatershed_boundary(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d8_flow_dir_raster_path_band, PyObject *__pyx_v_strahler_stream_vector_path, PyObject *__pyx_v_target_watershed_boundary_vector_path, PyObject *__pyx_v_max_steps_per_watershed, PyObject *__pyx_v_outlet_at_confluence) {
  PyObject *__pyx_v_workspace_dir = NULL;
  PyObject *__pyx_v_discovery_time_raster_path = NULL;
  PyObject *__pyx_v_finish_time_raster_path = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_discovery_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_finish_managed_raster = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_d8_flow_dir_managed_raster = NULL;
  PyObject *__pyx_v_discovery_info = NULL;
  long __pyx_v_discovery_nodata;
  int __pyx_v_n_cols;
  int __pyx_v_n_rows;
  PyObject *__pyx_v_geotransform = NULL;
  double __pyx_v_g0;
  double __pyx_v_g1;
  double __pyx_v_g2;
  double __pyx_v_g3;
  double __pyx_v_g4;
  double __pyx_v_g5;
  PyObject *__pyx_v_discovery_srs = NULL;
  PyObject *__pyx_v_gpkg_driver = NULL;
  PyObject *__pyx_v_watershed_vector = NULL;
  PyObject *__pyx_v_watershed_basename = NULL;
  PyObject *__pyx_v_watershed_layer = NULL;
  int __pyx_v_x_l;
  int __pyx_v_y_l;
  int __pyx_v_outflow_dir;
  double __pyx_v_x_f;
  double __pyx_v_y_f;
  double __pyx_v_x_p;
  double __pyx_v_y_p;
  long __pyx_v_discovery;
  long __pyx_v_finish;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_stream_vector = NULL;
  PyObject *__pyx_v_stream_layer = NULL;
  PyObject *__pyx_v_upstream_fid_map = NULL;
  PyObject *__pyx_v_stream_feature = NULL;
  PyObject *__pyx_v_ds_x = NULL;
  PyObject *__pyx_v_ds_y = NULL;
  PyObject *__pyx_v_visit_order_stack = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_outlet_fid = NULL;
  PyObject *__pyx_v_working_stack = NULL;
  PyObject *__pyx_v_processed_nodes = NULL;
  PyObject *__pyx_v_working_fid = NULL;
  PyObject *__pyx_v_working_feature = NULL;
  PyObject *__pyx_v_us_x = NULL;
  PyObject *__pyx_v_us_y = NULL;
  PyObject *__pyx_v_ds_x_1 = NULL;
  PyObject *__pyx_v_ds_y_1 = NULL;
  PyObject *__pyx_v_upstream_coord = NULL;
  PyObject *__pyx_v_upstream_fids = NULL;
  int __pyx_v_edge_side;
  int __pyx_v_edge_dir;
  int __pyx_v_cell_to_test;
  int __pyx_v_out_dir_increase;
  int __pyx_v_left;
  int __pyx_v_right;
  int __pyx_v_n_steps;
  int __pyx_v_terminated_early;
  int __pyx_v_delta_x;
  int __pyx_v_delta_y;
  int __pyx_v__int_max_steps_per_watershed;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_stream_fid = NULL;
  PyObject *__pyx_v_boundary_list = NULL;
  int __pyx_v_outlet_x;
  int __pyx_v_outlet_y;
  PyObject *__pyx_v_watershed_boundary = NULL;
  int __pyx_v_left_in;
  int __pyx_v_right_in;
  int __pyx_v_out_dir;
  PyObject *__pyx_v_watershed_feature = NULL;
  PyObject *__pyx_v_watershed_polygon = NULL;
  PyObject *__pyx_v_boundary_x = NULL;
  PyObject *__pyx_v_boundary_y = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_x = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_fid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  long __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  int __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  int __pyx_t_24;
  int __pyx_t_25;
  Py_UCS4 __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_subwatershed_boundary", 0);

  /* "src/geoprocessing/routing/routing.pyx":3927
 *         None.
 *     """
 *     workspace_dir = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         prefix='calculate_subwatershed_boundary_workspace_',
 *         dir=os.path.join(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3928
 *     """
 *     workspace_dir = tempfile.mkdtemp(
 *         prefix='calculate_subwatershed_boundary_workspace_',             # <<<<<<<<<<<<<<
 *         dir=os.path.join(
 *             os.path.dirname(target_watershed_boundary_vector_path)))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_prefix, __pyx_n_u_calculate_subwatershed_boundary) < 0) __PYX_ERR(0, 3928, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3929
 *     workspace_dir = tempfile.mkdtemp(
 *         prefix='calculate_subwatershed_boundary_workspace_',
 *         dir=os.path.join(             # <<<<<<<<<<<<<<
 *             os.path.dirname(target_watershed_boundary_vector_path)))
 *     discovery_time_raster_path = os.path.join(workspace_dir, 'discovery.tif')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3930
 *         prefix='calculate_subwatershed_boundary_workspace_',
 *         dir=os.path.join(
 *             os.path.dirname(target_watershed_boundary_vector_path)))             # <<<<<<<<<<<<<<
 *     discovery_time_raster_path = os.path.join(workspace_dir, 'discovery.tif')
 *     finish_time_raster_path = os.path.join(workspace_dir, 'finish.tif')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_os); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_path); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_dirname); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_target_watershed_boundary_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_target_watershed_boundary_vector_path);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dir, __pyx_t_3) < 0) __PYX_ERR(0, 3928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3927
 *         None.
 *     """
 *     workspace_dir = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         prefix='calculate_subwatershed_boundary_workspace_',
 *         dir=os.path.join(
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_workspace_dir = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3931
 *         dir=os.path.join(
 *             os.path.dirname(target_watershed_boundary_vector_path)))
 *     discovery_time_raster_path = os.path.join(workspace_dir, 'discovery.tif')             # <<<<<<<<<<<<<<
 *     finish_time_raster_path = os.path.join(workspace_dir, 'finish.tif')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_workspace_dir, __pyx_kp_u_discovery_tif};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_workspace_dir, __pyx_kp_u_discovery_tif};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_workspace_dir);
    __Pyx_GIVEREF(__pyx_v_workspace_dir);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_workspace_dir);
    __Pyx_INCREF(__pyx_kp_u_discovery_tif);
    __Pyx_GIVEREF(__pyx_kp_u_discovery_tif);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_kp_u_discovery_tif);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_discovery_time_raster_path = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3932
 *             os.path.dirname(target_watershed_boundary_vector_path)))
 *     discovery_time_raster_path = os.path.join(workspace_dir, 'discovery.tif')
 *     finish_time_raster_path = os.path.join(workspace_dir, 'finish.tif')             # <<<<<<<<<<<<<<
 * 
 *     # construct the discovery/finish time rasters for fast individual cell
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_workspace_dir, __pyx_kp_u_finish_tif};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3932, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_workspace_dir, __pyx_kp_u_finish_tif};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3932, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_workspace_dir);
    __Pyx_GIVEREF(__pyx_v_workspace_dir);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_v_workspace_dir);
    __Pyx_INCREF(__pyx_kp_u_finish_tif);
    __Pyx_GIVEREF(__pyx_kp_u_finish_tif);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_kp_u_finish_tif);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_finish_time_raster_path = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3936
 *     # construct the discovery/finish time rasters for fast individual cell
 *     # watershed detection
 *     _build_discovery_finish_rasters(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band, discovery_time_raster_path,
 *         finish_time_raster_path)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_build_discovery_finish_rasters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":3938
 *     _build_discovery_finish_rasters(
 *         d8_flow_dir_raster_path_band, discovery_time_raster_path,
 *         finish_time_raster_path)             # <<<<<<<<<<<<<<
 * 
 *     shutil.copyfile(
 */
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_d8_flow_dir_raster_path_band, __pyx_v_discovery_time_raster_path, __pyx_v_finish_time_raster_path};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3936, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_d8_flow_dir_raster_path_band, __pyx_v_discovery_time_raster_path, __pyx_v_finish_time_raster_path};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3936, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_d8_flow_dir_raster_path_band);
    __Pyx_GIVEREF(__pyx_v_d8_flow_dir_raster_path_band);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_d8_flow_dir_raster_path_band);
    __Pyx_INCREF(__pyx_v_discovery_time_raster_path);
    __Pyx_GIVEREF(__pyx_v_discovery_time_raster_path);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_discovery_time_raster_path);
    __Pyx_INCREF(__pyx_v_finish_time_raster_path);
    __Pyx_GIVEREF(__pyx_v_finish_time_raster_path);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_8, __pyx_v_finish_time_raster_path);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3940
 *         finish_time_raster_path)
 * 
 *     shutil.copyfile(             # <<<<<<<<<<<<<<
 *         discovery_time_raster_path, f'{discovery_time_raster_path}_bak.tif')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_shutil); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_copyfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3941
 * 
 *     shutil.copyfile(
 *         discovery_time_raster_path, f'{discovery_time_raster_path}_bak.tif')             # <<<<<<<<<<<<<<
 * 
 *     # the discovery raster is filled with nodata around the edges of
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_discovery_time_raster_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_bak_tif); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_discovery_time_raster_path, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3940, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_discovery_time_raster_path, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3940, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_discovery_time_raster_path);
    __Pyx_GIVEREF(__pyx_v_discovery_time_raster_path);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_v_discovery_time_raster_path);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3945
 *     # the discovery raster is filled with nodata around the edges of
 *     # discovered watersheds, so it is opened for writing
 *     discovery_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         discovery_time_raster_path, 1, 1)
 *     finish_managed_raster = _ManagedRaster(finish_time_raster_path, 1, 0)
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_discovery_time_raster_path);
  __Pyx_GIVEREF(__pyx_v_discovery_time_raster_path);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_discovery_time_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_discovery_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3947
 *     discovery_managed_raster = _ManagedRaster(
 *         discovery_time_raster_path, 1, 1)
 *     finish_managed_raster = _ManagedRaster(finish_time_raster_path, 1, 0)             # <<<<<<<<<<<<<<
 *     d8_flow_dir_managed_raster = _ManagedRaster(
 *         d8_flow_dir_raster_path_band[0], d8_flow_dir_raster_path_band[1], 0)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_finish_time_raster_path);
  __Pyx_GIVEREF(__pyx_v_finish_time_raster_path);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_finish_time_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_int_0);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_finish_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3949
 *     finish_managed_raster = _ManagedRaster(finish_time_raster_path, 1, 0)
 *     d8_flow_dir_managed_raster = _ManagedRaster(
 *         d8_flow_dir_raster_path_band[0], d8_flow_dir_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     discovery_info = pygeoprocessing.get_raster_info(
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_d8_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_d8_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":3948
 *         discovery_time_raster_path, 1, 1)
 *     finish_managed_raster = _ManagedRaster(finish_time_raster_path, 1, 0)
 *     d8_flow_dir_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band[0], d8_flow_dir_raster_path_band[1], 0)
 * 
 */
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_int_0);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_d8_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3951
 *         d8_flow_dir_raster_path_band[0], d8_flow_dir_raster_path_band[1], 0)
 * 
 *     discovery_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         discovery_time_raster_path)
 *     cdef long discovery_nodata = discovery_info['nodata'][0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3952
 * 
 *     discovery_info = pygeoprocessing.get_raster_info(
 *         discovery_time_raster_path)             # <<<<<<<<<<<<<<
 *     cdef long discovery_nodata = discovery_info['nodata'][0]
 * 
 */
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_discovery_time_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_discovery_time_raster_path);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_discovery_info = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3953
 *     discovery_info = pygeoprocessing.get_raster_info(
 *         discovery_time_raster_path)
 *     cdef long discovery_nodata = discovery_info['nodata'][0]             # <<<<<<<<<<<<<<
 * 
 *     cdef int n_cols, n_rows
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_discovery_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 3953, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_discovery_nodata = __pyx_t_9;

  /* "src/geoprocessing/routing/routing.pyx":3956
 * 
 *     cdef int n_cols, n_rows
 *     n_cols, n_rows = discovery_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     geotransform = discovery_info['geotransform']
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_discovery_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 3956, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_2), 2) < 0) __PYX_ERR(0, 3956, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 3956, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_n_cols = __pyx_t_8;
  __pyx_v_n_rows = __pyx_t_11;

  /* "src/geoprocessing/routing/routing.pyx":3958
 *     n_cols, n_rows = discovery_info['raster_size']
 * 
 *     geotransform = discovery_info['geotransform']             # <<<<<<<<<<<<<<
 *     cdef double g0, g1, g2, g3, g4, g5
 *     g0, g1, g2, g3, g4, g5 = geotransform
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_discovery_info, __pyx_n_u_geotransform); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_geotransform = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3960
 *     geotransform = discovery_info['geotransform']
 *     cdef double g0, g1, g2, g3, g4, g5
 *     g0, g1, g2, g3, g4, g5 = geotransform             # <<<<<<<<<<<<<<
 * 
 *     if discovery_info['projection_wkt']:
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_geotransform))) || (PyList_CheckExact(__pyx_v_geotransform))) {
    PyObject* sequence = __pyx_v_geotransform;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 3960, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_5,&__pyx_t_4,&__pyx_t_2,&__pyx_t_1,&__pyx_t_6};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 3960, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_5,&__pyx_t_4,&__pyx_t_2,&__pyx_t_1,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_v_geotransform); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_7); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_7), 6) < 0) __PYX_ERR(0, 3960, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 3960, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_g0 = __pyx_t_12;
  __pyx_v_g1 = __pyx_t_13;
  __pyx_v_g2 = __pyx_t_14;
  __pyx_v_g3 = __pyx_t_15;
  __pyx_v_g4 = __pyx_t_16;
  __pyx_v_g5 = __pyx_t_17;

  /* "src/geoprocessing/routing/routing.pyx":3962
 *     g0, g1, g2, g3, g4, g5 = geotransform
 * 
 *     if discovery_info['projection_wkt']:             # <<<<<<<<<<<<<<
 *         discovery_srs = osr.SpatialReference()
 *         discovery_srs.ImportFromWkt(discovery_info['projection_wkt'])
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_discovery_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 3962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_18) {

    /* "src/geoprocessing/routing/routing.pyx":3963
 * 
 *     if discovery_info['projection_wkt']:
 *         discovery_srs = osr.SpatialReference()             # <<<<<<<<<<<<<<
 *         discovery_srs.ImportFromWkt(discovery_info['projection_wkt'])
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_osr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SpatialReference); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_discovery_srs = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3964
 *     if discovery_info['projection_wkt']:
 *         discovery_srs = osr.SpatialReference()
 *         discovery_srs.ImportFromWkt(discovery_info['projection_wkt'])             # <<<<<<<<<<<<<<
 *     else:
 *         discovery_srs = None
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_discovery_srs, __pyx_n_s_ImportFromWkt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_discovery_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3962
 *     g0, g1, g2, g3, g4, g5 = geotransform
 * 
 *     if discovery_info['projection_wkt']:             # <<<<<<<<<<<<<<
 *         discovery_srs = osr.SpatialReference()
 *         discovery_srs.ImportFromWkt(discovery_info['projection_wkt'])
 */
    goto __pyx_L7;
  }

  /* "src/geoprocessing/routing/routing.pyx":3966
 *         discovery_srs.ImportFromWkt(discovery_info['projection_wkt'])
 *     else:
 *         discovery_srs = None             # <<<<<<<<<<<<<<
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_discovery_srs = Py_None;
  }
  __pyx_L7:;

  /* "src/geoprocessing/routing/routing.pyx":3967
 *     else:
 *         discovery_srs = None
 *     gpkg_driver = gdal.GetDriverByName('GPKG')             # <<<<<<<<<<<<<<
 * 
 *     if os.path.exists(target_watershed_boundary_vector_path):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_n_u_GPKG) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_GPKG);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gpkg_driver = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3969
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 *     if os.path.exists(target_watershed_boundary_vector_path):             # <<<<<<<<<<<<<<
 *         LOGGER.warning(
 *             f'{target_watershed_boundary_vector_path} exists, removing '
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_target_watershed_boundary_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_target_watershed_boundary_vector_path);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 3969, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_18) {

    /* "src/geoprocessing/routing/routing.pyx":3970
 * 
 *     if os.path.exists(target_watershed_boundary_vector_path):
 *         LOGGER.warning(             # <<<<<<<<<<<<<<
 *             f'{target_watershed_boundary_vector_path} exists, removing '
 *             'before creating a new one.')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3971
 *     if os.path.exists(target_watershed_boundary_vector_path):
 *         LOGGER.warning(
 *             f'{target_watershed_boundary_vector_path} exists, removing '             # <<<<<<<<<<<<<<
 *             'before creating a new one.')
 *         os.remove(target_watershed_boundary_vector_path)
 */
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_target_watershed_boundary_vector_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_exists_removing_before_creating); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3973
 *             f'{target_watershed_boundary_vector_path} exists, removing '
 *             'before creating a new one.')
 *         os.remove(target_watershed_boundary_vector_path)             # <<<<<<<<<<<<<<
 *     watershed_vector = gpkg_driver.Create(
 *         target_watershed_boundary_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_target_watershed_boundary_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_target_watershed_boundary_vector_path);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3969
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 *     if os.path.exists(target_watershed_boundary_vector_path):             # <<<<<<<<<<<<<<
 *         LOGGER.warning(
 *             f'{target_watershed_boundary_vector_path} exists, removing '
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":3974
 *             'before creating a new one.')
 *         os.remove(target_watershed_boundary_vector_path)
 *     watershed_vector = gpkg_driver.Create(             # <<<<<<<<<<<<<<
 *         target_watershed_boundary_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     watershed_basename = os.path.basename(os.path.splitext(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_gpkg_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":3975
 *         os.remove(target_watershed_boundary_vector_path)
 *     watershed_vector = gpkg_driver.Create(
 *         target_watershed_boundary_vector_path, 0, 0, 0, gdal.GDT_Unknown)             # <<<<<<<<<<<<<<
 *     watershed_basename = os.path.basename(os.path.splitext(
 *         target_watershed_boundary_vector_path)[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GDT_Unknown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[6] = {__pyx_t_2, __pyx_v_target_watershed_boundary_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 5+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3974, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[6] = {__pyx_t_2, __pyx_v_target_watershed_boundary_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 5+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3974, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(5+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target_watershed_boundary_vector_path);
    __Pyx_GIVEREF(__pyx_v_target_watershed_boundary_vector_path);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_11, __pyx_v_target_watershed_boundary_vector_path);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_11, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_11, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_11, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_11, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_watershed_vector = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3976
 *     watershed_vector = gpkg_driver.Create(
 *         target_watershed_boundary_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     watershed_basename = os.path.basename(os.path.splitext(             # <<<<<<<<<<<<<<
 *         target_watershed_boundary_vector_path)[0])
 *     watershed_layer = watershed_vector.CreateLayer(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_basename); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_splitext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3977
 *         target_watershed_boundary_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     watershed_basename = os.path.basename(os.path.splitext(
 *         target_watershed_boundary_vector_path)[0])             # <<<<<<<<<<<<<<
 *     watershed_layer = watershed_vector.CreateLayer(
 *         watershed_basename, discovery_srs, ogr.wkbPolygon)
 */
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_target_watershed_boundary_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_target_watershed_boundary_vector_path);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_watershed_basename = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3978
 *     watershed_basename = os.path.basename(os.path.splitext(
 *         target_watershed_boundary_vector_path)[0])
 *     watershed_layer = watershed_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *         watershed_basename, discovery_srs, ogr.wkbPolygon)
 *     watershed_layer.CreateField(ogr.FieldDefn('stream_fid', ogr.OFTInteger))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":3979
 *         target_watershed_boundary_vector_path)[0])
 *     watershed_layer = watershed_vector.CreateLayer(
 *         watershed_basename, discovery_srs, ogr.wkbPolygon)             # <<<<<<<<<<<<<<
 *     watershed_layer.CreateField(ogr.FieldDefn('stream_fid', ogr.OFTInteger))
 *     watershed_layer.CreateField(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_wkbPolygon); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_watershed_basename, __pyx_v_discovery_srs, __pyx_t_5};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3978, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_watershed_basename, __pyx_v_discovery_srs, __pyx_t_5};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3978, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_watershed_basename);
    __Pyx_GIVEREF(__pyx_v_watershed_basename);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_11, __pyx_v_watershed_basename);
    __Pyx_INCREF(__pyx_v_discovery_srs);
    __Pyx_GIVEREF(__pyx_v_discovery_srs);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_11, __pyx_v_discovery_srs);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_11, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_watershed_layer = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3980
 *     watershed_layer = watershed_vector.CreateLayer(
 *         watershed_basename, discovery_srs, ogr.wkbPolygon)
 *     watershed_layer.CreateField(ogr.FieldDefn('stream_fid', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     watershed_layer.CreateField(
 *         ogr.FieldDefn('terminated_early', ogr.OFTInteger))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_stream_fid, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3980, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_stream_fid, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3980, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_stream_fid);
    __Pyx_GIVEREF(__pyx_n_u_stream_fid);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_n_u_stream_fid);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3981
 *         watershed_basename, discovery_srs, ogr.wkbPolygon)
 *     watershed_layer.CreateField(ogr.FieldDefn('stream_fid', ogr.OFTInteger))
 *     watershed_layer.CreateField(             # <<<<<<<<<<<<<<
 *         ogr.FieldDefn('terminated_early', ogr.OFTInteger))
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_x', ogr.OFTInteger))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "src/geoprocessing/routing/routing.pyx":3982
 *     watershed_layer.CreateField(ogr.FieldDefn('stream_fid', ogr.OFTInteger))
 *     watershed_layer.CreateField(
 *         ogr.FieldDefn('terminated_early', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_x', ogr.OFTInteger))
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_y', ogr.OFTInteger))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_terminated_early, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3982, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_terminated_early, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3982, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_terminated_early);
    __Pyx_GIVEREF(__pyx_n_u_terminated_early);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_11, __pyx_n_u_terminated_early);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_11, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3983
 *     watershed_layer.CreateField(
 *         ogr.FieldDefn('terminated_early', ogr.OFTInteger))
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_x', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_y', ogr.OFTInteger))
 *     watershed_layer.StartTransaction()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_outlet_x, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3983, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_outlet_x, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3983, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_outlet_x);
    __Pyx_GIVEREF(__pyx_n_u_outlet_x);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_11, __pyx_n_u_outlet_x);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_11, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3984
 *         ogr.FieldDefn('terminated_early', ogr.OFTInteger))
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_x', ogr.OFTInteger))
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_y', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     watershed_layer.StartTransaction()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_outlet_y, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3984, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_outlet_y, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3984, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_outlet_y);
    __Pyx_GIVEREF(__pyx_n_u_outlet_y);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_n_u_outlet_y);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3985
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_x', ogr.OFTInteger))
 *     watershed_layer.CreateField(ogr.FieldDefn('outlet_y', ogr.OFTInteger))
 *     watershed_layer.StartTransaction()             # <<<<<<<<<<<<<<
 * 
 *     cdef int x_l, y_l, outflow_dir
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3992
 *     cdef long discovery, finish
 * 
 *     cdef time_t last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     stream_vector = gdal.OpenEx(strahler_stream_vector_path, gdal.OF_VECTOR)
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":3994
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     stream_vector = gdal.OpenEx(strahler_stream_vector_path, gdal.OF_VECTOR)             # <<<<<<<<<<<<<<
 *     stream_layer = stream_vector.GetLayer()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OF_VECTOR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_strahler_stream_vector_path, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3994, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_strahler_stream_vector_path, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3994, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_strahler_stream_vector_path);
    __Pyx_GIVEREF(__pyx_v_strahler_stream_vector_path);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_v_strahler_stream_vector_path);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stream_vector = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3995
 * 
 *     stream_vector = gdal.OpenEx(strahler_stream_vector_path, gdal.OF_VECTOR)
 *     stream_layer = stream_vector.GetLayer()             # <<<<<<<<<<<<<<
 * 
 *     # construct linkage data structure for upstream streams
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_vector, __pyx_n_s_GetLayer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stream_layer = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3998
 * 
 *     # construct linkage data structure for upstream streams
 *     upstream_fid_map = collections.defaultdict(list)             # <<<<<<<<<<<<<<
 *     for stream_feature in stream_layer:
 *         ds_x = int(stream_feature.GetField('ds_x'))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_collections); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, ((PyObject *)(&PyList_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)(&PyList_Type)));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_upstream_fid_map = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3999
 *     # construct linkage data structure for upstream streams
 *     upstream_fid_map = collections.defaultdict(list)
 *     for stream_feature in stream_layer:             # <<<<<<<<<<<<<<
 *         ds_x = int(stream_feature.GetField('ds_x'))
 *         ds_y = int(stream_feature.GetField('ds_y'))
 */
  if (likely(PyList_CheckExact(__pyx_v_stream_layer)) || PyTuple_CheckExact(__pyx_v_stream_layer)) {
    __pyx_t_6 = __pyx_v_stream_layer; __Pyx_INCREF(__pyx_t_6); __pyx_t_19 = 0;
    __pyx_t_20 = NULL;
  } else {
    __pyx_t_19 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_stream_layer); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_20 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 3999, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_20)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_19); __Pyx_INCREF(__pyx_t_7); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 3999, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3999, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_19); __Pyx_INCREF(__pyx_t_7); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 3999, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3999, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_20(__pyx_t_6);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 3999, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_stream_feature, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4000
 *     upstream_fid_map = collections.defaultdict(list)
 *     for stream_feature in stream_layer:
 *         ds_x = int(stream_feature.GetField('ds_x'))             # <<<<<<<<<<<<<<
 *         ds_y = int(stream_feature.GetField('ds_y'))
 *         upstream_fid_map[(ds_x, ds_y)].append(
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_u_ds_x) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_ds_x);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ds_x, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4001
 *     for stream_feature in stream_layer:
 *         ds_x = int(stream_feature.GetField('ds_x'))
 *         ds_y = int(stream_feature.GetField('ds_y'))             # <<<<<<<<<<<<<<
 *         upstream_fid_map[(ds_x, ds_y)].append(
 *             stream_feature.GetFID())
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_n_u_ds_y) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_ds_y);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ds_y, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4002
 *         ds_x = int(stream_feature.GetField('ds_x'))
 *         ds_y = int(stream_feature.GetField('ds_y'))
 *         upstream_fid_map[(ds_x, ds_y)].append(             # <<<<<<<<<<<<<<
 *             stream_feature.GetFID())
 * 
 */
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_ds_x);
    __Pyx_GIVEREF(__pyx_v_ds_x);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_ds_x);
    __Pyx_INCREF(__pyx_v_ds_y);
    __Pyx_GIVEREF(__pyx_v_ds_y);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_ds_y);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_upstream_fid_map, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4003
 *         ds_y = int(stream_feature.GetField('ds_y'))
 *         upstream_fid_map[(ds_x, ds_y)].append(
 *             stream_feature.GetFID())             # <<<<<<<<<<<<<<
 * 
 *     stream_layer.ResetReading()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4002
 *         ds_x = int(stream_feature.GetField('ds_x'))
 *         ds_y = int(stream_feature.GetField('ds_y'))
 *         upstream_fid_map[(ds_x, ds_y)].append(             # <<<<<<<<<<<<<<
 *             stream_feature.GetFID())
 * 
 */
    __pyx_t_21 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_7); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4002, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":3999
 *     # construct linkage data structure for upstream streams
 *     upstream_fid_map = collections.defaultdict(list)
 *     for stream_feature in stream_layer:             # <<<<<<<<<<<<<<
 *         ds_x = int(stream_feature.GetField('ds_x'))
 *         ds_y = int(stream_feature.GetField('ds_y'))
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4005
 *             stream_feature.GetFID())
 * 
 *     stream_layer.ResetReading()             # <<<<<<<<<<<<<<
 *     # construct visit order, this list will have a tuple of (fid, 0/1)
 *     # this stack will be used to build watersheds from upstream to downstream
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_ResetReading); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4008
 *     # construct visit order, this list will have a tuple of (fid, 0/1)
 *     # this stack will be used to build watersheds from upstream to downstream
 *     visit_order_stack = []             # <<<<<<<<<<<<<<
 *     # visit the highest order to lowest order in case there's a branching
 *     # junction of a order 1 and order 5 stream... visit order 5 upstream
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_visit_order_stack = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4012
 *     # junction of a order 1 and order 5 stream... visit order 5 upstream
 *     # first
 *     stream_layer.SetAttributeFilter(f'"outlet"=1')             # <<<<<<<<<<<<<<
 *     # these are done last
 *     for _, outlet_fid in sorted([
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_SetAttributeFilter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_kp_u_outlet_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_outlet_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4014
 *     stream_layer.SetAttributeFilter(f'"outlet"=1')
 *     # these are done last
 *     for _, outlet_fid in sorted([             # <<<<<<<<<<<<<<
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],
 *             reverse=True):
 */
  { /* enter inner scope */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4014, __pyx_L15_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "src/geoprocessing/routing/routing.pyx":4015
 *     # these are done last
 *     for _, outlet_fid in sorted([
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],             # <<<<<<<<<<<<<<
 *             reverse=True):
 *         working_stack = [outlet_fid]
 */
    if (likely(PyList_CheckExact(__pyx_v_stream_layer)) || PyTuple_CheckExact(__pyx_v_stream_layer)) {
      __pyx_t_7 = __pyx_v_stream_layer; __Pyx_INCREF(__pyx_t_7); __pyx_t_19 = 0;
      __pyx_t_20 = NULL;
    } else {
      __pyx_t_19 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_stream_layer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4015, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_20 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 4015, __pyx_L15_error)
    }
    for (;;) {
      if (likely(!__pyx_t_20)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 4015, __pyx_L15_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4015, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 4015, __pyx_L15_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4015, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_20(__pyx_t_7);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 4015, __pyx_L15_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_x, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_x, __pyx_n_s_GetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4015, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_n_u_order) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_order);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4015, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_x, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4015, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4015, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4015, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 4014, __pyx_L15_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_x); __pyx_8genexpr2__pyx_v_x = 0;
    goto __pyx_L18_exit_scope;
    __pyx_L15_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_x); __pyx_8genexpr2__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L18_exit_scope:;
  } /* exit inner scope */

  /* "src/geoprocessing/routing/routing.pyx":4014
 *     stream_layer.SetAttributeFilter(f'"outlet"=1')
 *     # these are done last
 *     for _, outlet_fid in sorted([             # <<<<<<<<<<<<<<
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],
 *             reverse=True):
 */
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4016
 *     for _, outlet_fid in sorted([
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],
 *             reverse=True):             # <<<<<<<<<<<<<<
 *         working_stack = [outlet_fid]
 *         processed_nodes = set()
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 4016, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":4014
 *     stream_layer.SetAttributeFilter(f'"outlet"=1')
 *     # these are done last
 *     for _, outlet_fid in sorted([             # <<<<<<<<<<<<<<
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],
 *             reverse=True):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_19 = 0;
    __pyx_t_20 = NULL;
  } else {
    __pyx_t_19 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_20 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 4014, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_20)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_19); __Pyx_INCREF(__pyx_t_4); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 4014, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4014, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_19); __Pyx_INCREF(__pyx_t_4); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 4014, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4014, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_20(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 4014, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 4014, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_1 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_2), 2) < 0) __PYX_ERR(0, 4014, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L20_unpacking_done;
      __pyx_L19_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 4014, __pyx_L1_error)
      __pyx_L20_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_outlet_fid, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4017
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],
 *             reverse=True):
 *         working_stack = [outlet_fid]             # <<<<<<<<<<<<<<
 *         processed_nodes = set()
 *         while working_stack:
 */
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_outlet_fid);
    __Pyx_GIVEREF(__pyx_v_outlet_fid);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_outlet_fid);
    __Pyx_XDECREF_SET(__pyx_v_working_stack, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4018
 *             reverse=True):
 *         working_stack = [outlet_fid]
 *         processed_nodes = set()             # <<<<<<<<<<<<<<
 *         while working_stack:
 *             working_fid = working_stack[-1]
 */
    __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_processed_nodes, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4019
 *         working_stack = [outlet_fid]
 *         processed_nodes = set()
 *         while working_stack:             # <<<<<<<<<<<<<<
 *             working_fid = working_stack[-1]
 *             processed_nodes.add(working_fid)
 */
    while (1) {
      __pyx_t_18 = (PyList_GET_SIZE(__pyx_v_working_stack) != 0);
      if (!__pyx_t_18) break;

      /* "src/geoprocessing/routing/routing.pyx":4020
 *         processed_nodes = set()
 *         while working_stack:
 *             working_fid = working_stack[-1]             # <<<<<<<<<<<<<<
 *             processed_nodes.add(working_fid)
 *             working_feature = stream_layer.GetFeature(working_fid)
 */
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_working_stack, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_working_fid, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4021
 *         while working_stack:
 *             working_fid = working_stack[-1]
 *             processed_nodes.add(working_fid)             # <<<<<<<<<<<<<<
 *             working_feature = stream_layer.GetFeature(working_fid)
 * 
 */
      __pyx_t_21 = PySet_Add(__pyx_v_processed_nodes, __pyx_v_working_fid); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4021, __pyx_L1_error)

      /* "src/geoprocessing/routing/routing.pyx":4022
 *             working_fid = working_stack[-1]
 *             processed_nodes.add(working_fid)
 *             working_feature = stream_layer.GetFeature(working_fid)             # <<<<<<<<<<<<<<
 * 
 *             us_x = int(working_feature.GetField('us_x'))
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_v_working_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_working_fid);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_working_feature, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4024
 *             working_feature = stream_layer.GetFeature(working_fid)
 * 
 *             us_x = int(working_feature.GetField('us_x'))             # <<<<<<<<<<<<<<
 *             us_y = int(working_feature.GetField('us_y'))
 *             ds_x_1 = int(working_feature.GetField('ds_x_1'))
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_n_u_us_x) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_us_x);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_us_x, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4025
 * 
 *             us_x = int(working_feature.GetField('us_x'))
 *             us_y = int(working_feature.GetField('us_y'))             # <<<<<<<<<<<<<<
 *             ds_x_1 = int(working_feature.GetField('ds_x_1'))
 *             ds_y_1 = int(working_feature.GetField('ds_y_1'))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_n_u_us_y) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_us_y);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_us_y, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4026
 *             us_x = int(working_feature.GetField('us_x'))
 *             us_y = int(working_feature.GetField('us_y'))
 *             ds_x_1 = int(working_feature.GetField('ds_x_1'))             # <<<<<<<<<<<<<<
 *             ds_y_1 = int(working_feature.GetField('ds_y_1'))
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_n_u_ds_x_1) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_ds_x_1);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ds_x_1, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4027
 *             us_y = int(working_feature.GetField('us_y'))
 *             ds_x_1 = int(working_feature.GetField('ds_x_1'))
 *             ds_y_1 = int(working_feature.GetField('ds_y_1'))             # <<<<<<<<<<<<<<
 * 
 *             upstream_coord = (us_x, us_y)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_n_u_ds_y_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_ds_y_1);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ds_y_1, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4029
 *             ds_y_1 = int(working_feature.GetField('ds_y_1'))
 * 
 *             upstream_coord = (us_x, us_y)             # <<<<<<<<<<<<<<
 *             upstream_fids = [
 *                 fid for fid in upstream_fid_map[upstream_coord]
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_us_x);
      __Pyx_GIVEREF(__pyx_v_us_x);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_us_x);
      __Pyx_INCREF(__pyx_v_us_y);
      __Pyx_GIVEREF(__pyx_v_us_y);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_us_y);
      __Pyx_XDECREF_SET(__pyx_v_upstream_coord, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4030
 * 
 *             upstream_coord = (us_x, us_y)
 *             upstream_fids = [             # <<<<<<<<<<<<<<
 *                 fid for fid in upstream_fid_map[upstream_coord]
 *                 if fid not in processed_nodes]
 */
      { /* enter inner scope */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4030, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "src/geoprocessing/routing/routing.pyx":4031
 *             upstream_coord = (us_x, us_y)
 *             upstream_fids = [
 *                 fid for fid in upstream_fid_map[upstream_coord]             # <<<<<<<<<<<<<<
 *                 if fid not in processed_nodes]
 *             if upstream_fids:
 */
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_upstream_fid_map, __pyx_v_upstream_coord); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4031, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
          __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4031, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_23 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 4031, __pyx_L25_error)
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_7))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_22); __Pyx_INCREF(__pyx_t_1); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 4031, __pyx_L25_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4031, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_22); __Pyx_INCREF(__pyx_t_1); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 4031, __pyx_L25_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4031, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            }
          } else {
            __pyx_t_1 = __pyx_t_23(__pyx_t_7);
            if (unlikely(!__pyx_t_1)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 4031, __pyx_L25_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_1);
          }
          __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_fid, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4032
 *             upstream_fids = [
 *                 fid for fid in upstream_fid_map[upstream_coord]
 *                 if fid not in processed_nodes]             # <<<<<<<<<<<<<<
 *             if upstream_fids:
 *                 working_stack.extend(upstream_fids)
 */
          __pyx_t_18 = (__Pyx_PySet_ContainsTF(__pyx_8genexpr3__pyx_v_fid, __pyx_v_processed_nodes, Py_NE)); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 4032, __pyx_L25_error)
          __pyx_t_24 = (__pyx_t_18 != 0);
          if (__pyx_t_24) {

            /* "src/geoprocessing/routing/routing.pyx":4031
 *             upstream_coord = (us_x, us_y)
 *             upstream_fids = [
 *                 fid for fid in upstream_fid_map[upstream_coord]             # <<<<<<<<<<<<<<
 *                 if fid not in processed_nodes]
 *             if upstream_fids:
 */
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_8genexpr3__pyx_v_fid))) __PYX_ERR(0, 4030, __pyx_L25_error)

            /* "src/geoprocessing/routing/routing.pyx":4032
 *             upstream_fids = [
 *                 fid for fid in upstream_fid_map[upstream_coord]
 *                 if fid not in processed_nodes]             # <<<<<<<<<<<<<<
 *             if upstream_fids:
 *                 working_stack.extend(upstream_fids)
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":4031
 *             upstream_coord = (us_x, us_y)
 *             upstream_fids = [
 *                 fid for fid in upstream_fid_map[upstream_coord]             # <<<<<<<<<<<<<<
 *                 if fid not in processed_nodes]
 *             if upstream_fids:
 */
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_fid); __pyx_8genexpr3__pyx_v_fid = 0;
        goto __pyx_L29_exit_scope;
        __pyx_L25_error:;
        __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_fid); __pyx_8genexpr3__pyx_v_fid = 0;
        goto __pyx_L1_error;
        __pyx_L29_exit_scope:;
      } /* exit inner scope */
      __Pyx_XDECREF_SET(__pyx_v_upstream_fids, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4033
 *                 fid for fid in upstream_fid_map[upstream_coord]
 *                 if fid not in processed_nodes]
 *             if upstream_fids:             # <<<<<<<<<<<<<<
 *                 working_stack.extend(upstream_fids)
 *             else:
 */
      __pyx_t_24 = (PyList_GET_SIZE(__pyx_v_upstream_fids) != 0);
      if (__pyx_t_24) {

        /* "src/geoprocessing/routing/routing.pyx":4034
 *                 if fid not in processed_nodes]
 *             if upstream_fids:
 *                 working_stack.extend(upstream_fids)             # <<<<<<<<<<<<<<
 *             else:
 *                 working_stack.pop()
 */
        __pyx_t_21 = __Pyx_PyList_Extend(__pyx_v_working_stack, __pyx_v_upstream_fids); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4034, __pyx_L1_error)

        /* "src/geoprocessing/routing/routing.pyx":4033
 *                 fid for fid in upstream_fid_map[upstream_coord]
 *                 if fid not in processed_nodes]
 *             if upstream_fids:             # <<<<<<<<<<<<<<
 *                 working_stack.extend(upstream_fids)
 *             else:
 */
        goto __pyx_L30;
      }

      /* "src/geoprocessing/routing/routing.pyx":4036
 *                 working_stack.extend(upstream_fids)
 *             else:
 *                 working_stack.pop()             # <<<<<<<<<<<<<<
 *                 # the `not outlet_at_confluence` bit allows us to seed
 *                 # even if the order is 1, otherwise confluences fill
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyList_Pop(__pyx_v_working_stack); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4036, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4040
 *                 # even if the order is 1, otherwise confluences fill
 *                 # the order 1 streams
 *                 if (working_feature.GetField('order') > 1 or             # <<<<<<<<<<<<<<
 *                         not outlet_at_confluence):
 *                     if outlet_at_confluence:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4040, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_n_u_order) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_order);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4040, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4040, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 4040, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (!__pyx_t_18) {
        } else {
          __pyx_t_24 = __pyx_t_18;
          goto __pyx_L32_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":4041
 *                 # the order 1 streams
 *                 if (working_feature.GetField('order') > 1 or
 *                         not outlet_at_confluence):             # <<<<<<<<<<<<<<
 *                     if outlet_at_confluence:
 *                         # seed the upstream point
 */
        __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_outlet_at_confluence); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 4041, __pyx_L1_error)
        __pyx_t_25 = ((!__pyx_t_18) != 0);
        __pyx_t_24 = __pyx_t_25;
        __pyx_L32_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":4040
 *                 # even if the order is 1, otherwise confluences fill
 *                 # the order 1 streams
 *                 if (working_feature.GetField('order') > 1 or             # <<<<<<<<<<<<<<
 *                         not outlet_at_confluence):
 *                     if outlet_at_confluence:
 */
        if (__pyx_t_24) {

          /* "src/geoprocessing/routing/routing.pyx":4042
 *                 if (working_feature.GetField('order') > 1 or
 *                         not outlet_at_confluence):
 *                     if outlet_at_confluence:             # <<<<<<<<<<<<<<
 *                         # seed the upstream point
 *                         visit_order_stack.append((working_fid, us_x, us_y))
 */
          __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_outlet_at_confluence); if (unlikely(__pyx_t_24 < 0)) __PYX_ERR(0, 4042, __pyx_L1_error)
          if (__pyx_t_24) {

            /* "src/geoprocessing/routing/routing.pyx":4044
 *                     if outlet_at_confluence:
 *                         # seed the upstream point
 *                         visit_order_stack.append((working_fid, us_x, us_y))             # <<<<<<<<<<<<<<
 *                     else:
 *                         # seed the downstream but +1 step point
 */
            __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4044, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_v_working_fid);
            __Pyx_GIVEREF(__pyx_v_working_fid);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_working_fid);
            __Pyx_INCREF(__pyx_v_us_x);
            __Pyx_GIVEREF(__pyx_v_us_x);
            PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_us_x);
            __Pyx_INCREF(__pyx_v_us_y);
            __Pyx_GIVEREF(__pyx_v_us_y);
            PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_us_y);
            __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_visit_order_stack, __pyx_t_7); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4044, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "src/geoprocessing/routing/routing.pyx":4042
 *                 if (working_feature.GetField('order') > 1 or
 *                         not outlet_at_confluence):
 *                     if outlet_at_confluence:             # <<<<<<<<<<<<<<
 *                         # seed the upstream point
 *                         visit_order_stack.append((working_fid, us_x, us_y))
 */
            goto __pyx_L34;
          }

          /* "src/geoprocessing/routing/routing.pyx":4047
 *                     else:
 *                         # seed the downstream but +1 step point
 *                         visit_order_stack.append(             # <<<<<<<<<<<<<<
 *                             (working_fid, ds_x_1, ds_y_1))
 *                 if working_feature.GetField('outlet') == 1:
 */
          /*else*/ {

            /* "src/geoprocessing/routing/routing.pyx":4048
 *                         # seed the downstream but +1 step point
 *                         visit_order_stack.append(
 *                             (working_fid, ds_x_1, ds_y_1))             # <<<<<<<<<<<<<<
 *                 if working_feature.GetField('outlet') == 1:
 *                     # an outlet is a special case where the outlet itself
 */
            __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4048, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_v_working_fid);
            __Pyx_GIVEREF(__pyx_v_working_fid);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_working_fid);
            __Pyx_INCREF(__pyx_v_ds_x_1);
            __Pyx_GIVEREF(__pyx_v_ds_x_1);
            PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_ds_x_1);
            __Pyx_INCREF(__pyx_v_ds_y_1);
            __Pyx_GIVEREF(__pyx_v_ds_y_1);
            PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_ds_y_1);

            /* "src/geoprocessing/routing/routing.pyx":4047
 *                     else:
 *                         # seed the downstream but +1 step point
 *                         visit_order_stack.append(             # <<<<<<<<<<<<<<
 *                             (working_fid, ds_x_1, ds_y_1))
 *                 if working_feature.GetField('outlet') == 1:
 */
            __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_visit_order_stack, __pyx_t_7); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4047, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __pyx_L34:;

          /* "src/geoprocessing/routing/routing.pyx":4040
 *                 # even if the order is 1, otherwise confluences fill
 *                 # the order 1 streams
 *                 if (working_feature.GetField('order') > 1 or             # <<<<<<<<<<<<<<
 *                         not outlet_at_confluence):
 *                     if outlet_at_confluence:
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4049
 *                         visit_order_stack.append(
 *                             (working_fid, ds_x_1, ds_y_1))
 *                 if working_feature.GetField('outlet') == 1:             # <<<<<<<<<<<<<<
 *                     # an outlet is a special case where the outlet itself
 *                     # should be a subwatershed done last.
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_n_u_outlet) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_outlet);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_24 < 0)) __PYX_ERR(0, 4049, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_24) {

          /* "src/geoprocessing/routing/routing.pyx":4052
 *                     # an outlet is a special case where the outlet itself
 *                     # should be a subwatershed done last.
 *                     ds_x = int(working_feature.GetField('ds_x'))             # <<<<<<<<<<<<<<
 *                     ds_y = int(working_feature.GetField('ds_y'))
 *                     if not outlet_at_confluence:
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4052, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_n_u_ds_x) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_ds_x);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4052, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4052, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_ds_x, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4053
 *                     # should be a subwatershed done last.
 *                     ds_x = int(working_feature.GetField('ds_x'))
 *                     ds_y = int(working_feature.GetField('ds_y'))             # <<<<<<<<<<<<<<
 *                     if not outlet_at_confluence:
 *                         # undo the previous visit because it will be at
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_working_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4053, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_n_u_ds_y) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_ds_y);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4053, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4053, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_ds_y, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4054
 *                     ds_x = int(working_feature.GetField('ds_x'))
 *                     ds_y = int(working_feature.GetField('ds_y'))
 *                     if not outlet_at_confluence:             # <<<<<<<<<<<<<<
 *                         # undo the previous visit because it will be at
 *                         # one pixel up and we want the pixel right at
 */
          __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_outlet_at_confluence); if (unlikely(__pyx_t_24 < 0)) __PYX_ERR(0, 4054, __pyx_L1_error)
          __pyx_t_25 = ((!__pyx_t_24) != 0);
          if (__pyx_t_25) {

            /* "src/geoprocessing/routing/routing.pyx":4058
 *                         # one pixel up and we want the pixel right at
 *                         # the outlet
 *                         visit_order_stack.pop()             # <<<<<<<<<<<<<<
 *                     visit_order_stack.append((working_fid, ds_x, ds_y))
 * 
 */
            __pyx_t_4 = __Pyx_PyList_Pop(__pyx_v_visit_order_stack); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4058, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "src/geoprocessing/routing/routing.pyx":4054
 *                     ds_x = int(working_feature.GetField('ds_x'))
 *                     ds_y = int(working_feature.GetField('ds_y'))
 *                     if not outlet_at_confluence:             # <<<<<<<<<<<<<<
 *                         # undo the previous visit because it will be at
 *                         # one pixel up and we want the pixel right at
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":4059
 *                         # the outlet
 *                         visit_order_stack.pop()
 *                     visit_order_stack.append((working_fid, ds_x, ds_y))             # <<<<<<<<<<<<<<
 * 
 *     cdef int edge_side, edge_dir, cell_to_test, out_dir_increase=-1
 */
          __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4059, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_v_working_fid);
          __Pyx_GIVEREF(__pyx_v_working_fid);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_working_fid);
          __Pyx_INCREF(__pyx_v_ds_x);
          __Pyx_GIVEREF(__pyx_v_ds_x);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_ds_x);
          __Pyx_INCREF(__pyx_v_ds_y);
          __Pyx_GIVEREF(__pyx_v_ds_y);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_ds_y);
          __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_visit_order_stack, __pyx_t_4); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4059, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4049
 *                         visit_order_stack.append(
 *                             (working_fid, ds_x_1, ds_y_1))
 *                 if working_feature.GetField('outlet') == 1:             # <<<<<<<<<<<<<<
 *                     # an outlet is a special case where the outlet itself
 *                     # should be a subwatershed done last.
 */
        }
      }
      __pyx_L30:;
    }

    /* "src/geoprocessing/routing/routing.pyx":4014
 *     stream_layer.SetAttributeFilter(f'"outlet"=1')
 *     # these are done last
 *     for _, outlet_fid in sorted([             # <<<<<<<<<<<<<<
 *             (x.GetField('order'), x.GetFID()) for x in stream_layer],
 *             reverse=True):
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4061
 *                     visit_order_stack.append((working_fid, ds_x, ds_y))
 * 
 *     cdef int edge_side, edge_dir, cell_to_test, out_dir_increase=-1             # <<<<<<<<<<<<<<
 *     cdef int left, right, n_steps, terminated_early
 *     cdef int delta_x, delta_y
 */
  __pyx_v_out_dir_increase = -1;

  /* "src/geoprocessing/routing/routing.pyx":4064
 *     cdef int left, right, n_steps, terminated_early
 *     cdef int delta_x, delta_y
 *     cdef int _int_max_steps_per_watershed = max_steps_per_watershed             # <<<<<<<<<<<<<<
 * 
 *     for index, (stream_fid, x_l, y_l) in enumerate(visit_order_stack):
 */
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_max_steps_per_watershed); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4064, __pyx_L1_error)
  __pyx_v__int_max_steps_per_watershed = __pyx_t_11;

  /* "src/geoprocessing/routing/routing.pyx":4066
 *     cdef int _int_max_steps_per_watershed = max_steps_per_watershed
 * 
 *     for index, (stream_fid, x_l, y_l) in enumerate(visit_order_stack):             # <<<<<<<<<<<<<<
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = __pyx_v_visit_order_stack; __Pyx_INCREF(__pyx_t_4); __pyx_t_19 = 0;
  for (;;) {
    if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_19); __Pyx_INCREF(__pyx_t_7); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 4066, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 4066, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L39_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_2 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L39_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 2; __pyx_t_3 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L39_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 3) < 0) __PYX_ERR(0, 4066, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L40_unpacking_done;
      __pyx_L39_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 4066, __pyx_L1_error)
      __pyx_L40_unpacking_done:;
    }
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4066, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4066, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_stream_fid, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_x_l = __pyx_t_11;
    __pyx_v_y_l = __pyx_t_8;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4067
 * 
 *     for index, (stream_fid, x_l, y_l) in enumerate(visit_order_stack):
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 f'(calculate_subwatershed_boundary): watershed building '
 */
    __pyx_t_25 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_25) {

      /* "src/geoprocessing/routing/routing.pyx":4068
 *     for index, (stream_fid, x_l, y_l) in enumerate(visit_order_stack):
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 f'(calculate_subwatershed_boundary): watershed building '
 *                 f'{(index/len(visit_order_stack))*100:.1f}% complete')
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4069
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 f'(calculate_subwatershed_boundary): watershed building '             # <<<<<<<<<<<<<<
 *                 f'{(index/len(visit_order_stack))*100:.1f}% complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_22 = 0;
      __pyx_t_26 = 127;
      __Pyx_INCREF(__pyx_kp_u_calculate_subwatershed_boundary_2);
      __pyx_t_22 += 54;
      __Pyx_GIVEREF(__pyx_kp_u_calculate_subwatershed_boundary_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_calculate_subwatershed_boundary_2);

      /* "src/geoprocessing/routing/routing.pyx":4070
 *             LOGGER.info(
 *                 f'(calculate_subwatershed_boundary): watershed building '
 *                 f'{(index/len(visit_order_stack))*100:.1f}% complete')             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *         discovery = <long>discovery_managed_raster.get(x_l, y_l)
 */
      __pyx_t_27 = PyList_GET_SIZE(__pyx_v_visit_order_stack); if (unlikely(__pyx_t_27 == ((Py_ssize_t)-1))) __PYX_ERR(0, 4070, __pyx_L1_error)
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_27); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4070, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_index, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4070, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_int_100); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4070, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_kp_u_1f); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4070, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_26 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_26) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_26;
      __pyx_t_22 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_complete);
      __pyx_t_22 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_complete);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_complete);

      /* "src/geoprocessing/routing/routing.pyx":4069
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 *                 f'(calculate_subwatershed_boundary): watershed building '             # <<<<<<<<<<<<<<
 *                 f'{(index/len(visit_order_stack))*100:.1f}% complete')
 *             last_log_time = ctime(NULL)
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_22, __pyx_t_26); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4071
 *                 f'(calculate_subwatershed_boundary): watershed building '
 *                 f'{(index/len(visit_order_stack))*100:.1f}% complete')
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         discovery = <long>discovery_managed_raster.get(x_l, y_l)
 *         if discovery == -1:
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":4067
 * 
 *     for index, (stream_fid, x_l, y_l) in enumerate(visit_order_stack):
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 f'(calculate_subwatershed_boundary): watershed building '
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4072
 *                 f'{(index/len(visit_order_stack))*100:.1f}% complete')
 *             last_log_time = ctime(NULL)
 *         discovery = <long>discovery_managed_raster.get(x_l, y_l)             # <<<<<<<<<<<<<<
 *         if discovery == -1:
 *             continue
 */
    __pyx_v_discovery = ((long)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_discovery_managed_raster, __pyx_v_x_l, __pyx_v_y_l));

    /* "src/geoprocessing/routing/routing.pyx":4073
 *             last_log_time = ctime(NULL)
 *         discovery = <long>discovery_managed_raster.get(x_l, y_l)
 *         if discovery == -1:             # <<<<<<<<<<<<<<
 *             continue
 *         boundary_list = [(x_l, y_l)]
 */
    __pyx_t_25 = ((__pyx_v_discovery == -1L) != 0);
    if (__pyx_t_25) {

      /* "src/geoprocessing/routing/routing.pyx":4074
 *         discovery = <long>discovery_managed_raster.get(x_l, y_l)
 *         if discovery == -1:
 *             continue             # <<<<<<<<<<<<<<
 *         boundary_list = [(x_l, y_l)]
 *         finish = <long>finish_managed_raster.get(x_l, y_l)
 */
      goto __pyx_L37_continue;

      /* "src/geoprocessing/routing/routing.pyx":4073
 *             last_log_time = ctime(NULL)
 *         discovery = <long>discovery_managed_raster.get(x_l, y_l)
 *         if discovery == -1:             # <<<<<<<<<<<<<<
 *             continue
 *         boundary_list = [(x_l, y_l)]
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4075
 *         if discovery == -1:
 *             continue
 *         boundary_list = [(x_l, y_l)]             # <<<<<<<<<<<<<<
 *         finish = <long>finish_managed_raster.get(x_l, y_l)
 *         outlet_x = x_l
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_boundary_list, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4076
 *             continue
 *         boundary_list = [(x_l, y_l)]
 *         finish = <long>finish_managed_raster.get(x_l, y_l)             # <<<<<<<<<<<<<<
 *         outlet_x = x_l
 *         outlet_y = y_l
 */
    __pyx_v_finish = ((long)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_finish_managed_raster, __pyx_v_x_l, __pyx_v_y_l));

    /* "src/geoprocessing/routing/routing.pyx":4077
 *         boundary_list = [(x_l, y_l)]
 *         finish = <long>finish_managed_raster.get(x_l, y_l)
 *         outlet_x = x_l             # <<<<<<<<<<<<<<
 *         outlet_y = y_l
 * 
 */
    __pyx_v_outlet_x = __pyx_v_x_l;

    /* "src/geoprocessing/routing/routing.pyx":4078
 *         finish = <long>finish_managed_raster.get(x_l, y_l)
 *         outlet_x = x_l
 *         outlet_y = y_l             # <<<<<<<<<<<<<<
 * 
 *         watershed_boundary = ogr.Geometry(ogr.wkbLinearRing)
 */
    __pyx_v_outlet_y = __pyx_v_y_l;

    /* "src/geoprocessing/routing/routing.pyx":4080
 *         outlet_y = y_l
 * 
 *         watershed_boundary = ogr.Geometry(ogr.wkbLinearRing)             # <<<<<<<<<<<<<<
 *         outflow_dir = <int>d8_flow_dir_managed_raster.get(x_l, y_l)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Geometry); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_wkbLinearRing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_watershed_boundary, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4081
 * 
 *         watershed_boundary = ogr.Geometry(ogr.wkbLinearRing)
 *         outflow_dir = <int>d8_flow_dir_managed_raster.get(x_l, y_l)             # <<<<<<<<<<<<<<
 * 
 *         # this is the center point of the pixel that will be offset to
 */
    __pyx_v_outflow_dir = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_d8_flow_dir_managed_raster, __pyx_v_x_l, __pyx_v_y_l));

    /* "src/geoprocessing/routing/routing.pyx":4085
 *         # this is the center point of the pixel that will be offset to
 *         # make the edge
 *         x_f = x_l+0.5             # <<<<<<<<<<<<<<
 *         y_f = y_l+0.5
 * 
 */
    __pyx_v_x_f = (__pyx_v_x_l + 0.5);

    /* "src/geoprocessing/routing/routing.pyx":4086
 *         # make the edge
 *         x_f = x_l+0.5
 *         y_f = y_l+0.5             # <<<<<<<<<<<<<<
 * 
 *         x_f += D8_XOFFSET[outflow_dir]*0.5
 */
    __pyx_v_y_f = (__pyx_v_y_l + 0.5);

    /* "src/geoprocessing/routing/routing.pyx":4088
 *         y_f = y_l+0.5
 * 
 *         x_f += D8_XOFFSET[outflow_dir]*0.5             # <<<<<<<<<<<<<<
 *         y_f += D8_YOFFSET[outflow_dir]*0.5
 *         if outflow_dir % 2 == 0:
 */
    __pyx_v_x_f = (__pyx_v_x_f + ((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_outflow_dir]) * 0.5));

    /* "src/geoprocessing/routing/routing.pyx":4089
 * 
 *         x_f += D8_XOFFSET[outflow_dir]*0.5
 *         y_f += D8_YOFFSET[outflow_dir]*0.5             # <<<<<<<<<<<<<<
 *         if outflow_dir % 2 == 0:
 *             # need to back up the point a bit
 */
    __pyx_v_y_f = (__pyx_v_y_f + ((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_outflow_dir]) * 0.5));

    /* "src/geoprocessing/routing/routing.pyx":4090
 *         x_f += D8_XOFFSET[outflow_dir]*0.5
 *         y_f += D8_YOFFSET[outflow_dir]*0.5
 *         if outflow_dir % 2 == 0:             # <<<<<<<<<<<<<<
 *             # need to back up the point a bit
 *             x_f -= D8_YOFFSET[outflow_dir]*0.5
 */
    __pyx_t_25 = ((__Pyx_mod_long(__pyx_v_outflow_dir, 2) == 0) != 0);
    if (__pyx_t_25) {

      /* "src/geoprocessing/routing/routing.pyx":4092
 *         if outflow_dir % 2 == 0:
 *             # need to back up the point a bit
 *             x_f -= D8_YOFFSET[outflow_dir]*0.5             # <<<<<<<<<<<<<<
 *             y_f += D8_XOFFSET[outflow_dir]*0.5
 * 
 */
      __pyx_v_x_f = (__pyx_v_x_f - ((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_outflow_dir]) * 0.5));

      /* "src/geoprocessing/routing/routing.pyx":4093
 *             # need to back up the point a bit
 *             x_f -= D8_YOFFSET[outflow_dir]*0.5
 *             y_f += D8_XOFFSET[outflow_dir]*0.5             # <<<<<<<<<<<<<<
 * 
 *         x_p, y_p = gdal.ApplyGeoTransform(geotransform, x_f, y_f)
 */
      __pyx_v_y_f = (__pyx_v_y_f + ((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_outflow_dir]) * 0.5));

      /* "src/geoprocessing/routing/routing.pyx":4090
 *         x_f += D8_XOFFSET[outflow_dir]*0.5
 *         y_f += D8_YOFFSET[outflow_dir]*0.5
 *         if outflow_dir % 2 == 0:             # <<<<<<<<<<<<<<
 *             # need to back up the point a bit
 *             x_f -= D8_YOFFSET[outflow_dir]*0.5
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4095
 *             y_f += D8_XOFFSET[outflow_dir]*0.5
 * 
 *         x_p, y_p = gdal.ApplyGeoTransform(geotransform, x_f, y_f)             # <<<<<<<<<<<<<<
 *         watershed_boundary.AddPoint(x_p, y_p)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_ApplyGeoTransform); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_x_f); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y_f); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_geotransform, __pyx_t_7, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_geotransform, __pyx_t_7, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_28 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_geotransform);
      __Pyx_GIVEREF(__pyx_v_geotransform);
      PyTuple_SET_ITEM(__pyx_t_28, 0+__pyx_t_8, __pyx_v_geotransform);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_28, 1+__pyx_t_8, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_28, 2+__pyx_t_8, __pyx_t_5);
      __pyx_t_7 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_28, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 4095, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_28 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_28 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_28);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_28 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4095, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L44_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_28 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_28)) goto __pyx_L44_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_28);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 2) < 0) __PYX_ERR(0, 4095, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L45_unpacking_done;
      __pyx_L44_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 4095, __pyx_L1_error)
      __pyx_L45_unpacking_done:;
    }
    __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4095, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_28); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4095, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    __pyx_v_x_p = __pyx_t_17;
    __pyx_v_y_p = __pyx_t_16;

    /* "src/geoprocessing/routing/routing.pyx":4096
 * 
 *         x_p, y_p = gdal.ApplyGeoTransform(geotransform, x_f, y_f)
 *         watershed_boundary.AddPoint(x_p, y_p)             # <<<<<<<<<<<<<<
 * 
 *         # keep track of how many steps x/y and when we get back to 0 we've
 */
    __pyx_t_28 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_boundary, __pyx_n_s_AddPoint); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4096, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x_p); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4096, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4096, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_28))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_28);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_28);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_28, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_28)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_28, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4096, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_28)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_28, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4096, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4096, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_28, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4096, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4100
 *         # keep track of how many steps x/y and when we get back to 0 we've
 *         # made a loop
 *         delta_x, delta_y = 0, 0             # <<<<<<<<<<<<<<
 * 
 *         # determine the first edge
 */
    __pyx_t_8 = 0;
    __pyx_t_11 = 0;
    __pyx_v_delta_x = __pyx_t_8;
    __pyx_v_delta_y = __pyx_t_11;

    /* "src/geoprocessing/routing/routing.pyx":4103
 * 
 *         # determine the first edge
 *         if outflow_dir % 2 == 0:             # <<<<<<<<<<<<<<
 *             # outflow through a straight side, so trivial edge detection
 *             edge_side = outflow_dir
 */
    __pyx_t_25 = ((__Pyx_mod_long(__pyx_v_outflow_dir, 2) == 0) != 0);
    if (__pyx_t_25) {

      /* "src/geoprocessing/routing/routing.pyx":4105
 *         if outflow_dir % 2 == 0:
 *             # outflow through a straight side, so trivial edge detection
 *             edge_side = outflow_dir             # <<<<<<<<<<<<<<
 *             edge_dir = (2+edge_side) % 8
 *         else:
 */
      __pyx_v_edge_side = __pyx_v_outflow_dir;

      /* "src/geoprocessing/routing/routing.pyx":4106
 *             # outflow through a straight side, so trivial edge detection
 *             edge_side = outflow_dir
 *             edge_dir = (2+edge_side) % 8             # <<<<<<<<<<<<<<
 *         else:
 *             # diagonal outflow requires testing neighboring cells to
 */
      __pyx_v_edge_dir = __Pyx_mod_long((2 + __pyx_v_edge_side), 8);

      /* "src/geoprocessing/routing/routing.pyx":4103
 * 
 *         # determine the first edge
 *         if outflow_dir % 2 == 0:             # <<<<<<<<<<<<<<
 *             # outflow through a straight side, so trivial edge detection
 *             edge_side = outflow_dir
 */
      goto __pyx_L46;
    }

    /* "src/geoprocessing/routing/routing.pyx":4110
 *             # diagonal outflow requires testing neighboring cells to
 *             # determine first edge
 *             cell_to_test = (outflow_dir+1) % 8             # <<<<<<<<<<<<<<
 *             edge_side = cell_to_test
 *             edge_dir = (cell_to_test+2) % 8
 */
    /*else*/ {
      __pyx_v_cell_to_test = __Pyx_mod_long((__pyx_v_outflow_dir + 1), 8);

      /* "src/geoprocessing/routing/routing.pyx":4111
 *             # determine first edge
 *             cell_to_test = (outflow_dir+1) % 8
 *             edge_side = cell_to_test             # <<<<<<<<<<<<<<
 *             edge_dir = (cell_to_test+2) % 8
 *             if _in_watershed(
 */
      __pyx_v_edge_side = __pyx_v_cell_to_test;

      /* "src/geoprocessing/routing/routing.pyx":4112
 *             cell_to_test = (outflow_dir+1) % 8
 *             edge_side = cell_to_test
 *             edge_dir = (cell_to_test+2) % 8             # <<<<<<<<<<<<<<
 *             if _in_watershed(
 *                     x_l, y_l, cell_to_test, discovery, finish,
 */
      __pyx_v_edge_dir = __Pyx_mod_long((__pyx_v_cell_to_test + 2), 8);

      /* "src/geoprocessing/routing/routing.pyx":4113
 *             edge_side = cell_to_test
 *             edge_dir = (cell_to_test+2) % 8
 *             if _in_watershed(             # <<<<<<<<<<<<<<
 *                     x_l, y_l, cell_to_test, discovery, finish,
 *                     n_cols, n_rows,
 */
      __pyx_t_25 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__in_watershed(__pyx_v_x_l, __pyx_v_y_l, __pyx_v_cell_to_test, __pyx_v_discovery, __pyx_v_finish, __pyx_v_n_cols, __pyx_v_n_rows, __pyx_v_discovery_managed_raster, __pyx_v_discovery_nodata) != 0);
      if (__pyx_t_25) {

        /* "src/geoprocessing/routing/routing.pyx":4117
 *                     n_cols, n_rows,
 *                     discovery_managed_raster, discovery_nodata):
 *                 edge_side = (edge_side-2) % 8             # <<<<<<<<<<<<<<
 *                 edge_dir = (edge_dir-2) % 8
 *                 x_l += D8_XOFFSET[edge_dir]
 */
        __pyx_v_edge_side = __Pyx_mod_long((__pyx_v_edge_side - 2), 8);

        /* "src/geoprocessing/routing/routing.pyx":4118
 *                     discovery_managed_raster, discovery_nodata):
 *                 edge_side = (edge_side-2) % 8
 *                 edge_dir = (edge_dir-2) % 8             # <<<<<<<<<<<<<<
 *                 x_l += D8_XOFFSET[edge_dir]
 *                 y_l += D8_YOFFSET[edge_dir]
 */
        __pyx_v_edge_dir = __Pyx_mod_long((__pyx_v_edge_dir - 2), 8);

        /* "src/geoprocessing/routing/routing.pyx":4119
 *                 edge_side = (edge_side-2) % 8
 *                 edge_dir = (edge_dir-2) % 8
 *                 x_l += D8_XOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *                 y_l += D8_YOFFSET[edge_dir]
 *                 # note the pixel moved
 */
        __pyx_v_x_l = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_edge_dir]));

        /* "src/geoprocessing/routing/routing.pyx":4120
 *                 edge_dir = (edge_dir-2) % 8
 *                 x_l += D8_XOFFSET[edge_dir]
 *                 y_l += D8_YOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *                 # note the pixel moved
 *                 boundary_list.append((x_l, y_l))
 */
        __pyx_v_y_l = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_edge_dir]));

        /* "src/geoprocessing/routing/routing.pyx":4122
 *                 y_l += D8_YOFFSET[edge_dir]
 *                 # note the pixel moved
 *                 boundary_list.append((x_l, y_l))             # <<<<<<<<<<<<<<
 * 
 *         n_steps = 0
 */
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_28 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_28);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_28);
        __pyx_t_2 = 0;
        __pyx_t_28 = 0;
        __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_boundary_list, __pyx_t_1); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4122, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4113
 *             edge_side = cell_to_test
 *             edge_dir = (cell_to_test+2) % 8
 *             if _in_watershed(             # <<<<<<<<<<<<<<
 *                     x_l, y_l, cell_to_test, discovery, finish,
 *                     n_cols, n_rows,
 */
      }
    }
    __pyx_L46:;

    /* "src/geoprocessing/routing/routing.pyx":4124
 *                 boundary_list.append((x_l, y_l))
 * 
 *         n_steps = 0             # <<<<<<<<<<<<<<
 *         terminated_early = 0
 *         while True:
 */
    __pyx_v_n_steps = 0;

    /* "src/geoprocessing/routing/routing.pyx":4125
 * 
 *         n_steps = 0
 *         terminated_early = 0             # <<<<<<<<<<<<<<
 *         while True:
 *             # step the edge then determine the projected coordinates
 */
    __pyx_v_terminated_early = 0;

    /* "src/geoprocessing/routing/routing.pyx":4126
 *         n_steps = 0
 *         terminated_early = 0
 *         while True:             # <<<<<<<<<<<<<<
 *             # step the edge then determine the projected coordinates
 *             x_f += D8_XOFFSET[edge_dir]
 */
    while (1) {

      /* "src/geoprocessing/routing/routing.pyx":4128
 *         while True:
 *             # step the edge then determine the projected coordinates
 *             x_f += D8_XOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *             y_f += D8_YOFFSET[edge_dir]
 *             delta_x += D8_XOFFSET[edge_dir]
 */
      __pyx_v_x_f = (__pyx_v_x_f + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_edge_dir]));

      /* "src/geoprocessing/routing/routing.pyx":4129
 *             # step the edge then determine the projected coordinates
 *             x_f += D8_XOFFSET[edge_dir]
 *             y_f += D8_YOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *             delta_x += D8_XOFFSET[edge_dir]
 *             delta_y += D8_YOFFSET[edge_dir]
 */
      __pyx_v_y_f = (__pyx_v_y_f + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_edge_dir]));

      /* "src/geoprocessing/routing/routing.pyx":4130
 *             x_f += D8_XOFFSET[edge_dir]
 *             y_f += D8_YOFFSET[edge_dir]
 *             delta_x += D8_XOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *             delta_y += D8_YOFFSET[edge_dir]
 *             # equivalent to gdal.ApplyGeoTransform(geotransform, x_f, y_f)
 */
      __pyx_v_delta_x = (__pyx_v_delta_x + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_edge_dir]));

      /* "src/geoprocessing/routing/routing.pyx":4131
 *             y_f += D8_YOFFSET[edge_dir]
 *             delta_x += D8_XOFFSET[edge_dir]
 *             delta_y += D8_YOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *             # equivalent to gdal.ApplyGeoTransform(geotransform, x_f, y_f)
 *             # to eliminate python function call overhead
 */
      __pyx_v_delta_y = (__pyx_v_delta_y + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_edge_dir]));

      /* "src/geoprocessing/routing/routing.pyx":4134
 *             # equivalent to gdal.ApplyGeoTransform(geotransform, x_f, y_f)
 *             # to eliminate python function call overhead
 *             x_p = g0 + g1*x_f + g2*y_f             # <<<<<<<<<<<<<<
 *             y_p = g3 + g4*x_f + g5*y_f
 *             watershed_boundary.AddPoint(x_p, y_p)
 */
      __pyx_v_x_p = ((__pyx_v_g0 + (__pyx_v_g1 * __pyx_v_x_f)) + (__pyx_v_g2 * __pyx_v_y_f));

      /* "src/geoprocessing/routing/routing.pyx":4135
 *             # to eliminate python function call overhead
 *             x_p = g0 + g1*x_f + g2*y_f
 *             y_p = g3 + g4*x_f + g5*y_f             # <<<<<<<<<<<<<<
 *             watershed_boundary.AddPoint(x_p, y_p)
 *             n_steps += 1
 */
      __pyx_v_y_p = ((__pyx_v_g3 + (__pyx_v_g4 * __pyx_v_x_f)) + (__pyx_v_g5 * __pyx_v_y_f));

      /* "src/geoprocessing/routing/routing.pyx":4136
 *             x_p = g0 + g1*x_f + g2*y_f
 *             y_p = g3 + g4*x_f + g5*y_f
 *             watershed_boundary.AddPoint(x_p, y_p)             # <<<<<<<<<<<<<<
 *             n_steps += 1
 *             if n_steps > _int_max_steps_per_watershed:
 */
      __pyx_t_28 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_boundary, __pyx_n_s_AddPoint); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_x_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_28))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_28);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_28);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_28, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_28)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_28, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4136, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_28)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_28, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4136, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_5);
        __pyx_t_2 = 0;
        __pyx_t_5 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_28, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4137
 *             y_p = g3 + g4*x_f + g5*y_f
 *             watershed_boundary.AddPoint(x_p, y_p)
 *             n_steps += 1             # <<<<<<<<<<<<<<
 *             if n_steps > _int_max_steps_per_watershed:
 *                 LOGGER.warning('quitting, too many steps')
 */
      __pyx_v_n_steps = (__pyx_v_n_steps + 1);

      /* "src/geoprocessing/routing/routing.pyx":4138
 *             watershed_boundary.AddPoint(x_p, y_p)
 *             n_steps += 1
 *             if n_steps > _int_max_steps_per_watershed:             # <<<<<<<<<<<<<<
 *                 LOGGER.warning('quitting, too many steps')
 *                 terminated_early = 1
 */
      __pyx_t_25 = ((__pyx_v_n_steps > __pyx_v__int_max_steps_per_watershed) != 0);
      if (__pyx_t_25) {

        /* "src/geoprocessing/routing/routing.pyx":4139
 *             n_steps += 1
 *             if n_steps > _int_max_steps_per_watershed:
 *                 LOGGER.warning('quitting, too many steps')             # <<<<<<<<<<<<<<
 *                 terminated_early = 1
 *                 break
 */
        __Pyx_GetModuleGlobalName(__pyx_t_28, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_warning); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
        __pyx_t_28 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_28)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_28);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_1 = (__pyx_t_28) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_28, __pyx_kp_u_quitting_too_many_steps) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_quitting_too_many_steps);
        __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4140
 *             if n_steps > _int_max_steps_per_watershed:
 *                 LOGGER.warning('quitting, too many steps')
 *                 terminated_early = 1             # <<<<<<<<<<<<<<
 *                 break
 *             if x_l < 0 or y_l < 0 or x_l >= n_cols or y_l >= n_rows:
 */
        __pyx_v_terminated_early = 1;

        /* "src/geoprocessing/routing/routing.pyx":4141
 *                 LOGGER.warning('quitting, too many steps')
 *                 terminated_early = 1
 *                 break             # <<<<<<<<<<<<<<
 *             if x_l < 0 or y_l < 0 or x_l >= n_cols or y_l >= n_rows:
 *                 # This is unexpected but worth checking since missing this
 */
        goto __pyx_L49_break;

        /* "src/geoprocessing/routing/routing.pyx":4138
 *             watershed_boundary.AddPoint(x_p, y_p)
 *             n_steps += 1
 *             if n_steps > _int_max_steps_per_watershed:             # <<<<<<<<<<<<<<
 *                 LOGGER.warning('quitting, too many steps')
 *                 terminated_early = 1
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":4142
 *                 terminated_early = 1
 *                 break
 *             if x_l < 0 or y_l < 0 or x_l >= n_cols or y_l >= n_rows:             # <<<<<<<<<<<<<<
 *                 # This is unexpected but worth checking since missing this
 *                 # error would be very difficult to debug.
 */
      __pyx_t_24 = ((__pyx_v_x_l < 0) != 0);
      if (!__pyx_t_24) {
      } else {
        __pyx_t_25 = __pyx_t_24;
        goto __pyx_L52_bool_binop_done;
      }
      __pyx_t_24 = ((__pyx_v_y_l < 0) != 0);
      if (!__pyx_t_24) {
      } else {
        __pyx_t_25 = __pyx_t_24;
        goto __pyx_L52_bool_binop_done;
      }
      __pyx_t_24 = ((__pyx_v_x_l >= __pyx_v_n_cols) != 0);
      if (!__pyx_t_24) {
      } else {
        __pyx_t_25 = __pyx_t_24;
        goto __pyx_L52_bool_binop_done;
      }
      __pyx_t_24 = ((__pyx_v_y_l >= __pyx_v_n_rows) != 0);
      __pyx_t_25 = __pyx_t_24;
      __pyx_L52_bool_binop_done:;
      if (unlikely(__pyx_t_25)) {

        /* "src/geoprocessing/routing/routing.pyx":4146
 *                 # error would be very difficult to debug.
 *                 raise RuntimeError(
 *                     f'{x_l}, {y_l} out of bounds for '             # <<<<<<<<<<<<<<
 *                     f'{n_cols}x{n_rows} raster.')
 *             if edge_side - ((edge_dir-2) % 8) == 0:
 */
        __pyx_t_1 = PyTuple_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_22 = 0;
        __pyx_t_26 = 127;
        __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_x_l, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_22 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_22 += 2;
        __Pyx_GIVEREF(__pyx_kp_u_);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_);
        __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_y_l, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_22 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_out_of_bounds_for);
        __pyx_t_22 += 19;
        __Pyx_GIVEREF(__pyx_kp_u_out_of_bounds_for);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_out_of_bounds_for);

        /* "src/geoprocessing/routing/routing.pyx":4147
 *                 raise RuntimeError(
 *                     f'{x_l}, {y_l} out of bounds for '
 *                     f'{n_cols}x{n_rows} raster.')             # <<<<<<<<<<<<<<
 *             if edge_side - ((edge_dir-2) % 8) == 0:
 *                 # counterclockwise configuration
 */
        __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_n_cols, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_22 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_n_u_x);
        __pyx_t_22 += 1;
        __Pyx_GIVEREF(__pyx_n_u_x);
        PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_n_u_x);
        __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_n_rows, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_22 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_raster);
        __pyx_t_22 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_raster);
        PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_kp_u_raster);

        /* "src/geoprocessing/routing/routing.pyx":4146
 *                 # error would be very difficult to debug.
 *                 raise RuntimeError(
 *                     f'{x_l}, {y_l} out of bounds for '             # <<<<<<<<<<<<<<
 *                     f'{n_cols}x{n_rows} raster.')
 *             if edge_side - ((edge_dir-2) % 8) == 0:
 */
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 8, __pyx_t_22, __pyx_t_26); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4145
 *                 # This is unexpected but worth checking since missing this
 *                 # error would be very difficult to debug.
 *                 raise RuntimeError(             # <<<<<<<<<<<<<<
 *                     f'{x_l}, {y_l} out of bounds for '
 *                     f'{n_cols}x{n_rows} raster.')
 */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 4145, __pyx_L1_error)

        /* "src/geoprocessing/routing/routing.pyx":4142
 *                 terminated_early = 1
 *                 break
 *             if x_l < 0 or y_l < 0 or x_l >= n_cols or y_l >= n_rows:             # <<<<<<<<<<<<<<
 *                 # This is unexpected but worth checking since missing this
 *                 # error would be very difficult to debug.
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":4148
 *                     f'{x_l}, {y_l} out of bounds for '
 *                     f'{n_cols}x{n_rows} raster.')
 *             if edge_side - ((edge_dir-2) % 8) == 0:             # <<<<<<<<<<<<<<
 *                 # counterclockwise configuration
 *                 left = edge_dir
 */
      __pyx_t_25 = (((__pyx_v_edge_side - __Pyx_mod_long((__pyx_v_edge_dir - 2), 8)) == 0) != 0);
      if (__pyx_t_25) {

        /* "src/geoprocessing/routing/routing.pyx":4150
 *             if edge_side - ((edge_dir-2) % 8) == 0:
 *                 # counterclockwise configuration
 *                 left = edge_dir             # <<<<<<<<<<<<<<
 *                 right = (left-1) % 8
 *                 out_dir_increase = 2
 */
        __pyx_v_left = __pyx_v_edge_dir;

        /* "src/geoprocessing/routing/routing.pyx":4151
 *                 # counterclockwise configuration
 *                 left = edge_dir
 *                 right = (left-1) % 8             # <<<<<<<<<<<<<<
 *                 out_dir_increase = 2
 *             else:
 */
        __pyx_v_right = __Pyx_mod_long((__pyx_v_left - 1), 8);

        /* "src/geoprocessing/routing/routing.pyx":4152
 *                 left = edge_dir
 *                 right = (left-1) % 8
 *                 out_dir_increase = 2             # <<<<<<<<<<<<<<
 *             else:
 *                 # clockwise configuration (swapping "left" and "right")
 */
        __pyx_v_out_dir_increase = 2;

        /* "src/geoprocessing/routing/routing.pyx":4148
 *                     f'{x_l}, {y_l} out of bounds for '
 *                     f'{n_cols}x{n_rows} raster.')
 *             if edge_side - ((edge_dir-2) % 8) == 0:             # <<<<<<<<<<<<<<
 *                 # counterclockwise configuration
 *                 left = edge_dir
 */
        goto __pyx_L56;
      }

      /* "src/geoprocessing/routing/routing.pyx":4155
 *             else:
 *                 # clockwise configuration (swapping "left" and "right")
 *                 right = edge_dir             # <<<<<<<<<<<<<<
 *                 left = (edge_side+1)
 *                 out_dir_increase = -2
 */
      /*else*/ {
        __pyx_v_right = __pyx_v_edge_dir;

        /* "src/geoprocessing/routing/routing.pyx":4156
 *                 # clockwise configuration (swapping "left" and "right")
 *                 right = edge_dir
 *                 left = (edge_side+1)             # <<<<<<<<<<<<<<
 *                 out_dir_increase = -2
 *             left_in = _in_watershed(
 */
        __pyx_v_left = (__pyx_v_edge_side + 1);

        /* "src/geoprocessing/routing/routing.pyx":4157
 *                 right = edge_dir
 *                 left = (edge_side+1)
 *                 out_dir_increase = -2             # <<<<<<<<<<<<<<
 *             left_in = _in_watershed(
 *                 x_l, y_l, left, discovery, finish, n_cols, n_rows,
 */
        __pyx_v_out_dir_increase = -2;
      }
      __pyx_L56:;

      /* "src/geoprocessing/routing/routing.pyx":4158
 *                 left = (edge_side+1)
 *                 out_dir_increase = -2
 *             left_in = _in_watershed(             # <<<<<<<<<<<<<<
 *                 x_l, y_l, left, discovery, finish, n_cols, n_rows,
 *                 discovery_managed_raster, discovery_nodata)
 */
      __pyx_v_left_in = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__in_watershed(__pyx_v_x_l, __pyx_v_y_l, __pyx_v_left, __pyx_v_discovery, __pyx_v_finish, __pyx_v_n_cols, __pyx_v_n_rows, __pyx_v_discovery_managed_raster, __pyx_v_discovery_nodata);

      /* "src/geoprocessing/routing/routing.pyx":4161
 *                 x_l, y_l, left, discovery, finish, n_cols, n_rows,
 *                 discovery_managed_raster, discovery_nodata)
 *             right_in = _in_watershed(             # <<<<<<<<<<<<<<
 *                 x_l, y_l, right, discovery, finish, n_cols, n_rows,
 *                 discovery_managed_raster, discovery_nodata)
 */
      __pyx_v_right_in = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__in_watershed(__pyx_v_x_l, __pyx_v_y_l, __pyx_v_right, __pyx_v_discovery, __pyx_v_finish, __pyx_v_n_cols, __pyx_v_n_rows, __pyx_v_discovery_managed_raster, __pyx_v_discovery_nodata);

      /* "src/geoprocessing/routing/routing.pyx":4164
 *                 x_l, y_l, right, discovery, finish, n_cols, n_rows,
 *                 discovery_managed_raster, discovery_nodata)
 *             if right_in:             # <<<<<<<<<<<<<<
 *                 # turn right
 *                 out_dir = edge_side
 */
      __pyx_t_25 = (__pyx_v_right_in != 0);
      if (__pyx_t_25) {

        /* "src/geoprocessing/routing/routing.pyx":4166
 *             if right_in:
 *                 # turn right
 *                 out_dir = edge_side             # <<<<<<<<<<<<<<
 *                 edge_side = (edge_side-out_dir_increase) % 8
 *                 edge_dir = out_dir
 */
        __pyx_v_out_dir = __pyx_v_edge_side;

        /* "src/geoprocessing/routing/routing.pyx":4167
 *                 # turn right
 *                 out_dir = edge_side
 *                 edge_side = (edge_side-out_dir_increase) % 8             # <<<<<<<<<<<<<<
 *                 edge_dir = out_dir
 *                 # pixel moves to be the right cell
 */
        __pyx_v_edge_side = __Pyx_mod_long((__pyx_v_edge_side - __pyx_v_out_dir_increase), 8);

        /* "src/geoprocessing/routing/routing.pyx":4168
 *                 out_dir = edge_side
 *                 edge_side = (edge_side-out_dir_increase) % 8
 *                 edge_dir = out_dir             # <<<<<<<<<<<<<<
 *                 # pixel moves to be the right cell
 *                 x_l += D8_XOFFSET[right]
 */
        __pyx_v_edge_dir = __pyx_v_out_dir;

        /* "src/geoprocessing/routing/routing.pyx":4170
 *                 edge_dir = out_dir
 *                 # pixel moves to be the right cell
 *                 x_l += D8_XOFFSET[right]             # <<<<<<<<<<<<<<
 *                 y_l += D8_YOFFSET[right]
 *                 _diagonal_fill_step(
 */
        __pyx_v_x_l = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_right]));

        /* "src/geoprocessing/routing/routing.pyx":4171
 *                 # pixel moves to be the right cell
 *                 x_l += D8_XOFFSET[right]
 *                 y_l += D8_YOFFSET[right]             # <<<<<<<<<<<<<<
 *                 _diagonal_fill_step(
 *                     x_l, y_l, right,
 */
        __pyx_v_y_l = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_right]));

        /* "src/geoprocessing/routing/routing.pyx":4172
 *                 x_l += D8_XOFFSET[right]
 *                 y_l += D8_YOFFSET[right]
 *                 _diagonal_fill_step(             # <<<<<<<<<<<<<<
 *                     x_l, y_l, right,
 *                     discovery, finish, discovery_managed_raster,
 */
        __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__diagonal_fill_step(__pyx_v_x_l, __pyx_v_y_l, __pyx_v_right, __pyx_v_discovery, __pyx_v_finish, __pyx_v_discovery_managed_raster, __pyx_v_discovery_nodata, __pyx_v_boundary_list);

        /* "src/geoprocessing/routing/routing.pyx":4164
 *                 x_l, y_l, right, discovery, finish, n_cols, n_rows,
 *                 discovery_managed_raster, discovery_nodata)
 *             if right_in:             # <<<<<<<<<<<<<<
 *                 # turn right
 *                 out_dir = edge_side
 */
        goto __pyx_L57;
      }

      /* "src/geoprocessing/routing/routing.pyx":4177
 *                     discovery_nodata,
 *                     boundary_list)
 *             elif left_in:             # <<<<<<<<<<<<<<
 *                 # step forward
 *                 x_l += D8_XOFFSET[edge_dir]
 */
      __pyx_t_25 = (__pyx_v_left_in != 0);
      if (__pyx_t_25) {

        /* "src/geoprocessing/routing/routing.pyx":4179
 *             elif left_in:
 *                 # step forward
 *                 x_l += D8_XOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *                 y_l += D8_YOFFSET[edge_dir]
 *                 # the pixel moves forward
 */
        __pyx_v_x_l = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_edge_dir]));

        /* "src/geoprocessing/routing/routing.pyx":4180
 *                 # step forward
 *                 x_l += D8_XOFFSET[edge_dir]
 *                 y_l += D8_YOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *                 # the pixel moves forward
 *                 boundary_list.append((x_l, y_l))
 */
        __pyx_v_y_l = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_edge_dir]));

        /* "src/geoprocessing/routing/routing.pyx":4182
 *                 y_l += D8_YOFFSET[edge_dir]
 *                 # the pixel moves forward
 *                 boundary_list.append((x_l, y_l))             # <<<<<<<<<<<<<<
 *             else:
 *                 # turn left
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4182, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4182, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_28 = PyTuple_New(2); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4182, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_28);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_t_7);
        __pyx_t_1 = 0;
        __pyx_t_7 = 0;
        __pyx_t_21 = __Pyx_PyList_Append(__pyx_v_boundary_list, __pyx_t_28); if (unlikely(__pyx_t_21 == ((int)-1))) __PYX_ERR(0, 4182, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4177
 *                     discovery_nodata,
 *                     boundary_list)
 *             elif left_in:             # <<<<<<<<<<<<<<
 *                 # step forward
 *                 x_l += D8_XOFFSET[edge_dir]
 */
        goto __pyx_L57;
      }

      /* "src/geoprocessing/routing/routing.pyx":4185
 *             else:
 *                 # turn left
 *                 edge_side = edge_dir             # <<<<<<<<<<<<<<
 *                 edge_dir = (edge_side + out_dir_increase) % 8
 * 
 */
      /*else*/ {
        __pyx_v_edge_side = __pyx_v_edge_dir;

        /* "src/geoprocessing/routing/routing.pyx":4186
 *                 # turn left
 *                 edge_side = edge_dir
 *                 edge_dir = (edge_side + out_dir_increase) % 8             # <<<<<<<<<<<<<<
 * 
 *             if delta_x == 0 and delta_y == 0:
 */
        __pyx_v_edge_dir = __Pyx_mod_long((__pyx_v_edge_side + __pyx_v_out_dir_increase), 8);
      }
      __pyx_L57:;

      /* "src/geoprocessing/routing/routing.pyx":4188
 *                 edge_dir = (edge_side + out_dir_increase) % 8
 * 
 *             if delta_x == 0 and delta_y == 0:             # <<<<<<<<<<<<<<
 *                 # met the start point so we completed the watershed loop
 *                 break
 */
      __pyx_t_24 = ((__pyx_v_delta_x == 0) != 0);
      if (__pyx_t_24) {
      } else {
        __pyx_t_25 = __pyx_t_24;
        goto __pyx_L59_bool_binop_done;
      }
      __pyx_t_24 = ((__pyx_v_delta_y == 0) != 0);
      __pyx_t_25 = __pyx_t_24;
      __pyx_L59_bool_binop_done:;
      if (__pyx_t_25) {

        /* "src/geoprocessing/routing/routing.pyx":4190
 *             if delta_x == 0 and delta_y == 0:
 *                 # met the start point so we completed the watershed loop
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         watershed_feature = ogr.Feature(watershed_layer.GetLayerDefn())
 */
        goto __pyx_L49_break;

        /* "src/geoprocessing/routing/routing.pyx":4188
 *                 edge_dir = (edge_side + out_dir_increase) % 8
 * 
 *             if delta_x == 0 and delta_y == 0:             # <<<<<<<<<<<<<<
 *                 # met the start point so we completed the watershed loop
 *                 break
 */
      }
    }
    __pyx_L49_break:;

    /* "src/geoprocessing/routing/routing.pyx":4192
 *                 break
 * 
 *         watershed_feature = ogr.Feature(watershed_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *         watershed_polygon = ogr.Geometry(ogr.wkbPolygon)
 *         watershed_polygon.AddGeometry(watershed_boundary)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Feature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_28 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_watershed_feature, __pyx_t_28);
    __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4193
 * 
 *         watershed_feature = ogr.Feature(watershed_layer.GetLayerDefn())
 *         watershed_polygon = ogr.Geometry(ogr.wkbPolygon)             # <<<<<<<<<<<<<<
 *         watershed_polygon.AddGeometry(watershed_boundary)
 *         watershed_feature.SetGeometry(watershed_polygon)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Geometry); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_wkbPolygon); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_28 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_watershed_polygon, __pyx_t_28);
    __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4194
 *         watershed_feature = ogr.Feature(watershed_layer.GetLayerDefn())
 *         watershed_polygon = ogr.Geometry(ogr.wkbPolygon)
 *         watershed_polygon.AddGeometry(watershed_boundary)             # <<<<<<<<<<<<<<
 *         watershed_feature.SetGeometry(watershed_polygon)
 *         watershed_feature.SetField('stream_fid', stream_fid)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_polygon, __pyx_n_s_AddGeometry); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_28 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_v_watershed_boundary) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_watershed_boundary);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4195
 *         watershed_polygon = ogr.Geometry(ogr.wkbPolygon)
 *         watershed_polygon.AddGeometry(watershed_boundary)
 *         watershed_feature.SetGeometry(watershed_polygon)             # <<<<<<<<<<<<<<
 *         watershed_feature.SetField('stream_fid', stream_fid)
 *         watershed_feature.SetField('terminated_early', terminated_early)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_28 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_v_watershed_polygon) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_watershed_polygon);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4196
 *         watershed_polygon.AddGeometry(watershed_boundary)
 *         watershed_feature.SetGeometry(watershed_polygon)
 *         watershed_feature.SetField('stream_fid', stream_fid)             # <<<<<<<<<<<<<<
 *         watershed_feature.SetField('terminated_early', terminated_early)
 *         watershed_feature.SetField('outlet_x', outlet_x)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_stream_fid, __pyx_v_stream_fid};
      __pyx_t_28 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4196, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_28);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_stream_fid, __pyx_v_stream_fid};
      __pyx_t_28 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4196, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_28);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_stream_fid);
      __Pyx_GIVEREF(__pyx_n_u_stream_fid);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_11, __pyx_n_u_stream_fid);
      __Pyx_INCREF(__pyx_v_stream_fid);
      __Pyx_GIVEREF(__pyx_v_stream_fid);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_11, __pyx_v_stream_fid);
      __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4197
 *         watershed_feature.SetGeometry(watershed_polygon)
 *         watershed_feature.SetField('stream_fid', stream_fid)
 *         watershed_feature.SetField('terminated_early', terminated_early)             # <<<<<<<<<<<<<<
 *         watershed_feature.SetField('outlet_x', outlet_x)
 *         watershed_feature.SetField('outlet_y', outlet_y)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_terminated_early); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_terminated_early, __pyx_t_1};
      __pyx_t_28 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4197, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_terminated_early, __pyx_t_1};
      __pyx_t_28 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4197, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_terminated_early);
      __Pyx_GIVEREF(__pyx_n_u_terminated_early);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_11, __pyx_n_u_terminated_early);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_11, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4198
 *         watershed_feature.SetField('stream_fid', stream_fid)
 *         watershed_feature.SetField('terminated_early', terminated_early)
 *         watershed_feature.SetField('outlet_x', outlet_x)             # <<<<<<<<<<<<<<
 *         watershed_feature.SetField('outlet_y', outlet_y)
 *         watershed_layer.CreateFeature(watershed_feature)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_outlet_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_outlet_x, __pyx_t_2};
      __pyx_t_28 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4198, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_outlet_x, __pyx_t_2};
      __pyx_t_28 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4198, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_outlet_x);
      __Pyx_GIVEREF(__pyx_n_u_outlet_x);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_11, __pyx_n_u_outlet_x);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_11, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4199
 *         watershed_feature.SetField('terminated_early', terminated_early)
 *         watershed_feature.SetField('outlet_x', outlet_x)
 *         watershed_feature.SetField('outlet_y', outlet_y)             # <<<<<<<<<<<<<<
 *         watershed_layer.CreateFeature(watershed_feature)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_outlet_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_u_outlet_y, __pyx_t_5};
      __pyx_t_28 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4199, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_u_outlet_y, __pyx_t_5};
      __pyx_t_28 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4199, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_outlet_y);
      __Pyx_GIVEREF(__pyx_n_u_outlet_y);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_11, __pyx_n_u_outlet_y);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_11, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4200
 *         watershed_feature.SetField('outlet_x', outlet_x)
 *         watershed_feature.SetField('outlet_y', outlet_y)
 *         watershed_layer.CreateFeature(watershed_feature)             # <<<<<<<<<<<<<<
 * 
 *         # this loop fills in the raster at the boundary, done at end so it
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_28 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_v_watershed_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_watershed_feature);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4205
 *         # doesn't interfere with the loop return to think the cells are no
 *         # longer in the watershed
 *         for boundary_x, boundary_y in boundary_list:             # <<<<<<<<<<<<<<
 *             discovery_managed_raster.set(boundary_x, boundary_y, -1)
 *     watershed_layer.CommitTransaction()
 */
    __pyx_t_28 = __pyx_v_boundary_list; __Pyx_INCREF(__pyx_t_28); __pyx_t_22 = 0;
    for (;;) {
      if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_28)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_28, __pyx_t_22); __Pyx_INCREF(__pyx_t_7); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 4205, __pyx_L1_error)
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_28, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 4205, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L63_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_5 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L63_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_2), 2) < 0) __PYX_ERR(0, 4205, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L64_unpacking_done;
        __pyx_L63_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 4205, __pyx_L1_error)
        __pyx_L64_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_boundary_x, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_boundary_y, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4206
 *         # longer in the watershed
 *         for boundary_x, boundary_y in boundary_list:
 *             discovery_managed_raster.set(boundary_x, boundary_y, -1)             # <<<<<<<<<<<<<<
 *     watershed_layer.CommitTransaction()
 *     watershed_layer = None
 */
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_boundary_x); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4206, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_boundary_y); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4206, __pyx_L1_error)
      __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set(__pyx_v_discovery_managed_raster, __pyx_t_11, __pyx_t_8, -1.0);

      /* "src/geoprocessing/routing/routing.pyx":4205
 *         # doesn't interfere with the loop return to think the cells are no
 *         # longer in the watershed
 *         for boundary_x, boundary_y in boundary_list:             # <<<<<<<<<<<<<<
 *             discovery_managed_raster.set(boundary_x, boundary_y, -1)
 *     watershed_layer.CommitTransaction()
 */
    }
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4066
 *     cdef int _int_max_steps_per_watershed = max_steps_per_watershed
 * 
 *     for index, (stream_fid, x_l, y_l) in enumerate(visit_order_stack):             # <<<<<<<<<<<<<<
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             LOGGER.info(
 */
    __pyx_L37_continue:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4207
 *         for boundary_x, boundary_y in boundary_list:
 *             discovery_managed_raster.set(boundary_x, boundary_y, -1)
 *     watershed_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 *     watershed_layer = None
 *     watershed_vector = None
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_28 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_28)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_28);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_28) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_28) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4208
 *             discovery_managed_raster.set(boundary_x, boundary_y, -1)
 *     watershed_layer.CommitTransaction()
 *     watershed_layer = None             # <<<<<<<<<<<<<<
 *     watershed_vector = None
 *     discovery_managed_raster.close()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_watershed_layer, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4209
 *     watershed_layer.CommitTransaction()
 *     watershed_layer = None
 *     watershed_vector = None             # <<<<<<<<<<<<<<
 *     discovery_managed_raster.close()
 *     finish_managed_raster.close()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_watershed_vector, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4210
 *     watershed_layer = None
 *     watershed_vector = None
 *     discovery_managed_raster.close()             # <<<<<<<<<<<<<<
 *     finish_managed_raster.close()
 *     shutil.rmtree(workspace_dir)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_discovery_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_28 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_28)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_28);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_28) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_28) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4211
 *     watershed_vector = None
 *     discovery_managed_raster.close()
 *     finish_managed_raster.close()             # <<<<<<<<<<<<<<
 *     shutil.rmtree(workspace_dir)
 *     LOGGER.info(
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_finish_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_28 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_28)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_28);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_28) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_28) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4212
 *     discovery_managed_raster.close()
 *     finish_managed_raster.close()
 *     shutil.rmtree(workspace_dir)             # <<<<<<<<<<<<<<
 *     LOGGER.info(
 *         '(calculate_subwatershed_boundary): watershed building 100% complete')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_shutil); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_28 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_28))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_28);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_28);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_28, function);
    }
  }
  __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_28, __pyx_t_4, __pyx_v_workspace_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_28, __pyx_v_workspace_dir);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4213
 *     finish_managed_raster.close()
 *     shutil.rmtree(workspace_dir)
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         '(calculate_subwatershed_boundary): watershed building 100% complete')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_28, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 4213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_28)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_28);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_28) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_28, __pyx_kp_u_calculate_subwatershed_boundary_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_calculate_subwatershed_boundary_3);
  __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3885
 * 
 * 
 * def calculate_subwatershed_boundary(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band,
 *         strahler_stream_vector_path, target_watershed_boundary_vector_path,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.calculate_subwatershed_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_workspace_dir);
  __Pyx_XDECREF(__pyx_v_discovery_time_raster_path);
  __Pyx_XDECREF(__pyx_v_finish_time_raster_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_discovery_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_finish_managed_raster);
  __Pyx_XDECREF((PyObject *)__pyx_v_d8_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_v_discovery_info);
  __Pyx_XDECREF(__pyx_v_geotransform);
  __Pyx_XDECREF(__pyx_v_discovery_srs);
  __Pyx_XDECREF(__pyx_v_gpkg_driver);
  __Pyx_XDECREF(__pyx_v_watershed_vector);
  __Pyx_XDECREF(__pyx_v_watershed_basename);
  __Pyx_XDECREF(__pyx_v_watershed_layer);
  __Pyx_XDECREF(__pyx_v_stream_vector);
  __Pyx_XDECREF(__pyx_v_stream_layer);
  __Pyx_XDECREF(__pyx_v_upstream_fid_map);
  __Pyx_XDECREF(__pyx_v_stream_feature);
  __Pyx_XDECREF(__pyx_v_ds_x);
  __Pyx_XDECREF(__pyx_v_ds_y);
  __Pyx_XDECREF(__pyx_v_visit_order_stack);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_outlet_fid);
  __Pyx_XDECREF(__pyx_v_working_stack);
  __Pyx_XDECREF(__pyx_v_processed_nodes);
  __Pyx_XDECREF(__pyx_v_working_fid);
  __Pyx_XDECREF(__pyx_v_working_feature);
  __Pyx_XDECREF(__pyx_v_us_x);
  __Pyx_XDECREF(__pyx_v_us_y);
  __Pyx_XDECREF(__pyx_v_ds_x_1);
  __Pyx_XDECREF(__pyx_v_ds_y_1);
  __Pyx_XDECREF(__pyx_v_upstream_coord);
  __Pyx_XDECREF(__pyx_v_upstream_fids);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_stream_fid);
  __Pyx_XDECREF(__pyx_v_boundary_list);
  __Pyx_XDECREF(__pyx_v_watershed_boundary);
  __Pyx_XDECREF(__pyx_v_watershed_feature);
  __Pyx_XDECREF(__pyx_v_watershed_polygon);
  __Pyx_XDECREF(__pyx_v_boundary_x);
  __Pyx_XDECREF(__pyx_v_boundary_y);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_x);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_fid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":4217
 * 
 * 
 * def detect_lowest_drain_and_sink(dem_raster_path_band):             # <<<<<<<<<<<<<<
 *     """Find the lowest drain and sink pixel in the DEM.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_27detect_lowest_drain_and_sink(PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_26detect_lowest_drain_and_sink[] = "Find the lowest drain and sink pixel in the DEM.\n\n    This function is used to specify conditions to DEMs that are known to\n    have one real sink/drain, but may have several numerical sink/drains by\n    detecting both the lowest pixel that could drain the raster on an edge\n    and the lowest internal pixel that might sink the whole raster.\n\n    Example:\n        raster A contains the following\n            * pixel at (3, 4) at 10m draining to a nodata  pixel\n            * pixel at (15, 19) at 11m draining to a nodata pixel\n            * pixel at (19, 21) at 10m draining to a nodata pixel\n            * pit pixel at (10, 15) at 5m surrounded by non-draining pixels\n            * pit pixel at (25, 15) at 15m surrounded by non-draining pixels\n            * pit pixel at (2, 125) at 5m surrounded by non-draining pixels\n\n        The result is two pixels indicating the first lowest edge and first\n        lowest sink seen:\n            drain_pixel = (3, 4), 10\n            sink_pixel = (10, 15), 5\n\n    Args:\n        dem_raster_path_band (tuple): a raster/path band tuple to detect\n            sinks in.\n\n    Return:\n        (drain_pixel, drain_height, sink_pixel, sink_height) -\n            two (x, y) tuples with corresponding heights, first\n            list is for edge drains, the second is for pit sinks. The x/y\n            coordinate is in raster coordinate space and _height is the\n            height of the given pixels in edge and pit respectively.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_27detect_lowest_drain_and_sink = {"detect_lowest_drain_and_sink", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_27detect_lowest_drain_and_sink, METH_O, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_26detect_lowest_drain_and_sink};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_27detect_lowest_drain_and_sink(PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("detect_lowest_drain_and_sink (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_26detect_lowest_drain_and_sink(__pyx_self, ((PyObject *)__pyx_v_dem_raster_path_band));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_26detect_lowest_drain_and_sink(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dem_raster_path_band) {
  double __pyx_v_lowest_drain_height;
  double __pyx_v_lowest_sink_height;
  PyObject *__pyx_v_drain_pixel = NULL;
  PyObject *__pyx_v_sink_pixel = NULL;
  PyObject *__pyx_v_dem_raster_info = NULL;
  double __pyx_v_dem_nodata;
  PyObject *__pyx_v_raster_x_size = NULL;
  PyObject *__pyx_v_raster_y_size = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_dem_managed_raster = 0;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_offset_dict = NULL;
  PyObject *__pyx_v_win_xsize = NULL;
  PyObject *__pyx_v_win_ysize = NULL;
  PyObject *__pyx_v_xoff = NULL;
  PyObject *__pyx_v_yoff = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_yi = NULL;
  PyObject *__pyx_v_yi_root = NULL;
  PyObject *__pyx_v_xi = NULL;
  PyObject *__pyx_v_xi_root = NULL;
  double __pyx_v_center_val;
  long __pyx_v_pixel_drains;
  long __pyx_v_i_n;
  PyObject *__pyx_v_xi_n = NULL;
  PyObject *__pyx_v_yi_n = NULL;
  double __pyx_v_n_height;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_t_18;
  int __pyx_t_19;
  long __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("detect_lowest_drain_and_sink", 0);

  /* "src/geoprocessing/routing/routing.pyx":4251
 *     """
 *     # this outer loop drives the raster block search
 *     cdef double lowest_drain_height = numpy.inf             # <<<<<<<<<<<<<<
 *     cdef double lowest_sink_height = numpy.inf
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_lowest_drain_height = __pyx_t_3;

  /* "src/geoprocessing/routing/routing.pyx":4252
 *     # this outer loop drives the raster block search
 *     cdef double lowest_drain_height = numpy.inf
 *     cdef double lowest_sink_height = numpy.inf             # <<<<<<<<<<<<<<
 * 
 *     drain_pixel = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lowest_sink_height = __pyx_t_3;

  /* "src/geoprocessing/routing/routing.pyx":4254
 *     cdef double lowest_sink_height = numpy.inf
 * 
 *     drain_pixel = None             # <<<<<<<<<<<<<<
 *     sink_pixel = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_drain_pixel = ((PyObject*)Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4255
 * 
 *     drain_pixel = None
 *     sink_pixel = None             # <<<<<<<<<<<<<<
 * 
 *     dem_raster_info = pygeoprocessing.get_raster_info(
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_sink_pixel = ((PyObject*)Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4257
 *     sink_pixel = None
 * 
 *     dem_raster_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0])
 *     cdef double dem_nodata
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4258
 * 
 *     dem_raster_info = pygeoprocessing.get_raster_info(
 *         dem_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     cdef double dem_nodata
 *     # guard against undefined nodata by picking a value that's unlikely to
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_dem_raster_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4262
 *     # guard against undefined nodata by picking a value that's unlikely to
 *     # be a dem value
 *     if dem_raster_info['nodata'][0] is not None:             # <<<<<<<<<<<<<<
 *         dem_nodata = dem_raster_info['nodata'][0]
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "src/geoprocessing/routing/routing.pyx":4263
 *     # be a dem value
 *     if dem_raster_info['nodata'][0] is not None:
 *         dem_nodata = dem_raster_info['nodata'][0]             # <<<<<<<<<<<<<<
 *     else:
 *         dem_nodata = IMPROBABLE_FLOAT_NODATA
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_dem_nodata = __pyx_t_3;

    /* "src/geoprocessing/routing/routing.pyx":4262
 *     # guard against undefined nodata by picking a value that's unlikely to
 *     # be a dem value
 *     if dem_raster_info['nodata'][0] is not None:             # <<<<<<<<<<<<<<
 *         dem_nodata = dem_raster_info['nodata'][0]
 *     else:
 */
    goto __pyx_L3;
  }

  /* "src/geoprocessing/routing/routing.pyx":4265
 *         dem_nodata = dem_raster_info['nodata'][0]
 *     else:
 *         dem_nodata = IMPROBABLE_FLOAT_NODATA             # <<<<<<<<<<<<<<
 * 
 *     raster_x_size, raster_y_size = dem_raster_info['raster_size']
 */
  /*else*/ {
    __pyx_v_dem_nodata = __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA;
  }
  __pyx_L3:;

  /* "src/geoprocessing/routing/routing.pyx":4267
 *         dem_nodata = IMPROBABLE_FLOAT_NODATA
 * 
 *     raster_x_size, raster_y_size = dem_raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     cdef _ManagedRaster dem_managed_raster = _ManagedRaster(
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dem_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 4267, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_5), 2) < 0) __PYX_ERR(0, 4267, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 4267, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_raster_x_size = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_raster_y_size = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4270
 * 
 *     cdef _ManagedRaster dem_managed_raster = _ManagedRaster(
 *         dem_raster_path_band[0], dem_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_log_time = ctime(NULL)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dem_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":4269
 *     raster_x_size, raster_y_size = dem_raster_info['raster_size']
 * 
 *     cdef _ManagedRaster dem_managed_raster = _ManagedRaster(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band[0], dem_raster_path_band[1], 0)
 * 
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_int_0);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_dem_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4272
 *         dem_raster_path_band[0], dem_raster_path_band[1], 0)
 * 
 *     cdef time_t last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":4274
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4275
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             dem_raster_path_band, offset_only=True, largest_block=0):             # <<<<<<<<<<<<<<
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_dem_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_dem_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_dem_raster_path_band);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 4275, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_largest_block, __pyx_int_0) < 0) __PYX_ERR(0, 4275, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":4274
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4274, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 4274, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 4274, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_10(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 4274, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_offset_dict, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4276
 *     for offset_dict in pygeoprocessing.iterblocks(
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_win_xsize, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4277
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']             # <<<<<<<<<<<<<<
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_win_ysize, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4278
 *         win_xsize = offset_dict['win_xsize']
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']             # <<<<<<<<<<<<<<
 *         yoff = offset_dict['yoff']
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_xoff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_xoff, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4279
 *         win_ysize = offset_dict['win_ysize']
 *         xoff = offset_dict['xoff']
 *         yoff = offset_dict['yoff']             # <<<<<<<<<<<<<<
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_offset_dict, __pyx_n_u_yoff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_yoff, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4281
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    __pyx_t_7 = (((time(NULL) - __pyx_v_last_log_time) > __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD) != 0);
    if (__pyx_t_7) {

      /* "src/geoprocessing/routing/routing.pyx":4282
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 */
      __pyx_v_last_log_time = time(NULL);

      /* "src/geoprocessing/routing/routing.pyx":4283
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *             LOGGER.info(
 *                 '(infer_sinks): '
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_v_yoff, __pyx_v_raster_x_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyNumber_Add(__pyx_v_xoff, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4284
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(             # <<<<<<<<<<<<<<
 *                 '(infer_sinks): '
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4285
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 *                 '(infer_sinks): '             # <<<<<<<<<<<<<<
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '
 *                 'pixels complete')
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = 0;
      __pyx_t_12 = 127;
      __Pyx_INCREF(__pyx_kp_u_infer_sinks);
      __pyx_t_11 += 15;
      __Pyx_GIVEREF(__pyx_kp_u_infer_sinks);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_infer_sinks);

      /* "src/geoprocessing/routing/routing.pyx":4286
 *             LOGGER.info(
 *                 '(infer_sinks): '
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '             # <<<<<<<<<<<<<<
 *                 'pixels complete')
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_v_current_pixel, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 4286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_12;
      __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_INCREF(__pyx_kp_u_of);
      __pyx_t_11 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_of);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_of);
      __pyx_t_13 = PyNumber_Multiply(__pyx_v_raster_x_size, __pyx_v_raster_y_size); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 4286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_13, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_12;
      __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_pixels_complete);
      __pyx_t_11 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_pixels_complete);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_pixels_complete);

      /* "src/geoprocessing/routing/routing.pyx":4285
 *             current_pixel = xoff + yoff * raster_x_size
 *             LOGGER.info(
 *                 '(infer_sinks): '             # <<<<<<<<<<<<<<
 *                 f'{current_pixel} of {raster_x_size * raster_y_size} '
 *                 'pixels complete')
 */
      __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4281
 *         yoff = offset_dict['yoff']
 * 
 *         if ctime(NULL) - last_log_time > _LOGGING_PERIOD:             # <<<<<<<<<<<<<<
 *             last_log_time = ctime(NULL)
 *             current_pixel = xoff + yoff * raster_x_size
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4290
 * 
 *         # search block for local sinks
 *         for yi in range(0, win_ysize):             # <<<<<<<<<<<<<<
 *             yi_root = yi+yoff
 *             for xi in range(0, win_xsize):
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_v_win_ysize);
    __Pyx_GIVEREF(__pyx_v_win_ysize);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_win_ysize);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2); __pyx_t_11 = 0;
      __pyx_t_15 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_15 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 4290, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_15)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 4290, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4290, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 4290, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4290, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_15(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 4290, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_yi, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4291
 *         # search block for local sinks
 *         for yi in range(0, win_ysize):
 *             yi_root = yi+yoff             # <<<<<<<<<<<<<<
 *             for xi in range(0, win_xsize):
 *                 xi_root = xi+xoff
 */
      __pyx_t_4 = PyNumber_Add(__pyx_v_yi, __pyx_v_yoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_yi_root, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4292
 *         for yi in range(0, win_ysize):
 *             yi_root = yi+yoff
 *             for xi in range(0, win_xsize):             # <<<<<<<<<<<<<<
 *                 xi_root = xi+xoff
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
      __Pyx_INCREF(__pyx_v_win_xsize);
      __Pyx_GIVEREF(__pyx_v_win_xsize);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_win_xsize);
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
        __pyx_t_4 = __pyx_t_14; __Pyx_INCREF(__pyx_t_4); __pyx_t_16 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_16 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_17 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 4292, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      for (;;) {
        if (likely(!__pyx_t_17)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_14 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_14); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 4292, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4292, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          } else {
            if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_14); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 4292, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4292, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          }
        } else {
          __pyx_t_14 = __pyx_t_17(__pyx_t_4);
          if (unlikely(!__pyx_t_14)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 4292, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_14);
        }
        __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4293
 *             yi_root = yi+yoff
 *             for xi in range(0, win_xsize):
 *                 xi_root = xi+xoff             # <<<<<<<<<<<<<<
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):
 */
        __pyx_t_14 = PyNumber_Add(__pyx_v_xi, __pyx_v_xoff); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_XDECREF_SET(__pyx_v_xi_root, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4294
 *             for xi in range(0, win_xsize):
 *                 xi_root = xi+xoff
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)             # <<<<<<<<<<<<<<
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):
 *                     continue
 */
        __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_xi_root); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4294, __pyx_L1_error)
        __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_v_yi_root); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4294, __pyx_L1_error)
        __pyx_v_center_val = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_t_18, __pyx_t_19);

        /* "src/geoprocessing/routing/routing.pyx":4295
 *                 xi_root = xi+xoff
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_7 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_center_val, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
        if (__pyx_t_7) {

          /* "src/geoprocessing/routing/routing.pyx":4296
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if (center_val > lowest_drain_height and
 */
          goto __pyx_L11_continue;

          /* "src/geoprocessing/routing/routing.pyx":4295
 *                 xi_root = xi+xoff
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)
 *                 if _is_close(center_val, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4298
 *                     continue
 * 
 *                 if (center_val > lowest_drain_height and             # <<<<<<<<<<<<<<
 *                         center_val > lowest_sink_height):
 *                     # already found something lower
 */
        __pyx_t_6 = ((__pyx_v_center_val > __pyx_v_lowest_drain_height) != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_7 = __pyx_t_6;
          goto __pyx_L15_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":4299
 * 
 *                 if (center_val > lowest_drain_height and
 *                         center_val > lowest_sink_height):             # <<<<<<<<<<<<<<
 *                     # already found something lower
 *                     continue
 */
        __pyx_t_6 = ((__pyx_v_center_val > __pyx_v_lowest_sink_height) != 0);
        __pyx_t_7 = __pyx_t_6;
        __pyx_L15_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":4298
 *                     continue
 * 
 *                 if (center_val > lowest_drain_height and             # <<<<<<<<<<<<<<
 *                         center_val > lowest_sink_height):
 *                     # already found something lower
 */
        if (__pyx_t_7) {

          /* "src/geoprocessing/routing/routing.pyx":4301
 *                         center_val > lowest_sink_height):
 *                     # already found something lower
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # search neighbors for downhill or nodata
 */
          goto __pyx_L11_continue;

          /* "src/geoprocessing/routing/routing.pyx":4298
 *                     continue
 * 
 *                 if (center_val > lowest_drain_height and             # <<<<<<<<<<<<<<
 *                         center_val > lowest_sink_height):
 *                     # already found something lower
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4304
 * 
 *                 # search neighbors for downhill or nodata
 *                 pixel_drains = 0             # <<<<<<<<<<<<<<
 *                 for i_n in range(8):
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 */
        __pyx_v_pixel_drains = 0;

        /* "src/geoprocessing/routing/routing.pyx":4305
 *                 # search neighbors for downhill or nodata
 *                 pixel_drains = 0
 *                 for i_n in range(8):             # <<<<<<<<<<<<<<
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 */
        for (__pyx_t_20 = 0; __pyx_t_20 < 8; __pyx_t_20+=1) {
          __pyx_v_i_n = __pyx_t_20;

          /* "src/geoprocessing/routing/routing.pyx":4306
 *                 pixel_drains = 0
 *                 for i_n in range(8):
 *                     xi_n = xi_root+D8_XOFFSET[i_n]             # <<<<<<<<<<<<<<
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 */
          __pyx_t_14 = __Pyx_PyInt_From_int((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_i_n])); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4306, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_5 = PyNumber_Add(__pyx_v_xi_root, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4306, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF_SET(__pyx_v_xi_n, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4307
 *                 for i_n in range(8):
 *                     xi_n = xi_root+D8_XOFFSET[i_n]
 *                     yi_n = yi_root+D8_YOFFSET[i_n]             # <<<<<<<<<<<<<<
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 */
          __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_i_n])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4307, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = PyNumber_Add(__pyx_v_yi_root, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4307, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF_SET(__pyx_v_yi_n, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4309
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 */
          __pyx_t_14 = PyObject_RichCompare(__pyx_v_xi_n, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4309, __pyx_L1_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 4309, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (!__pyx_t_6) {
          } else {
            __pyx_t_7 = __pyx_t_6;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_14 = PyObject_RichCompare(__pyx_v_xi_n, __pyx_v_raster_x_size, Py_GE); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4309, __pyx_L1_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 4309, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (!__pyx_t_6) {
          } else {
            __pyx_t_7 = __pyx_t_6;
            goto __pyx_L20_bool_binop_done;
          }

          /* "src/geoprocessing/routing/routing.pyx":4310
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or
 *                             yi_n < 0 or yi_n >= raster_y_size):             # <<<<<<<<<<<<<<
 *                         # it'll drain off the edge of the raster
 *                         if center_val < lowest_drain_height:
 */
          __pyx_t_14 = PyObject_RichCompare(__pyx_v_yi_n, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4310, __pyx_L1_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 4310, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (!__pyx_t_6) {
          } else {
            __pyx_t_7 = __pyx_t_6;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_14 = PyObject_RichCompare(__pyx_v_yi_n, __pyx_v_raster_y_size, Py_GE); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4310, __pyx_L1_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 4310, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_7 = __pyx_t_6;
          __pyx_L20_bool_binop_done:;

          /* "src/geoprocessing/routing/routing.pyx":4309
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 */
          if (__pyx_t_7) {

            /* "src/geoprocessing/routing/routing.pyx":4312
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 *                         if center_val < lowest_drain_height:             # <<<<<<<<<<<<<<
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val
 */
            __pyx_t_7 = ((__pyx_v_center_val < __pyx_v_lowest_drain_height) != 0);
            if (__pyx_t_7) {

              /* "src/geoprocessing/routing/routing.pyx":4314
 *                         if center_val < lowest_drain_height:
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val             # <<<<<<<<<<<<<<
 *                             drain_pixel = (xi_root, yi_root)
 *                         pixel_drains = 1
 */
              __pyx_v_lowest_drain_height = __pyx_v_center_val;

              /* "src/geoprocessing/routing/routing.pyx":4315
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val
 *                             drain_pixel = (xi_root, yi_root)             # <<<<<<<<<<<<<<
 *                         pixel_drains = 1
 *                         break
 */
              __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4315, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_INCREF(__pyx_v_xi_root);
              __Pyx_GIVEREF(__pyx_v_xi_root);
              PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_xi_root);
              __Pyx_INCREF(__pyx_v_yi_root);
              __Pyx_GIVEREF(__pyx_v_yi_root);
              PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_yi_root);
              __Pyx_DECREF_SET(__pyx_v_drain_pixel, ((PyObject*)__pyx_t_14));
              __pyx_t_14 = 0;

              /* "src/geoprocessing/routing/routing.pyx":4312
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 *                         if center_val < lowest_drain_height:             # <<<<<<<<<<<<<<
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":4316
 *                             lowest_drain_height = center_val
 *                             drain_pixel = (xi_root, yi_root)
 *                         pixel_drains = 1             # <<<<<<<<<<<<<<
 *                         break
 *                     n_height = dem_managed_raster.get(xi_n, yi_n)
 */
            __pyx_v_pixel_drains = 1;

            /* "src/geoprocessing/routing/routing.pyx":4317
 *                             drain_pixel = (xi_root, yi_root)
 *                         pixel_drains = 1
 *                         break             # <<<<<<<<<<<<<<
 *                     n_height = dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 */
            goto __pyx_L18_break;

            /* "src/geoprocessing/routing/routing.pyx":4309
 *                     yi_n = yi_root+D8_YOFFSET[i_n]
 * 
 *                     if (xi_n < 0 or xi_n >= raster_x_size or             # <<<<<<<<<<<<<<
 *                             yi_n < 0 or yi_n >= raster_y_size):
 *                         # it'll drain off the edge of the raster
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":4318
 *                         pixel_drains = 1
 *                         break
 *                     n_height = dem_managed_raster.get(xi_n, yi_n)             # <<<<<<<<<<<<<<
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         # it'll drain to nodata
 */
          __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_v_xi_n); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4318, __pyx_L1_error)
          __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_yi_n); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4318, __pyx_L1_error)
          __pyx_v_n_height = __pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_dem_managed_raster, __pyx_t_19, __pyx_t_18);

          /* "src/geoprocessing/routing/routing.pyx":4319
 *                         break
 *                     n_height = dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         # it'll drain to nodata
 *                         if center_val < lowest_drain_height:
 */
          __pyx_t_7 = (__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__is_close(__pyx_v_n_height, __pyx_v_dem_nodata, 1e-8, 1e-5) != 0);
          if (__pyx_t_7) {

            /* "src/geoprocessing/routing/routing.pyx":4321
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         # it'll drain to nodata
 *                         if center_val < lowest_drain_height:             # <<<<<<<<<<<<<<
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val
 */
            __pyx_t_7 = ((__pyx_v_center_val < __pyx_v_lowest_drain_height) != 0);
            if (__pyx_t_7) {

              /* "src/geoprocessing/routing/routing.pyx":4323
 *                         if center_val < lowest_drain_height:
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val             # <<<<<<<<<<<<<<
 *                             drain_pixel = (xi_root, yi_root)
 *                         pixel_drains = 1
 */
              __pyx_v_lowest_drain_height = __pyx_v_center_val;

              /* "src/geoprocessing/routing/routing.pyx":4324
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val
 *                             drain_pixel = (xi_root, yi_root)             # <<<<<<<<<<<<<<
 *                         pixel_drains = 1
 *                         break
 */
              __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4324, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_INCREF(__pyx_v_xi_root);
              __Pyx_GIVEREF(__pyx_v_xi_root);
              PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_xi_root);
              __Pyx_INCREF(__pyx_v_yi_root);
              __Pyx_GIVEREF(__pyx_v_yi_root);
              PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_yi_root);
              __Pyx_DECREF_SET(__pyx_v_drain_pixel, ((PyObject*)__pyx_t_14));
              __pyx_t_14 = 0;

              /* "src/geoprocessing/routing/routing.pyx":4321
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):
 *                         # it'll drain to nodata
 *                         if center_val < lowest_drain_height:             # <<<<<<<<<<<<<<
 *                             # found a new lower edge height
 *                             lowest_drain_height = center_val
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":4325
 *                             lowest_drain_height = center_val
 *                             drain_pixel = (xi_root, yi_root)
 *                         pixel_drains = 1             # <<<<<<<<<<<<<<
 *                         break
 *                     if n_height < center_val:
 */
            __pyx_v_pixel_drains = 1;

            /* "src/geoprocessing/routing/routing.pyx":4326
 *                             drain_pixel = (xi_root, yi_root)
 *                         pixel_drains = 1
 *                         break             # <<<<<<<<<<<<<<
 *                     if n_height < center_val:
 *                         # it'll drain downhill
 */
            goto __pyx_L18_break;

            /* "src/geoprocessing/routing/routing.pyx":4319
 *                         break
 *                     n_height = dem_managed_raster.get(xi_n, yi_n)
 *                     if _is_close(n_height, dem_nodata, 1e-8, 1e-5):             # <<<<<<<<<<<<<<
 *                         # it'll drain to nodata
 *                         if center_val < lowest_drain_height:
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":4327
 *                         pixel_drains = 1
 *                         break
 *                     if n_height < center_val:             # <<<<<<<<<<<<<<
 *                         # it'll drain downhill
 *                         pixel_drains = 1
 */
          __pyx_t_7 = ((__pyx_v_n_height < __pyx_v_center_val) != 0);
          if (__pyx_t_7) {

            /* "src/geoprocessing/routing/routing.pyx":4329
 *                     if n_height < center_val:
 *                         # it'll drain downhill
 *                         pixel_drains = 1             # <<<<<<<<<<<<<<
 *                         break
 *                 if not pixel_drains and center_val < lowest_sink_height:
 */
            __pyx_v_pixel_drains = 1;

            /* "src/geoprocessing/routing/routing.pyx":4330
 *                         # it'll drain downhill
 *                         pixel_drains = 1
 *                         break             # <<<<<<<<<<<<<<
 *                 if not pixel_drains and center_val < lowest_sink_height:
 *                     lowest_sink_height = center_val
 */
            goto __pyx_L18_break;

            /* "src/geoprocessing/routing/routing.pyx":4327
 *                         pixel_drains = 1
 *                         break
 *                     if n_height < center_val:             # <<<<<<<<<<<<<<
 *                         # it'll drain downhill
 *                         pixel_drains = 1
 */
          }
        }
        __pyx_L18_break:;

        /* "src/geoprocessing/routing/routing.pyx":4331
 *                         pixel_drains = 1
 *                         break
 *                 if not pixel_drains and center_val < lowest_sink_height:             # <<<<<<<<<<<<<<
 *                     lowest_sink_height = center_val
 *                     sink_pixel = (xi_root, yi_root)
 */
        __pyx_t_6 = ((!(__pyx_v_pixel_drains != 0)) != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_7 = __pyx_t_6;
          goto __pyx_L29_bool_binop_done;
        }
        __pyx_t_6 = ((__pyx_v_center_val < __pyx_v_lowest_sink_height) != 0);
        __pyx_t_7 = __pyx_t_6;
        __pyx_L29_bool_binop_done:;
        if (__pyx_t_7) {

          /* "src/geoprocessing/routing/routing.pyx":4332
 *                         break
 *                 if not pixel_drains and center_val < lowest_sink_height:
 *                     lowest_sink_height = center_val             # <<<<<<<<<<<<<<
 *                     sink_pixel = (xi_root, yi_root)
 *     return (
 */
          __pyx_v_lowest_sink_height = __pyx_v_center_val;

          /* "src/geoprocessing/routing/routing.pyx":4333
 *                 if not pixel_drains and center_val < lowest_sink_height:
 *                     lowest_sink_height = center_val
 *                     sink_pixel = (xi_root, yi_root)             # <<<<<<<<<<<<<<
 *     return (
 *         drain_pixel, lowest_drain_height,
 */
          __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4333, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_v_xi_root);
          __Pyx_GIVEREF(__pyx_v_xi_root);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_xi_root);
          __Pyx_INCREF(__pyx_v_yi_root);
          __Pyx_GIVEREF(__pyx_v_yi_root);
          PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_yi_root);
          __Pyx_DECREF_SET(__pyx_v_sink_pixel, ((PyObject*)__pyx_t_14));
          __pyx_t_14 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4331
 *                         pixel_drains = 1
 *                         break
 *                 if not pixel_drains and center_val < lowest_sink_height:             # <<<<<<<<<<<<<<
 *                     lowest_sink_height = center_val
 *                     sink_pixel = (xi_root, yi_root)
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4292
 *         for yi in range(0, win_ysize):
 *             yi_root = yi+yoff
 *             for xi in range(0, win_xsize):             # <<<<<<<<<<<<<<
 *                 xi_root = xi+xoff
 *                 center_val = dem_managed_raster.get(xi_root, yi_root)
 */
        __pyx_L11_continue:;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4290
 * 
 *         # search block for local sinks
 *         for yi in range(0, win_ysize):             # <<<<<<<<<<<<<<
 *             yi_root = yi+yoff
 *             for xi in range(0, win_xsize):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4274
 *     cdef time_t last_log_time = ctime(NULL)
 * 
 *     for offset_dict in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             dem_raster_path_band, offset_only=True, largest_block=0):
 *         win_xsize = offset_dict['win_xsize']
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4334
 *                     lowest_sink_height = center_val
 *                     sink_pixel = (xi_root, yi_root)
 *     return (             # <<<<<<<<<<<<<<
 *         drain_pixel, lowest_drain_height,
 *         sink_pixel, lowest_sink_height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/geoprocessing/routing/routing.pyx":4335
 *                     sink_pixel = (xi_root, yi_root)
 *     return (
 *         drain_pixel, lowest_drain_height,             # <<<<<<<<<<<<<<
 *         sink_pixel, lowest_sink_height)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_lowest_drain_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":4336
 *     return (
 *         drain_pixel, lowest_drain_height,
 *         sink_pixel, lowest_sink_height)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_lowest_sink_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":4335
 *                     sink_pixel = (xi_root, yi_root)
 *     return (
 *         drain_pixel, lowest_drain_height,             # <<<<<<<<<<<<<<
 *         sink_pixel, lowest_sink_height)
 * 
 */
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_drain_pixel);
  __Pyx_GIVEREF(__pyx_v_drain_pixel);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_drain_pixel);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_sink_pixel);
  __Pyx_GIVEREF(__pyx_v_sink_pixel);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_sink_pixel);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":4217
 * 
 * 
 * def detect_lowest_drain_and_sink(dem_raster_path_band):             # <<<<<<<<<<<<<<
 *     """Find the lowest drain and sink pixel in the DEM.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.detect_lowest_drain_and_sink", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_drain_pixel);
  __Pyx_XDECREF(__pyx_v_sink_pixel);
  __Pyx_XDECREF(__pyx_v_dem_raster_info);
  __Pyx_XDECREF(__pyx_v_raster_x_size);
  __Pyx_XDECREF(__pyx_v_raster_y_size);
  __Pyx_XDECREF((PyObject *)__pyx_v_dem_managed_raster);
  __Pyx_XDECREF(__pyx_v_offset_dict);
  __Pyx_XDECREF(__pyx_v_win_xsize);
  __Pyx_XDECREF(__pyx_v_win_ysize);
  __Pyx_XDECREF(__pyx_v_xoff);
  __Pyx_XDECREF(__pyx_v_yoff);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_yi);
  __Pyx_XDECREF(__pyx_v_yi_root);
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XDECREF(__pyx_v_xi_root);
  __Pyx_XDECREF(__pyx_v_xi_n);
  __Pyx_XDECREF(__pyx_v_yi_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":4339
 * 
 * 
 * def detect_outlets(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, flow_dir_type, target_outlet_vector_path):
 *     """Create point vector indicating flow raster outlets.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_29detect_outlets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_28detect_outlets[] = "Create point vector indicating flow raster outlets.\n\n    If either D8 or MFD rasters have a flow direction to the edge of the\n    raster or to a nodata flow direction pixel the originating pixel is\n    considered an outlet.\n\n    Args:\n        flow_dir_raster_path_band (tuple): raster path/band tuple\n            indicating D8 or MFD flow direction created by\n            `routing.flow_dir_d8` or `routing.flow_dir_mfd`.\n        flow_dir_type (str): one of 'd8' or 'mfd' to indicate the\n            ``flow_dir_raster_path_band`` is either a D8 or MFD flow\n            direction raster.\n        target_outlet_vector_path (str): path to a vector that is created\n            by this call that will be in the same projection units as the\n            raster and have a point feature in the center of each pixel that\n            is a raster outlet. Additional fields include:\n\n                * \"i\" - the column raster coordinate where the outlet exists\n                * \"j\" - the row raster coordinate where the outlet exists\n                * \"ID\" - unique identification for the outlet.\n\n    Return:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_29detect_outlets = {"detect_outlets", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_29detect_outlets, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_28detect_outlets};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_29detect_outlets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_dir_raster_path_band = 0;
  PyObject *__pyx_v_flow_dir_type = 0;
  PyObject *__pyx_v_target_outlet_vector_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("detect_outlets (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_dir_raster_path_band,&__pyx_n_s_flow_dir_type,&__pyx_n_s_target_outlet_vector_path,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("detect_outlets", 1, 3, 3, 1); __PYX_ERR(0, 4339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_outlet_vector_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("detect_outlets", 1, 3, 3, 2); __PYX_ERR(0, 4339, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "detect_outlets") < 0)) __PYX_ERR(0, 4339, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_flow_dir_raster_path_band = values[0];
    __pyx_v_flow_dir_type = values[1];
    __pyx_v_target_outlet_vector_path = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("detect_outlets", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4339, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.detect_outlets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_28detect_outlets(__pyx_self, __pyx_v_flow_dir_raster_path_band, __pyx_v_flow_dir_type, __pyx_v_target_outlet_vector_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_28detect_outlets(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_dir_raster_path_band, PyObject *__pyx_v_flow_dir_type, PyObject *__pyx_v_target_outlet_vector_path) {
  int __pyx_v_d8_flow_dir_mode;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_xi_root;
  int __pyx_v_yi_root;
  int __pyx_v_raster_x_size;
  int __pyx_v_raster_y_size;
  int __pyx_v_flow_dir;
  int __pyx_v_flow_dir_n;
  int __pyx_v_next_id;
  int __pyx_v_n_dir;
  int __pyx_v_is_outlet;
  char __pyx_v_x_off_border;
  char __pyx_v_y_off_border;
  char __pyx_v_win_xsize_border;
  char __pyx_v_win_ysize_border;
  PyArrayObject *__pyx_v_flow_dir_block = 0;
  PyObject *__pyx_v_raster_info = NULL;
  int __pyx_v_flow_dir_nodata;
  PyObject *__pyx_v_flow_dir_raster = NULL;
  PyObject *__pyx_v_flow_dir_band = NULL;
  PyObject *__pyx_v_raster_srs = NULL;
  PyObject *__pyx_v_gpkg_driver = NULL;
  PyObject *__pyx_v_outlet_vector = NULL;
  PyObject *__pyx_v_outet_basename = NULL;
  PyObject *__pyx_v_outlet_layer = NULL;
  time_t __pyx_v_last_log_time;
  PyObject *__pyx_v_block_offsets = NULL;
  PyObject *__pyx_v_current_pixel = NULL;
  PyObject *__pyx_v_outlet_point = NULL;
  PyObject *__pyx_v_proj_x = NULL;
  PyObject *__pyx_v_proj_y = NULL;
  PyObject *__pyx_v_outlet_feature = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_flow_dir_block;
  __Pyx_Buffer __pyx_pybuffer_flow_dir_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  long __pyx_t_20;
  long __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  PyObject *__pyx_t_29 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("detect_outlets", 0);
  __Pyx_INCREF(__pyx_v_flow_dir_type);
  __pyx_pybuffer_flow_dir_block.pybuffer.buf = NULL;
  __pyx_pybuffer_flow_dir_block.refcount = 0;
  __pyx_pybuffernd_flow_dir_block.data = NULL;
  __pyx_pybuffernd_flow_dir_block.rcbuffer = &__pyx_pybuffer_flow_dir_block;

  /* "src/geoprocessing/routing/routing.pyx":4366
 *         None.
 *     """
 *     flow_dir_type = flow_dir_type.lower()             # <<<<<<<<<<<<<<
 *     if flow_dir_type not in ['d8', 'mfd']:
 *         raise ValueError(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_type, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_flow_dir_type, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4367
 *     """
 *     flow_dir_type = flow_dir_type.lower()
 *     if flow_dir_type not in ['d8', 'mfd']:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             f'expected flow dir type of either d8 or mfd but got '
 */
  __Pyx_INCREF(__pyx_v_flow_dir_type);
  __pyx_t_1 = __pyx_v_flow_dir_type;
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_d8, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 4367, __pyx_L1_error)
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_mfd, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 4367, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/routing.pyx":4370
 *         raise ValueError(
 *             f'expected flow dir type of either d8 or mfd but got '
 *             f'{flow_dir_type}')             # <<<<<<<<<<<<<<
 *     cdef int d8_flow_dir_mode = (flow_dir_type == 'd8')
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_flow_dir_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/routing.pyx":4369
 *     if flow_dir_type not in ['d8', 'mfd']:
 *         raise ValueError(
 *             f'expected flow dir type of either d8 or mfd but got '             # <<<<<<<<<<<<<<
 *             f'{flow_dir_type}')
 *     cdef int d8_flow_dir_mode = (flow_dir_type == 'd8')
 */
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_expected_flow_dir_type_of_either, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4368
 *     flow_dir_type = flow_dir_type.lower()
 *     if flow_dir_type not in ['d8', 'mfd']:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             f'expected flow dir type of either d8 or mfd but got '
 *             f'{flow_dir_type}')
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 4368, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":4367
 *     """
 *     flow_dir_type = flow_dir_type.lower()
 *     if flow_dir_type not in ['d8', 'mfd']:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             f'expected flow dir type of either d8 or mfd but got '
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4371
 *             f'expected flow dir type of either d8 or mfd but got '
 *             f'{flow_dir_type}')
 *     cdef int d8_flow_dir_mode = (flow_dir_type == 'd8')             # <<<<<<<<<<<<<<
 * 
 *     cdef int xoff, yoff, win_xsize, win_ysize, xi, yi
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_flow_dir_type, __pyx_n_u_d8, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4371, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_d8_flow_dir_mode = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":4376
 *     cdef int xi_root, yi_root, raster_x_size, raster_y_size
 *     cdef int flow_dir, flow_dir_n
 *     cdef int next_id=0, n_dir, is_outlet             # <<<<<<<<<<<<<<
 *     cdef char x_off_border, y_off_border, win_xsize_border, win_ysize_border
 * 
 */
  __pyx_v_next_id = 0;

  /* "src/geoprocessing/routing/routing.pyx":4381
 *     cdef numpy.ndarray[numpy.npy_int32, ndim=2] flow_dir_block
 * 
 *     raster_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4382
 * 
 *     raster_info = pygeoprocessing.get_raster_info(
 *         flow_dir_raster_path_band[0])             # <<<<<<<<<<<<<<
 * 
 *     cdef int flow_dir_nodata = raster_info['nodata'][
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_raster_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4384
 *         flow_dir_raster_path_band[0])
 * 
 *     cdef int flow_dir_nodata = raster_info['nodata'][             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[1]-1]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/geoprocessing/routing/routing.pyx":4385
 * 
 *     cdef int flow_dir_nodata = raster_info['nodata'][
 *         flow_dir_raster_path_band[1]-1]             # <<<<<<<<<<<<<<
 * 
 *     raster_x_size, raster_y_size = raster_info['raster_size']
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4384
 *         flow_dir_raster_path_band[0])
 * 
 *     cdef int flow_dir_nodata = raster_info['nodata'][             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[1]-1]
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_nodata = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":4387
 *         flow_dir_raster_path_band[1]-1]
 * 
 *     raster_x_size, raster_y_size = raster_info['raster_size']             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_raster = gdal.OpenEx(
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 4387, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 4387, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L7_unpacking_done;
    __pyx_L6_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 4387, __pyx_L1_error)
    __pyx_L7_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_raster_x_size = __pyx_t_6;
  __pyx_v_raster_y_size = __pyx_t_9;

  /* "src/geoprocessing/routing/routing.pyx":4389
 *     raster_x_size, raster_y_size = raster_info['raster_size']
 * 
 *     flow_dir_raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4390
 * 
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 *         flow_dir_raster_path_band[1])
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_t_10};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4389, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_t_10};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4389, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_9, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_9, __pyx_t_10);
    __pyx_t_1 = 0;
    __pyx_t_10 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow_dir_raster = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4391
 *     flow_dir_raster = gdal.OpenEx(
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band[1])
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/geoprocessing/routing/routing.pyx":4392
 *         flow_dir_raster_path_band[0], gdal.OF_RASTER)
 *     flow_dir_band = flow_dir_raster.GetRasterBand(
 *         flow_dir_raster_path_band[1])             # <<<<<<<<<<<<<<
 * 
 *     if raster_info['projection_wkt']:
 */
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow_dir_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4394
 *         flow_dir_raster_path_band[1])
 * 
 *     if raster_info['projection_wkt']:             # <<<<<<<<<<<<<<
 *         raster_srs = osr.SpatialReference()
 *         raster_srs.ImportFromWkt(raster_info['projection_wkt'])
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 4394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":4395
 * 
 *     if raster_info['projection_wkt']:
 *         raster_srs = osr.SpatialReference()             # <<<<<<<<<<<<<<
 *         raster_srs.ImportFromWkt(raster_info['projection_wkt'])
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_osr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SpatialReference); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_raster_srs = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4396
 *     if raster_info['projection_wkt']:
 *         raster_srs = osr.SpatialReference()
 *         raster_srs.ImportFromWkt(raster_info['projection_wkt'])             # <<<<<<<<<<<<<<
 *     else:
 *         raster_srs = None
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_srs, __pyx_n_s_ImportFromWkt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4394
 *         flow_dir_raster_path_band[1])
 * 
 *     if raster_info['projection_wkt']:             # <<<<<<<<<<<<<<
 *         raster_srs = osr.SpatialReference()
 *         raster_srs.ImportFromWkt(raster_info['projection_wkt'])
 */
    goto __pyx_L8;
  }

  /* "src/geoprocessing/routing/routing.pyx":4398
 *         raster_srs.ImportFromWkt(raster_info['projection_wkt'])
 *     else:
 *         raster_srs = None             # <<<<<<<<<<<<<<
 * 
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_raster_srs = Py_None;
  }
  __pyx_L8:;

  /* "src/geoprocessing/routing/routing.pyx":4400
 *         raster_srs = None
 * 
 *     gpkg_driver = gdal.GetDriverByName('GPKG')             # <<<<<<<<<<<<<<
 * 
 *     if os.path.exists(target_outlet_vector_path):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_gdal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_11, __pyx_n_u_GPKG) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_GPKG);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_gpkg_driver = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4402
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 *     if os.path.exists(target_outlet_vector_path):             # <<<<<<<<<<<<<<
 *         LOGGER.warning(
 *             f'outlet detection: {target_outlet_vector_path} exists, '
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_exists); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_11, __pyx_v_target_outlet_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_target_outlet_vector_path);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 4402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":4403
 * 
 *     if os.path.exists(target_outlet_vector_path):
 *         LOGGER.warning(             # <<<<<<<<<<<<<<
 *             f'outlet detection: {target_outlet_vector_path} exists, '
 *             'removing before creating a new one.')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4404
 *     if os.path.exists(target_outlet_vector_path):
 *         LOGGER.warning(
 *             f'outlet detection: {target_outlet_vector_path} exists, '             # <<<<<<<<<<<<<<
 *             'removing before creating a new one.')
 *         os.remove(target_outlet_vector_path)
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = 0;
    __pyx_t_13 = 127;
    __Pyx_INCREF(__pyx_kp_u_outlet_detection);
    __pyx_t_12 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_outlet_detection);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_outlet_detection);
    __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_v_target_outlet_vector_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_INCREF(__pyx_kp_u_exists_removing_before_creating);
    __pyx_t_12 += 44;
    __Pyx_GIVEREF(__pyx_kp_u_exists_removing_before_creating);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_exists_removing_before_creating);
    __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_2, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4406
 *             f'outlet detection: {target_outlet_vector_path} exists, '
 *             'removing before creating a new one.')
 *         os.remove(target_outlet_vector_path)             # <<<<<<<<<<<<<<
 *     outlet_vector = gpkg_driver.Create(
 *         target_outlet_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_os); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_remove); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_3 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_v_target_outlet_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_target_outlet_vector_path);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4402
 *     gpkg_driver = gdal.GetDriverByName('GPKG')
 * 
 *     if os.path.exists(target_outlet_vector_path):             # <<<<<<<<<<<<<<
 *         LOGGER.warning(
 *             f'outlet detection: {target_outlet_vector_path} exists, '
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4407
 *             'removing before creating a new one.')
 *         os.remove(target_outlet_vector_path)
 *     outlet_vector = gpkg_driver.Create(             # <<<<<<<<<<<<<<
 *         target_outlet_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     outet_basename = os.path.basename(
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_gpkg_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "src/geoprocessing/routing/routing.pyx":4408
 *         os.remove(target_outlet_vector_path)
 *     outlet_vector = gpkg_driver.Create(
 *         target_outlet_vector_path, 0, 0, 0, gdal.GDT_Unknown)             # <<<<<<<<<<<<<<
 *     outet_basename = os.path.basename(
 *         os.path.splitext(target_outlet_vector_path)[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_gdal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_GDT_Unknown); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[6] = {__pyx_t_11, __pyx_v_target_outlet_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4407, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[6] = {__pyx_t_11, __pyx_v_target_outlet_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4407, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target_outlet_vector_path);
    __Pyx_GIVEREF(__pyx_v_target_outlet_vector_path);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_v_target_outlet_vector_path);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_9, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_9, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_9, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_outlet_vector = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4409
 *     outlet_vector = gpkg_driver.Create(
 *         target_outlet_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     outet_basename = os.path.basename(             # <<<<<<<<<<<<<<
 *         os.path.splitext(target_outlet_vector_path)[0])
 *     outlet_layer = outlet_vector.CreateLayer(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_os); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_basename); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4410
 *         target_outlet_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *     outet_basename = os.path.basename(
 *         os.path.splitext(target_outlet_vector_path)[0])             # <<<<<<<<<<<<<<
 *     outlet_layer = outlet_vector.CreateLayer(
 *         outet_basename, raster_srs, ogr.wkbPoint)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_splitext); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_11, __pyx_v_target_outlet_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_target_outlet_vector_path);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_outet_basename = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4411
 *     outet_basename = os.path.basename(
 *         os.path.splitext(target_outlet_vector_path)[0])
 *     outlet_layer = outlet_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *         outet_basename, raster_srs, ogr.wkbPoint)
 *     # i and j indicate the coordinates of the point in raster space whereas
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "src/geoprocessing/routing/routing.pyx":4412
 *         os.path.splitext(target_outlet_vector_path)[0])
 *     outlet_layer = outlet_vector.CreateLayer(
 *         outet_basename, raster_srs, ogr.wkbPoint)             # <<<<<<<<<<<<<<
 *     # i and j indicate the coordinates of the point in raster space whereas
 *     # the geometry is in projected space
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ogr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_wkbPoint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_outet_basename, __pyx_v_raster_srs, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4411, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_outet_basename, __pyx_v_raster_srs, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4411, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_outet_basename);
    __Pyx_GIVEREF(__pyx_v_outet_basename);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_9, __pyx_v_outet_basename);
    __Pyx_INCREF(__pyx_v_raster_srs);
    __Pyx_GIVEREF(__pyx_v_raster_srs);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_9, __pyx_v_raster_srs);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_9, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_outlet_layer = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4415
 *     # i and j indicate the coordinates of the point in raster space whereas
 *     # the geometry is in projected space
 *     outlet_layer.CreateField(ogr.FieldDefn('i', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     outlet_layer.CreateField(ogr.FieldDefn('j', ogr.OFTInteger))
 *     outlet_layer.CreateField(ogr.FieldDefn('ID', ogr.OFTInteger))
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_i, __pyx_t_7};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4415, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_i, __pyx_t_7};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4415, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_i);
    __Pyx_GIVEREF(__pyx_n_u_i);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_9, __pyx_n_u_i);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_2, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4416
 *     # the geometry is in projected space
 *     outlet_layer.CreateField(ogr.FieldDefn('i', ogr.OFTInteger))
 *     outlet_layer.CreateField(ogr.FieldDefn('j', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     outlet_layer.CreateField(ogr.FieldDefn('ID', ogr.OFTInteger))
 *     outlet_layer.StartTransaction()
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ogr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ogr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_u_j, __pyx_t_7};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4416, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_u_j, __pyx_t_7};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4416, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_j);
    __Pyx_GIVEREF(__pyx_n_u_j);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_n_u_j);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_14, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4417
 *     outlet_layer.CreateField(ogr.FieldDefn('i', ogr.OFTInteger))
 *     outlet_layer.CreateField(ogr.FieldDefn('j', ogr.OFTInteger))
 *     outlet_layer.CreateField(ogr.FieldDefn('ID', ogr.OFTInteger))             # <<<<<<<<<<<<<<
 *     outlet_layer.StartTransaction()
 * 
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_ogr); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_ogr); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_n_u_ID, __pyx_t_7};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4417, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_n_u_ID, __pyx_t_7};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4417, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ID);
    __Pyx_GIVEREF(__pyx_n_u_ID);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_n_u_ID);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_1, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4418
 *     outlet_layer.CreateField(ogr.FieldDefn('j', ogr.OFTInteger))
 *     outlet_layer.CreateField(ogr.FieldDefn('ID', ogr.OFTInteger))
 *     outlet_layer.StartTransaction()             # <<<<<<<<<<<<<<
 * 
 *     cdef time_t last_log_time = ctime(NULL)
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_3 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4420
 *     outlet_layer.StartTransaction()
 * 
 *     cdef time_t last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *     # iterate by iterblocks so ReadAsArray can efficiently cache reads
 *     # and writes
 */
  __pyx_v_last_log_time = time(NULL);

  /* "src/geoprocessing/routing/routing.pyx":4423
 *     # iterate by iterblocks so ReadAsArray can efficiently cache reads
 *     # and writes
 *     LOGGER.info('outlet detection: 0% complete')             # <<<<<<<<<<<<<<
 *     for block_offsets in pygeoprocessing.iterblocks(
 *             flow_dir_raster_path_band, offset_only=True):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_kp_u_outlet_detection_0_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_u_outlet_detection_0_complete);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4424
 *     # and writes
 *     LOGGER.info('outlet detection: 0% complete')
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_raster_path_band, offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4425
 *     LOGGER.info('outlet detection: 0% complete')
 *     for block_offsets in pygeoprocessing.iterblocks(
 *             flow_dir_raster_path_band, offset_only=True):             # <<<<<<<<<<<<<<
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_flow_dir_raster_path_band);
  __Pyx_GIVEREF(__pyx_v_flow_dir_raster_path_band);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_flow_dir_raster_path_band);
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_offset_only, Py_True) < 0) __PYX_ERR(0, 4425, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":4424
 *     # and writes
 *     LOGGER.info('outlet detection: 0% complete')
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_raster_path_band, offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_15 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 4424, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 4424, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 4424, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_15(__pyx_t_10);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 4424, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_block_offsets, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4426
 *     for block_offsets in pygeoprocessing.iterblocks(
 *             flow_dir_raster_path_band, offset_only=True):
 *         xoff = block_offsets['xoff']             # <<<<<<<<<<<<<<
 *         yoff = block_offsets['yoff']
 *         win_xsize = block_offsets['win_xsize']
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_xoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4426, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_xoff = __pyx_t_9;

    /* "src/geoprocessing/routing/routing.pyx":4427
 *             flow_dir_raster_path_band, offset_only=True):
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']             # <<<<<<<<<<<<<<
 *         win_xsize = block_offsets['win_xsize']
 *         win_ysize = block_offsets['win_ysize']
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_yoff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_yoff = __pyx_t_9;

    /* "src/geoprocessing/routing/routing.pyx":4428
 *         xoff = block_offsets['xoff']
 *         yoff = block_offsets['yoff']
 *         win_xsize = block_offsets['win_xsize']             # <<<<<<<<<<<<<<
 *         win_ysize = block_offsets['win_ysize']
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_win_xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4428, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_win_xsize = __pyx_t_9;

    /* "src/geoprocessing/routing/routing.pyx":4429
 *         yoff = block_offsets['yoff']
 *         win_xsize = block_offsets['win_xsize']
 *         win_ysize = block_offsets['win_ysize']             # <<<<<<<<<<<<<<
 * 
 *         # Make an array with a 1 pixel border around the iterblocks window
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_block_offsets, __pyx_n_u_win_ysize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_win_ysize = __pyx_t_9;

    /* "src/geoprocessing/routing/routing.pyx":4434
 *         # That border will be filled in with nodata or data from the raster
 *         # if the window does not align with a top/bottom/left/right edge
 *         flow_dir_block = numpy.empty(             # <<<<<<<<<<<<<<
 *             (win_ysize+2, win_xsize+2), dtype=numpy.int32)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4435
 *         # if the window does not align with a top/bottom/left/right edge
 *         flow_dir_block = numpy.empty(
 *             (win_ysize+2, win_xsize+2), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         # Test for left border and if so stripe nodata on the left margin
 */
    __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_win_ysize + 2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyInt_From_long((__pyx_v_win_xsize + 2)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_11);
    __pyx_t_1 = 0;
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4434
 *         # That border will be filled in with nodata or data from the raster
 *         # if the window does not align with a top/bottom/left/right edge
 *         flow_dir_block = numpy.empty(             # <<<<<<<<<<<<<<
 *             (win_ysize+2, win_xsize+2), dtype=numpy.int32)
 * 
 */
    __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4435
 *         # if the window does not align with a top/bottom/left/right edge
 *         flow_dir_block = numpy.empty(
 *             (win_ysize+2, win_xsize+2), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         # Test for left border and if so stripe nodata on the left margin
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 4435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4434
 *         # That border will be filled in with nodata or data from the raster
 *         # if the window does not align with a top/bottom/left/right edge
 *         flow_dir_block = numpy.empty(             # <<<<<<<<<<<<<<
 *             (win_ysize+2, win_xsize+2), dtype=numpy.int32)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4434, __pyx_L1_error)
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer, (PyObject*)__pyx_v_flow_dir_block, &__Pyx_TypeInfo_nn_npy_int32, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
        }
        __pyx_t_17 = __pyx_t_18 = __pyx_t_19 = 0;
      }
      __pyx_pybuffernd_flow_dir_block.diminfo[0].strides = __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_flow_dir_block.diminfo[0].shape = __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_flow_dir_block.diminfo[1].strides = __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_flow_dir_block.diminfo[1].shape = __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 4434, __pyx_L1_error)
    }
    __pyx_t_16 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flow_dir_block, ((PyArrayObject *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4438
 * 
 *         # Test for left border and if so stripe nodata on the left margin
 *         x_off_border = 0             # <<<<<<<<<<<<<<
 *         if xoff > 0:
 *             x_off_border = 1
 */
    __pyx_v_x_off_border = 0;

    /* "src/geoprocessing/routing/routing.pyx":4439
 *         # Test for left border and if so stripe nodata on the left margin
 *         x_off_border = 0
 *         if xoff > 0:             # <<<<<<<<<<<<<<
 *             x_off_border = 1
 *         else:
 */
    __pyx_t_5 = ((__pyx_v_xoff > 0) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":4440
 *         x_off_border = 0
 *         if xoff > 0:
 *             x_off_border = 1             # <<<<<<<<<<<<<<
 *         else:
 *             flow_dir_block[:, 0] = flow_dir_nodata
 */
      __pyx_v_x_off_border = 1;

      /* "src/geoprocessing/routing/routing.pyx":4439
 *         # Test for left border and if so stripe nodata on the left margin
 *         x_off_border = 0
 *         if xoff > 0:             # <<<<<<<<<<<<<<
 *             x_off_border = 1
 *         else:
 */
      goto __pyx_L12;
    }

    /* "src/geoprocessing/routing/routing.pyx":4442
 *             x_off_border = 1
 *         else:
 *             flow_dir_block[:, 0] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Test for top border and if so stripe nodata on the top margin
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_block), __pyx_tuple__19, __pyx_t_7) < 0)) __PYX_ERR(0, 4442, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L12:;

    /* "src/geoprocessing/routing/routing.pyx":4445
 * 
 *         # Test for top border and if so stripe nodata on the top margin
 *         y_off_border = 0             # <<<<<<<<<<<<<<
 *         if yoff > 0:
 *             y_off_border = 1
 */
    __pyx_v_y_off_border = 0;

    /* "src/geoprocessing/routing/routing.pyx":4446
 *         # Test for top border and if so stripe nodata on the top margin
 *         y_off_border = 0
 *         if yoff > 0:             # <<<<<<<<<<<<<<
 *             y_off_border = 1
 *         else:
 */
    __pyx_t_5 = ((__pyx_v_yoff > 0) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":4447
 *         y_off_border = 0
 *         if yoff > 0:
 *             y_off_border = 1             # <<<<<<<<<<<<<<
 *         else:
 *             flow_dir_block[0, :] = flow_dir_nodata
 */
      __pyx_v_y_off_border = 1;

      /* "src/geoprocessing/routing/routing.pyx":4446
 *         # Test for top border and if so stripe nodata on the top margin
 *         y_off_border = 0
 *         if yoff > 0:             # <<<<<<<<<<<<<<
 *             y_off_border = 1
 *         else:
 */
      goto __pyx_L13;
    }

    /* "src/geoprocessing/routing/routing.pyx":4449
 *             y_off_border = 1
 *         else:
 *             flow_dir_block[0, :] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Test for right border and if so stripe nodata on the right margin
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_block), __pyx_tuple__20, __pyx_t_7) < 0)) __PYX_ERR(0, 4449, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L13:;

    /* "src/geoprocessing/routing/routing.pyx":4452
 * 
 *         # Test for right border and if so stripe nodata on the right margin
 *         win_xsize_border = 0             # <<<<<<<<<<<<<<
 *         if xoff+win_xsize < raster_x_size-1:
 *             win_xsize_border += 1
 */
    __pyx_v_win_xsize_border = 0;

    /* "src/geoprocessing/routing/routing.pyx":4453
 *         # Test for right border and if so stripe nodata on the right margin
 *         win_xsize_border = 0
 *         if xoff+win_xsize < raster_x_size-1:             # <<<<<<<<<<<<<<
 *             win_xsize_border += 1
 *         else:
 */
    __pyx_t_5 = (((__pyx_v_xoff + __pyx_v_win_xsize) < (__pyx_v_raster_x_size - 1)) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":4454
 *         win_xsize_border = 0
 *         if xoff+win_xsize < raster_x_size-1:
 *             win_xsize_border += 1             # <<<<<<<<<<<<<<
 *         else:
 *             flow_dir_block[:, -1] = flow_dir_nodata
 */
      __pyx_v_win_xsize_border = (__pyx_v_win_xsize_border + 1);

      /* "src/geoprocessing/routing/routing.pyx":4453
 *         # Test for right border and if so stripe nodata on the right margin
 *         win_xsize_border = 0
 *         if xoff+win_xsize < raster_x_size-1:             # <<<<<<<<<<<<<<
 *             win_xsize_border += 1
 *         else:
 */
      goto __pyx_L14;
    }

    /* "src/geoprocessing/routing/routing.pyx":4456
 *             win_xsize_border += 1
 *         else:
 *             flow_dir_block[:, -1] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Test for bottom border and if so stripe nodata on the bottom margin
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_block), __pyx_tuple__21, __pyx_t_7) < 0)) __PYX_ERR(0, 4456, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L14:;

    /* "src/geoprocessing/routing/routing.pyx":4459
 * 
 *         # Test for bottom border and if so stripe nodata on the bottom margin
 *         win_ysize_border = 0             # <<<<<<<<<<<<<<
 *         if yoff+win_ysize < raster_y_size-1:
 *             win_ysize_border += 1
 */
    __pyx_v_win_ysize_border = 0;

    /* "src/geoprocessing/routing/routing.pyx":4460
 *         # Test for bottom border and if so stripe nodata on the bottom margin
 *         win_ysize_border = 0
 *         if yoff+win_ysize < raster_y_size-1:             # <<<<<<<<<<<<<<
 *             win_ysize_border += 1
 *         else:
 */
    __pyx_t_5 = (((__pyx_v_yoff + __pyx_v_win_ysize) < (__pyx_v_raster_y_size - 1)) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/routing.pyx":4461
 *         win_ysize_border = 0
 *         if yoff+win_ysize < raster_y_size-1:
 *             win_ysize_border += 1             # <<<<<<<<<<<<<<
 *         else:
 *             flow_dir_block[-1, :] = flow_dir_nodata
 */
      __pyx_v_win_ysize_border = (__pyx_v_win_ysize_border + 1);

      /* "src/geoprocessing/routing/routing.pyx":4460
 *         # Test for bottom border and if so stripe nodata on the bottom margin
 *         win_ysize_border = 0
 *         if yoff+win_ysize < raster_y_size-1:             # <<<<<<<<<<<<<<
 *             win_ysize_border += 1
 *         else:
 */
      goto __pyx_L15;
    }

    /* "src/geoprocessing/routing/routing.pyx":4463
 *             win_ysize_border += 1
 *         else:
 *             flow_dir_block[-1, :] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Read iterblock plus a possible margin on top/bottom/left/right side
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_nodata); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_block), __pyx_tuple__22, __pyx_t_7) < 0)) __PYX_ERR(0, 4463, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L15:;

    /* "src/geoprocessing/routing/routing.pyx":4470
 *             1-y_off_border:win_ysize+1+win_ysize_border,
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \
 *             flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 xoff=xoff-x_off_border,
 *                 yoff=yoff-y_off_border,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":4471
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \
 *             flow_dir_band.ReadAsArray(
 *                 xoff=xoff-x_off_border,             # <<<<<<<<<<<<<<
 *                 yoff=yoff-y_off_border,
 *                 win_xsize=win_xsize+win_xsize_border+x_off_border,
 */
    __pyx_t_11 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_xoff - __pyx_v_x_off_border)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_xoff, __pyx_t_3) < 0) __PYX_ERR(0, 4471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4472
 *             flow_dir_band.ReadAsArray(
 *                 xoff=xoff-x_off_border,
 *                 yoff=yoff-y_off_border,             # <<<<<<<<<<<<<<
 *                 win_xsize=win_xsize+win_xsize_border+x_off_border,
 *                 win_ysize=win_ysize+win_ysize_border+y_off_border).astype(
 */
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_yoff - __pyx_v_y_off_border)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_yoff, __pyx_t_3) < 0) __PYX_ERR(0, 4471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4473
 *                 xoff=xoff-x_off_border,
 *                 yoff=yoff-y_off_border,
 *                 win_xsize=win_xsize+win_xsize_border+x_off_border,             # <<<<<<<<<<<<<<
 *                 win_ysize=win_ysize+win_ysize_border+y_off_border).astype(
 *                     numpy.int32)
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(((__pyx_v_win_xsize + __pyx_v_win_xsize_border) + __pyx_v_x_off_border)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_win_xsize, __pyx_t_3) < 0) __PYX_ERR(0, 4471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4474
 *                 yoff=yoff-y_off_border,
 *                 win_xsize=win_xsize+win_xsize_border+x_off_border,
 *                 win_ysize=win_ysize+win_ysize_border+y_off_border).astype(             # <<<<<<<<<<<<<<
 *                     numpy.int32)
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(((__pyx_v_win_ysize + __pyx_v_win_ysize_border) + __pyx_v_y_off_border)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_win_ysize, __pyx_t_3) < 0) __PYX_ERR(0, 4471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4470
 *             1-y_off_border:win_ysize+1+win_ysize_border,
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \
 *             flow_dir_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *                 xoff=xoff-x_off_border,
 *                 yoff=yoff-y_off_border,
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4474
 *                 yoff=yoff-y_off_border,
 *                 win_xsize=win_xsize+win_xsize_border+x_off_border,
 *                 win_ysize=win_ysize+win_ysize_border+y_off_border).astype(             # <<<<<<<<<<<<<<
 *                     numpy.int32)
 * 
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astype); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4475
 *                 win_xsize=win_xsize+win_xsize_border+x_off_border,
 *                 win_ysize=win_ysize+win_ysize_border+y_off_border).astype(
 *                     numpy.int32)             # <<<<<<<<<<<<<<
 * 
 *         for yi in range(1, win_ysize+1):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4468
 *         # and read as type int32 to handle both d8 or mfd formats
 *         flow_dir_block[
 *             1-y_off_border:win_ysize+1+win_ysize_border,             # <<<<<<<<<<<<<<
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \
 *             flow_dir_band.ReadAsArray(
 */
    __pyx_t_11 = __Pyx_PyInt_From_long((1 - __pyx_v_y_off_border)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_2 = __Pyx_PyInt_From_long(((__pyx_v_win_ysize + 1) + __pyx_v_win_ysize_border)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/geoprocessing/routing/routing.pyx":4467
 *         # Read iterblock plus a possible margin on top/bottom/left/right side
 *         # and read as type int32 to handle both d8 or mfd formats
 *         flow_dir_block[             # <<<<<<<<<<<<<<
 *             1-y_off_border:win_ysize+1+win_ysize_border,
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \
 */
    __pyx_t_3 = PySlice_New(__pyx_t_11, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4469
 *         flow_dir_block[
 *             1-y_off_border:win_ysize+1+win_ysize_border,
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \             # <<<<<<<<<<<<<<
 *             flow_dir_band.ReadAsArray(
 *                 xoff=xoff-x_off_border,
 */
    __pyx_t_2 = __Pyx_PyInt_From_long((1 - __pyx_v_x_off_border)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyInt_From_long(((__pyx_v_win_xsize + 1) + __pyx_v_win_xsize_border)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "src/geoprocessing/routing/routing.pyx":4467
 *         # Read iterblock plus a possible margin on top/bottom/left/right side
 *         # and read as type int32 to handle both d8 or mfd formats
 *         flow_dir_block[             # <<<<<<<<<<<<<<
 *             1-y_off_border:win_ysize+1+win_ysize_border,
 *             1-x_off_border:win_xsize+1+win_xsize_border] = \
 */
    __pyx_t_1 = PySlice_New(__pyx_t_2, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_flow_dir_block), __pyx_t_11, __pyx_t_7) < 0)) __PYX_ERR(0, 4467, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4477
 *                     numpy.int32)
 * 
 *         for yi in range(1, win_ysize+1):             # <<<<<<<<<<<<<<
 *             if ctime(NULL) - last_log_time > 5.0:
 *                 last_log_time = ctime(NULL)
 */
    __pyx_t_20 = (__pyx_v_win_ysize + 1);
    __pyx_t_21 = __pyx_t_20;
    for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_21; __pyx_t_9+=1) {
      __pyx_v_yi = __pyx_t_9;

      /* "src/geoprocessing/routing/routing.pyx":4478
 * 
 *         for yi in range(1, win_ysize+1):
 *             if ctime(NULL) - last_log_time > 5.0:             # <<<<<<<<<<<<<<
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 */
      __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > 5.0) != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/routing.pyx":4479
 *         for yi in range(1, win_ysize+1):
 *             if ctime(NULL) - last_log_time > 5.0:
 *                 last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info(
 */
        __pyx_v_last_log_time = time(NULL);

        /* "src/geoprocessing/routing/routing.pyx":4480
 *             if ctime(NULL) - last_log_time > 5.0:
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size             # <<<<<<<<<<<<<<
 *                 LOGGER.info(
 *                     f'''outlet detection: {
 */
        __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_xoff + (__pyx_v_yoff * __pyx_v_raster_x_size))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_v_current_pixel, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4481
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info(             # <<<<<<<<<<<<<<
 *                     f'''outlet detection: {
 *                         100.0 * current_pixel / <float>(
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4482
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info(
 *                     f'''outlet detection: {             # <<<<<<<<<<<<<<
 *                         100.0 * current_pixel / <float>(
 *                             raster_x_size * raster_y_size):.1f} complete''')
 */
        __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_22 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_outlet_detection);
        __pyx_t_22 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_outlet_detection);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_u_outlet_detection);

        /* "src/geoprocessing/routing/routing.pyx":4483
 *                 LOGGER.info(
 *                     f'''outlet detection: {
 *                         100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                             raster_x_size * raster_y_size):.1f} complete''')
 *             for xi in range(1, win_xsize+1):
 */
        __pyx_t_3 = PyNumber_Multiply(__pyx_float_100_0, __pyx_v_current_pixel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "src/geoprocessing/routing/routing.pyx":4484
 *                     f'''outlet detection: {
 *                         100.0 * current_pixel / <float>(
 *                             raster_x_size * raster_y_size):.1f} complete''')             # <<<<<<<<<<<<<<
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_block[yi, xi]
 */
        __pyx_t_2 = PyFloat_FromDouble(((float)(__pyx_v_raster_x_size * __pyx_v_raster_y_size))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);

        /* "src/geoprocessing/routing/routing.pyx":4483
 *                 LOGGER.info(
 *                     f'''outlet detection: {
 *                         100.0 * current_pixel / <float>(             # <<<<<<<<<<<<<<
 *                             raster_x_size * raster_y_size):.1f} complete''')
 *             for xi in range(1, win_xsize+1):
 */
        __pyx_t_14 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4482
 *                 current_pixel = xoff + yoff * raster_x_size
 *                 LOGGER.info(
 *                     f'''outlet detection: {             # <<<<<<<<<<<<<<
 *                         100.0 * current_pixel / <float>(
 *                             raster_x_size * raster_y_size):.1f} complete''')
 */
        __pyx_t_2 = __Pyx_PyObject_Format(__pyx_t_14, __pyx_kp_u_1f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_13;
        __pyx_t_22 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_complete_2);
        __pyx_t_22 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_complete_2);
        PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_kp_u_complete_2);
        __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_11, 3, __pyx_t_22, __pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/routing.pyx":4478
 * 
 *         for yi in range(1, win_ysize+1):
 *             if ctime(NULL) - last_log_time > 5.0:             # <<<<<<<<<<<<<<
 *                 last_log_time = ctime(NULL)
 *                 current_pixel = xoff + yoff * raster_x_size
 */
      }

      /* "src/geoprocessing/routing/routing.pyx":4485
 *                         100.0 * current_pixel / <float>(
 *                             raster_x_size * raster_y_size):.1f} complete''')
 *             for xi in range(1, win_xsize+1):             # <<<<<<<<<<<<<<
 *                 flow_dir = flow_dir_block[yi, xi]
 *                 if flow_dir == flow_dir_nodata:
 */
      __pyx_t_23 = (__pyx_v_win_xsize + 1);
      __pyx_t_24 = __pyx_t_23;
      for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_24; __pyx_t_6+=1) {
        __pyx_v_xi = __pyx_t_6;

        /* "src/geoprocessing/routing/routing.pyx":4486
 *                             raster_x_size * raster_y_size):.1f} complete''')
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_block[yi, xi]             # <<<<<<<<<<<<<<
 *                 if flow_dir == flow_dir_nodata:
 *                     continue
 */
        __pyx_t_25 = __pyx_v_yi;
        __pyx_t_26 = __pyx_v_xi;
        __pyx_t_27 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_flow_dir_block.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_27 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_flow_dir_block.diminfo[0].shape)) __pyx_t_27 = 0;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_pybuffernd_flow_dir_block.diminfo[1].shape;
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_27 = 1;
        } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_flow_dir_block.diminfo[1].shape)) __pyx_t_27 = 1;
        if (unlikely(__pyx_t_27 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_27);
          __PYX_ERR(0, 4486, __pyx_L1_error)
        }
        __pyx_v_flow_dir = (*__Pyx_BufPtrStrided2d(npy_int32 *, __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_flow_dir_block.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_flow_dir_block.diminfo[1].strides));

        /* "src/geoprocessing/routing/routing.pyx":4487
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_block[yi, xi]
 *                 if flow_dir == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_5 = ((__pyx_v_flow_dir == __pyx_v_flow_dir_nodata) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":4488
 *                 flow_dir = flow_dir_block[yi, xi]
 *                 if flow_dir == flow_dir_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 is_outlet = 1
 */
          goto __pyx_L19_continue;

          /* "src/geoprocessing/routing/routing.pyx":4487
 *             for xi in range(1, win_xsize+1):
 *                 flow_dir = flow_dir_block[yi, xi]
 *                 if flow_dir == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4490
 *                     continue
 * 
 *                 is_outlet = 1             # <<<<<<<<<<<<<<
 *                 if d8_flow_dir_mode:
 *                     # inspect the outflow pixel neighbor
 */
        __pyx_v_is_outlet = 1;

        /* "src/geoprocessing/routing/routing.pyx":4491
 * 
 *                 is_outlet = 1
 *                 if d8_flow_dir_mode:             # <<<<<<<<<<<<<<
 *                     # inspect the outflow pixel neighbor
 *                     flow_dir_n = flow_dir_block[
 */
        __pyx_t_5 = (__pyx_v_d8_flow_dir_mode != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":4493
 *                 if d8_flow_dir_mode:
 *                     # inspect the outflow pixel neighbor
 *                     flow_dir_n = flow_dir_block[             # <<<<<<<<<<<<<<
 *                         yi+D8_YOFFSET[flow_dir],
 *                         xi+D8_XOFFSET[flow_dir]]
 */
          __pyx_t_26 = (__pyx_v_yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_flow_dir]));
          __pyx_t_25 = (__pyx_v_xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_flow_dir]));
          __pyx_t_27 = -1;
          if (__pyx_t_26 < 0) {
            __pyx_t_26 += __pyx_pybuffernd_flow_dir_block.diminfo[0].shape;
            if (unlikely(__pyx_t_26 < 0)) __pyx_t_27 = 0;
          } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_flow_dir_block.diminfo[0].shape)) __pyx_t_27 = 0;
          if (__pyx_t_25 < 0) {
            __pyx_t_25 += __pyx_pybuffernd_flow_dir_block.diminfo[1].shape;
            if (unlikely(__pyx_t_25 < 0)) __pyx_t_27 = 1;
          } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_flow_dir_block.diminfo[1].shape)) __pyx_t_27 = 1;
          if (unlikely(__pyx_t_27 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_27);
            __PYX_ERR(0, 4493, __pyx_L1_error)
          }
          __pyx_v_flow_dir_n = (*__Pyx_BufPtrStrided2d(npy_int32 *, __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_flow_dir_block.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_flow_dir_block.diminfo[1].strides));

          /* "src/geoprocessing/routing/routing.pyx":4499
 *                     # if the outflow pixel is outside the raster boundaries or
 *                     # is a nodata pixel it must mean xi,yi is an outlet
 *                     if flow_dir_n != flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                         is_outlet = 0
 *                 else:
 */
          __pyx_t_5 = ((__pyx_v_flow_dir_n != __pyx_v_flow_dir_nodata) != 0);
          if (__pyx_t_5) {

            /* "src/geoprocessing/routing/routing.pyx":4500
 *                     # is a nodata pixel it must mean xi,yi is an outlet
 *                     if flow_dir_n != flow_dir_nodata:
 *                         is_outlet = 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     # inspect all the outflow pixel neighbors in MFD mode
 */
            __pyx_v_is_outlet = 0;

            /* "src/geoprocessing/routing/routing.pyx":4499
 *                     # if the outflow pixel is outside the raster boundaries or
 *                     # is a nodata pixel it must mean xi,yi is an outlet
 *                     if flow_dir_n != flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                         is_outlet = 0
 *                 else:
 */
          }

          /* "src/geoprocessing/routing/routing.pyx":4491
 * 
 *                 is_outlet = 1
 *                 if d8_flow_dir_mode:             # <<<<<<<<<<<<<<
 *                     # inspect the outflow pixel neighbor
 *                     flow_dir_n = flow_dir_block[
 */
          goto __pyx_L22;
        }

        /* "src/geoprocessing/routing/routing.pyx":4503
 *                 else:
 *                     # inspect all the outflow pixel neighbors in MFD mode
 *                     for n_dir in range(8):             # <<<<<<<<<<<<<<
 *                         # shift the 0xF mask to the outflow direction and
 *                         # test if there's any outflow or not. 0 means nothing
 */
        /*else*/ {
          for (__pyx_t_27 = 0; __pyx_t_27 < 8; __pyx_t_27+=1) {
            __pyx_v_n_dir = __pyx_t_27;

            /* "src/geoprocessing/routing/routing.pyx":4515
 *                         # if it equals 0 it means there was no proportional
 *                         # flow in the `n_dir` direction.
 *                         if flow_dir&(0xF<<(n_dir*4)) == 0:             # <<<<<<<<<<<<<<
 *                             continue
 *                         flow_dir_n = flow_dir_block[
 */
            __pyx_t_5 = (((__pyx_v_flow_dir & (0xF << (__pyx_v_n_dir * 4))) == 0) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":4516
 *                         # flow in the `n_dir` direction.
 *                         if flow_dir&(0xF<<(n_dir*4)) == 0:
 *                             continue             # <<<<<<<<<<<<<<
 *                         flow_dir_n = flow_dir_block[
 *                             yi+D8_YOFFSET[n_dir],
 */
              goto __pyx_L24_continue;

              /* "src/geoprocessing/routing/routing.pyx":4515
 *                         # if it equals 0 it means there was no proportional
 *                         # flow in the `n_dir` direction.
 *                         if flow_dir&(0xF<<(n_dir*4)) == 0:             # <<<<<<<<<<<<<<
 *                             continue
 *                         flow_dir_n = flow_dir_block[
 */
            }

            /* "src/geoprocessing/routing/routing.pyx":4517
 *                         if flow_dir&(0xF<<(n_dir*4)) == 0:
 *                             continue
 *                         flow_dir_n = flow_dir_block[             # <<<<<<<<<<<<<<
 *                             yi+D8_YOFFSET[n_dir],
 *                             xi+D8_XOFFSET[n_dir]]
 */
            __pyx_t_25 = (__pyx_v_yi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_n_dir]));
            __pyx_t_26 = (__pyx_v_xi + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_n_dir]));
            __pyx_t_28 = -1;
            if (__pyx_t_25 < 0) {
              __pyx_t_25 += __pyx_pybuffernd_flow_dir_block.diminfo[0].shape;
              if (unlikely(__pyx_t_25 < 0)) __pyx_t_28 = 0;
            } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_flow_dir_block.diminfo[0].shape)) __pyx_t_28 = 0;
            if (__pyx_t_26 < 0) {
              __pyx_t_26 += __pyx_pybuffernd_flow_dir_block.diminfo[1].shape;
              if (unlikely(__pyx_t_26 < 0)) __pyx_t_28 = 1;
            } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_flow_dir_block.diminfo[1].shape)) __pyx_t_28 = 1;
            if (unlikely(__pyx_t_28 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_28);
              __PYX_ERR(0, 4517, __pyx_L1_error)
            }
            __pyx_v_flow_dir_n = (*__Pyx_BufPtrStrided2d(npy_int32 *, __pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_flow_dir_block.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_flow_dir_block.diminfo[1].strides));

            /* "src/geoprocessing/routing/routing.pyx":4520
 *                             yi+D8_YOFFSET[n_dir],
 *                             xi+D8_XOFFSET[n_dir]]
 *                         if flow_dir_n != flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                             is_outlet = 0
 *                             break
 */
            __pyx_t_5 = ((__pyx_v_flow_dir_n != __pyx_v_flow_dir_nodata) != 0);
            if (__pyx_t_5) {

              /* "src/geoprocessing/routing/routing.pyx":4521
 *                             xi+D8_XOFFSET[n_dir]]
 *                         if flow_dir_n != flow_dir_nodata:
 *                             is_outlet = 0             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
              __pyx_v_is_outlet = 0;

              /* "src/geoprocessing/routing/routing.pyx":4522
 *                         if flow_dir_n != flow_dir_nodata:
 *                             is_outlet = 0
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                 # if the outflow pixel is outside the raster boundaries or
 */
              goto __pyx_L25_break;

              /* "src/geoprocessing/routing/routing.pyx":4520
 *                             yi+D8_YOFFSET[n_dir],
 *                             xi+D8_XOFFSET[n_dir]]
 *                         if flow_dir_n != flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                             is_outlet = 0
 *                             break
 */
            }
            __pyx_L24_continue:;
          }
          __pyx_L25_break:;
        }
        __pyx_L22:;

        /* "src/geoprocessing/routing/routing.pyx":4526
 *                 # if the outflow pixel is outside the raster boundaries or
 *                 # is a nodata pixel it must mean xi,yi is an outlet
 *                 if is_outlet:             # <<<<<<<<<<<<<<
 *                     outlet_point = ogr.Geometry(ogr.wkbPoint)
 *                     # calculate global x/y raster coordinate, the -1 is for
 */
        __pyx_t_5 = (__pyx_v_is_outlet != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/routing.pyx":4527
 *                 # is a nodata pixel it must mean xi,yi is an outlet
 *                 if is_outlet:
 *                     outlet_point = ogr.Geometry(ogr.wkbPoint)             # <<<<<<<<<<<<<<
 *                     # calculate global x/y raster coordinate, the -1 is for
 *                     # the left/top border of the test array window
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Geometry); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_wkbPoint); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_11);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF_SET(__pyx_v_outlet_point, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4530
 *                     # calculate global x/y raster coordinate, the -1 is for
 *                     # the left/top border of the test array window
 *                     xi_root = xi+xoff-1             # <<<<<<<<<<<<<<
 *                     yi_root = yi+yoff-1
 *                     # created a projected point in the center of the pixel
 */
          __pyx_v_xi_root = ((__pyx_v_xi + __pyx_v_xoff) - 1);

          /* "src/geoprocessing/routing/routing.pyx":4531
 *                     # the left/top border of the test array window
 *                     xi_root = xi+xoff-1
 *                     yi_root = yi+yoff-1             # <<<<<<<<<<<<<<
 *                     # created a projected point in the center of the pixel
 *                     # thus the + 0.5 to x and y
 */
          __pyx_v_yi_root = ((__pyx_v_yi + __pyx_v_yoff) - 1);

          /* "src/geoprocessing/routing/routing.pyx":4534
 *                     # created a projected point in the center of the pixel
 *                     # thus the + 0.5 to x and y
 *                     proj_x, proj_y = gdal.ApplyGeoTransform(             # <<<<<<<<<<<<<<
 *                         raster_info['geotransform'],
 *                         xi_root+0.5, yi_root+0.5)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ApplyGeoTransform); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4535
 *                     # thus the + 0.5 to x and y
 *                     proj_x, proj_y = gdal.ApplyGeoTransform(
 *                         raster_info['geotransform'],             # <<<<<<<<<<<<<<
 *                         xi_root+0.5, yi_root+0.5)
 *                     outlet_point.AddPoint(proj_x, proj_y)
 */
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_geotransform); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4535, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "src/geoprocessing/routing/routing.pyx":4536
 *                     proj_x, proj_y = gdal.ApplyGeoTransform(
 *                         raster_info['geotransform'],
 *                         xi_root+0.5, yi_root+0.5)             # <<<<<<<<<<<<<<
 *                     outlet_point.AddPoint(proj_x, proj_y)
 *                     outlet_feature = ogr.Feature(outlet_layer.GetLayerDefn())
 */
          __pyx_t_1 = PyFloat_FromDouble((__pyx_v_xi_root + 0.5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_14 = PyFloat_FromDouble((__pyx_v_yi_root + 0.5)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_3 = NULL;
          __pyx_t_27 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_27 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_2, __pyx_t_1, __pyx_t_14};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_27, 3+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_2, __pyx_t_1, __pyx_t_14};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_27, 3+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          } else
          #endif
          {
            __pyx_t_29 = PyTuple_New(3+__pyx_t_27); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_29);
            if (__pyx_t_3) {
              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_3); __pyx_t_3 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_27, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_27, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_29, 2+__pyx_t_27, __pyx_t_14);
            __pyx_t_2 = 0;
            __pyx_t_1 = 0;
            __pyx_t_14 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_29, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
            PyObject* sequence = __pyx_t_7;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 4534, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_29 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_29 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_29);
            #else
            __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_29 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_29);
            #endif
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_14 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_8 = Py_TYPE(__pyx_t_14)->tp_iternext;
            index = 0; __pyx_t_11 = __pyx_t_8(__pyx_t_14); if (unlikely(!__pyx_t_11)) goto __pyx_L29_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_11);
            index = 1; __pyx_t_29 = __pyx_t_8(__pyx_t_14); if (unlikely(!__pyx_t_29)) goto __pyx_L29_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_29);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_14), 2) < 0) __PYX_ERR(0, 4534, __pyx_L1_error)
            __pyx_t_8 = NULL;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            goto __pyx_L30_unpacking_done;
            __pyx_L29_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_8 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 4534, __pyx_L1_error)
            __pyx_L30_unpacking_done:;
          }

          /* "src/geoprocessing/routing/routing.pyx":4534
 *                     # created a projected point in the center of the pixel
 *                     # thus the + 0.5 to x and y
 *                     proj_x, proj_y = gdal.ApplyGeoTransform(             # <<<<<<<<<<<<<<
 *                         raster_info['geotransform'],
 *                         xi_root+0.5, yi_root+0.5)
 */
          __Pyx_XDECREF_SET(__pyx_v_proj_x, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_XDECREF_SET(__pyx_v_proj_y, __pyx_t_29);
          __pyx_t_29 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4537
 *                         raster_info['geotransform'],
 *                         xi_root+0.5, yi_root+0.5)
 *                     outlet_point.AddPoint(proj_x, proj_y)             # <<<<<<<<<<<<<<
 *                     outlet_feature = ogr.Feature(outlet_layer.GetLayerDefn())
 *                     outlet_feature.SetGeometry(outlet_point)
 */
          __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_point, __pyx_n_s_AddPoint); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_11 = NULL;
          __pyx_t_27 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_29))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_29);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_29);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_29, function);
              __pyx_t_27 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_29)) {
            PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_proj_x, __pyx_v_proj_y};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_29, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4537, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_7);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_29)) {
            PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_proj_x, __pyx_v_proj_y};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_29, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4537, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_7);
          } else
          #endif
          {
            __pyx_t_14 = PyTuple_New(2+__pyx_t_27); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4537, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
            }
            __Pyx_INCREF(__pyx_v_proj_x);
            __Pyx_GIVEREF(__pyx_v_proj_x);
            PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_27, __pyx_v_proj_x);
            __Pyx_INCREF(__pyx_v_proj_y);
            __Pyx_GIVEREF(__pyx_v_proj_y);
            PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_27, __pyx_v_proj_y);
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4537, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4538
 *                         xi_root+0.5, yi_root+0.5)
 *                     outlet_point.AddPoint(proj_x, proj_y)
 *                     outlet_feature = ogr.Feature(outlet_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *                     outlet_feature.SetGeometry(outlet_point)
 *                     # save the raster coordinates of the outlet pixel as i,j
 */
          __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_ogr); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_Feature); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
            }
          }
          __pyx_t_29 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_11, __pyx_t_29) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_29);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF_SET(__pyx_v_outlet_feature, __pyx_t_7);
          __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4539
 *                     outlet_point.AddPoint(proj_x, proj_y)
 *                     outlet_feature = ogr.Feature(outlet_layer.GetLayerDefn())
 *                     outlet_feature.SetGeometry(outlet_point)             # <<<<<<<<<<<<<<
 *                     # save the raster coordinates of the outlet pixel as i,j
 *                     outlet_feature.SetField('i', xi_root)
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4539, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_29 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_29)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_29);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_7 = (__pyx_t_29) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_29, __pyx_v_outlet_point) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_outlet_point);
          __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4539, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4541
 *                     outlet_feature.SetGeometry(outlet_point)
 *                     # save the raster coordinates of the outlet pixel as i,j
 *                     outlet_feature.SetField('i', xi_root)             # <<<<<<<<<<<<<<
 *                     outlet_feature.SetField('j', yi_root)
 *                     outlet_feature.SetField('ID', next_id)
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_29 = __Pyx_PyInt_From_int(__pyx_v_xi_root); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_11 = NULL;
          __pyx_t_27 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_27 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_14)) {
            PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_n_u_i, __pyx_t_29};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4541, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
            PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_n_u_i, __pyx_t_29};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4541, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          } else
          #endif
          {
            __pyx_t_1 = PyTuple_New(2+__pyx_t_27); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4541, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11); __pyx_t_11 = NULL;
            }
            __Pyx_INCREF(__pyx_n_u_i);
            __Pyx_GIVEREF(__pyx_n_u_i);
            PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_27, __pyx_n_u_i);
            __Pyx_GIVEREF(__pyx_t_29);
            PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_27, __pyx_t_29);
            __pyx_t_29 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4541, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4542
 *                     # save the raster coordinates of the outlet pixel as i,j
 *                     outlet_feature.SetField('i', xi_root)
 *                     outlet_feature.SetField('j', yi_root)             # <<<<<<<<<<<<<<
 *                     outlet_feature.SetField('ID', next_id)
 *                     next_id += 1
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_yi_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_29 = NULL;
          __pyx_t_27 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_29)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_29);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_27 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_14)) {
            PyObject *__pyx_temp[3] = {__pyx_t_29, __pyx_n_u_j, __pyx_t_1};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4542, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
            PyObject *__pyx_temp[3] = {__pyx_t_29, __pyx_n_u_j, __pyx_t_1};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4542, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          {
            __pyx_t_11 = PyTuple_New(2+__pyx_t_27); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4542, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (__pyx_t_29) {
              __Pyx_GIVEREF(__pyx_t_29); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_29); __pyx_t_29 = NULL;
            }
            __Pyx_INCREF(__pyx_n_u_j);
            __Pyx_GIVEREF(__pyx_n_u_j);
            PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_27, __pyx_n_u_j);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_27, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4542, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4543
 *                     outlet_feature.SetField('i', xi_root)
 *                     outlet_feature.SetField('j', yi_root)
 *                     outlet_feature.SetField('ID', next_id)             # <<<<<<<<<<<<<<
 *                     next_id += 1
 *                     outlet_layer.CreateFeature(outlet_feature)
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4543, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_next_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 4543, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_1 = NULL;
          __pyx_t_27 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_27 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_14)) {
            PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_ID, __pyx_t_11};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4543, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
            PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_u_ID, __pyx_t_11};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_27, 2+__pyx_t_27); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4543, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          {
            __pyx_t_29 = PyTuple_New(2+__pyx_t_27); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 4543, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_29);
            if (__pyx_t_1) {
              __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_1); __pyx_t_1 = NULL;
            }
            __Pyx_INCREF(__pyx_n_u_ID);
            __Pyx_GIVEREF(__pyx_n_u_ID);
            PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_27, __pyx_n_u_ID);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_27, __pyx_t_11);
            __pyx_t_11 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_29, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4543, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4544
 *                     outlet_feature.SetField('j', yi_root)
 *                     outlet_feature.SetField('ID', next_id)
 *                     next_id += 1             # <<<<<<<<<<<<<<
 *                     outlet_layer.CreateFeature(outlet_feature)
 *                     outlet_feature = None
 */
          __pyx_v_next_id = (__pyx_v_next_id + 1);

          /* "src/geoprocessing/routing/routing.pyx":4545
 *                     outlet_feature.SetField('ID', next_id)
 *                     next_id += 1
 *                     outlet_layer.CreateFeature(outlet_feature)             # <<<<<<<<<<<<<<
 *                     outlet_feature = None
 *                     outlet_point = None
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_29 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_29)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_29);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_7 = (__pyx_t_29) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_29, __pyx_v_outlet_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_outlet_feature);
          __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "src/geoprocessing/routing/routing.pyx":4546
 *                     next_id += 1
 *                     outlet_layer.CreateFeature(outlet_feature)
 *                     outlet_feature = None             # <<<<<<<<<<<<<<
 *                     outlet_point = None
 * 
 */
          __Pyx_INCREF(Py_None);
          __Pyx_DECREF_SET(__pyx_v_outlet_feature, Py_None);

          /* "src/geoprocessing/routing/routing.pyx":4547
 *                     outlet_layer.CreateFeature(outlet_feature)
 *                     outlet_feature = None
 *                     outlet_point = None             # <<<<<<<<<<<<<<
 * 
 *     flow_dir_raster = None
 */
          __Pyx_INCREF(Py_None);
          __Pyx_DECREF_SET(__pyx_v_outlet_point, Py_None);

          /* "src/geoprocessing/routing/routing.pyx":4526
 *                 # if the outflow pixel is outside the raster boundaries or
 *                 # is a nodata pixel it must mean xi,yi is an outlet
 *                 if is_outlet:             # <<<<<<<<<<<<<<
 *                     outlet_point = ogr.Geometry(ogr.wkbPoint)
 *                     # calculate global x/y raster coordinate, the -1 is for
 */
        }
        __pyx_L19_continue:;
      }
    }

    /* "src/geoprocessing/routing/routing.pyx":4424
 *     # and writes
 *     LOGGER.info('outlet detection: 0% complete')
 *     for block_offsets in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             flow_dir_raster_path_band, offset_only=True):
 *         xoff = block_offsets['xoff']
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4549
 *                     outlet_point = None
 * 
 *     flow_dir_raster = None             # <<<<<<<<<<<<<<
 *     flow_dir_band = None
 *     LOGGER.info('outlet detection: 100% complete -- committing transaction')
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_flow_dir_raster, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4550
 * 
 *     flow_dir_raster = None
 *     flow_dir_band = None             # <<<<<<<<<<<<<<
 *     LOGGER.info('outlet detection: 100% complete -- committing transaction')
 *     outlet_layer.CommitTransaction()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_flow_dir_band, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4551
 *     flow_dir_raster = None
 *     flow_dir_band = None
 *     LOGGER.info('outlet detection: 100% complete -- committing transaction')             # <<<<<<<<<<<<<<
 *     outlet_layer.CommitTransaction()
 *     outlet_layer = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_10 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_7, __pyx_kp_u_outlet_detection_100_complete_co) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_kp_u_outlet_detection_100_complete_co);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4552
 *     flow_dir_band = None
 *     LOGGER.info('outlet detection: 100% complete -- committing transaction')
 *     outlet_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 *     outlet_layer = None
 *     outlet_vector = None
 */
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outlet_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_10 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4553
 *     LOGGER.info('outlet detection: 100% complete -- committing transaction')
 *     outlet_layer.CommitTransaction()
 *     outlet_layer = None             # <<<<<<<<<<<<<<
 *     outlet_vector = None
 *     LOGGER.info('outlet detection: done')
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_outlet_layer, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4554
 *     outlet_layer.CommitTransaction()
 *     outlet_layer = None
 *     outlet_vector = None             # <<<<<<<<<<<<<<
 *     LOGGER.info('outlet detection: done')
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_outlet_vector, Py_None);

  /* "src/geoprocessing/routing/routing.pyx":4555
 *     outlet_layer = None
 *     outlet_vector = None
 *     LOGGER.info('outlet detection: done')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 4555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_10 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_14, __pyx_kp_u_outlet_detection_done) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_outlet_detection_done);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4339
 * 
 * 
 * def detect_outlets(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, flow_dir_type, target_outlet_vector_path):
 *     """Create point vector indicating flow raster outlets.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_29);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing.detect_outlets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_flow_dir_block.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_block);
  __Pyx_XDECREF(__pyx_v_raster_info);
  __Pyx_XDECREF(__pyx_v_flow_dir_raster);
  __Pyx_XDECREF(__pyx_v_flow_dir_band);
  __Pyx_XDECREF(__pyx_v_raster_srs);
  __Pyx_XDECREF(__pyx_v_gpkg_driver);
  __Pyx_XDECREF(__pyx_v_outlet_vector);
  __Pyx_XDECREF(__pyx_v_outet_basename);
  __Pyx_XDECREF(__pyx_v_outlet_layer);
  __Pyx_XDECREF(__pyx_v_block_offsets);
  __Pyx_XDECREF(__pyx_v_current_pixel);
  __Pyx_XDECREF(__pyx_v_outlet_point);
  __Pyx_XDECREF(__pyx_v_proj_x);
  __Pyx_XDECREF(__pyx_v_proj_y);
  __Pyx_XDECREF(__pyx_v_outlet_feature);
  __Pyx_XDECREF(__pyx_v_flow_dir_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":4558
 * 
 * 
 * cdef void _diagonal_fill_step(             # <<<<<<<<<<<<<<
 *         int x_l, int y_l, int edge_dir,
 *         long discovery, long finish,
 */

static void __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__diagonal_fill_step(int __pyx_v_x_l, int __pyx_v_y_l, int __pyx_v_edge_dir, long __pyx_v_discovery, long __pyx_v_finish, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_discovery_managed_raster, long __pyx_v_discovery_nodata, PyObject *__pyx_v_boundary_list) {
  int __pyx_v_xdelta;
  int __pyx_v_ydelta;
  PyObject *__pyx_v_test_list = NULL;
  PyObject *__pyx_v_x_t = NULL;
  PyObject *__pyx_v_y_t = NULL;
  long __pyx_v_point_discovery;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_diagonal_fill_step", 0);

  /* "src/geoprocessing/routing/routing.pyx":4596
 *     """
 *     # always add the current pixel
 *     boundary_list.append((x_l, y_l))             # <<<<<<<<<<<<<<
 * 
 *     # this section determines which back diagonal was in the watershed and
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_boundary_list, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 4596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4600
 *     # this section determines which back diagonal was in the watershed and
 *     # fills it. if none are we pick one so there's no degenerate case
 *     cdef int xdelta = D8_XOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *     cdef int ydelta = D8_YOFFSET[edge_dir]
 *     test_list = [
 */
  __pyx_v_xdelta = (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_edge_dir]);

  /* "src/geoprocessing/routing/routing.pyx":4601
 *     # fills it. if none are we pick one so there's no degenerate case
 *     cdef int xdelta = D8_XOFFSET[edge_dir]
 *     cdef int ydelta = D8_YOFFSET[edge_dir]             # <<<<<<<<<<<<<<
 *     test_list = [
 *         (x_l - xdelta, y_l),
 */
  __pyx_v_ydelta = (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_edge_dir]);

  /* "src/geoprocessing/routing/routing.pyx":4603
 *     cdef int ydelta = D8_YOFFSET[edge_dir]
 *     test_list = [
 *         (x_l - xdelta, y_l),             # <<<<<<<<<<<<<<
 *         (x_l, y_l - ydelta)]
 *     for x_t, y_t in test_list:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_x_l - __pyx_v_xdelta)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4604
 *     test_list = [
 *         (x_l - xdelta, y_l),
 *         (x_l, y_l - ydelta)]             # <<<<<<<<<<<<<<
 *     for x_t, y_t in test_list:
 *         point_discovery = <long>discovery_managed_raster.get(
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_y_l - __pyx_v_ydelta)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4602
 *     cdef int xdelta = D8_XOFFSET[edge_dir]
 *     cdef int ydelta = D8_YOFFSET[edge_dir]
 *     test_list = [             # <<<<<<<<<<<<<<
 *         (x_l - xdelta, y_l),
 *         (x_l, y_l - ydelta)]
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_v_test_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4605
 *         (x_l - xdelta, y_l),
 *         (x_l, y_l - ydelta)]
 *     for x_t, y_t in test_list:             # <<<<<<<<<<<<<<
 *         point_discovery = <long>discovery_managed_raster.get(
 *             x_t, y_t)
 */
  __pyx_t_3 = __pyx_v_test_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 4605, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 4605, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 4605, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 4605, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_x_t, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y_t, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4607
 *     for x_t, y_t in test_list:
 *         point_discovery = <long>discovery_managed_raster.get(
 *             x_t, y_t)             # <<<<<<<<<<<<<<
 *         if (point_discovery != discovery_nodata and
 *                 point_discovery >= discovery and
 */
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_x_t); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4607, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_y_t); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4607, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":4606
 *         (x_l, y_l - ydelta)]
 *     for x_t, y_t in test_list:
 *         point_discovery = <long>discovery_managed_raster.get(             # <<<<<<<<<<<<<<
 *             x_t, y_t)
 *         if (point_discovery != discovery_nodata and
 */
    __pyx_v_point_discovery = ((long)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_discovery_managed_raster, __pyx_t_9, __pyx_t_10));

    /* "src/geoprocessing/routing/routing.pyx":4608
 *         point_discovery = <long>discovery_managed_raster.get(
 *             x_t, y_t)
 *         if (point_discovery != discovery_nodata and             # <<<<<<<<<<<<<<
 *                 point_discovery >= discovery and
 *                 point_discovery <= finish):
 */
    __pyx_t_12 = ((__pyx_v_point_discovery != __pyx_v_discovery_nodata) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_11 = __pyx_t_12;
      goto __pyx_L8_bool_binop_done;
    }

    /* "src/geoprocessing/routing/routing.pyx":4609
 *             x_t, y_t)
 *         if (point_discovery != discovery_nodata and
 *                 point_discovery >= discovery and             # <<<<<<<<<<<<<<
 *                 point_discovery <= finish):
 *             boundary_list.append((int(x_t), int(y_t)))
 */
    __pyx_t_12 = ((__pyx_v_point_discovery >= __pyx_v_discovery) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_11 = __pyx_t_12;
      goto __pyx_L8_bool_binop_done;
    }

    /* "src/geoprocessing/routing/routing.pyx":4610
 *         if (point_discovery != discovery_nodata and
 *                 point_discovery >= discovery and
 *                 point_discovery <= finish):             # <<<<<<<<<<<<<<
 *             boundary_list.append((int(x_t), int(y_t)))
 *             # there's only one diagonal to fill in so it's done here
 */
    __pyx_t_12 = ((__pyx_v_point_discovery <= __pyx_v_finish) != 0);
    __pyx_t_11 = __pyx_t_12;
    __pyx_L8_bool_binop_done:;

    /* "src/geoprocessing/routing/routing.pyx":4608
 *         point_discovery = <long>discovery_managed_raster.get(
 *             x_t, y_t)
 *         if (point_discovery != discovery_nodata and             # <<<<<<<<<<<<<<
 *                 point_discovery >= discovery and
 *                 point_discovery <= finish):
 */
    if (__pyx_t_11) {

      /* "src/geoprocessing/routing/routing.pyx":4611
 *                 point_discovery >= discovery and
 *                 point_discovery <= finish):
 *             boundary_list.append((int(x_t), int(y_t)))             # <<<<<<<<<<<<<<
 *             # there's only one diagonal to fill in so it's done here
 *             return
 */
      __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_v_x_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_v_y_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_5 = 0;
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_boundary_list, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 4611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4613
 *             boundary_list.append((int(x_t), int(y_t)))
 *             # there's only one diagonal to fill in so it's done here
 *             return             # <<<<<<<<<<<<<<
 * 
 *     # if there's a degenerate case then just add the xdelta,
 */
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "src/geoprocessing/routing/routing.pyx":4608
 *         point_discovery = <long>discovery_managed_raster.get(
 *             x_t, y_t)
 *         if (point_discovery != discovery_nodata and             # <<<<<<<<<<<<<<
 *                 point_discovery >= discovery and
 *                 point_discovery <= finish):
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4605
 *         (x_l - xdelta, y_l),
 *         (x_l, y_l - ydelta)]
 *     for x_t, y_t in test_list:             # <<<<<<<<<<<<<<
 *         point_discovery = <long>discovery_managed_raster.get(
 *             x_t, y_t)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4617
 *     # if there's a degenerate case then just add the xdelta,
 *     # it doesn't matter
 *     boundary_list.append(test_list[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_test_list, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_boundary_list, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 4617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4558
 * 
 * 
 * cdef void _diagonal_fill_step(             # <<<<<<<<<<<<<<
 *         int x_l, int y_l, int edge_dir,
 *         long discovery, long finish,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.routing._diagonal_fill_step", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_test_list);
  __Pyx_XDECREF(__pyx_v_x_t);
  __Pyx_XDECREF(__pyx_v_y_t);
  __Pyx_RefNannyFinishContext();
}

/* "src/geoprocessing/routing/routing.pyx":4620
 * 
 * 
 * cdef int _in_watershed(             # <<<<<<<<<<<<<<
 *         int x_l, int y_l, int direction_to_test, int discovery, int finish,
 *         int n_cols, int n_rows,
 */

static int __pyx_f_8ecoshard_13geoprocessing_7routing_7routing__in_watershed(int __pyx_v_x_l, int __pyx_v_y_l, int __pyx_v_direction_to_test, int __pyx_v_discovery, int __pyx_v_finish, int __pyx_v_n_cols, int __pyx_v_n_rows, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_discovery_managed_raster, long __pyx_v_discovery_nodata) {
  int __pyx_v_x_n;
  int __pyx_v_y_n;
  long __pyx_v_point_discovery;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("_in_watershed", 0);

  /* "src/geoprocessing/routing/routing.pyx":4643
 *         1 if in, 0 if out.
 *     """
 *     cdef int x_n = x_l + D8_XOFFSET[direction_to_test]             # <<<<<<<<<<<<<<
 *     cdef int y_n = y_l + D8_YOFFSET[direction_to_test]
 *     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 */
  __pyx_v_x_n = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_direction_to_test]));

  /* "src/geoprocessing/routing/routing.pyx":4644
 *     """
 *     cdef int x_n = x_l + D8_XOFFSET[direction_to_test]
 *     cdef int y_n = y_l + D8_YOFFSET[direction_to_test]             # <<<<<<<<<<<<<<
 *     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 *         return 0
 */
  __pyx_v_y_n = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_direction_to_test]));

  /* "src/geoprocessing/routing/routing.pyx":4645
 *     cdef int x_n = x_l + D8_XOFFSET[direction_to_test]
 *     cdef int y_n = y_l + D8_YOFFSET[direction_to_test]
 *     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *         return 0
 *     cdef long point_discovery = <long>discovery_managed_raster.get(x_n, y_n)
 */
  __pyx_t_2 = ((__pyx_v_x_n < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_y_n < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_x_n >= __pyx_v_n_cols) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_y_n >= __pyx_v_n_rows) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":4646
 *     cdef int y_n = y_l + D8_YOFFSET[direction_to_test]
 *     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 *         return 0             # <<<<<<<<<<<<<<
 *     cdef long point_discovery = <long>discovery_managed_raster.get(x_n, y_n)
 *     return (point_discovery != discovery_nodata and
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":4645
 *     cdef int x_n = x_l + D8_XOFFSET[direction_to_test]
 *     cdef int y_n = y_l + D8_YOFFSET[direction_to_test]
 *     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *         return 0
 *     cdef long point_discovery = <long>discovery_managed_raster.get(x_n, y_n)
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4647
 *     if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 *         return 0
 *     cdef long point_discovery = <long>discovery_managed_raster.get(x_n, y_n)             # <<<<<<<<<<<<<<
 *     return (point_discovery != discovery_nodata and
 *             point_discovery >= discovery and
 */
  __pyx_v_point_discovery = ((long)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_discovery_managed_raster, __pyx_v_x_n, __pyx_v_y_n));

  /* "src/geoprocessing/routing/routing.pyx":4648
 *         return 0
 *     cdef long point_discovery = <long>discovery_managed_raster.get(x_n, y_n)
 *     return (point_discovery != discovery_nodata and             # <<<<<<<<<<<<<<
 *             point_discovery >= discovery and
 *             point_discovery <= finish)
 */
  __pyx_t_1 = (__pyx_v_point_discovery != __pyx_v_discovery_nodata);
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L8_bool_binop_done;
  }

  /* "src/geoprocessing/routing/routing.pyx":4649
 *     cdef long point_discovery = <long>discovery_managed_raster.get(x_n, y_n)
 *     return (point_discovery != discovery_nodata and
 *             point_discovery >= discovery and             # <<<<<<<<<<<<<<
 *             point_discovery <= finish)
 * 
 */
  __pyx_t_1 = (__pyx_v_point_discovery >= __pyx_v_discovery);
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L8_bool_binop_done;
  }

  /* "src/geoprocessing/routing/routing.pyx":4650
 *     return (point_discovery != discovery_nodata and
 *             point_discovery >= discovery and
 *             point_discovery <= finish)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = (__pyx_v_point_discovery <= __pyx_v_finish);
  __pyx_t_3 = __pyx_t_1;
  __pyx_L8_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":4620
 * 
 * 
 * cdef int _in_watershed(             # <<<<<<<<<<<<<<
 *         int x_l, int y_l, int direction_to_test, int discovery, int finish,
 *         int n_cols, int n_rows,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":4653
 * 
 * 
 * cdef _calculate_stream_geometry(             # <<<<<<<<<<<<<<
 *         int x_l, int y_l, int upstream_d8_dir, geotransform, int n_cols,
 *         int n_rows, _ManagedRaster flow_accum_managed_raster,
 */

static PyObject *__pyx_f_8ecoshard_13geoprocessing_7routing_7routing__calculate_stream_geometry(int __pyx_v_x_l, int __pyx_v_y_l, int __pyx_v_upstream_d8_dir, PyObject *__pyx_v_geotransform, int __pyx_v_n_cols, int __pyx_v_n_rows, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_accum_managed_raster, struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *__pyx_v_flow_dir_managed_raster, int __pyx_v_flow_dir_nodata, int __pyx_v_flow_accum_threshold, PyObject *__pyx_v_coord_to_stream_ids) {
  int __pyx_v_x_1;
  int __pyx_v_y_1;
  int __pyx_v_x_n;
  int __pyx_v_y_n;
  int __pyx_v_d;
  int __pyx_v_d_n;
  int __pyx_v_stream_end;
  int __pyx_v_pixel_length;
  PyObject *__pyx_v_upstream_id_list = NULL;
  PyObject *__pyx_v_stream_line = NULL;
  PyObject *__pyx_v_x_p = NULL;
  PyObject *__pyx_v_y_p = NULL;
  int __pyx_v_next_dir;
  int __pyx_v_last_dir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_calculate_stream_geometry", 0);

  /* "src/geoprocessing/routing/routing.pyx":4695
 * 
 *     """
 *     cdef int x_1, y_1, x_n, y_n, d, d_n, stream_end=0, pixel_length             # <<<<<<<<<<<<<<
 * 
 *     if flow_accum_managed_raster.get(x_l, y_l) < flow_accum_threshold:
 */
  __pyx_v_stream_end = 0;

  /* "src/geoprocessing/routing/routing.pyx":4697
 *     cdef int x_1, y_1, x_n, y_n, d, d_n, stream_end=0, pixel_length
 * 
 *     if flow_accum_managed_raster.get(x_l, y_l) < flow_accum_threshold:             # <<<<<<<<<<<<<<
 *         return None
 *     upstream_id_list = []
 */
  __pyx_t_1 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_x_l, __pyx_v_y_l) < __pyx_v_flow_accum_threshold) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/routing.pyx":4698
 * 
 *     if flow_accum_managed_raster.get(x_l, y_l) < flow_accum_threshold:
 *         return None             # <<<<<<<<<<<<<<
 *     upstream_id_list = []
 *     # anchor the line at the downstream end
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":4697
 *     cdef int x_1, y_1, x_n, y_n, d, d_n, stream_end=0, pixel_length
 * 
 *     if flow_accum_managed_raster.get(x_l, y_l) < flow_accum_threshold:             # <<<<<<<<<<<<<<
 *         return None
 *     upstream_id_list = []
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4699
 *     if flow_accum_managed_raster.get(x_l, y_l) < flow_accum_threshold:
 *         return None
 *     upstream_id_list = []             # <<<<<<<<<<<<<<
 *     # anchor the line at the downstream end
 *     stream_line = ogr.Geometry(ogr.wkbLineString)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_upstream_id_list = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4701
 *     upstream_id_list = []
 *     # anchor the line at the downstream end
 *     stream_line = ogr.Geometry(ogr.wkbLineString)             # <<<<<<<<<<<<<<
 *     x_p, y_p = gdal.ApplyGeoTransform(geotransform, x_l+0.5, y_l+0.5)
 *     stream_line.AddPoint(x_p, y_p)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ogr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Geometry); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ogr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wkbLineString); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_stream_line = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4702
 *     # anchor the line at the downstream end
 *     stream_line = ogr.Geometry(ogr.wkbLineString)
 *     x_p, y_p = gdal.ApplyGeoTransform(geotransform, x_l+0.5, y_l+0.5)             # <<<<<<<<<<<<<<
 *     stream_line.AddPoint(x_p, y_p)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ApplyGeoTransform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_x_l + 0.5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_y_l + 0.5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_geotransform, __pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_geotransform, __pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_geotransform);
    __Pyx_GIVEREF(__pyx_v_geotransform);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_geotransform);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 4702, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_8);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_8 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_8)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_3), 2) < 0) __PYX_ERR(0, 4702, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 4702, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_x_p = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_y_p = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4703
 *     stream_line = ogr.Geometry(ogr.wkbLineString)
 *     x_p, y_p = gdal.ApplyGeoTransform(geotransform, x_l+0.5, y_l+0.5)
 *     stream_line.AddPoint(x_p, y_p)             # <<<<<<<<<<<<<<
 * 
 *     # initialize next_dir and last_dir so we only drop new points when
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_line, __pyx_n_s_AddPoint); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_x_p, __pyx_v_y_p};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4703, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_x_p, __pyx_v_y_p};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4703, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x_p);
    __Pyx_GIVEREF(__pyx_v_x_p);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_7, __pyx_v_x_p);
    __Pyx_INCREF(__pyx_v_y_p);
    __Pyx_GIVEREF(__pyx_v_y_p);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_7, __pyx_v_y_p);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4707
 *     # initialize next_dir and last_dir so we only drop new points when
 *     # the line changes direction
 *     cdef int next_dir = upstream_d8_dir             # <<<<<<<<<<<<<<
 *     cdef int last_dir = next_dir
 * 
 */
  __pyx_v_next_dir = __pyx_v_upstream_d8_dir;

  /* "src/geoprocessing/routing/routing.pyx":4708
 *     # the line changes direction
 *     cdef int next_dir = upstream_d8_dir
 *     cdef int last_dir = next_dir             # <<<<<<<<<<<<<<
 * 
 *     stream_end = 0
 */
  __pyx_v_last_dir = __pyx_v_next_dir;

  /* "src/geoprocessing/routing/routing.pyx":4710
 *     cdef int last_dir = next_dir
 * 
 *     stream_end = 0             # <<<<<<<<<<<<<<
 *     pixel_length = 0
 *     # initialize these for the compiler warniing
 */
  __pyx_v_stream_end = 0;

  /* "src/geoprocessing/routing/routing.pyx":4711
 * 
 *     stream_end = 0
 *     pixel_length = 0             # <<<<<<<<<<<<<<
 *     # initialize these for the compiler warniing
 *     x_1 = -1
 */
  __pyx_v_pixel_length = 0;

  /* "src/geoprocessing/routing/routing.pyx":4713
 *     pixel_length = 0
 *     # initialize these for the compiler warniing
 *     x_1 = -1             # <<<<<<<<<<<<<<
 *     y_1 = -1
 *     while not stream_end:
 */
  __pyx_v_x_1 = -1;

  /* "src/geoprocessing/routing/routing.pyx":4714
 *     # initialize these for the compiler warniing
 *     x_1 = -1
 *     y_1 = -1             # <<<<<<<<<<<<<<
 *     while not stream_end:
 *         # walk upstream
 */
  __pyx_v_y_1 = -1;

  /* "src/geoprocessing/routing/routing.pyx":4715
 *     x_1 = -1
 *     y_1 = -1
 *     while not stream_end:             # <<<<<<<<<<<<<<
 *         # walk upstream
 *         x_l += D8_XOFFSET[next_dir]
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_stream_end != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "src/geoprocessing/routing/routing.pyx":4717
 *     while not stream_end:
 *         # walk upstream
 *         x_l += D8_XOFFSET[next_dir]             # <<<<<<<<<<<<<<
 *         y_l += D8_YOFFSET[next_dir]
 * 
 */
    __pyx_v_x_l = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_next_dir]));

    /* "src/geoprocessing/routing/routing.pyx":4718
 *         # walk upstream
 *         x_l += D8_XOFFSET[next_dir]
 *         y_l += D8_YOFFSET[next_dir]             # <<<<<<<<<<<<<<
 * 
 *         stream_end = 1
 */
    __pyx_v_y_l = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_next_dir]));

    /* "src/geoprocessing/routing/routing.pyx":4720
 *         y_l += D8_YOFFSET[next_dir]
 * 
 *         stream_end = 1             # <<<<<<<<<<<<<<
 *         pixel_length += 1
 *         # do <= 1 in case there's a degenerate single point stream
 */
    __pyx_v_stream_end = 1;

    /* "src/geoprocessing/routing/routing.pyx":4721
 * 
 *         stream_end = 1
 *         pixel_length += 1             # <<<<<<<<<<<<<<
 *         # do <= 1 in case there's a degenerate single point stream
 *         if pixel_length <= 1:
 */
    __pyx_v_pixel_length = (__pyx_v_pixel_length + 1);

    /* "src/geoprocessing/routing/routing.pyx":4723
 *         pixel_length += 1
 *         # do <= 1 in case there's a degenerate single point stream
 *         if pixel_length <= 1:             # <<<<<<<<<<<<<<
 *             x_1 = x_l
 *             y_1 = y_l
 */
    __pyx_t_1 = ((__pyx_v_pixel_length <= 1) != 0);
    if (__pyx_t_1) {

      /* "src/geoprocessing/routing/routing.pyx":4724
 *         # do <= 1 in case there's a degenerate single point stream
 *         if pixel_length <= 1:
 *             x_1 = x_l             # <<<<<<<<<<<<<<
 *             y_1 = y_l
 * 
 */
      __pyx_v_x_1 = __pyx_v_x_l;

      /* "src/geoprocessing/routing/routing.pyx":4725
 *         if pixel_length <= 1:
 *             x_1 = x_l
 *             y_1 = y_l             # <<<<<<<<<<<<<<
 * 
 *         # check if we reached an upstream junction
 */
      __pyx_v_y_1 = __pyx_v_y_l;

      /* "src/geoprocessing/routing/routing.pyx":4723
 *         pixel_length += 1
 *         # do <= 1 in case there's a degenerate single point stream
 *         if pixel_length <= 1:             # <<<<<<<<<<<<<<
 *             x_1 = x_l
 *             y_1 = y_l
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4728
 * 
 *         # check if we reached an upstream junction
 *         if (x_l, y_l) in coord_to_stream_ids:             # <<<<<<<<<<<<<<
 *             upstream_id_list = coord_to_stream_ids[(x_l, y_l)]
 *             del coord_to_stream_ids[(x_l, y_l)]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
    __pyx_t_2 = 0;
    __pyx_t_8 = 0;
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_coord_to_stream_ids, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 4728, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = (__pyx_t_1 != 0);
    if (__pyx_t_10) {

      /* "src/geoprocessing/routing/routing.pyx":4729
 *         # check if we reached an upstream junction
 *         if (x_l, y_l) in coord_to_stream_ids:
 *             upstream_id_list = coord_to_stream_ids[(x_l, y_l)]             # <<<<<<<<<<<<<<
 *             del coord_to_stream_ids[(x_l, y_l)]
 *         elif <int>flow_accum_managed_raster.get(x_l, y_l) >= \
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
      __pyx_t_3 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_coord_to_stream_ids, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_upstream_id_list, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4730
 *         if (x_l, y_l) in coord_to_stream_ids:
 *             upstream_id_list = coord_to_stream_ids[(x_l, y_l)]
 *             del coord_to_stream_ids[(x_l, y_l)]             # <<<<<<<<<<<<<<
 *         elif <int>flow_accum_managed_raster.get(x_l, y_l) >= \
 *                 flow_accum_threshold:
 */
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __pyx_t_8 = 0;
      __pyx_t_2 = 0;
      if (unlikely(PyObject_DelItem(__pyx_v_coord_to_stream_ids, __pyx_t_3) < 0)) __PYX_ERR(0, 4730, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4728
 * 
 *         # check if we reached an upstream junction
 *         if (x_l, y_l) in coord_to_stream_ids:             # <<<<<<<<<<<<<<
 *             upstream_id_list = coord_to_stream_ids[(x_l, y_l)]
 *             del coord_to_stream_ids[(x_l, y_l)]
 */
      goto __pyx_L9;
    }

    /* "src/geoprocessing/routing/routing.pyx":4731
 *             upstream_id_list = coord_to_stream_ids[(x_l, y_l)]
 *             del coord_to_stream_ids[(x_l, y_l)]
 *         elif <int>flow_accum_managed_raster.get(x_l, y_l) >= \             # <<<<<<<<<<<<<<
 *                 flow_accum_threshold:
 *             # check to see if we can take a step upstream
 */
    __pyx_t_10 = ((((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_x_l, __pyx_v_y_l)) >= __pyx_v_flow_accum_threshold) != 0);
    if (__pyx_t_10) {

      /* "src/geoprocessing/routing/routing.pyx":4734
 *                 flow_accum_threshold:
 *             # check to see if we can take a step upstream
 *             for d in range(8):             # <<<<<<<<<<<<<<
 *                 x_n = x_l + D8_XOFFSET[d]
 *                 y_n = y_l + D8_YOFFSET[d]
 */
      for (__pyx_t_7 = 0; __pyx_t_7 < 8; __pyx_t_7+=1) {
        __pyx_v_d = __pyx_t_7;

        /* "src/geoprocessing/routing/routing.pyx":4735
 *             # check to see if we can take a step upstream
 *             for d in range(8):
 *                 x_n = x_l + D8_XOFFSET[d]             # <<<<<<<<<<<<<<
 *                 y_n = y_l + D8_YOFFSET[d]
 * 
 */
        __pyx_v_x_n = (__pyx_v_x_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET[__pyx_v_d]));

        /* "src/geoprocessing/routing/routing.pyx":4736
 *             for d in range(8):
 *                 x_n = x_l + D8_XOFFSET[d]
 *                 y_n = y_l + D8_YOFFSET[d]             # <<<<<<<<<<<<<<
 * 
 *                 # check out of bounds
 */
        __pyx_v_y_n = (__pyx_v_y_l + (__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET[__pyx_v_d]));

        /* "src/geoprocessing/routing/routing.pyx":4739
 * 
 *                 # check out of bounds
 *                 if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_1 = ((__pyx_v_x_n < 0) != 0);
        if (!__pyx_t_1) {
        } else {
          __pyx_t_10 = __pyx_t_1;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_1 = ((__pyx_v_y_n < 0) != 0);
        if (!__pyx_t_1) {
        } else {
          __pyx_t_10 = __pyx_t_1;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_1 = ((__pyx_v_x_n >= __pyx_v_n_cols) != 0);
        if (!__pyx_t_1) {
        } else {
          __pyx_t_10 = __pyx_t_1;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_1 = ((__pyx_v_y_n >= __pyx_v_n_rows) != 0);
        __pyx_t_10 = __pyx_t_1;
        __pyx_L13_bool_binop_done:;
        if (__pyx_t_10) {

          /* "src/geoprocessing/routing/routing.pyx":4740
 *                 # check out of bounds
 *                 if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # check for nodata
 */
          goto __pyx_L10_continue;

          /* "src/geoprocessing/routing/routing.pyx":4739
 * 
 *                 # check out of bounds
 *                 if x_n < 0 or y_n < 0 or x_n >= n_cols or y_n >= n_rows:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4743
 * 
 *                 # check for nodata
 *                 d_n = <int>flow_dir_managed_raster.get(x_n, y_n)             # <<<<<<<<<<<<<<
 *                 if d_n == flow_dir_nodata:
 *                     continue
 */
        __pyx_v_d_n = ((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_x_n, __pyx_v_y_n));

        /* "src/geoprocessing/routing/routing.pyx":4744
 *                 # check for nodata
 *                 d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                 if d_n == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_10 = ((__pyx_v_d_n == __pyx_v_flow_dir_nodata) != 0);
        if (__pyx_t_10) {

          /* "src/geoprocessing/routing/routing.pyx":4745
 *                 d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                 if d_n == flow_dir_nodata:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # check if there's an upstream inflow pixel with flow accum
 */
          goto __pyx_L10_continue;

          /* "src/geoprocessing/routing/routing.pyx":4744
 *                 # check for nodata
 *                 d_n = <int>flow_dir_managed_raster.get(x_n, y_n)
 *                 if d_n == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/routing.pyx":4749
 *                 # check if there's an upstream inflow pixel with flow accum
 *                 # greater than the threshold
 *                 if D8_REVERSE_DIRECTION[d] == d_n and (             # <<<<<<<<<<<<<<
 *                         <int>flow_accum_managed_raster.get(
 *                          x_n, y_n) > flow_accum_threshold):
 */
        __pyx_t_1 = (((__pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION[__pyx_v_d]) == __pyx_v_d_n) != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_10 = __pyx_t_1;
          goto __pyx_L19_bool_binop_done;
        }

        /* "src/geoprocessing/routing/routing.pyx":4751
 *                 if D8_REVERSE_DIRECTION[d] == d_n and (
 *                         <int>flow_accum_managed_raster.get(
 *                          x_n, y_n) > flow_accum_threshold):             # <<<<<<<<<<<<<<
 *                     stream_end = 0
 *                     next_dir = d
 */
        __pyx_t_1 = ((((int)__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get(__pyx_v_flow_accum_managed_raster, __pyx_v_x_n, __pyx_v_y_n)) > __pyx_v_flow_accum_threshold) != 0);
        __pyx_t_10 = __pyx_t_1;
        __pyx_L19_bool_binop_done:;

        /* "src/geoprocessing/routing/routing.pyx":4749
 *                 # check if there's an upstream inflow pixel with flow accum
 *                 # greater than the threshold
 *                 if D8_REVERSE_DIRECTION[d] == d_n and (             # <<<<<<<<<<<<<<
 *                         <int>flow_accum_managed_raster.get(
 *                          x_n, y_n) > flow_accum_threshold):
 */
        if (__pyx_t_10) {

          /* "src/geoprocessing/routing/routing.pyx":4752
 *                         <int>flow_accum_managed_raster.get(
 *                          x_n, y_n) > flow_accum_threshold):
 *                     stream_end = 0             # <<<<<<<<<<<<<<
 *                     next_dir = d
 *                     break
 */
          __pyx_v_stream_end = 0;

          /* "src/geoprocessing/routing/routing.pyx":4753
 *                          x_n, y_n) > flow_accum_threshold):
 *                     stream_end = 0
 *                     next_dir = d             # <<<<<<<<<<<<<<
 *                     break
 *         else:
 */
          __pyx_v_next_dir = __pyx_v_d;

          /* "src/geoprocessing/routing/routing.pyx":4754
 *                     stream_end = 0
 *                     next_dir = d
 *                     break             # <<<<<<<<<<<<<<
 *         else:
 *             # terminated because of flow accumulation too small, so back up
 */
          goto __pyx_L11_break;

          /* "src/geoprocessing/routing/routing.pyx":4749
 *                 # check if there's an upstream inflow pixel with flow accum
 *                 # greater than the threshold
 *                 if D8_REVERSE_DIRECTION[d] == d_n and (             # <<<<<<<<<<<<<<
 *                         <int>flow_accum_managed_raster.get(
 *                          x_n, y_n) > flow_accum_threshold):
 */
        }
        __pyx_L10_continue:;
      }
      __pyx_L11_break:;

      /* "src/geoprocessing/routing/routing.pyx":4731
 *             upstream_id_list = coord_to_stream_ids[(x_l, y_l)]
 *             del coord_to_stream_ids[(x_l, y_l)]
 *         elif <int>flow_accum_managed_raster.get(x_l, y_l) >= \             # <<<<<<<<<<<<<<
 *                 flow_accum_threshold:
 *             # check to see if we can take a step upstream
 */
      goto __pyx_L9;
    }

    /* "src/geoprocessing/routing/routing.pyx":4758
 *             # terminated because of flow accumulation too small, so back up
 *             # one pixel
 *             pixel_length -= 1             # <<<<<<<<<<<<<<
 * 
 *         # drop a point on the line if direction changed or last point
 */
    /*else*/ {
      __pyx_v_pixel_length = (__pyx_v_pixel_length - 1);
    }
    __pyx_L9:;

    /* "src/geoprocessing/routing/routing.pyx":4761
 * 
 *         # drop a point on the line if direction changed or last point
 *         if last_dir != next_dir or stream_end:             # <<<<<<<<<<<<<<
 *             x_p, y_p = gdal.ApplyGeoTransform(
 *                 geotransform, x_l+0.5, y_l+0.5)
 */
    __pyx_t_1 = ((__pyx_v_last_dir != __pyx_v_next_dir) != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_10 = __pyx_t_1;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_stream_end != 0);
    __pyx_t_10 = __pyx_t_1;
    __pyx_L22_bool_binop_done:;
    if (__pyx_t_10) {

      /* "src/geoprocessing/routing/routing.pyx":4762
 *         # drop a point on the line if direction changed or last point
 *         if last_dir != next_dir or stream_end:
 *             x_p, y_p = gdal.ApplyGeoTransform(             # <<<<<<<<<<<<<<
 *                 geotransform, x_l+0.5, y_l+0.5)
 *             stream_line.AddPoint(x_p, y_p)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ApplyGeoTransform); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4763
 *         if last_dir != next_dir or stream_end:
 *             x_p, y_p = gdal.ApplyGeoTransform(
 *                 geotransform, x_l+0.5, y_l+0.5)             # <<<<<<<<<<<<<<
 *             stream_line.AddPoint(x_p, y_p)
 *             last_dir = next_dir
 */
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v_x_l + 0.5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyFloat_FromDouble((__pyx_v_y_l + 0.5)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_geotransform, __pyx_t_2, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_geotransform, __pyx_t_2, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_geotransform);
        __Pyx_GIVEREF(__pyx_v_geotransform);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_geotransform);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, __pyx_t_5);
        __pyx_t_2 = 0;
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 4762, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext;
        index = 0; __pyx_t_8 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_8)) goto __pyx_L24_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L24_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_5), 2) < 0) __PYX_ERR(0, 4762, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L25_unpacking_done;
        __pyx_L24_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 4762, __pyx_L1_error)
        __pyx_L25_unpacking_done:;
      }

      /* "src/geoprocessing/routing/routing.pyx":4762
 *         # drop a point on the line if direction changed or last point
 *         if last_dir != next_dir or stream_end:
 *             x_p, y_p = gdal.ApplyGeoTransform(             # <<<<<<<<<<<<<<
 *                 geotransform, x_l+0.5, y_l+0.5)
 *             stream_line.AddPoint(x_p, y_p)
 */
      __Pyx_DECREF_SET(__pyx_v_x_p, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_DECREF_SET(__pyx_v_y_p, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4764
 *             x_p, y_p = gdal.ApplyGeoTransform(
 *                 geotransform, x_l+0.5, y_l+0.5)
 *             stream_line.AddPoint(x_p, y_p)             # <<<<<<<<<<<<<<
 *             last_dir = next_dir
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_line, __pyx_n_s_AddPoint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_x_p, __pyx_v_y_p};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4764, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_x_p, __pyx_v_y_p};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4764, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x_p);
        __Pyx_GIVEREF(__pyx_v_x_p);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_x_p);
        __Pyx_INCREF(__pyx_v_y_p);
        __Pyx_GIVEREF(__pyx_v_y_p);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_y_p);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4765
 *                 geotransform, x_l+0.5, y_l+0.5)
 *             stream_line.AddPoint(x_p, y_p)
 *             last_dir = next_dir             # <<<<<<<<<<<<<<
 * 
 *     if pixel_length == 0:
 */
      __pyx_v_last_dir = __pyx_v_next_dir;

      /* "src/geoprocessing/routing/routing.pyx":4761
 * 
 *         # drop a point on the line if direction changed or last point
 *         if last_dir != next_dir or stream_end:             # <<<<<<<<<<<<<<
 *             x_p, y_p = gdal.ApplyGeoTransform(
 *                 geotransform, x_l+0.5, y_l+0.5)
 */
    }
  }

  /* "src/geoprocessing/routing/routing.pyx":4767
 *             last_dir = next_dir
 * 
 *     if pixel_length == 0:             # <<<<<<<<<<<<<<
 *         return None
 *     return x_l, y_l, x_1, y_1, upstream_id_list, stream_line
 */
  __pyx_t_10 = ((__pyx_v_pixel_length == 0) != 0);
  if (__pyx_t_10) {

    /* "src/geoprocessing/routing/routing.pyx":4768
 * 
 *     if pixel_length == 0:
 *         return None             # <<<<<<<<<<<<<<
 *     return x_l, y_l, x_1, y_1, upstream_id_list, stream_line
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/geoprocessing/routing/routing.pyx":4767
 *             last_dir = next_dir
 * 
 *     if pixel_length == 0:             # <<<<<<<<<<<<<<
 *         return None
 *     return x_l, y_l, x_1, y_1, upstream_id_list, stream_line
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4769
 *     if pixel_length == 0:
 *         return None
 *     return x_l, y_l, x_1, y_1, upstream_id_list, stream_line             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_x_l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_y_l); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_x_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_y_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_8);
  __Pyx_INCREF(__pyx_v_upstream_id_list);
  __Pyx_GIVEREF(__pyx_v_upstream_id_list);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_upstream_id_list);
  __Pyx_INCREF(__pyx_v_stream_line);
  __Pyx_GIVEREF(__pyx_v_stream_line);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_stream_line);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/routing.pyx":4653
 * 
 * 
 * cdef _calculate_stream_geometry(             # <<<<<<<<<<<<<<
 *         int x_l, int y_l, int upstream_d8_dir, geotransform, int n_cols,
 *         int n_rows, _ManagedRaster flow_accum_managed_raster,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._calculate_stream_geometry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_upstream_id_list);
  __Pyx_XDECREF(__pyx_v_stream_line);
  __Pyx_XDECREF(__pyx_v_x_p);
  __Pyx_XDECREF(__pyx_v_y_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/routing.pyx":4772
 * 
 * 
 * def _delete_feature(             # <<<<<<<<<<<<<<
 *         stream_feature, stream_layer, upstream_to_downstream_id,
 *         downstream_to_upstream_ids):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_31_delete_feature(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_30_delete_feature[] = "Helper for Mahler extraction to delete all references to a stream.\n\n    Args:\n        stream_feature (ogr.Feature): feature to delete\n        stream_layer (ogr.Layer): layer to delete the feature\n        upstream_to_downstream_id (dict): can be referenced by FID and should\n            remove all instances of stream from this dict\n        downstream_to_upstream_ids (dict): stream feature contained in\n            the values of this dict and should remove all instances of stream\n            from this dict\n\n    Returns:\n        None.\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_31_delete_feature = {"_delete_feature", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_31_delete_feature, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_30_delete_feature};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_31_delete_feature(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream_feature = 0;
  PyObject *__pyx_v_stream_layer = 0;
  PyObject *__pyx_v_upstream_to_downstream_id = 0;
  PyObject *__pyx_v_downstream_to_upstream_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_delete_feature (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream_feature,&__pyx_n_s_stream_layer,&__pyx_n_s_upstream_to_downstream_id,&__pyx_n_s_downstream_to_upstream_ids,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream_feature)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream_layer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_delete_feature", 1, 4, 4, 1); __PYX_ERR(0, 4772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upstream_to_downstream_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_delete_feature", 1, 4, 4, 2); __PYX_ERR(0, 4772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_downstream_to_upstream_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_delete_feature", 1, 4, 4, 3); __PYX_ERR(0, 4772, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_delete_feature") < 0)) __PYX_ERR(0, 4772, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_stream_feature = values[0];
    __pyx_v_stream_layer = values[1];
    __pyx_v_upstream_to_downstream_id = values[2];
    __pyx_v_downstream_to_upstream_ids = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_delete_feature", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._delete_feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_30_delete_feature(__pyx_self, __pyx_v_stream_feature, __pyx_v_stream_layer, __pyx_v_upstream_to_downstream_id, __pyx_v_downstream_to_upstream_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_7routing_30_delete_feature(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_stream_feature, PyObject *__pyx_v_stream_layer, PyObject *__pyx_v_upstream_to_downstream_id, PyObject *__pyx_v_downstream_to_upstream_ids) {
  PyObject *__pyx_v_stream_fid = NULL;
  PyObject *__pyx_v_downstream_fid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_delete_feature", 0);

  /* "src/geoprocessing/routing/routing.pyx":4789
 *         None.
 *     """
 *     stream_fid = stream_feature.GetFID()             # <<<<<<<<<<<<<<
 *     if stream_fid in upstream_to_downstream_id:
 *         downstream_fid = upstream_to_downstream_id[
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stream_fid = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4790
 *     """
 *     stream_fid = stream_feature.GetFID()
 *     if stream_fid in upstream_to_downstream_id:             # <<<<<<<<<<<<<<
 *         downstream_fid = upstream_to_downstream_id[
 *             stream_fid]
 */
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_stream_fid, __pyx_v_upstream_to_downstream_id, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4790, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":4791
 *     stream_fid = stream_feature.GetFID()
 *     if stream_fid in upstream_to_downstream_id:
 *         downstream_fid = upstream_to_downstream_id[             # <<<<<<<<<<<<<<
 *             stream_fid]
 *         del upstream_to_downstream_id[stream_fid]
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_upstream_to_downstream_id, __pyx_v_stream_fid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_downstream_fid = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/routing.pyx":4793
 *         downstream_fid = upstream_to_downstream_id[
 *             stream_fid]
 *         del upstream_to_downstream_id[stream_fid]             # <<<<<<<<<<<<<<
 *         if downstream_fid in downstream_to_upstream_ids:
 *             downstream_to_upstream_ids[
 */
    if (unlikely(PyObject_DelItem(__pyx_v_upstream_to_downstream_id, __pyx_v_stream_fid) < 0)) __PYX_ERR(0, 4793, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":4794
 *             stream_fid]
 *         del upstream_to_downstream_id[stream_fid]
 *         if downstream_fid in downstream_to_upstream_ids:             # <<<<<<<<<<<<<<
 *             downstream_to_upstream_ids[
 *                 downstream_fid].remove(stream_fid)
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_downstream_fid, __pyx_v_downstream_to_upstream_ids, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 4794, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "src/geoprocessing/routing/routing.pyx":4795
 *         del upstream_to_downstream_id[stream_fid]
 *         if downstream_fid in downstream_to_upstream_ids:
 *             downstream_to_upstream_ids[             # <<<<<<<<<<<<<<
 *                 downstream_fid].remove(stream_fid)
 *     if stream_fid in downstream_to_upstream_ids:
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_downstream_fid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "src/geoprocessing/routing/routing.pyx":4796
 *         if downstream_fid in downstream_to_upstream_ids:
 *             downstream_to_upstream_ids[
 *                 downstream_fid].remove(stream_fid)             # <<<<<<<<<<<<<<
 *     if stream_fid in downstream_to_upstream_ids:
 *         del downstream_to_upstream_ids[
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_stream_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_stream_fid);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/geoprocessing/routing/routing.pyx":4794
 *             stream_fid]
 *         del upstream_to_downstream_id[stream_fid]
 *         if downstream_fid in downstream_to_upstream_ids:             # <<<<<<<<<<<<<<
 *             downstream_to_upstream_ids[
 *                 downstream_fid].remove(stream_fid)
 */
    }

    /* "src/geoprocessing/routing/routing.pyx":4790
 *     """
 *     stream_fid = stream_feature.GetFID()
 *     if stream_fid in upstream_to_downstream_id:             # <<<<<<<<<<<<<<
 *         downstream_fid = upstream_to_downstream_id[
 *             stream_fid]
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4797
 *             downstream_to_upstream_ids[
 *                 downstream_fid].remove(stream_fid)
 *     if stream_fid in downstream_to_upstream_ids:             # <<<<<<<<<<<<<<
 *         del downstream_to_upstream_ids[
 *             stream_fid]
 */
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_stream_fid, __pyx_v_downstream_to_upstream_ids, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4797, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/routing.pyx":4799
 *     if stream_fid in downstream_to_upstream_ids:
 *         del downstream_to_upstream_ids[
 *             stream_fid]             # <<<<<<<<<<<<<<
 *     stream_layer.DeleteFeature(stream_fid)
 */
    if (unlikely(PyObject_DelItem(__pyx_v_downstream_to_upstream_ids, __pyx_v_stream_fid) < 0)) __PYX_ERR(0, 4798, __pyx_L1_error)

    /* "src/geoprocessing/routing/routing.pyx":4797
 *             downstream_to_upstream_ids[
 *                 downstream_fid].remove(stream_fid)
 *     if stream_fid in downstream_to_upstream_ids:             # <<<<<<<<<<<<<<
 *         del downstream_to_upstream_ids[
 *             stream_fid]
 */
  }

  /* "src/geoprocessing/routing/routing.pyx":4800
 *         del downstream_to_upstream_ids[
 *             stream_fid]
 *     stream_layer.DeleteFeature(stream_fid)             # <<<<<<<<<<<<<<
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream_layer, __pyx_n_s_DeleteFeature); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_stream_fid) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_stream_fid);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4772
 * 
 * 
 * def _delete_feature(             # <<<<<<<<<<<<<<
 *         stream_feature, stream_layer, upstream_to_downstream_id,
 *         downstream_to_upstream_ids):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.routing._delete_feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stream_fid);
  __Pyx_XDECREF(__pyx_v_downstream_fid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":933
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":936
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":938
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":939
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":945
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L3_error)

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":946
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 946, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 947, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":951
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 951, __pyx_L3_error)

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":952
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 952, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 953, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":957
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 957, __pyx_L3_error)

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":958
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 958, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":959
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 959, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":981
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":996
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1006
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1013
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1020
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster __pyx_vtable_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster;

static PyObject *__pyx_tp_new_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)o);
  p->__pyx_vtab = __pyx_vtabptr_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster;
  new((void*)&(p->dirty_blocks)) std::set<int> ();
  p->raster_path = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster(PyObject *o) {
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *p = (struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->dirty_blocks);
  Py_CLEAR(p->raster_path);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster[] = {
  {"close", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_5close, METH_NOARGS, __pyx_doc_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_4close},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecoshard.geoprocessing.routing.routing._ManagedRaster", /*tp_name*/
  sizeof(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_routing(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_routing},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "routing",
    __pyx_k_Provides_PyGeprocessing_Routing, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_100_0_complete, __pyx_k_100_0_complete, sizeof(__pyx_k_100_0_complete), 0, 1, 0, 0},
  {&__pyx_kp_u_1f, __pyx_k_1f, sizeof(__pyx_k_1f), 0, 1, 0, 0},
  {&__pyx_kp_u_1f_complete, __pyx_k_1f_complete, sizeof(__pyx_k_1f_complete), 0, 1, 0, 0},
  {&__pyx_n_s_AddGeometry, __pyx_k_AddGeometry, sizeof(__pyx_k_AddGeometry), 0, 0, 1, 1},
  {&__pyx_n_s_AddPoint, __pyx_k_AddPoint, sizeof(__pyx_k_AddPoint), 0, 0, 1, 1},
  {&__pyx_n_s_ApplyGeoTransform, __pyx_k_ApplyGeoTransform, sizeof(__pyx_k_ApplyGeoTransform), 0, 0, 1, 1},
  {&__pyx_kp_u_BIGTIFF_YES, __pyx_k_BIGTIFF_YES, sizeof(__pyx_k_BIGTIFF_YES), 0, 1, 0, 0},
  {&__pyx_kp_u_BLOCKXSIZE_d, __pyx_k_BLOCKXSIZE_d, sizeof(__pyx_k_BLOCKXSIZE_d), 0, 1, 0, 0},
  {&__pyx_kp_u_BLOCKYSIZE_d, __pyx_k_BLOCKYSIZE_d, sizeof(__pyx_k_BLOCKYSIZE_d), 0, 1, 0, 0},
  {&__pyx_kp_u_COMPRESS_LZW, __pyx_k_COMPRESS_LZW, sizeof(__pyx_k_COMPRESS_LZW), 0, 1, 0, 0},
  {&__pyx_n_s_CommitTransaction, __pyx_k_CommitTransaction, sizeof(__pyx_k_CommitTransaction), 0, 0, 1, 1},
  {&__pyx_n_s_Create, __pyx_k_Create, sizeof(__pyx_k_Create), 0, 0, 1, 1},
  {&__pyx_n_s_CreateCopy, __pyx_k_CreateCopy, sizeof(__pyx_k_CreateCopy), 0, 0, 1, 1},
  {&__pyx_n_s_CreateFeature, __pyx_k_CreateFeature, sizeof(__pyx_k_CreateFeature), 0, 0, 1, 1},
  {&__pyx_n_s_CreateField, __pyx_k_CreateField, sizeof(__pyx_k_CreateField), 0, 0, 1, 1},
  {&__pyx_n_s_CreateGeometryFromWkb, __pyx_k_CreateGeometryFromWkb, sizeof(__pyx_k_CreateGeometryFromWkb), 0, 0, 1, 1},
  {&__pyx_n_s_CreateLayer, __pyx_k_CreateLayer, sizeof(__pyx_k_CreateLayer), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT, __pyx_k_DEFAULT_GTIFF_CREATION_TUPLE_OPT, sizeof(__pyx_k_DEFAULT_GTIFF_CREATION_TUPLE_OPT), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG, __pyx_k_DEFAULT_OSR_AXIS_MAPPING_STRATEG, sizeof(__pyx_k_DEFAULT_OSR_AXIS_MAPPING_STRATEG), 0, 0, 1, 1},
  {&__pyx_n_s_DeleteFeature, __pyx_k_DeleteFeature, sizeof(__pyx_k_DeleteFeature), 0, 0, 1, 1},
  {&__pyx_n_s_DeleteField, __pyx_k_DeleteField, sizeof(__pyx_k_DeleteField), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_Block_size_is_not_a_power, __pyx_k_Error_Block_size_is_not_a_power, sizeof(__pyx_k_Error_Block_size_is_not_a_power), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_band_ID_s_is_not_a_valid_b, __pyx_k_Error_band_ID_s_is_not_a_valid_b, sizeof(__pyx_k_Error_band_ID_s_is_not_a_valid_b), 0, 1, 0, 0},
  {&__pyx_n_s_ExportToWkb, __pyx_k_ExportToWkb, sizeof(__pyx_k_ExportToWkb), 0, 0, 1, 1},
  {&__pyx_n_s_Feature, __pyx_k_Feature, sizeof(__pyx_k_Feature), 0, 0, 1, 1},
  {&__pyx_n_s_FieldDefn, __pyx_k_FieldDefn, sizeof(__pyx_k_FieldDefn), 0, 0, 1, 1},
  {&__pyx_n_s_FindFieldIndex, __pyx_k_FindFieldIndex, sizeof(__pyx_k_FindFieldIndex), 0, 0, 1, 1},
  {&__pyx_n_s_FlushCache, __pyx_k_FlushCache, sizeof(__pyx_k_FlushCache), 0, 0, 1, 1},
  {&__pyx_n_s_GA_Update, __pyx_k_GA_Update, sizeof(__pyx_k_GA_Update), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Byte, __pyx_k_GDT_Byte, sizeof(__pyx_k_GDT_Byte), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Float64, __pyx_k_GDT_Float64, sizeof(__pyx_k_GDT_Float64), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Int32, __pyx_k_GDT_Int32, sizeof(__pyx_k_GDT_Int32), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Unknown, __pyx_k_GDT_Unknown, sizeof(__pyx_k_GDT_Unknown), 0, 0, 1, 1},
  {&__pyx_n_u_GPKG, __pyx_k_GPKG, sizeof(__pyx_k_GPKG), 0, 1, 0, 1},
  {&__pyx_n_u_GTiff, __pyx_k_GTiff, sizeof(__pyx_k_GTiff), 0, 1, 0, 1},
  {&__pyx_n_s_Geometry, __pyx_k_Geometry, sizeof(__pyx_k_Geometry), 0, 0, 1, 1},
  {&__pyx_n_s_GetDriverByName, __pyx_k_GetDriverByName, sizeof(__pyx_k_GetDriverByName), 0, 0, 1, 1},
  {&__pyx_n_s_GetFID, __pyx_k_GetFID, sizeof(__pyx_k_GetFID), 0, 0, 1, 1},
  {&__pyx_n_s_GetFeature, __pyx_k_GetFeature, sizeof(__pyx_k_GetFeature), 0, 0, 1, 1},
  {&__pyx_n_s_GetField, __pyx_k_GetField, sizeof(__pyx_k_GetField), 0, 0, 1, 1},
  {&__pyx_n_s_GetGeometryRef, __pyx_k_GetGeometryRef, sizeof(__pyx_k_GetGeometryRef), 0, 0, 1, 1},
  {&__pyx_n_s_GetLayer, __pyx_k_GetLayer, sizeof(__pyx_k_GetLayer), 0, 0, 1, 1},
  {&__pyx_n_s_GetLayerDefn, __pyx_k_GetLayerDefn, sizeof(__pyx_k_GetLayerDefn), 0, 0, 1, 1},
  {&__pyx_n_s_GetRasterBand, __pyx_k_GetRasterBand, sizeof(__pyx_k_GetRasterBand), 0, 0, 1, 1},
  {&__pyx_n_u_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 1, 0, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportFromWkt, __pyx_k_ImportFromWkt, sizeof(__pyx_k_ImportFromWkt), 0, 0, 1, 1},
  {&__pyx_n_s_LOGGER, __pyx_k_LOGGER, sizeof(__pyx_k_LOGGER), 0, 0, 1, 1},
  {&__pyx_n_s_ManagedRaster, __pyx_k_ManagedRaster, sizeof(__pyx_k_ManagedRaster), 0, 0, 1, 1},
  {&__pyx_n_s_OFTInteger, __pyx_k_OFTInteger, sizeof(__pyx_k_OFTInteger), 0, 0, 1, 1},
  {&__pyx_n_s_OFTInteger64, __pyx_k_OFTInteger64, sizeof(__pyx_k_OFTInteger64), 0, 0, 1, 1},
  {&__pyx_n_s_OFTReal, __pyx_k_OFTReal, sizeof(__pyx_k_OFTReal), 0, 0, 1, 1},
  {&__pyx_n_s_OF_RASTER, __pyx_k_OF_RASTER, sizeof(__pyx_k_OF_RASTER), 0, 0, 1, 1},
  {&__pyx_n_s_OF_VECTOR, __pyx_k_OF_VECTOR, sizeof(__pyx_k_OF_VECTOR), 0, 0, 1, 1},
  {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {&__pyx_n_s_OpenEx, __pyx_k_OpenEx, sizeof(__pyx_k_OpenEx), 0, 0, 1, 1},
  {&__pyx_n_s_ReadAsArray, __pyx_k_ReadAsArray, sizeof(__pyx_k_ReadAsArray), 0, 0, 1, 1},
  {&__pyx_n_s_ResetReading, __pyx_k_ResetReading, sizeof(__pyx_k_ResetReading), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_u_SPARSE_OK_TRUE, __pyx_k_SPARSE_OK_TRUE, sizeof(__pyx_k_SPARSE_OK_TRUE), 0, 1, 0, 0},
  {&__pyx_n_s_SetAttributeFilter, __pyx_k_SetAttributeFilter, sizeof(__pyx_k_SetAttributeFilter), 0, 0, 1, 1},
  {&__pyx_n_s_SetAxisMappingStrategy, __pyx_k_SetAxisMappingStrategy, sizeof(__pyx_k_SetAxisMappingStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_SetFeature, __pyx_k_SetFeature, sizeof(__pyx_k_SetFeature), 0, 0, 1, 1},
  {&__pyx_n_s_SetField, __pyx_k_SetField, sizeof(__pyx_k_SetField), 0, 0, 1, 1},
  {&__pyx_n_s_SetGeometry, __pyx_k_SetGeometry, sizeof(__pyx_k_SetGeometry), 0, 0, 1, 1},
  {&__pyx_n_s_SpatialReference, __pyx_k_SpatialReference, sizeof(__pyx_k_SpatialReference), 0, 0, 1, 1},
  {&__pyx_n_s_StartTransaction, __pyx_k_StartTransaction, sizeof(__pyx_k_StartTransaction), 0, 0, 1, 1},
  {&__pyx_kp_u_TILED_YES, __pyx_k_TILED_YES, sizeof(__pyx_k_TILED_YES), 0, 1, 0, 0},
  {&__pyx_kp_u_This_exception_is_happeningin_C, __pyx_k_This_exception_is_happeningin_C, sizeof(__pyx_k_This_exception_is_happeningin_C), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Union, __pyx_k_Union, sizeof(__pyx_k_Union), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WriteArray, __pyx_k_WriteArray, sizeof(__pyx_k_WriteArray), 0, 0, 1, 1},
  {&__pyx_kp_u_Y_m_d__H__M__S, __pyx_k_Y_m_d__H__M__S, sizeof(__pyx_k_Y_m_d__H__M__S), 0, 1, 0, 0},
  {&__pyx_n_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 1},
  {&__pyx_n_s_all_defined, __pyx_k_all_defined, sizeof(__pyx_k_all_defined), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_autotune_flow_accumulation, __pyx_k_autotune_flow_accumulation, sizeof(__pyx_k_autotune_flow_accumulation), 0, 0, 1, 1},
  {&__pyx_n_s_backtrace_set, __pyx_k_backtrace_set, sizeof(__pyx_k_backtrace_set), 0, 0, 1, 1},
  {&__pyx_kp_u_bak_tif, __pyx_k_bak_tif, sizeof(__pyx_k_bak_tif), 0, 1, 0, 0},
  {&__pyx_n_s_band_id, __pyx_k_band_id, sizeof(__pyx_k_band_id), 0, 0, 1, 1},
  {&__pyx_n_s_base_datatype, __pyx_k_base_datatype, sizeof(__pyx_k_base_datatype), 0, 0, 1, 1},
  {&__pyx_n_s_base_feature_count, __pyx_k_base_feature_count, sizeof(__pyx_k_base_feature_count), 0, 0, 1, 1},
  {&__pyx_n_s_base_nodata, __pyx_k_base_nodata, sizeof(__pyx_k_base_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_basename, __pyx_k_basename, sizeof(__pyx_k_basename), 0, 0, 1, 1},
  {&__pyx_n_s_block_array, __pyx_k_block_array, sizeof(__pyx_k_block_array), 0, 0, 1, 1},
  {&__pyx_n_s_block_offsets, __pyx_k_block_offsets, sizeof(__pyx_k_block_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_block_offsets_list, __pyx_k_block_offsets_list, sizeof(__pyx_k_block_offsets_list), 0, 0, 1, 1},
  {&__pyx_n_u_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 1, 0, 1},
  {&__pyx_n_s_boundary_list, __pyx_k_boundary_list, sizeof(__pyx_k_boundary_list), 0, 0, 1, 1},
  {&__pyx_n_s_boundary_x, __pyx_k_boundary_x, sizeof(__pyx_k_boundary_x), 0, 0, 1, 1},
  {&__pyx_n_s_boundary_y, __pyx_k_boundary_y, sizeof(__pyx_k_boundary_y), 0, 0, 1, 1},
  {&__pyx_n_s_build_discovery_finish_rasters, __pyx_k_build_discovery_finish_rasters, sizeof(__pyx_k_build_discovery_finish_rasters), 0, 0, 1, 1},
  {&__pyx_n_u_calculate_subwatershed_boundary, __pyx_k_calculate_subwatershed_boundary, sizeof(__pyx_k_calculate_subwatershed_boundary), 0, 1, 0, 1},
  {&__pyx_kp_u_calculate_subwatershed_boundary_2, __pyx_k_calculate_subwatershed_boundary_2, sizeof(__pyx_k_calculate_subwatershed_boundary_2), 0, 1, 0, 0},
  {&__pyx_kp_u_calculate_subwatershed_boundary_3, __pyx_k_calculate_subwatershed_boundary_3, sizeof(__pyx_k_calculate_subwatershed_boundary_3), 0, 1, 0, 0},
  {&__pyx_n_s_calculate_subwatershed_boundary_4, __pyx_k_calculate_subwatershed_boundary_4, sizeof(__pyx_k_calculate_subwatershed_boundary_4), 0, 0, 1, 1},
  {&__pyx_n_s_cell_to_test, __pyx_k_cell_to_test, sizeof(__pyx_k_cell_to_test), 0, 0, 1, 1},
  {&__pyx_n_s_center_val, __pyx_k_center_val, sizeof(__pyx_k_center_val), 0, 0, 1, 1},
  {&__pyx_n_s_channel_band, __pyx_k_channel_band, sizeof(__pyx_k_channel_band), 0, 0, 1, 1},
  {&__pyx_n_s_channel_buffer_array, __pyx_k_channel_buffer_array, sizeof(__pyx_k_channel_buffer_array), 0, 0, 1, 1},
  {&__pyx_n_s_channel_managed_raster, __pyx_k_channel_managed_raster, sizeof(__pyx_k_channel_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_channel_raster, __pyx_k_channel_raster, sizeof(__pyx_k_channel_raster), 0, 0, 1, 1},
  {&__pyx_n_s_channel_raster_path_band, __pyx_k_channel_raster_path_band, sizeof(__pyx_k_channel_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_compatable_dem_raster_path_band, __pyx_k_compatable_dem_raster_path_band, sizeof(__pyx_k_compatable_dem_raster_path_band), 0, 0, 1, 1},
  {&__pyx_kp_u_compatable_dem_tif, __pyx_k_compatable_dem_tif, sizeof(__pyx_k_compatable_dem_tif), 0, 1, 0, 0},
  {&__pyx_kp_u_compatible_dem_complete, __pyx_k_compatible_dem_complete, sizeof(__pyx_k_compatible_dem_complete), 0, 1, 0, 0},
  {&__pyx_kp_u_complete, __pyx_k_complete, sizeof(__pyx_k_complete), 0, 1, 0, 0},
  {&__pyx_kp_u_complete_2, __pyx_k_complete_2, sizeof(__pyx_k_complete_2), 0, 1, 0, 0},
  {&__pyx_n_s_compressed_flow_dir, __pyx_k_compressed_flow_dir, sizeof(__pyx_k_compressed_flow_dir), 0, 0, 1, 1},
  {&__pyx_n_s_compressed_integer_slopes, __pyx_k_compressed_integer_slopes, sizeof(__pyx_k_compressed_integer_slopes), 0, 0, 1, 1},
  {&__pyx_n_s_compressed_upstream_flow_dir, __pyx_k_compressed_upstream_flow_dir, sizeof(__pyx_k_compressed_upstream_flow_dir), 0, 0, 1, 1},
  {&__pyx_n_s_connected_fid, __pyx_k_connected_fid, sizeof(__pyx_k_connected_fid), 0, 0, 1, 1},
  {&__pyx_n_s_connected_fids, __pyx_k_connected_fids, sizeof(__pyx_k_connected_fids), 0, 0, 1, 1},
  {&__pyx_n_s_connected_upstream_fids, __pyx_k_connected_upstream_fids, sizeof(__pyx_k_connected_upstream_fids), 0, 0, 1, 1},
  {&__pyx_n_s_coord_to_stream_ids, __pyx_k_coord_to_stream_ids, sizeof(__pyx_k_coord_to_stream_ids), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_copyfile, __pyx_k_copyfile, sizeof(__pyx_k_copyfile), 0, 0, 1, 1},
  {&__pyx_kp_u_could_not_open, __pyx_k_could_not_open, sizeof(__pyx_k_could_not_open), 0, 1, 0, 0},
  {&__pyx_kp_u_couldn_t_remove_temp_dir, __pyx_k_couldn_t_remove_temp_dir, sizeof(__pyx_k_couldn_t_remove_temp_dir), 0, 1, 0, 0},
  {&__pyx_kp_u_creating_target_flow_accum_raste, __pyx_k_creating_target_flow_accum_raste, sizeof(__pyx_k_creating_target_flow_accum_raste), 0, 1, 0, 0},
  {&__pyx_kp_u_creating_visited_raster_layer, __pyx_k_creating_visited_raster_layer, sizeof(__pyx_k_creating_visited_raster_layer), 0, 1, 0, 0},
  {&__pyx_n_s_current_pixel, __pyx_k_current_pixel, sizeof(__pyx_k_current_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_u_d8, __pyx_k_d8, sizeof(__pyx_k_d8), 0, 1, 0, 1},
  {&__pyx_n_s_d8_flow_dir_managed_raster, __pyx_k_d8_flow_dir_managed_raster, sizeof(__pyx_k_d8_flow_dir_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_d8_flow_dir_mode, __pyx_k_d8_flow_dir_mode, sizeof(__pyx_k_d8_flow_dir_mode), 0, 0, 1, 1},
  {&__pyx_n_s_d8_flow_dir_raster_path_band, __pyx_k_d8_flow_dir_raster_path_band, sizeof(__pyx_k_d8_flow_dir_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_d_n, __pyx_k_d_n, sizeof(__pyx_k_d_n), 0, 0, 1, 1},
  {&__pyx_n_u_datatype, __pyx_k_datatype, sizeof(__pyx_k_datatype), 0, 1, 0, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_delete_feature, __pyx_k_delete_feature, sizeof(__pyx_k_delete_feature), 0, 0, 1, 1},
  {&__pyx_n_s_deleted_set, __pyx_k_deleted_set, sizeof(__pyx_k_deleted_set), 0, 0, 1, 1},
  {&__pyx_n_s_delta_x, __pyx_k_delta_x, sizeof(__pyx_k_delta_x), 0, 0, 1, 1},
  {&__pyx_n_s_delta_y, __pyx_k_delta_y, sizeof(__pyx_k_delta_y), 0, 0, 1, 1},
  {&__pyx_n_s_dem_band, __pyx_k_dem_band, sizeof(__pyx_k_dem_band), 0, 0, 1, 1},
  {&__pyx_n_s_dem_block_xsize, __pyx_k_dem_block_xsize, sizeof(__pyx_k_dem_block_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_dem_block_ysize, __pyx_k_dem_block_ysize, sizeof(__pyx_k_dem_block_ysize), 0, 0, 1, 1},
  {&__pyx_n_s_dem_buffer_array, __pyx_k_dem_buffer_array, sizeof(__pyx_k_dem_buffer_array), 0, 0, 1, 1},
  {&__pyx_kp_u_dem_is_not_a_power_of_2_creating, __pyx_k_dem_is_not_a_power_of_2_creating, sizeof(__pyx_k_dem_is_not_a_power_of_2_creating), 0, 1, 0, 0},
  {&__pyx_n_s_dem_managed_raster, __pyx_k_dem_managed_raster, sizeof(__pyx_k_dem_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_dem_nodata, __pyx_k_dem_nodata, sizeof(__pyx_k_dem_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_dem_raster, __pyx_k_dem_raster, sizeof(__pyx_k_dem_raster), 0, 0, 1, 1},
  {&__pyx_n_s_dem_raster_info, __pyx_k_dem_raster_info, sizeof(__pyx_k_dem_raster_info), 0, 0, 1, 1},
  {&__pyx_n_s_dem_raster_path_band, __pyx_k_dem_raster_path_band, sizeof(__pyx_k_dem_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_detect_lowest_drain_and_sink, __pyx_k_detect_lowest_drain_and_sink, sizeof(__pyx_k_detect_lowest_drain_and_sink), 0, 0, 1, 1},
  {&__pyx_n_s_detect_outlets, __pyx_k_detect_outlets, sizeof(__pyx_k_detect_outlets), 0, 0, 1, 1},
  {&__pyx_n_s_diagonal_nodata, __pyx_k_diagonal_nodata, sizeof(__pyx_k_diagonal_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_direction_drain_queue, __pyx_k_direction_drain_queue, sizeof(__pyx_k_direction_drain_queue), 0, 0, 1, 1},
  {&__pyx_n_s_dirname, __pyx_k_dirname, sizeof(__pyx_k_dirname), 0, 0, 1, 1},
  {&__pyx_n_s_discovery, __pyx_k_discovery, sizeof(__pyx_k_discovery), 0, 0, 1, 1},
  {&__pyx_n_s_discovery_count, __pyx_k_discovery_count, sizeof(__pyx_k_discovery_count), 0, 0, 1, 1},
  {&__pyx_n_s_discovery_info, __pyx_k_discovery_info, sizeof(__pyx_k_discovery_info), 0, 0, 1, 1},
  {&__pyx_n_s_discovery_managed_raster, __pyx_k_discovery_managed_raster, sizeof(__pyx_k_discovery_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_discovery_nodata, __pyx_k_discovery_nodata, sizeof(__pyx_k_discovery_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_discovery_srs, __pyx_k_discovery_srs, sizeof(__pyx_k_discovery_srs), 0, 0, 1, 1},
  {&__pyx_n_s_discovery_stack, __pyx_k_discovery_stack, sizeof(__pyx_k_discovery_stack), 0, 0, 1, 1},
  {&__pyx_kp_u_discovery_tif, __pyx_k_discovery_tif, sizeof(__pyx_k_discovery_tif), 0, 1, 0, 0},
  {&__pyx_kp_u_discovery_time_processing, __pyx_k_discovery_time_processing, sizeof(__pyx_k_discovery_time_processing), 0, 1, 0, 0},
  {&__pyx_n_s_discovery_time_raster_path, __pyx_k_discovery_time_raster_path, sizeof(__pyx_k_discovery_time_raster_path), 0, 0, 1, 1},
  {&__pyx_n_u_dist_to_channel_mfd_work_dir, __pyx_k_dist_to_channel_mfd_work_dir, sizeof(__pyx_k_dist_to_channel_mfd_work_dir), 0, 1, 0, 1},
  {&__pyx_n_s_distance_drain_queue, __pyx_k_distance_drain_queue, sizeof(__pyx_k_distance_drain_queue), 0, 0, 1, 1},
  {&__pyx_n_s_distance_nodata, __pyx_k_distance_nodata, sizeof(__pyx_k_distance_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_distance_to_channel_d8, __pyx_k_distance_to_channel_d8, sizeof(__pyx_k_distance_to_channel_d8), 0, 0, 1, 1},
  {&__pyx_n_s_distance_to_channel_managed_rast, __pyx_k_distance_to_channel_managed_rast, sizeof(__pyx_k_distance_to_channel_managed_rast), 0, 0, 1, 1},
  {&__pyx_n_s_distance_to_channel_mfd, __pyx_k_distance_to_channel_mfd, sizeof(__pyx_k_distance_to_channel_mfd), 0, 0, 1, 1},
  {&__pyx_n_s_distance_to_channel_stack, __pyx_k_distance_to_channel_stack, sizeof(__pyx_k_distance_to_channel_stack), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_downhill_neighbor, __pyx_k_downhill_neighbor, sizeof(__pyx_k_downhill_neighbor), 0, 0, 1, 1},
  {&__pyx_n_s_downhill_slope_array, __pyx_k_downhill_slope_array, sizeof(__pyx_k_downhill_slope_array), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_dem, __pyx_k_downstream_dem, sizeof(__pyx_k_downstream_dem), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_feature, __pyx_k_downstream_feature, sizeof(__pyx_k_downstream_feature), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_fid, __pyx_k_downstream_fid, sizeof(__pyx_k_downstream_fid), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_geom, __pyx_k_downstream_geom, sizeof(__pyx_k_downstream_geom), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_order, __pyx_k_downstream_order, sizeof(__pyx_k_downstream_order), 0, 0, 1, 1},
  {&__pyx_n_s_downstream_to_upstream_ids, __pyx_k_downstream_to_upstream_ids, sizeof(__pyx_k_downstream_to_upstream_ids), 0, 0, 1, 1},
  {&__pyx_n_s_drain_distance, __pyx_k_drain_distance, sizeof(__pyx_k_drain_distance), 0, 0, 1, 1},
  {&__pyx_n_s_drain_pixel, __pyx_k_drain_pixel, sizeof(__pyx_k_drain_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_drain_queue, __pyx_k_drain_queue, sizeof(__pyx_k_drain_queue), 0, 0, 1, 1},
  {&__pyx_n_s_drain_search_queue, __pyx_k_drain_search_queue, sizeof(__pyx_k_drain_search_queue), 0, 0, 1, 1},
  {&__pyx_n_s_drop_distance, __pyx_k_drop_distance, sizeof(__pyx_k_drop_distance), 0, 0, 1, 1},
  {&__pyx_n_u_drop_distance, __pyx_k_drop_distance, sizeof(__pyx_k_drop_distance), 0, 1, 0, 1},
  {&__pyx_n_s_drop_distance_collection, __pyx_k_drop_distance_collection, sizeof(__pyx_k_drop_distance_collection), 0, 0, 1, 1},
  {&__pyx_n_u_ds_fa, __pyx_k_ds_fa, sizeof(__pyx_k_ds_fa), 0, 1, 0, 1},
  {&__pyx_n_s_ds_x, __pyx_k_ds_x, sizeof(__pyx_k_ds_x), 0, 0, 1, 1},
  {&__pyx_n_u_ds_x, __pyx_k_ds_x, sizeof(__pyx_k_ds_x), 0, 1, 0, 1},
  {&__pyx_n_s_ds_x_1, __pyx_k_ds_x_1, sizeof(__pyx_k_ds_x_1), 0, 0, 1, 1},
  {&__pyx_n_u_ds_x_1, __pyx_k_ds_x_1, sizeof(__pyx_k_ds_x_1), 0, 1, 0, 1},
  {&__pyx_n_s_ds_y, __pyx_k_ds_y, sizeof(__pyx_k_ds_y), 0, 0, 1, 1},
  {&__pyx_n_u_ds_y, __pyx_k_ds_y, sizeof(__pyx_k_ds_y), 0, 1, 0, 1},
  {&__pyx_n_s_ds_y_1, __pyx_k_ds_y_1, sizeof(__pyx_k_ds_y_1), 0, 0, 1, 1},
  {&__pyx_n_u_ds_y_1, __pyx_k_ds_y_1, sizeof(__pyx_k_ds_y_1), 0, 1, 0, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_ecoshard_geoprocessing_routing_r, __pyx_k_ecoshard_geoprocessing_routing_r, sizeof(__pyx_k_ecoshard_geoprocessing_routing_r), 0, 0, 1, 1},
  {&__pyx_n_s_edge_dir, __pyx_k_edge_dir, sizeof(__pyx_k_edge_dir), 0, 0, 1, 1},
  {&__pyx_n_s_edge_side, __pyx_k_edge_side, sizeof(__pyx_k_edge_side), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_equal_var, __pyx_k_equal_var, sizeof(__pyx_k_equal_var), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_kp_u_exceeded_max_pixel_fill_count_wh, __pyx_k_exceeded_max_pixel_fill_count_wh, sizeof(__pyx_k_exceeded_max_pixel_fill_count_wh), 0, 1, 0, 0},
  {&__pyx_kp_u_exceeded_max_pixel_fill_count_wh_2, __pyx_k_exceeded_max_pixel_fill_count_wh_2, sizeof(__pyx_k_exceeded_max_pixel_fill_count_wh_2), 0, 1, 0, 0},
  {&__pyx_n_s_exception, __pyx_k_exception, sizeof(__pyx_k_exception), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_kp_u_exists_removing_before_creating, __pyx_k_exists_removing_before_creating, sizeof(__pyx_k_exists_removing_before_creating), 0, 1, 0, 0},
  {&__pyx_kp_u_expected_flow_dir_type_of_either, __pyx_k_expected_flow_dir_type_of_either, sizeof(__pyx_k_expected_flow_dir_type_of_either), 0, 1, 0, 0},
  {&__pyx_n_s_extract_strahler_streams_d8, __pyx_k_extract_strahler_streams_d8, sizeof(__pyx_k_extract_strahler_streams_d8), 0, 0, 1, 1},
  {&__pyx_kp_u_extract_strahler_streams_d8_all, __pyx_k_extract_strahler_streams_d8_all, sizeof(__pyx_k_extract_strahler_streams_d8_all), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_com, __pyx_k_extract_strahler_streams_d8_com, sizeof(__pyx_k_extract_strahler_streams_d8_com), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_det, __pyx_k_extract_strahler_streams_d8_det, sizeof(__pyx_k_extract_strahler_streams_d8_det), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_det_2, __pyx_k_extract_strahler_streams_d8_det_2, sizeof(__pyx_k_extract_strahler_streams_d8_det_2), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_dra, __pyx_k_extract_strahler_streams_d8_dra, sizeof(__pyx_k_extract_strahler_streams_d8_dra), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_dra_2, __pyx_k_extract_strahler_streams_d8_dra_2, sizeof(__pyx_k_extract_strahler_streams_d8_dra_2), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_fin, __pyx_k_extract_strahler_streams_d8_fin, sizeof(__pyx_k_extract_strahler_streams_d8_fin), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_fin_2, __pyx_k_extract_strahler_streams_d8_fin_2, sizeof(__pyx_k_extract_strahler_streams_d8_fin_2), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_fin_3, __pyx_k_extract_strahler_streams_d8_fin_3, sizeof(__pyx_k_extract_strahler_streams_d8_fin_3), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_flo, __pyx_k_extract_strahler_streams_d8_flo, sizeof(__pyx_k_extract_strahler_streams_d8_flo), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_flo_2, __pyx_k_extract_strahler_streams_d8_flo_2, sizeof(__pyx_k_extract_strahler_streams_d8_flo_2), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_see, __pyx_k_extract_strahler_streams_d8_see, sizeof(__pyx_k_extract_strahler_streams_d8_see), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_sta, __pyx_k_extract_strahler_streams_d8_sta, sizeof(__pyx_k_extract_strahler_streams_d8_sta), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_str, __pyx_k_extract_strahler_streams_d8_str, sizeof(__pyx_k_extract_strahler_streams_d8_str), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_str_2, __pyx_k_extract_strahler_streams_d8_str_2, sizeof(__pyx_k_extract_strahler_streams_d8_str_2), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_str_3, __pyx_k_extract_strahler_streams_d8_str_3, sizeof(__pyx_k_extract_strahler_streams_d8_str_3), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_strahler_streams_d8_str_4, __pyx_k_extract_strahler_streams_d8_str_4, sizeof(__pyx_k_extract_strahler_streams_d8_str_4), 0, 1, 0, 0},
  {&__pyx_n_s_extract_streams_mfd, __pyx_k_extract_streams_mfd, sizeof(__pyx_k_extract_streams_mfd), 0, 0, 1, 1},
  {&__pyx_n_s_feature_id, __pyx_k_feature_id, sizeof(__pyx_k_feature_id), 0, 0, 1, 1},
  {&__pyx_n_s_fid, __pyx_k_fid, sizeof(__pyx_k_fid), 0, 0, 1, 1},
  {&__pyx_n_s_fid_to_order, __pyx_k_fid_to_order, sizeof(__pyx_k_fid_to_order), 0, 0, 1, 1},
  {&__pyx_n_s_fill_height, __pyx_k_fill_height, sizeof(__pyx_k_fill_height), 0, 0, 1, 1},
  {&__pyx_kp_u_fill_pits, __pyx_k_fill_pits, sizeof(__pyx_k_fill_pits), 0, 1, 0, 0},
  {&__pyx_n_s_fill_pits_2, __pyx_k_fill_pits_2, sizeof(__pyx_k_fill_pits_2), 0, 0, 1, 1},
  {&__pyx_kp_u_fill_pits__s, __pyx_k_fill_pits__s, sizeof(__pyx_k_fill_pits__s), 0, 1, 0, 0},
  {&__pyx_kp_u_fill_pits_complete, __pyx_k_fill_pits_complete, sizeof(__pyx_k_fill_pits_complete), 0, 1, 0, 0},
  {&__pyx_n_s_fill_queue, __pyx_k_fill_queue, sizeof(__pyx_k_fill_queue), 0, 0, 1, 1},
  {&__pyx_n_s_fill_value_list, __pyx_k_fill_value_list, sizeof(__pyx_k_fill_value_list), 0, 0, 1, 1},
  {&__pyx_n_s_filled_dem_band, __pyx_k_filled_dem_band, sizeof(__pyx_k_filled_dem_band), 0, 0, 1, 1},
  {&__pyx_n_s_filled_dem_managed_raster, __pyx_k_filled_dem_managed_raster, sizeof(__pyx_k_filled_dem_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_filled_dem_raster, __pyx_k_filled_dem_raster, sizeof(__pyx_k_filled_dem_raster), 0, 0, 1, 1},
  {&__pyx_kp_u_filter_out_incomplete_divergent, __pyx_k_filter_out_incomplete_divergent, sizeof(__pyx_k_filter_out_incomplete_divergent), 0, 1, 0, 0},
  {&__pyx_n_s_finish, __pyx_k_finish, sizeof(__pyx_k_finish), 0, 0, 1, 1},
  {&__pyx_n_s_finish_coordinate, __pyx_k_finish_coordinate, sizeof(__pyx_k_finish_coordinate), 0, 0, 1, 1},
  {&__pyx_n_s_finish_managed_raster, __pyx_k_finish_managed_raster, sizeof(__pyx_k_finish_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_finish_stack, __pyx_k_finish_stack, sizeof(__pyx_k_finish_stack), 0, 0, 1, 1},
  {&__pyx_kp_u_finish_tif, __pyx_k_finish_tif, sizeof(__pyx_k_finish_tif), 0, 1, 0, 0},
  {&__pyx_n_s_finish_time_raster_path, __pyx_k_finish_time_raster_path, sizeof(__pyx_k_finish_time_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_flat_region_mask_managed_raster, __pyx_k_flat_region_mask_managed_raster, sizeof(__pyx_k_flat_region_mask_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flat_region_mask_path, __pyx_k_flat_region_mask_path, sizeof(__pyx_k_flat_region_mask_path), 0, 0, 1, 1},
  {&__pyx_kp_u_flat_region_mask_tif, __pyx_k_flat_region_mask_tif, sizeof(__pyx_k_flat_region_mask_tif), 0, 1, 0, 0},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accum, __pyx_k_flow_accum, sizeof(__pyx_k_flow_accum), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accum_info, __pyx_k_flow_accum_info, sizeof(__pyx_k_flow_accum_info), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accum_managed_raster, __pyx_k_flow_accum_managed_raster, sizeof(__pyx_k_flow_accum_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accum_mr, __pyx_k_flow_accum_mr, sizeof(__pyx_k_flow_accum_mr), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accum_nodata, __pyx_k_flow_accum_nodata, sizeof(__pyx_k_flow_accum_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accum_raster_path_band, __pyx_k_flow_accum_raster_path_band, sizeof(__pyx_k_flow_accum_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accumulation_d8, __pyx_k_flow_accumulation_d8, sizeof(__pyx_k_flow_accumulation_d8), 0, 0, 1, 1},
  {&__pyx_n_s_flow_accumulation_mfd, __pyx_k_flow_accumulation_mfd, sizeof(__pyx_k_flow_accumulation_mfd), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir, __pyx_k_flow_dir, sizeof(__pyx_k_flow_dir), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_band, __pyx_k_flow_dir_band, sizeof(__pyx_k_flow_dir_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_block, __pyx_k_flow_dir_block, sizeof(__pyx_k_flow_dir_block), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_buffer_array, __pyx_k_flow_dir_buffer_array, sizeof(__pyx_k_flow_dir_buffer_array), 0, 0, 1, 1},
  {&__pyx_kp_u_flow_dir_d8, __pyx_k_flow_dir_d8, sizeof(__pyx_k_flow_dir_d8), 0, 1, 0, 0},
  {&__pyx_n_s_flow_dir_d8_2, __pyx_k_flow_dir_d8_2, sizeof(__pyx_k_flow_dir_d8_2), 0, 0, 1, 1},
  {&__pyx_kp_u_flow_dir_d8__s, __pyx_k_flow_dir_d8__s, sizeof(__pyx_k_flow_dir_d8__s), 0, 1, 0, 0},
  {&__pyx_kp_u_flow_dir_d8_complete, __pyx_k_flow_dir_d8_complete, sizeof(__pyx_k_flow_dir_d8_complete), 0, 1, 0, 0},
  {&__pyx_n_s_flow_dir_d8_managed_raster, __pyx_k_flow_dir_d8_managed_raster, sizeof(__pyx_k_flow_dir_d8_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_d8_raster_path_band, __pyx_k_flow_dir_d8_raster_path_band, sizeof(__pyx_k_flow_dir_d8_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_info, __pyx_k_flow_dir_info, sizeof(__pyx_k_flow_dir_info), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_managed_raster, __pyx_k_flow_dir_managed_raster, sizeof(__pyx_k_flow_dir_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd, __pyx_k_flow_dir_mfd, sizeof(__pyx_k_flow_dir_mfd), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_band, __pyx_k_flow_dir_mfd_band, sizeof(__pyx_k_flow_dir_mfd_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_buffer_array, __pyx_k_flow_dir_mfd_buffer_array, sizeof(__pyx_k_flow_dir_mfd_buffer_array), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_managed_raster, __pyx_k_flow_dir_mfd_managed_raster, sizeof(__pyx_k_flow_dir_mfd_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_mr, __pyx_k_flow_dir_mfd_mr, sizeof(__pyx_k_flow_dir_mfd_mr), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_path_band, __pyx_k_flow_dir_mfd_path_band, sizeof(__pyx_k_flow_dir_mfd_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_raster, __pyx_k_flow_dir_mfd_raster, sizeof(__pyx_k_flow_dir_mfd_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_mfd_raster_path_band, __pyx_k_flow_dir_mfd_raster_path_band, sizeof(__pyx_k_flow_dir_mfd_raster_path_band), 0, 0, 1, 1},
  {&__pyx_kp_u_flow_dir_multiple_flow_dir__s, __pyx_k_flow_dir_multiple_flow_dir__s, sizeof(__pyx_k_flow_dir_multiple_flow_dir__s), 0, 1, 0, 0},
  {&__pyx_n_s_flow_dir_n, __pyx_k_flow_dir_n, sizeof(__pyx_k_flow_dir_n), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_nodata, __pyx_k_flow_dir_nodata, sizeof(__pyx_k_flow_dir_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_raster, __pyx_k_flow_dir_raster, sizeof(__pyx_k_flow_dir_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_raster_info, __pyx_k_flow_dir_raster_info, sizeof(__pyx_k_flow_dir_raster_info), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_raster_path_band, __pyx_k_flow_dir_raster_path_band, sizeof(__pyx_k_flow_dir_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_srs, __pyx_k_flow_dir_srs, sizeof(__pyx_k_flow_dir_srs), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_type, __pyx_k_flow_dir_type, sizeof(__pyx_k_flow_dir_type), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_weight, __pyx_k_flow_dir_weight, sizeof(__pyx_k_flow_dir_weight), 0, 0, 1, 1},
  {&__pyx_n_s_flow_nodata, __pyx_k_flow_nodata, sizeof(__pyx_k_flow_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_flow_pixel, __pyx_k_flow_pixel, sizeof(__pyx_k_flow_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_flow_threshold, __pyx_k_flow_threshold, sizeof(__pyx_k_flow_threshold), 0, 0, 1, 1},
  {&__pyx_kp_u_for_writing, __pyx_k_for_writing, sizeof(__pyx_k_for_writing), 0, 1, 0, 0},
  {&__pyx_n_s_g0, __pyx_k_g0, sizeof(__pyx_k_g0), 0, 0, 1, 1},
  {&__pyx_n_s_g1, __pyx_k_g1, sizeof(__pyx_k_g1), 0, 0, 1, 1},
  {&__pyx_n_s_g2, __pyx_k_g2, sizeof(__pyx_k_g2), 0, 0, 1, 1},
  {&__pyx_n_s_g3, __pyx_k_g3, sizeof(__pyx_k_g3), 0, 0, 1, 1},
  {&__pyx_n_s_g4, __pyx_k_g4, sizeof(__pyx_k_g4), 0, 0, 1, 1},
  {&__pyx_n_s_g5, __pyx_k_g5, sizeof(__pyx_k_g5), 0, 0, 1, 1},
  {&__pyx_n_s_gdal, __pyx_k_gdal, sizeof(__pyx_k_gdal), 0, 0, 1, 1},
  {&__pyx_n_s_generate_read_bounds, __pyx_k_generate_read_bounds, sizeof(__pyx_k_generate_read_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_geoprocessing_core, __pyx_k_geoprocessing_core, sizeof(__pyx_k_geoprocessing_core), 0, 0, 1, 1},
  {&__pyx_n_s_geotransform, __pyx_k_geotransform, sizeof(__pyx_k_geotransform), 0, 0, 1, 1},
  {&__pyx_n_u_geotransform, __pyx_k_geotransform, sizeof(__pyx_k_geotransform), 0, 1, 0, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_raster_info, __pyx_k_get_raster_info, sizeof(__pyx_k_get_raster_info), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gmtime, __pyx_k_gmtime, sizeof(__pyx_k_gmtime), 0, 0, 1, 1},
  {&__pyx_n_s_gpkg_driver, __pyx_k_gpkg_driver, sizeof(__pyx_k_gpkg_driver), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_u_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 1, 0, 1},
  {&__pyx_n_s_i_n, __pyx_k_i_n, sizeof(__pyx_k_i_n), 0, 0, 1, 1},
  {&__pyx_n_s_i_sn, __pyx_k_i_sn, sizeof(__pyx_k_i_sn), 0, 0, 1, 1},
  {&__pyx_n_s_i_upstream_flow, __pyx_k_i_upstream_flow, sizeof(__pyx_k_i_upstream_flow), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_u_in_ManagedRaster_flush, __pyx_k_in_ManagedRaster_flush, sizeof(__pyx_k_in_ManagedRaster_flush), 0, 1, 0, 0},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_kp_u_infer_sinks, __pyx_k_infer_sinks, sizeof(__pyx_k_infer_sinks), 0, 1, 0, 0},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_int_max_steps_per_watershed, __pyx_k_int_max_steps_per_watershed, sizeof(__pyx_k_int_max_steps_per_watershed), 0, 0, 1, 1},
  {&__pyx_n_s_is_a_channel, __pyx_k_is_a_channel, sizeof(__pyx_k_is_a_channel), 0, 0, 1, 1},
  {&__pyx_n_s_is_drain, __pyx_k_is_drain, sizeof(__pyx_k_is_drain), 0, 0, 1, 1},
  {&__pyx_n_s_is_outlet, __pyx_k_is_outlet, sizeof(__pyx_k_is_outlet), 0, 0, 1, 1},
  {&__pyx_n_s_is_raster_path_band_formatted, __pyx_k_is_raster_path_band_formatted, sizeof(__pyx_k_is_raster_path_band_formatted), 0, 0, 1, 1},
  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_iterblocks, __pyx_k_iterblocks, sizeof(__pyx_k_iterblocks), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_u_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 1, 0, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_joined_line, __pyx_k_joined_line, sizeof(__pyx_k_joined_line), 0, 0, 1, 1},
  {&__pyx_n_s_largest_block, __pyx_k_largest_block, sizeof(__pyx_k_largest_block), 0, 0, 1, 1},
  {&__pyx_n_s_largest_slope, __pyx_k_largest_slope, sizeof(__pyx_k_largest_slope), 0, 0, 1, 1},
  {&__pyx_n_s_largest_slope_dir, __pyx_k_largest_slope_dir, sizeof(__pyx_k_largest_slope_dir), 0, 0, 1, 1},
  {&__pyx_n_s_last_flow_dir, __pyx_k_last_flow_dir, sizeof(__pyx_k_last_flow_dir), 0, 0, 1, 1},
  {&__pyx_n_s_last_log_time, __pyx_k_last_log_time, sizeof(__pyx_k_last_log_time), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_left_in, __pyx_k_left_in, sizeof(__pyx_k_left_in), 0, 0, 1, 1},
  {&__pyx_n_s_linemerge, __pyx_k_linemerge, sizeof(__pyx_k_linemerge), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_local_flow_accum, __pyx_k_local_flow_accum, sizeof(__pyx_k_local_flow_accum), 0, 0, 1, 1},
  {&__pyx_n_s_log2, __pyx_k_log2, sizeof(__pyx_k_log2), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_lowest_drain_height, __pyx_k_lowest_drain_height, sizeof(__pyx_k_lowest_drain_height), 0, 0, 1, 1},
  {&__pyx_n_s_lowest_sink_height, __pyx_k_lowest_sink_height, sizeof(__pyx_k_lowest_sink_height), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_makedirs, __pyx_k_makedirs, sizeof(__pyx_k_makedirs), 0, 0, 1, 1},
  {&__pyx_n_s_mask_nodata, __pyx_k_mask_nodata, sizeof(__pyx_k_mask_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_pixel_fill_count, __pyx_k_max_pixel_fill_count, sizeof(__pyx_k_max_pixel_fill_count), 0, 0, 1, 1},
  {&__pyx_n_s_max_steps_per_watershed, __pyx_k_max_steps_per_watershed, sizeof(__pyx_k_max_steps_per_watershed), 0, 0, 1, 1},
  {&__pyx_n_s_max_upstream_flow_accum, __pyx_k_max_upstream_flow_accum, sizeof(__pyx_k_max_upstream_flow_accum), 0, 0, 1, 1},
  {&__pyx_n_u_mfd, __pyx_k_mfd, sizeof(__pyx_k_mfd), 0, 1, 0, 1},
  {&__pyx_kp_u_mfd_flow_accum_1f_complete, __pyx_k_mfd_flow_accum_1f_complete, sizeof(__pyx_k_mfd_flow_accum_1f_complete), 0, 1, 0, 0},
  {&__pyx_n_u_mfd_flow_dir, __pyx_k_mfd_flow_dir, sizeof(__pyx_k_mfd_flow_dir), 0, 1, 0, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_min_flow_accum_threshold, __pyx_k_min_flow_accum_threshold, sizeof(__pyx_k_min_flow_accum_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_min_p_val, __pyx_k_min_p_val, sizeof(__pyx_k_min_p_val), 0, 0, 1, 1},
  {&__pyx_n_s_mkdtemp, __pyx_k_mkdtemp, sizeof(__pyx_k_mkdtemp), 0, 0, 1, 1},
  {&__pyx_n_s_modified_offset_dict, __pyx_k_modified_offset_dict, sizeof(__pyx_k_modified_offset_dict), 0, 0, 1, 1},
  {&__pyx_kp_u_more_times, __pyx_k_more_times, sizeof(__pyx_k_more_times), 0, 1, 0, 0},
  {&__pyx_n_s_multi_line, __pyx_k_multi_line, sizeof(__pyx_k_multi_line), 0, 0, 1, 1},
  {&__pyx_n_u_n_bands, __pyx_k_n_bands, sizeof(__pyx_k_n_bands), 0, 1, 0, 1},
  {&__pyx_n_s_n_cols, __pyx_k_n_cols, sizeof(__pyx_k_n_cols), 0, 0, 1, 1},
  {&__pyx_n_s_n_dir, __pyx_k_n_dir, sizeof(__pyx_k_n_dir), 0, 0, 1, 1},
  {&__pyx_n_s_n_distance, __pyx_k_n_distance, sizeof(__pyx_k_n_distance), 0, 0, 1, 1},
  {&__pyx_n_s_n_drain_distance, __pyx_k_n_drain_distance, sizeof(__pyx_k_n_drain_distance), 0, 0, 1, 1},
  {&__pyx_n_s_n_height, __pyx_k_n_height, sizeof(__pyx_k_n_height), 0, 0, 1, 1},
  {&__pyx_n_s_n_iterations, __pyx_k_n_iterations, sizeof(__pyx_k_n_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_n_pixels, __pyx_k_n_pixels, sizeof(__pyx_k_n_pixels), 0, 0, 1, 1},
  {&__pyx_n_s_n_points, __pyx_k_n_points, sizeof(__pyx_k_n_points), 0, 0, 1, 1},
  {&__pyx_n_s_n_processed, __pyx_k_n_processed, sizeof(__pyx_k_n_processed), 0, 0, 1, 1},
  {&__pyx_n_s_n_pushed, __pyx_k_n_pushed, sizeof(__pyx_k_n_pushed), 0, 0, 1, 1},
  {&__pyx_n_s_n_rows, __pyx_k_n_rows, sizeof(__pyx_k_n_rows), 0, 0, 1, 1},
  {&__pyx_n_s_n_slope, __pyx_k_n_slope, sizeof(__pyx_k_n_slope), 0, 0, 1, 1},
  {&__pyx_n_s_n_steps, __pyx_k_n_steps, sizeof(__pyx_k_n_steps), 0, 0, 1, 1},
  {&__pyx_n_s_n_x_blocks, __pyx_k_n_x_blocks, sizeof(__pyx_k_n_x_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_natural_drain_exists, __pyx_k_natural_drain_exists, sizeof(__pyx_k_natural_drain_exists), 0, 0, 1, 1},
  {&__pyx_n_s_new_raster_from_base, __pyx_k_new_raster_from_base, sizeof(__pyx_k_new_raster_from_base), 0, 0, 1, 1},
  {&__pyx_n_s_next_id, __pyx_k_next_id, sizeof(__pyx_k_next_id), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_u_nodata, __pyx_k_nodata, sizeof(__pyx_k_nodata), 0, 1, 0, 1},
  {&__pyx_n_s_nodata_distance_drain_queue, __pyx_k_nodata_distance_drain_queue, sizeof(__pyx_k_nodata_distance_drain_queue), 0, 0, 1, 1},
  {&__pyx_n_s_nodata_downhill_slope_array, __pyx_k_nodata_downhill_slope_array, sizeof(__pyx_k_nodata_downhill_slope_array), 0, 0, 1, 1},
  {&__pyx_n_s_nodata_drain_queue, __pyx_k_nodata_drain_queue, sizeof(__pyx_k_nodata_drain_queue), 0, 0, 1, 1},
  {&__pyx_n_s_nodata_flow_dir_queue, __pyx_k_nodata_flow_dir_queue, sizeof(__pyx_k_nodata_flow_dir_queue), 0, 0, 1, 1},
  {&__pyx_n_s_nodata_neighbor, __pyx_k_nodata_neighbor, sizeof(__pyx_k_nodata_neighbor), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_kp_u_of, __pyx_k_of, sizeof(__pyx_k_of), 0, 1, 0, 0},
  {&__pyx_n_s_offset_dict, __pyx_k_offset_dict, sizeof(__pyx_k_offset_dict), 0, 0, 1, 1},
  {&__pyx_n_s_offset_info, __pyx_k_offset_info, sizeof(__pyx_k_offset_info), 0, 0, 1, 1},
  {&__pyx_n_s_offset_only, __pyx_k_offset_only, sizeof(__pyx_k_offset_only), 0, 0, 1, 1},
  {&__pyx_n_s_ogr, __pyx_k_ogr, sizeof(__pyx_k_ogr), 0, 0, 1, 1},
  {&__pyx_n_s_open_set, __pyx_k_open_set, sizeof(__pyx_k_open_set), 0, 0, 1, 1},
  {&__pyx_kp_u_opening, __pyx_k_opening, sizeof(__pyx_k_opening), 0, 1, 0, 0},
  {&__pyx_n_s_ops, __pyx_k_ops, sizeof(__pyx_k_ops), 0, 0, 1, 1},
  {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_u_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 1, 0, 1},
  {&__pyx_kp_u_order_1, __pyx_k_order_1, sizeof(__pyx_k_order_1), 0, 1, 0, 0},
  {&__pyx_n_s_order_count, __pyx_k_order_count, sizeof(__pyx_k_order_count), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_osgeo, __pyx_k_osgeo, sizeof(__pyx_k_osgeo), 0, 0, 1, 1},
  {&__pyx_n_s_osr, __pyx_k_osr, sizeof(__pyx_k_osr), 0, 0, 1, 1},
  {&__pyx_n_s_osr_axis_mapping_strategy, __pyx_k_osr_axis_mapping_strategy, sizeof(__pyx_k_osr_axis_mapping_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_out_dir, __pyx_k_out_dir, sizeof(__pyx_k_out_dir), 0, 0, 1, 1},
  {&__pyx_n_s_out_dir_increase, __pyx_k_out_dir_increase, sizeof(__pyx_k_out_dir_increase), 0, 0, 1, 1},
  {&__pyx_kp_u_out_of_bounds_for, __pyx_k_out_of_bounds_for, sizeof(__pyx_k_out_of_bounds_for), 0, 1, 0, 0},
  {&__pyx_n_s_outet_basename, __pyx_k_outet_basename, sizeof(__pyx_k_outet_basename), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_dir, __pyx_k_outflow_dir, sizeof(__pyx_k_outflow_dir), 0, 0, 1, 1},
  {&__pyx_n_u_outlet, __pyx_k_outlet, sizeof(__pyx_k_outlet), 0, 1, 0, 1},
  {&__pyx_kp_u_outlet_1, __pyx_k_outlet_1, sizeof(__pyx_k_outlet_1), 0, 1, 0, 0},
  {&__pyx_n_s_outlet_at_confluence, __pyx_k_outlet_at_confluence, sizeof(__pyx_k_outlet_at_confluence), 0, 0, 1, 1},
  {&__pyx_kp_u_outlet_detection, __pyx_k_outlet_detection, sizeof(__pyx_k_outlet_detection), 0, 1, 0, 0},
  {&__pyx_kp_u_outlet_detection_0_complete, __pyx_k_outlet_detection_0_complete, sizeof(__pyx_k_outlet_detection_0_complete), 0, 1, 0, 0},
  {&__pyx_kp_u_outlet_detection_100_complete_co, __pyx_k_outlet_detection_100_complete_co, sizeof(__pyx_k_outlet_detection_100_complete_co), 0, 1, 0, 0},
  {&__pyx_kp_u_outlet_detection_done, __pyx_k_outlet_detection_done, sizeof(__pyx_k_outlet_detection_done), 0, 1, 0, 0},
  {&__pyx_n_s_outlet_feature, __pyx_k_outlet_feature, sizeof(__pyx_k_outlet_feature), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_fid, __pyx_k_outlet_fid, sizeof(__pyx_k_outlet_fid), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_fid_list, __pyx_k_outlet_fid_list, sizeof(__pyx_k_outlet_fid_list), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_index, __pyx_k_outlet_index, sizeof(__pyx_k_outlet_index), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_layer, __pyx_k_outlet_layer, sizeof(__pyx_k_outlet_layer), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_point, __pyx_k_outlet_point, sizeof(__pyx_k_outlet_point), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_vector, __pyx_k_outlet_vector, sizeof(__pyx_k_outlet_vector), 0, 0, 1, 1},
  {&__pyx_n_s_outlet_x, __pyx_k_outlet_x, sizeof(__pyx_k_outlet_x), 0, 0, 1, 1},
  {&__pyx_n_u_outlet_x, __pyx_k_outlet_x, sizeof(__pyx_k_outlet_x), 0, 1, 0, 1},
  {&__pyx_n_s_outlet_y, __pyx_k_outlet_y, sizeof(__pyx_k_outlet_y), 0, 0, 1, 1},
  {&__pyx_n_u_outlet_y, __pyx_k_outlet_y, sizeof(__pyx_k_outlet_y), 0, 1, 0, 1},
  {&__pyx_kp_u_outlets_complete, __pyx_k_outlets_complete, sizeof(__pyx_k_outlets_complete), 0, 1, 0, 0},
  {&__pyx_n_s_p_val, __pyx_k_p_val, sizeof(__pyx_k_p_val), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_payload, __pyx_k_payload, sizeof(__pyx_k_payload), 0, 0, 1, 1},
  {&__pyx_n_s_pit_mask_managed_raster, __pyx_k_pit_mask_managed_raster, sizeof(__pyx_k_pit_mask_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_pit_mask_path, __pyx_k_pit_mask_path, sizeof(__pyx_k_pit_mask_path), 0, 0, 1, 1},
  {&__pyx_kp_u_pit_mask_tif, __pyx_k_pit_mask_tif, sizeof(__pyx_k_pit_mask_tif), 0, 1, 0, 0},
  {&__pyx_n_s_pit_queue, __pyx_k_pit_queue, sizeof(__pyx_k_pit_queue), 0, 0, 1, 1},
  {&__pyx_n_s_pixel, __pyx_k_pixel, sizeof(__pyx_k_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_pixel_count, __pyx_k_pixel_count, sizeof(__pyx_k_pixel_count), 0, 0, 1, 1},
  {&__pyx_n_s_pixel_drains, __pyx_k_pixel_drains, sizeof(__pyx_k_pixel_drains), 0, 0, 1, 1},
  {&__pyx_n_s_pixel_val, __pyx_k_pixel_val, sizeof(__pyx_k_pixel_val), 0, 0, 1, 1},
  {&__pyx_kp_u_pixels_complete, __pyx_k_pixels_complete, sizeof(__pyx_k_pixels_complete), 0, 1, 0, 0},
  {&__pyx_n_s_plateau_distance_managed_raster, __pyx_k_plateau_distance_managed_raster, sizeof(__pyx_k_plateau_distance_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_plateau_distance_nodata, __pyx_k_plateau_distance_nodata, sizeof(__pyx_k_plateau_distance_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_plateau_distance_path, __pyx_k_plateau_distance_path, sizeof(__pyx_k_plateau_distance_path), 0, 0, 1, 1},
  {&__pyx_kp_u_plateau_distance_tif, __pyx_k_plateau_distance_tif, sizeof(__pyx_k_plateau_distance_tif), 0, 1, 0, 0},
  {&__pyx_n_s_plateau_drain_mask_managed_raste, __pyx_k_plateau_drain_mask_managed_raste, sizeof(__pyx_k_plateau_drain_mask_managed_raste), 0, 0, 1, 1},
  {&__pyx_n_s_plateu_drain_mask_path, __pyx_k_plateu_drain_mask_path, sizeof(__pyx_k_plateu_drain_mask_path), 0, 0, 1, 1},
  {&__pyx_kp_u_plateu_drain_mask_tif, __pyx_k_plateu_drain_mask_tif, sizeof(__pyx_k_plateu_drain_mask_tif), 0, 1, 0, 0},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_pour_point, __pyx_k_pour_point, sizeof(__pyx_k_pour_point), 0, 0, 1, 1},
  {&__pyx_n_s_preempted, __pyx_k_preempted, sizeof(__pyx_k_preempted), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_priority, __pyx_k_priority, sizeof(__pyx_k_priority), 0, 0, 1, 1},
  {&__pyx_n_s_processed_nodes, __pyx_k_processed_nodes, sizeof(__pyx_k_processed_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_processed_segments, __pyx_k_processed_segments, sizeof(__pyx_k_processed_segments), 0, 0, 1, 1},
  {&__pyx_n_s_proj_x, __pyx_k_proj_x, sizeof(__pyx_k_proj_x), 0, 0, 1, 1},
  {&__pyx_n_s_proj_y, __pyx_k_proj_y, sizeof(__pyx_k_proj_y), 0, 0, 1, 1},
  {&__pyx_n_u_projection_wkt, __pyx_k_projection_wkt, sizeof(__pyx_k_projection_wkt), 0, 1, 0, 1},
  {&__pyx_n_s_pygeoprocessing, __pyx_k_pygeoprocessing, sizeof(__pyx_k_pygeoprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_u_quitting_too_many_steps, __pyx_k_quitting_too_many_steps, sizeof(__pyx_k_quitting_too_many_steps), 0, 1, 0, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_u_raster, __pyx_k_raster, sizeof(__pyx_k_raster), 0, 1, 0, 0},
  {&__pyx_n_s_raster_coord, __pyx_k_raster_coord, sizeof(__pyx_k_raster_coord), 0, 0, 1, 1},
  {&__pyx_n_s_raster_driver, __pyx_k_raster_driver, sizeof(__pyx_k_raster_driver), 0, 0, 1, 1},
  {&__pyx_n_s_raster_driver_creation_tuple, __pyx_k_raster_driver_creation_tuple, sizeof(__pyx_k_raster_driver_creation_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_raster_info, __pyx_k_raster_info, sizeof(__pyx_k_raster_info), 0, 0, 1, 1},
  {&__pyx_n_s_raster_path, __pyx_k_raster_path, sizeof(__pyx_k_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_raster_path_band, __pyx_k_raster_path_band, sizeof(__pyx_k_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_u_raster_size, __pyx_k_raster_size, sizeof(__pyx_k_raster_size), 0, 1, 0, 1},
  {&__pyx_n_s_raster_srs, __pyx_k_raster_srs, sizeof(__pyx_k_raster_srs), 0, 0, 1, 1},
  {&__pyx_n_s_raster_x_size, __pyx_k_raster_x_size, sizeof(__pyx_k_raster_x_size), 0, 0, 1, 1},
  {&__pyx_n_s_raster_y_size, __pyx_k_raster_y_size, sizeof(__pyx_k_raster_y_size), 0, 0, 1, 1},
  {&__pyx_n_s_raw_weight_nodata, __pyx_k_raw_weight_nodata, sizeof(__pyx_k_raw_weight_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_kp_u_resulted_in_null_trying, __pyx_k_resulted_in_null_trying, sizeof(__pyx_k_resulted_in_null_trying), 0, 1, 0, 0},
  {&__pyx_kp_u_retrying, __pyx_k_retrying, sizeof(__pyx_k_retrying), 0, 1, 0, 0},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_right_in, __pyx_k_right_in, sizeof(__pyx_k_right_in), 0, 0, 1, 1},
  {&__pyx_n_u_river_id, __pyx_k_river_id, sizeof(__pyx_k_river_id), 0, 1, 0, 1},
  {&__pyx_n_s_river_order, __pyx_k_river_order, sizeof(__pyx_k_river_order), 0, 0, 1, 1},
  {&__pyx_n_s_rmtree, __pyx_k_rmtree, sizeof(__pyx_k_rmtree), 0, 0, 1, 1},
  {&__pyx_n_s_root_height, __pyx_k_root_height, sizeof(__pyx_k_root_height), 0, 0, 1, 1},
  {&__pyx_kp_u_s_is_not_a_file, __pyx_k_s_is_not_a_file, sizeof(__pyx_k_s_is_not_a_file), 0, 1, 0, 0},
  {&__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_k_s_is_supposed_to_be_a_raster_ba, sizeof(__pyx_k_s_is_supposed_to_be_a_raster_ba), 0, 1, 0, 0},
  {&__pyx_n_s_scipy, __pyx_k_scipy, sizeof(__pyx_k_scipy), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_stats, __pyx_k_scipy_stats, sizeof(__pyx_k_scipy_stats), 0, 0, 1, 1},
  {&__pyx_n_s_search_queue, __pyx_k_search_queue, sizeof(__pyx_k_search_queue), 0, 0, 1, 1},
  {&__pyx_n_s_search_stack, __pyx_k_search_stack, sizeof(__pyx_k_search_stack), 0, 0, 1, 1},
  {&__pyx_n_s_search_steps, __pyx_k_search_steps, sizeof(__pyx_k_search_steps), 0, 0, 1, 1},
  {&__pyx_kp_u_segments_complete, __pyx_k_segments_complete, sizeof(__pyx_k_segments_complete), 0, 1, 0, 0},
  {&__pyx_n_s_segments_to_process, __pyx_k_segments_to_process, sizeof(__pyx_k_segments_to_process), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shapely, __pyx_k_shapely, sizeof(__pyx_k_shapely), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_ops, __pyx_k_shapely_ops, sizeof(__pyx_k_shapely_ops), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_wkb, __pyx_k_shapely_wkb, sizeof(__pyx_k_shapely_wkb), 0, 0, 1, 1},
  {&__pyx_n_s_shutil, __pyx_k_shutil, sizeof(__pyx_k_shutil), 0, 0, 1, 1},
  {&__pyx_n_s_single_outlet, __pyx_k_single_outlet, sizeof(__pyx_k_single_outlet), 0, 0, 1, 1},
  {&__pyx_n_s_single_outlet_tuple, __pyx_k_single_outlet_tuple, sizeof(__pyx_k_single_outlet_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_sink_pixel, __pyx_k_sink_pixel, sizeof(__pyx_k_sink_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_sorted_stream_order_list, __pyx_k_sorted_stream_order_list, sizeof(__pyx_k_sorted_stream_order_list), 0, 0, 1, 1},
  {&__pyx_n_s_source_id, __pyx_k_source_id, sizeof(__pyx_k_source_id), 0, 0, 1, 1},
  {&__pyx_n_s_source_point_stack, __pyx_k_source_point_stack, sizeof(__pyx_k_source_point_stack), 0, 0, 1, 1},
  {&__pyx_kp_u_source_points_complete, __pyx_k_source_points_complete, sizeof(__pyx_k_source_points_complete), 0, 1, 0, 0},
  {&__pyx_n_s_source_stream_point, __pyx_k_source_stream_point, sizeof(__pyx_k_source_stream_point), 0, 0, 1, 1},
  {&__pyx_n_s_splitext, __pyx_k_splitext, sizeof(__pyx_k_splitext), 0, 0, 1, 1},
  {&__pyx_kp_s_src_geoprocessing_routing_routin, __pyx_k_src_geoprocessing_routing_routin, sizeof(__pyx_k_src_geoprocessing_routing_routin), 0, 0, 1, 0},
  {&__pyx_kp_u_starting_search, __pyx_k_starting_search, sizeof(__pyx_k_starting_search), 0, 1, 0, 0},
  {&__pyx_n_s_stats, __pyx_k_stats, sizeof(__pyx_k_stats), 0, 0, 1, 1},
  {&__pyx_n_s_strahler_stream_vector_path, __pyx_k_strahler_stream_vector_path, sizeof(__pyx_k_strahler_stream_vector_path), 0, 0, 1, 1},
  {&__pyx_n_s_stream_array, __pyx_k_stream_array, sizeof(__pyx_k_stream_array), 0, 0, 1, 1},
  {&__pyx_n_s_stream_band, __pyx_k_stream_band, sizeof(__pyx_k_stream_band), 0, 0, 1, 1},
  {&__pyx_n_s_stream_basename, __pyx_k_stream_basename, sizeof(__pyx_k_stream_basename), 0, 0, 1, 1},
  {&__pyx_n_s_stream_feature, __pyx_k_stream_feature, sizeof(__pyx_k_stream_feature), 0, 0, 1, 1},
  {&__pyx_n_s_stream_fid, __pyx_k_stream_fid, sizeof(__pyx_k_stream_fid), 0, 0, 1, 1},
  {&__pyx_n_u_stream_fid, __pyx_k_stream_fid, sizeof(__pyx_k_stream_fid), 0, 1, 0, 1},
  {&__pyx_kp_u_stream_fragments_complete, __pyx_k_stream_fragments_complete, sizeof(__pyx_k_stream_fragments_complete), 0, 1, 0, 0},
  {&__pyx_n_s_stream_layer, __pyx_k_stream_layer, sizeof(__pyx_k_stream_layer), 0, 0, 1, 1},
  {&__pyx_n_s_stream_line, __pyx_k_stream_line, sizeof(__pyx_k_stream_line), 0, 0, 1, 1},
  {&__pyx_n_s_stream_mr, __pyx_k_stream_mr, sizeof(__pyx_k_stream_mr), 0, 0, 1, 1},
  {&__pyx_n_s_stream_nodata, __pyx_k_stream_nodata, sizeof(__pyx_k_stream_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_stream_order, __pyx_k_stream_order, sizeof(__pyx_k_stream_order), 0, 0, 1, 1},
  {&__pyx_n_s_stream_order_list, __pyx_k_stream_order_list, sizeof(__pyx_k_stream_order_list), 0, 0, 1, 1},
  {&__pyx_n_s_stream_raster, __pyx_k_stream_raster, sizeof(__pyx_k_stream_raster), 0, 0, 1, 1},
  {&__pyx_n_s_stream_val, __pyx_k_stream_val, sizeof(__pyx_k_stream_val), 0, 0, 1, 1},
  {&__pyx_n_s_stream_vector, __pyx_k_stream_vector, sizeof(__pyx_k_stream_vector), 0, 0, 1, 1},
  {&__pyx_n_s_streams_by_order, __pyx_k_streams_by_order, sizeof(__pyx_k_streams_by_order), 0, 0, 1, 1},
  {&__pyx_n_s_streams_to_process, __pyx_k_streams_to_process, sizeof(__pyx_k_streams_to_process), 0, 0, 1, 1},
  {&__pyx_n_s_streams_to_retest, __pyx_k_streams_to_retest, sizeof(__pyx_k_streams_to_retest), 0, 0, 1, 1},
  {&__pyx_n_s_strftime, __pyx_k_strftime, sizeof(__pyx_k_strftime), 0, 0, 1, 1},
  {&__pyx_n_s_suffix, __pyx_k_suffix, sizeof(__pyx_k_suffix), 0, 0, 1, 1},
  {&__pyx_n_s_sum_of_downhill_slopes, __pyx_k_sum_of_downhill_slopes, sizeof(__pyx_k_sum_of_downhill_slopes), 0, 0, 1, 1},
  {&__pyx_n_s_sum_of_flow_weights, __pyx_k_sum_of_flow_weights, sizeof(__pyx_k_sum_of_flow_weights), 0, 0, 1, 1},
  {&__pyx_n_s_sum_of_nodata_slope_weights, __pyx_k_sum_of_nodata_slope_weights, sizeof(__pyx_k_sum_of_nodata_slope_weights), 0, 0, 1, 1},
  {&__pyx_n_s_sum_of_slope_weights, __pyx_k_sum_of_slope_weights, sizeof(__pyx_k_sum_of_slope_weights), 0, 0, 1, 1},
  {&__pyx_n_s_target_discovery_raster_path, __pyx_k_target_discovery_raster_path, sizeof(__pyx_k_target_discovery_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_distance_to_channel_raste, __pyx_k_target_distance_to_channel_raste, sizeof(__pyx_k_target_distance_to_channel_raste), 0, 0, 1, 1},
  {&__pyx_n_s_target_filled_dem_raster_path, __pyx_k_target_filled_dem_raster_path, sizeof(__pyx_k_target_filled_dem_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_finish_raster_path, __pyx_k_target_finish_raster_path, sizeof(__pyx_k_target_finish_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_flow_accum_raster_path, __pyx_k_target_flow_accum_raster_path, sizeof(__pyx_k_target_flow_accum_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_flow_dir_path, __pyx_k_target_flow_dir_path, sizeof(__pyx_k_target_flow_dir_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_offset_dict, __pyx_k_target_offset_dict, sizeof(__pyx_k_target_offset_dict), 0, 0, 1, 1},
  {&__pyx_n_s_target_outlet_vector_path, __pyx_k_target_outlet_vector_path, sizeof(__pyx_k_target_outlet_vector_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_stream_raster_path, __pyx_k_target_stream_raster_path, sizeof(__pyx_k_target_stream_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_stream_vector_path, __pyx_k_target_stream_vector_path, sizeof(__pyx_k_target_stream_vector_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_watershed_boundary_vector, __pyx_k_target_watershed_boundary_vector, sizeof(__pyx_k_target_watershed_boundary_vector), 0, 0, 1, 1},
  {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
  {&__pyx_n_s_terminated_early, __pyx_k_terminated_early, sizeof(__pyx_k_terminated_early), 0, 0, 1, 1},
  {&__pyx_n_u_terminated_early, __pyx_k_terminated_early, sizeof(__pyx_k_terminated_early), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_dir, __pyx_k_test_dir, sizeof(__pyx_k_test_dir), 0, 0, 1, 1},
  {&__pyx_n_s_test_order, __pyx_k_test_order, sizeof(__pyx_k_test_order), 0, 0, 1, 1},
  {&__pyx_n_u_thresh_fa, __pyx_k_thresh_fa, sizeof(__pyx_k_thresh_fa), 0, 1, 0, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_dir, __pyx_k_tmp_dir, sizeof(__pyx_k_tmp_dir), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_dir_root, __pyx_k_tmp_dir_root, sizeof(__pyx_k_tmp_dir_root), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_flow_dir_nodata, __pyx_k_tmp_flow_dir_nodata, sizeof(__pyx_k_tmp_flow_dir_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_work_dir, __pyx_k_tmp_work_dir, sizeof(__pyx_k_tmp_work_dir), 0, 0, 1, 1},
  {&__pyx_n_s_trace_flow_threshold, __pyx_k_trace_flow_threshold, sizeof(__pyx_k_trace_flow_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_trace_threshold_proportion, __pyx_k_trace_threshold_proportion, sizeof(__pyx_k_trace_threshold_proportion), 0, 0, 1, 1},
  {&__pyx_kp_u_trace_threshold_proportion_shoul, __pyx_k_trace_threshold_proportion_shoul, sizeof(__pyx_k_trace_threshold_proportion_shoul), 0, 1, 0, 0},
  {&__pyx_n_s_ttest_ind, __pyx_k_ttest_ind, sizeof(__pyx_k_ttest_ind), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_kp_u_unable_to_open, __pyx_k_unable_to_open, sizeof(__pyx_k_unable_to_open), 0, 1, 0, 0},
  {&__pyx_n_s_upstream_all_defined, __pyx_k_upstream_all_defined, sizeof(__pyx_k_upstream_all_defined), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_coord, __pyx_k_upstream_coord, sizeof(__pyx_k_upstream_coord), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_count, __pyx_k_upstream_count, sizeof(__pyx_k_upstream_count), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_d8_dir, __pyx_k_upstream_d8_dir, sizeof(__pyx_k_upstream_d8_dir), 0, 0, 1, 1},
  {&__pyx_n_u_upstream_d8_dir, __pyx_k_upstream_d8_dir, sizeof(__pyx_k_upstream_d8_dir), 0, 1, 0, 1},
  {&__pyx_n_s_upstream_dem, __pyx_k_upstream_dem, sizeof(__pyx_k_upstream_dem), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_dirs, __pyx_k_upstream_dirs, sizeof(__pyx_k_upstream_dirs), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_feature, __pyx_k_upstream_feature, sizeof(__pyx_k_upstream_feature), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_fid, __pyx_k_upstream_fid, sizeof(__pyx_k_upstream_fid), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_fid_list, __pyx_k_upstream_fid_list, sizeof(__pyx_k_upstream_fid_list), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_fid_map, __pyx_k_upstream_fid_map, sizeof(__pyx_k_upstream_fid_map), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_fids, __pyx_k_upstream_fids, sizeof(__pyx_k_upstream_fids), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_flow_accum, __pyx_k_upstream_flow_accum, sizeof(__pyx_k_upstream_flow_accum), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_flow_dir, __pyx_k_upstream_flow_dir, sizeof(__pyx_k_upstream_flow_dir), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_flow_dir_sum, __pyx_k_upstream_flow_dir_sum, sizeof(__pyx_k_upstream_flow_dir_sum), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_flow_weight, __pyx_k_upstream_flow_weight, sizeof(__pyx_k_upstream_flow_weight), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_id, __pyx_k_upstream_id, sizeof(__pyx_k_upstream_id), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_id_list, __pyx_k_upstream_id_list, sizeof(__pyx_k_upstream_id_list), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_index, __pyx_k_upstream_index, sizeof(__pyx_k_upstream_index), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_order, __pyx_k_upstream_order, sizeof(__pyx_k_upstream_order), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_stack, __pyx_k_upstream_stack, sizeof(__pyx_k_upstream_stack), 0, 0, 1, 1},
  {&__pyx_n_s_upstream_to_downstream_id, __pyx_k_upstream_to_downstream_id, sizeof(__pyx_k_upstream_to_downstream_id), 0, 0, 1, 1},
  {&__pyx_n_u_us_fa, __pyx_k_us_fa, sizeof(__pyx_k_us_fa), 0, 1, 0, 1},
  {&__pyx_n_s_us_x, __pyx_k_us_x, sizeof(__pyx_k_us_x), 0, 0, 1, 1},
  {&__pyx_n_u_us_x, __pyx_k_us_x, sizeof(__pyx_k_us_x), 0, 1, 0, 1},
  {&__pyx_n_s_us_y, __pyx_k_us_y, sizeof(__pyx_k_us_y), 0, 0, 1, 1},
  {&__pyx_n_u_us_y, __pyx_k_us_y, sizeof(__pyx_k_us_y), 0, 1, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_visit_count, __pyx_k_visit_count, sizeof(__pyx_k_visit_count), 0, 0, 1, 1},
  {&__pyx_n_s_visit_order_stack, __pyx_k_visit_order_stack, sizeof(__pyx_k_visit_order_stack), 0, 0, 1, 1},
  {&__pyx_n_s_visited_managed_raster, __pyx_k_visited_managed_raster, sizeof(__pyx_k_visited_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_visited_raster_path, __pyx_k_visited_raster_path, sizeof(__pyx_k_visited_raster_path), 0, 0, 1, 1},
  {&__pyx_kp_u_visited_tif, __pyx_k_visited_tif, sizeof(__pyx_k_visited_tif), 0, 1, 0, 0},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_watershed_basename, __pyx_k_watershed_basename, sizeof(__pyx_k_watershed_basename), 0, 0, 1, 1},
  {&__pyx_n_s_watershed_boundary, __pyx_k_watershed_boundary, sizeof(__pyx_k_watershed_boundary), 0, 0, 1, 1},
  {&__pyx_n_s_watershed_feature, __pyx_k_watershed_feature, sizeof(__pyx_k_watershed_feature), 0, 0, 1, 1},
  {&__pyx_n_s_watershed_layer, __pyx_k_watershed_layer, sizeof(__pyx_k_watershed_layer), 0, 0, 1, 1},
  {&__pyx_n_s_watershed_polygon, __pyx_k_watershed_polygon, sizeof(__pyx_k_watershed_polygon), 0, 0, 1, 1},
  {&__pyx_n_s_watershed_vector, __pyx_k_watershed_vector, sizeof(__pyx_k_watershed_vector), 0, 0, 1, 1},
  {&__pyx_n_s_weight_nodata, __pyx_k_weight_nodata, sizeof(__pyx_k_weight_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_weight_raster, __pyx_k_weight_raster, sizeof(__pyx_k_weight_raster), 0, 0, 1, 1},
  {&__pyx_n_s_weight_raster_path_band, __pyx_k_weight_raster_path_band, sizeof(__pyx_k_weight_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_weight_val, __pyx_k_weight_val, sizeof(__pyx_k_weight_val), 0, 0, 1, 1},
  {&__pyx_n_s_win_xsize, __pyx_k_win_xsize, sizeof(__pyx_k_win_xsize), 0, 0, 1, 1},
  {&__pyx_n_u_win_xsize, __pyx_k_win_xsize, sizeof(__pyx_k_win_xsize), 0, 1, 0, 1},
  {&__pyx_n_s_win_xsize_border, __pyx_k_win_xsize_border, sizeof(__pyx_k_win_xsize_border), 0, 0, 1, 1},
  {&__pyx_n_s_win_ysize, __pyx_k_win_ysize, sizeof(__pyx_k_win_ysize), 0, 0, 1, 1},
  {&__pyx_n_u_win_ysize, __pyx_k_win_ysize, sizeof(__pyx_k_win_ysize), 0, 1, 0, 1},
  {&__pyx_n_s_win_ysize_border, __pyx_k_win_ysize_border, sizeof(__pyx_k_win_ysize_border), 0, 0, 1, 1},
  {&__pyx_n_s_wkb, __pyx_k_wkb, sizeof(__pyx_k_wkb), 0, 0, 1, 1},
  {&__pyx_n_s_wkbLineString, __pyx_k_wkbLineString, sizeof(__pyx_k_wkbLineString), 0, 0, 1, 1},
  {&__pyx_n_s_wkbLinearRing, __pyx_k_wkbLinearRing, sizeof(__pyx_k_wkbLinearRing), 0, 0, 1, 1},
  {&__pyx_n_s_wkbPoint, __pyx_k_wkbPoint, sizeof(__pyx_k_wkbPoint), 0, 0, 1, 1},
  {&__pyx_n_s_wkbPolygon, __pyx_k_wkbPolygon, sizeof(__pyx_k_wkbPolygon), 0, 0, 1, 1},
  {&__pyx_n_s_working_dir, __pyx_k_working_dir, sizeof(__pyx_k_working_dir), 0, 0, 1, 1},
  {&__pyx_n_s_working_dir_path, __pyx_k_working_dir_path, sizeof(__pyx_k_working_dir_path), 0, 0, 1, 1},
  {&__pyx_n_s_working_downhill_slope_array, __pyx_k_working_downhill_slope_array, sizeof(__pyx_k_working_downhill_slope_array), 0, 0, 1, 1},
  {&__pyx_n_s_working_downhill_slope_sum, __pyx_k_working_downhill_slope_sum, sizeof(__pyx_k_working_downhill_slope_sum), 0, 0, 1, 1},
  {&__pyx_n_s_working_feature, __pyx_k_working_feature, sizeof(__pyx_k_working_feature), 0, 0, 1, 1},
  {&__pyx_n_s_working_fid, __pyx_k_working_fid, sizeof(__pyx_k_working_fid), 0, 0, 1, 1},
  {&__pyx_n_s_working_flow_accum_threshold, __pyx_k_working_flow_accum_threshold, sizeof(__pyx_k_working_flow_accum_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_working_geom, __pyx_k_working_geom, sizeof(__pyx_k_working_geom), 0, 0, 1, 1},
  {&__pyx_n_s_working_order, __pyx_k_working_order, sizeof(__pyx_k_working_order), 0, 0, 1, 1},
  {&__pyx_n_s_working_river_id, __pyx_k_working_river_id, sizeof(__pyx_k_working_river_id), 0, 0, 1, 1},
  {&__pyx_n_s_working_stack, __pyx_k_working_stack, sizeof(__pyx_k_working_stack), 0, 0, 1, 1},
  {&__pyx_n_s_workspace_dir, __pyx_k_workspace_dir, sizeof(__pyx_k_workspace_dir), 0, 0, 1, 1},
  {&__pyx_n_s_write_mode, __pyx_k_write_mode, sizeof(__pyx_k_write_mode), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
  {&__pyx_n_s_x_f, __pyx_k_x_f, sizeof(__pyx_k_x_f), 0, 0, 1, 1},
  {&__pyx_n_s_x_l, __pyx_k_x_l, sizeof(__pyx_k_x_l), 0, 0, 1, 1},
  {&__pyx_n_s_x_n, __pyx_k_x_n, sizeof(__pyx_k_x_n), 0, 0, 1, 1},
  {&__pyx_n_s_x_off_border, __pyx_k_x_off_border, sizeof(__pyx_k_x_off_border), 0, 0, 1, 1},
  {&__pyx_kp_u_x_out_of_bounds_s, __pyx_k_x_out_of_bounds_s, sizeof(__pyx_k_x_out_of_bounds_s), 0, 1, 0, 0},
  {&__pyx_n_s_x_p, __pyx_k_x_p, sizeof(__pyx_k_x_p), 0, 0, 1, 1},
  {&__pyx_n_s_x_u, __pyx_k_x_u, sizeof(__pyx_k_x_u), 0, 0, 1, 1},
  {&__pyx_n_s_xa, __pyx_k_xa, sizeof(__pyx_k_xa), 0, 0, 1, 1},
  {&__pyx_n_s_xb, __pyx_k_xb, sizeof(__pyx_k_xb), 0, 0, 1, 1},
  {&__pyx_n_s_xi, __pyx_k_xi, sizeof(__pyx_k_xi), 0, 0, 1, 1},
  {&__pyx_n_s_xi_bn, __pyx_k_xi_bn, sizeof(__pyx_k_xi_bn), 0, 0, 1, 1},
  {&__pyx_n_s_xi_n, __pyx_k_xi_n, sizeof(__pyx_k_xi_n), 0, 0, 1, 1},
  {&__pyx_n_s_xi_q, __pyx_k_xi_q, sizeof(__pyx_k_xi_q), 0, 0, 1, 1},
  {&__pyx_n_s_xi_root, __pyx_k_xi_root, sizeof(__pyx_k_xi_root), 0, 0, 1, 1},
  {&__pyx_n_s_xi_sn, __pyx_k_xi_sn, sizeof(__pyx_k_xi_sn), 0, 0, 1, 1},
  {&__pyx_n_s_xoff, __pyx_k_xoff, sizeof(__pyx_k_xoff), 0, 0, 1, 1},
  {&__pyx_n_u_xoff, __pyx_k_xoff, sizeof(__pyx_k_xoff), 0, 1, 0, 1},
  {&__pyx_n_s_y_f, __pyx_k_y_f, sizeof(__pyx_k_y_f), 0, 0, 1, 1},
  {&__pyx_n_s_y_l, __pyx_k_y_l, sizeof(__pyx_k_y_l), 0, 0, 1, 1},
  {&__pyx_n_s_y_n, __pyx_k_y_n, sizeof(__pyx_k_y_n), 0, 0, 1, 1},
  {&__pyx_n_s_y_off_border, __pyx_k_y_off_border, sizeof(__pyx_k_y_off_border), 0, 0, 1, 1},
  {&__pyx_kp_u_y_out_of_bounds_s, __pyx_k_y_out_of_bounds_s, sizeof(__pyx_k_y_out_of_bounds_s), 0, 1, 0, 0},
  {&__pyx_n_s_y_p, __pyx_k_y_p, sizeof(__pyx_k_y_p), 0, 0, 1, 1},
  {&__pyx_n_s_y_u, __pyx_k_y_u, sizeof(__pyx_k_y_u), 0, 0, 1, 1},
  {&__pyx_n_s_ya, __pyx_k_ya, sizeof(__pyx_k_ya), 0, 0, 1, 1},
  {&__pyx_n_s_yb, __pyx_k_yb, sizeof(__pyx_k_yb), 0, 0, 1, 1},
  {&__pyx_n_s_yi, __pyx_k_yi, sizeof(__pyx_k_yi), 0, 0, 1, 1},
  {&__pyx_n_s_yi_bn, __pyx_k_yi_bn, sizeof(__pyx_k_yi_bn), 0, 0, 1, 1},
  {&__pyx_n_s_yi_n, __pyx_k_yi_n, sizeof(__pyx_k_yi_n), 0, 0, 1, 1},
  {&__pyx_n_s_yi_q, __pyx_k_yi_q, sizeof(__pyx_k_yi_q), 0, 0, 1, 1},
  {&__pyx_n_s_yi_root, __pyx_k_yi_root, sizeof(__pyx_k_yi_root), 0, 0, 1, 1},
  {&__pyx_n_s_yi_sn, __pyx_k_yi_sn, sizeof(__pyx_k_yi_sn), 0, 0, 1, 1},
  {&__pyx_n_s_yoff, __pyx_k_yoff, sizeof(__pyx_k_yoff), 0, 0, 1, 1},
  {&__pyx_n_u_yoff, __pyx_k_yoff, sizeof(__pyx_k_yoff), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 437, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 3453, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 3509, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 3510, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 4014, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 947, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "src/geoprocessing/routing/routing.pyx":1236
 *             (offset_dict['win_ysize']+2, offset_dict['win_xsize']+2),
 *             dtype=numpy.float64)
 *         dem_buffer_array[:] = dem_nodata             # <<<<<<<<<<<<<<
 * 
 *         # attempt to expand read block by a pixel boundary
 */
  __pyx_slice__6 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);

  /* "src/geoprocessing/routing/routing.pyx":1635
 *     if weight_raster is not None:
 *         weight_raster.close()
 *     LOGGER.info('%.1f%% complete', 100.0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_kp_u_1f_complete, __pyx_float_100_0); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "src/geoprocessing/routing/routing.pyx":3300
 *                     stream_feature = ogr.Feature(
 *                         stream_layer.GetLayerDefn())
 *                     stream_feature.SetField('outlet', 0)             # <<<<<<<<<<<<<<
 *                     stream_layer.CreateFeature(stream_feature)
 *                     stream_fid = stream_feature.GetFID()
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_u_outlet, __pyx_int_0); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 3300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "src/geoprocessing/routing/routing.pyx":3371
 *         # if no upstream it means it is an order 1 source stream
 *         if not upstream_id_list:
 *             stream_feature.SetField('order', 1)             # <<<<<<<<<<<<<<
 *         stream_feature.SetGeometry(stream_line)
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_u_order, __pyx_int_1); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 3371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "src/geoprocessing/routing/routing.pyx":3405
 *         if stream_fid not in upstream_to_downstream_id:
 *             # it's an outlet so no downstream to process
 *             stream_feature.SetField('outlet', 1)             # <<<<<<<<<<<<<<
 *             stream_layer.SetFeature(stream_feature)
 *             outlet_fid_list.append(stream_feature.GetFID())
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_u_outlet, __pyx_int_1); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 3405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "src/geoprocessing/routing/routing.pyx":3622
 * 
 *     stream_layer.DeleteField(
 *         stream_layer.FindFieldIndex('upstream_d8_dir', 1))             # <<<<<<<<<<<<<<
 *     stream_layer.CommitTransaction()
 *     stream_layer.StartTransaction()
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_u_upstream_d8_dir, __pyx_int_1); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 3622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "src/geoprocessing/routing/routing.pyx":4442
 *             x_off_border = 1
 *         else:
 *             flow_dir_block[:, 0] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Test for top border and if so stripe nodata on the top margin
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_slice__6, __pyx_int_0); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 4442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "src/geoprocessing/routing/routing.pyx":4449
 *             y_off_border = 1
 *         else:
 *             flow_dir_block[0, :] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Test for right border and if so stripe nodata on the right margin
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice__6); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 4449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "src/geoprocessing/routing/routing.pyx":4456
 *             win_xsize_border += 1
 *         else:
 *             flow_dir_block[:, -1] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Test for bottom border and if so stripe nodata on the bottom margin
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_slice__6, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 4456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "src/geoprocessing/routing/routing.pyx":4463
 *             win_ysize_border += 1
 *         else:
 *             flow_dir_block[-1, :] = flow_dir_nodata             # <<<<<<<<<<<<<<
 * 
 *         # Read iterblock plus a possible margin on top/bottom/left/right side
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_slice__6); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 4463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "src/geoprocessing/routing/routing.pyx":564
 * 
 * 
 * def _generate_read_bounds(offset_dict, raster_x_size, raster_y_size):             # <<<<<<<<<<<<<<
 *     """Helper function to expand GDAL memory block read bound by 1 pixel.
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(8, __pyx_n_s_offset_dict, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_target_offset_dict); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_generate_read_bounds, 564, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 564, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":608
 * 
 * 
 * def fill_pits(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_filled_dem_raster_path,
 *         working_dir=None,
 */
  __pyx_tuple__27 = PyTuple_Pack(56, __pyx_n_s_dem_raster_path_band, __pyx_n_s_target_filled_dem_raster_path, __pyx_n_s_working_dir, __pyx_n_s_max_pixel_fill_count, __pyx_n_s_single_outlet_tuple, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_q, __pyx_n_s_yi_q, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_downhill_neighbor, __pyx_n_s_nodata_neighbor, __pyx_n_s_natural_drain_exists, __pyx_n_s_search_steps, __pyx_n_s_search_queue, __pyx_n_s_fill_queue, __pyx_n_s_pixel, __pyx_n_s_pit_queue, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_n_x_blocks, __pyx_n_s_center_val, __pyx_n_s_dem_nodata, __pyx_n_s_fill_height, __pyx_n_s_feature_id, __pyx_n_s_single_outlet, __pyx_n_s_outlet_x, __pyx_n_s_outlet_y, __pyx_n_s_last_log_time, __pyx_n_s_dem_raster_info, __pyx_n_s_base_nodata, __pyx_n_s_mask_nodata, __pyx_n_s_working_dir_path, __pyx_n_s_flat_region_mask_path, __pyx_n_s_flat_region_mask_managed_raster, __pyx_n_s_pit_mask_path, __pyx_n_s_pit_mask_managed_raster, __pyx_n_s_base_datatype, __pyx_n_s_filled_dem_raster, __pyx_n_s_filled_dem_band, __pyx_n_s_offset_info, __pyx_n_s_block_array, __pyx_n_s_filled_dem_managed_raster, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_n_height, __pyx_n_s_pour_point); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(6, 0, 56, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_fill_pits_2, 608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 608, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1050
 * 
 * 
 * def flow_dir_d8(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,
 */
  __pyx_tuple__29 = PyTuple_Pack(58, __pyx_n_s_dem_raster_path_band, __pyx_n_s_target_flow_dir_path, __pyx_n_s_working_dir, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_dem_buffer_array, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_q, __pyx_n_s_yi_q, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_root_height, __pyx_n_s_n_height, __pyx_n_s_dem_nodata, __pyx_n_s_drain_distance, __pyx_n_s_n_drain_distance, __pyx_n_s_diagonal_nodata, __pyx_n_s_search_queue, __pyx_n_s_drain_queue, __pyx_n_s_nodata_drain_queue, __pyx_n_s_nodata_flow_dir_queue, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_last_log_time, __pyx_n_s_dem_raster_info, __pyx_n_s_base_nodata, __pyx_n_s_mask_nodata, __pyx_n_s_working_dir_path, __pyx_n_s_flat_region_mask_path, __pyx_n_s_flat_region_mask_managed_raster, __pyx_n_s_flow_dir_nodata, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_plateau_distance_path, __pyx_n_s_plateau_distance_managed_raster, __pyx_n_s_compatable_dem_raster_path_band, __pyx_n_s_dem_block_xsize, __pyx_n_s_dem_block_ysize, __pyx_n_s_raster_driver, __pyx_n_s_dem_raster, __pyx_n_s_dem_managed_raster, __pyx_n_s_dem_band, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_modified_offset_dict, __pyx_n_s_largest_slope_dir, __pyx_n_s_largest_slope, __pyx_n_s_n_slope); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 58, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_flow_dir_d8_2, 1050, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 1050, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1415
 * 
 * 
 * def flow_accumulation_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */
  __pyx_tuple__31 = PyTuple_Pack(44, __pyx_n_s_flow_dir_raster_path_band, __pyx_n_s_target_flow_accum_raster_path, __pyx_n_s_weight_raster_path_band, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_flow_dir_buffer_array, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_flow_dir, __pyx_n_s_upstream_flow_dir, __pyx_n_s_flow_dir_nodata, __pyx_n_s_upstream_flow_accum, __pyx_n_s_weight_val, __pyx_n_s_weight_nodata, __pyx_n_s_search_stack, __pyx_n_s_flow_pixel, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_last_log_time, __pyx_n_s_flow_accum_nodata, __pyx_n_s_flow_accum_managed_raster, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_flow_dir_raster, __pyx_n_s_flow_dir_band, __pyx_n_s_weight_raster, __pyx_n_s_raw_weight_nodata, __pyx_n_s_flow_dir_raster_info, __pyx_n_s_tmp_flow_dir_nodata, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_modified_offset_dict, __pyx_n_s_preempted); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(4, 0, 44, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_flow_accumulation_d8, 1415, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 1415, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":1638
 * 
 * 
 * def flow_dir_mfd(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 */
  __pyx_tuple__34 = PyTuple_Pack(69, __pyx_n_s_dem_raster_path_band, __pyx_n_s_target_flow_dir_path, __pyx_n_s_working_dir, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_dem_buffer_array, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_q, __pyx_n_s_yi_q, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_root_height, __pyx_n_s_n_height, __pyx_n_s_dem_nodata, __pyx_n_s_n_slope, __pyx_n_s_drain_distance, __pyx_n_s_n_drain_distance, __pyx_n_s_drain_search_queue, __pyx_n_s_downhill_slope_array, __pyx_n_s_nodata_downhill_slope_array, __pyx_n_s_working_downhill_slope_array, __pyx_n_s_sum_of_slope_weights, __pyx_n_s_sum_of_nodata_slope_weights, __pyx_n_s_compressed_integer_slopes, __pyx_n_s_distance_drain_queue, __pyx_n_s_nodata_distance_drain_queue, __pyx_n_s_direction_drain_queue, __pyx_n_s_nodata_flow_dir_queue, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_last_log_time, __pyx_n_s_dem_raster_info, __pyx_n_s_base_nodata, __pyx_n_s_mask_nodata, __pyx_n_s_working_dir_path, __pyx_n_s_flat_region_mask_path, __pyx_n_s_flat_region_mask_managed_raster, __pyx_n_s_flow_dir_nodata, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_plateu_drain_mask_path, __pyx_n_s_plateau_drain_mask_managed_raste, __pyx_n_s_plateau_distance_path, __pyx_n_s_plateau_distance_nodata, __pyx_n_s_plateau_distance_managed_raster, __pyx_n_s_compatable_dem_raster_path_band, __pyx_n_s_dem_block_xsize, __pyx_n_s_dem_block_ysize, __pyx_n_s_raster_driver, __pyx_n_s_dem_raster, __pyx_n_s_dem_managed_raster, __pyx_n_s_dem_band, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_modified_offset_dict, __pyx_n_s_sum_of_downhill_slopes, __pyx_n_s_working_downhill_slope_sum, __pyx_n_s__33, __pyx_n_s_n_distance); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 1638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(4, 0, 69, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_flow_dir_mfd, 1638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 1638, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2129
 * 
 * 
 * def flow_accumulation_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */
  __pyx_tuple__36 = PyTuple_Pack(51, __pyx_n_s_flow_dir_mfd_raster_path_band, __pyx_n_s_target_flow_accum_raster_path, __pyx_n_s_weight_raster_path_band, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_flow_dir_mfd_buffer_array, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_visit_count, __pyx_n_s_pixel_count, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_i_upstream_flow, __pyx_n_s_flow_dir_mfd, __pyx_n_s_upstream_flow_weight, __pyx_n_s_compressed_upstream_flow_dir, __pyx_n_s_upstream_flow_dir_sum, __pyx_n_s_upstream_flow_accum, __pyx_n_s_flow_accum_nodata, __pyx_n_s_weight_nodata, __pyx_n_s_weight_val, __pyx_n_s_search_stack, __pyx_n_s_flow_pixel, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_last_log_time, __pyx_n_s_flow_accum_managed_raster, __pyx_n_s_tmp_dir_root, __pyx_n_s_tmp_dir, __pyx_n_s_visited_raster_path, __pyx_n_s_visited_managed_raster, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_flow_dir_raster, __pyx_n_s_flow_dir_band, __pyx_n_s_weight_raster, __pyx_n_s_raw_weight_nodata, __pyx_n_s_flow_dir_raster_info, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_modified_offset_dict, __pyx_n_s_preempted); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(4, 0, 51, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_flow_accumulation_mfd, 2129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 2129, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2410
 * 
 * 
 * def distance_to_channel_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path,
 */
  __pyx_tuple__38 = PyTuple_Pack(41, __pyx_n_s_flow_dir_d8_raster_path_band, __pyx_n_s_channel_raster_path_band, __pyx_n_s_target_distance_to_channel_raste, __pyx_n_s_weight_raster_path_band, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_channel_buffer_array, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_q, __pyx_n_s_yi_q, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_distance_to_channel_stack, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_weight_val, __pyx_n_s_pixel_val, __pyx_n_s_weight_nodata, __pyx_n_s_last_log_time, __pyx_n_s_path, __pyx_n_s_distance_nodata, __pyx_n_s_distance_to_channel_managed_rast, __pyx_n_s_weight_raster, __pyx_n_s_raw_weight_nodata, __pyx_n_s_channel_managed_raster, __pyx_n_s_flow_dir_d8_managed_raster, __pyx_n_s_channel_raster, __pyx_n_s_channel_band, __pyx_n_s_flow_dir_raster_info, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_modified_offset_dict); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(5, 0, 41, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_distance_to_channel_d8, 2410, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 2410, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2600
 * 
 * 
 * def distance_to_channel_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,
 */
  __pyx_tuple__40 = PyTuple_Pack(53, __pyx_n_s_flow_dir_mfd_raster_path_band, __pyx_n_s_channel_raster_path_band, __pyx_n_s_target_distance_to_channel_raste, __pyx_n_s_weight_raster_path_band, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_channel_buffer_array, __pyx_n_s_flow_dir_buffer_array, __pyx_n_s_win_ysize, __pyx_n_s_win_xsize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_i_n, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_flow_dir_weight, __pyx_n_s_sum_of_flow_weights, __pyx_n_s_compressed_flow_dir, __pyx_n_s_is_a_channel, __pyx_n_s_distance_to_channel_stack, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_weight_val, __pyx_n_s_weight_nodata, __pyx_n_s_last_log_time, __pyx_n_s_path, __pyx_n_s_distance_nodata, __pyx_n_s_distance_to_channel_managed_rast, __pyx_n_s_channel_managed_raster, __pyx_n_s_tmp_work_dir, __pyx_n_s_visited_raster_path, __pyx_n_s_visited_managed_raster, __pyx_n_s_flow_dir_mfd_managed_raster, __pyx_n_s_channel_raster, __pyx_n_s_channel_band, __pyx_n_s_flow_dir_mfd_raster, __pyx_n_s_flow_dir_mfd_band, __pyx_n_s_weight_raster, __pyx_n_s_raw_weight_nodata, __pyx_n_s_flow_dir_raster_info, __pyx_n_s_offset_dict, __pyx_n_s_current_pixel, __pyx_n_s_xa, __pyx_n_s_xb, __pyx_n_s_ya, __pyx_n_s_yb, __pyx_n_s_modified_offset_dict, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_pixel, __pyx_n_s_preempted, __pyx_n_s_n_distance); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(5, 0, 53, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_distance_to_channel_mfd, 2600, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 2600, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":2866
 * 
 * 
 * def extract_streams_mfd(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band, flow_dir_mfd_path_band,
 *         double flow_threshold, target_stream_raster_path,
 */
  __pyx_tuple__42 = PyTuple_Pack(46, __pyx_n_s_flow_accum_raster_path_band, __pyx_n_s_flow_dir_mfd_path_band, __pyx_n_s_flow_threshold, __pyx_n_s_target_stream_raster_path, __pyx_n_s_trace_threshold_proportion, __pyx_n_s_raster_driver_creation_tuple, __pyx_n_s_flow_accum_info, __pyx_n_s_flow_accum_nodata, __pyx_n_s_stream_nodata, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_flow_accum_mr, __pyx_n_s_stream_mr, __pyx_n_s_flow_dir_mfd_mr, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_win_xsize, __pyx_n_s_win_ysize, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_i_n, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_i_sn, __pyx_n_s_xi_sn, __pyx_n_s_yi_sn, __pyx_n_s_flow_dir_mfd, __pyx_n_s_flow_accum, __pyx_n_s_trace_flow_threshold, __pyx_n_s_n_iterations, __pyx_n_s_is_outlet, __pyx_n_s_stream_val, __pyx_n_s_flow_dir_nodata, __pyx_n_s_open_set, __pyx_n_s_backtrace_set, __pyx_n_s_xi_bn, __pyx_n_s_yi_bn, __pyx_n_s_last_log_time, __pyx_n_s_block_offsets, __pyx_n_s_current_pixel, __pyx_n_s_block_offsets_list, __pyx_n_s_stream_raster, __pyx_n_s_stream_band, __pyx_n_s_stream_array); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 2866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(6, 0, 46, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_extract_streams_mfd, 2866, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 2866, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3066
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_raster_path_band); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 3066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_is_raster_path_band_formatted, 3066, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 3066, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3080
 * 
 * 
 * def extract_strahler_streams_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, flow_accum_raster_path_band,
 *         dem_raster_path_band,
 */
  __pyx_tuple__46 = PyTuple_Pack(112, __pyx_n_s_flow_dir_d8_raster_path_band, __pyx_n_s_flow_accum_raster_path_band, __pyx_n_s_dem_raster_path_band, __pyx_n_s_target_stream_vector_path, __pyx_n_s_min_flow_accum_threshold, __pyx_n_s_river_order, __pyx_n_s_min_p_val, __pyx_n_s_autotune_flow_accumulation, __pyx_n_s_osr_axis_mapping_strategy, __pyx_n_s_flow_dir_info, __pyx_n_s_flow_dir_srs, __pyx_n_s_gpkg_driver, __pyx_n_s_stream_vector, __pyx_n_s_stream_basename, __pyx_n_s_stream_layer, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_flow_accum_managed_raster, __pyx_n_s_dem_managed_raster, __pyx_n_s_flow_nodata, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_d, __pyx_n_s_d_n, __pyx_n_s_n_cols, __pyx_n_s_n_rows, __pyx_n_s_win_xsize, __pyx_n_s_win_ysize, __pyx_n_s_n_pixels, __pyx_n_s_n_processed, __pyx_n_s_last_log_time, __pyx_n_s_source_point_stack, __pyx_n_s_source_stream_point, __pyx_n_s_x_l, __pyx_n_s_y_l, __pyx_n_s_x_n, __pyx_n_s_y_n, __pyx_n_s_upstream_count, __pyx_n_s_upstream_index, __pyx_n_s_upstream_dirs, __pyx_n_s_local_flow_accum, __pyx_n_s_is_drain, __pyx_n_s_coord_to_stream_ids, __pyx_n_s_offset_dict, __pyx_n_s_stream_feature, __pyx_n_s_stream_fid, __pyx_n_s_n_points, __pyx_n_s_downstream_to_upstream_ids, __pyx_n_s_upstream_to_downstream_id, __pyx_n_s_payload, __pyx_n_s_x_u, __pyx_n_s_y_u, __pyx_n_s_ds_x_1, __pyx_n_s_ds_y_1, __pyx_n_s_upstream_id_list, __pyx_n_s_stream_line, __pyx_n_s_downstream_dem, __pyx_n_s_upstream_id, __pyx_n_s_upstream_dem, __pyx_n_s_drop_distance, __pyx_n_s_streams_to_process, __pyx_n_s_base_feature_count, __pyx_n_s_outlet_fid_list, __pyx_n_s_downstream_fid, __pyx_n_s_downstream_feature, __pyx_n_s_connected_upstream_fids, __pyx_n_s_stream_order_list, __pyx_n_s_all_defined, __pyx_n_s_upstream_fid, __pyx_n_s_upstream_feature, __pyx_n_s_upstream_order, __pyx_n_s_sorted_stream_order_list, __pyx_n_s_downstream_order, __pyx_n_s_working_river_id, __pyx_n_s_outlet_index, __pyx_n_s_outlet_fid, __pyx_n_s_search_stack, __pyx_n_s_feature_id, __pyx_n_s_stream_order, __pyx_n_s_upstream_stack, __pyx_n_s_streams_by_order, __pyx_n_s_drop_distance_collection, __pyx_n_s_max_upstream_flow_accum, __pyx_n_s_order, __pyx_n_s_working_flow_accum_threshold, __pyx_n_s_test_order, __pyx_n_s__33, __pyx_n_s_p_val, __pyx_n_s_streams_to_retest, __pyx_n_s_ds_x, __pyx_n_s_ds_y, __pyx_n_s_upstream_d8_dir, __pyx_n_s_working_stack, __pyx_n_s_fid_to_order, __pyx_n_s_processed_segments, __pyx_n_s_segments_to_process, __pyx_n_s_deleted_set, __pyx_n_s_working_fid, __pyx_n_s_upstream_fid_list, __pyx_n_s_order_count, __pyx_n_s_working_order, __pyx_n_s_working_feature, __pyx_n_s_connected_fids, __pyx_n_s_downstream_geom, __pyx_n_s_working_geom, __pyx_n_s_multi_line, __pyx_n_s_joined_line, __pyx_n_s_upstream_all_defined, __pyx_n_s_connected_fid, __pyx_n_s_stream_feature, __pyx_n_s_fid); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 3080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(9, 0, 112, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_extract_strahler_streams_d8, 3080, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 3080, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3755
 * 
 * 
 * def _build_discovery_finish_rasters(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, target_discovery_raster_path,
 *         target_finish_raster_path):
 */
  __pyx_tuple__48 = PyTuple_Pack(33, __pyx_n_s_flow_dir_d8_raster_path_band, __pyx_n_s_target_discovery_raster_path, __pyx_n_s_target_finish_raster_path, __pyx_n_s_flow_dir_info, __pyx_n_s_n_cols, __pyx_n_s_n_rows, __pyx_n_s_flow_dir_nodata, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_discovery_managed_raster, __pyx_n_s_finish_managed_raster, __pyx_n_s_discovery_stack, __pyx_n_s_finish_stack, __pyx_n_s_raster_coord, __pyx_n_s_finish_coordinate, __pyx_n_s_discovery_count, __pyx_n_s_n_processed, __pyx_n_s_n_pixels, __pyx_n_s_last_log_time, __pyx_n_s_n_pushed, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_win_xsize, __pyx_n_s_win_ysize, __pyx_n_s_x_l, __pyx_n_s_y_l, __pyx_n_s_x_n, __pyx_n_s_y_n, __pyx_n_s_n_dir, __pyx_n_s_test_dir, __pyx_n_s_offset_dict, __pyx_n_s_d_n); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 3755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(3, 0, 33, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_build_discovery_finish_rasters, 3755, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 3755, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":3885
 * 
 * 
 * def calculate_subwatershed_boundary(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band,
 *         strahler_stream_vector_path, target_watershed_boundary_vector_path,
 */
  __pyx_tuple__50 = PyTuple_Pack(82, __pyx_n_s_d8_flow_dir_raster_path_band, __pyx_n_s_strahler_stream_vector_path, __pyx_n_s_target_watershed_boundary_vector, __pyx_n_s_max_steps_per_watershed, __pyx_n_s_outlet_at_confluence, __pyx_n_s_workspace_dir, __pyx_n_s_discovery_time_raster_path, __pyx_n_s_finish_time_raster_path, __pyx_n_s_discovery_managed_raster, __pyx_n_s_finish_managed_raster, __pyx_n_s_d8_flow_dir_managed_raster, __pyx_n_s_discovery_info, __pyx_n_s_discovery_nodata, __pyx_n_s_n_cols, __pyx_n_s_n_rows, __pyx_n_s_geotransform, __pyx_n_s_g0, __pyx_n_s_g1, __pyx_n_s_g2, __pyx_n_s_g3, __pyx_n_s_g4, __pyx_n_s_g5, __pyx_n_s_discovery_srs, __pyx_n_s_gpkg_driver, __pyx_n_s_watershed_vector, __pyx_n_s_watershed_basename, __pyx_n_s_watershed_layer, __pyx_n_s_x_l, __pyx_n_s_y_l, __pyx_n_s_outflow_dir, __pyx_n_s_x_f, __pyx_n_s_y_f, __pyx_n_s_x_p, __pyx_n_s_y_p, __pyx_n_s_discovery, __pyx_n_s_finish, __pyx_n_s_last_log_time, __pyx_n_s_stream_vector, __pyx_n_s_stream_layer, __pyx_n_s_upstream_fid_map, __pyx_n_s_stream_feature, __pyx_n_s_ds_x, __pyx_n_s_ds_y, __pyx_n_s_visit_order_stack, __pyx_n_s__33, __pyx_n_s_outlet_fid, __pyx_n_s_working_stack, __pyx_n_s_processed_nodes, __pyx_n_s_working_fid, __pyx_n_s_working_feature, __pyx_n_s_us_x, __pyx_n_s_us_y, __pyx_n_s_ds_x_1, __pyx_n_s_ds_y_1, __pyx_n_s_upstream_coord, __pyx_n_s_upstream_fids, __pyx_n_s_edge_side, __pyx_n_s_edge_dir, __pyx_n_s_cell_to_test, __pyx_n_s_out_dir_increase, __pyx_n_s_left, __pyx_n_s_right, __pyx_n_s_n_steps, __pyx_n_s_terminated_early, __pyx_n_s_delta_x, __pyx_n_s_delta_y, __pyx_n_s_int_max_steps_per_watershed, __pyx_n_s_index, __pyx_n_s_stream_fid, __pyx_n_s_boundary_list, __pyx_n_s_outlet_x, __pyx_n_s_outlet_y, __pyx_n_s_watershed_boundary, __pyx_n_s_left_in, __pyx_n_s_right_in, __pyx_n_s_out_dir, __pyx_n_s_watershed_feature, __pyx_n_s_watershed_polygon, __pyx_n_s_boundary_x, __pyx_n_s_boundary_y, __pyx_n_s_x, __pyx_n_s_fid); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 3885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(5, 0, 82, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_calculate_subwatershed_boundary_4, 3885, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 3885, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":4217
 * 
 * 
 * def detect_lowest_drain_and_sink(dem_raster_path_band):             # <<<<<<<<<<<<<<
 *     """Find the lowest drain and sink pixel in the DEM.
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(27, __pyx_n_s_dem_raster_path_band, __pyx_n_s_lowest_drain_height, __pyx_n_s_lowest_sink_height, __pyx_n_s_drain_pixel, __pyx_n_s_sink_pixel, __pyx_n_s_dem_raster_info, __pyx_n_s_dem_nodata, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_dem_managed_raster, __pyx_n_s_last_log_time, __pyx_n_s_offset_dict, __pyx_n_s_win_xsize, __pyx_n_s_win_ysize, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_current_pixel, __pyx_n_s_yi, __pyx_n_s_yi_root, __pyx_n_s_xi, __pyx_n_s_xi_root, __pyx_n_s_center_val, __pyx_n_s_pixel_drains, __pyx_n_s_i_n, __pyx_n_s_xi_n, __pyx_n_s_yi_n, __pyx_n_s_n_height); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 4217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 27, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_detect_lowest_drain_and_sink, 4217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 4217, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":4339
 * 
 * 
 * def detect_outlets(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, flow_dir_type, target_outlet_vector_path):
 *     """Create point vector indicating flow raster outlets.
 */
  __pyx_tuple__54 = PyTuple_Pack(40, __pyx_n_s_flow_dir_raster_path_band, __pyx_n_s_flow_dir_type, __pyx_n_s_target_outlet_vector_path, __pyx_n_s_d8_flow_dir_mode, __pyx_n_s_xoff, __pyx_n_s_yoff, __pyx_n_s_win_xsize, __pyx_n_s_win_ysize, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_xi_root, __pyx_n_s_yi_root, __pyx_n_s_raster_x_size, __pyx_n_s_raster_y_size, __pyx_n_s_flow_dir, __pyx_n_s_flow_dir_n, __pyx_n_s_next_id, __pyx_n_s_n_dir, __pyx_n_s_is_outlet, __pyx_n_s_x_off_border, __pyx_n_s_y_off_border, __pyx_n_s_win_xsize_border, __pyx_n_s_win_ysize_border, __pyx_n_s_flow_dir_block, __pyx_n_s_raster_info, __pyx_n_s_flow_dir_nodata, __pyx_n_s_flow_dir_raster, __pyx_n_s_flow_dir_band, __pyx_n_s_raster_srs, __pyx_n_s_gpkg_driver, __pyx_n_s_outlet_vector, __pyx_n_s_outet_basename, __pyx_n_s_outlet_layer, __pyx_n_s_last_log_time, __pyx_n_s_block_offsets, __pyx_n_s_current_pixel, __pyx_n_s_outlet_point, __pyx_n_s_proj_x, __pyx_n_s_proj_y, __pyx_n_s_outlet_feature); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 4339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 40, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_detect_outlets, 4339, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 4339, __pyx_L1_error)

  /* "src/geoprocessing/routing/routing.pyx":4772
 * 
 * 
 * def _delete_feature(             # <<<<<<<<<<<<<<
 *         stream_feature, stream_layer, upstream_to_downstream_id,
 *         downstream_to_upstream_ids):
 */
  __pyx_tuple__56 = PyTuple_Pack(6, __pyx_n_s_stream_feature, __pyx_n_s_stream_layer, __pyx_n_s_upstream_to_downstream_id, __pyx_n_s_downstream_to_upstream_ids, __pyx_n_s_stream_fid, __pyx_n_s_downstream_fid); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 4772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_routin, __pyx_n_s_delete_feature, 4772, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 4772, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_25 = PyFloat_FromDouble(1.25); if (unlikely(!__pyx_float_1_25)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000000 = PyInt_FromLong(1000000L); if (unlikely(!__pyx_int_1000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster = &__pyx_vtable_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.set = (void (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int, double))__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_set;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.get = (double (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int, int))__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_get;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster._load_block = (void (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *, int))__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster__load_block;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.flush = (void (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster *))__pyx_f_8ecoshard_13geoprocessing_7routing_7routing_14_ManagedRaster_flush;
  if (PyType_Ready(&__pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.tp_dictoffset && __pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster.tp_dict, __pyx_vtabptr_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ManagedRaster, (PyObject *)&__pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_ptype_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster = &__pyx_type_8ecoshard_13geoprocessing_7routing_7routing__ManagedRaster;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initrouting(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initrouting(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_routing(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_routing(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_routing(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static int __pyx_t_4[8];
  static int __pyx_t_5[8];
  static int __pyx_t_6[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'routing' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_routing(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("routing", __pyx_methods, __pyx_k_Provides_PyGeprocessing_Routing, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ecoshard__geoprocessing__routing__routing) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ecoshard.geoprocessing.routing.routing")) {
      if (unlikely(PyDict_SetItemString(modules, "ecoshard.geoprocessing.routing.routing", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "src/geoprocessing/routing/routing.pyx":20
 *      5 6 7
 * """
 * import collections             # <<<<<<<<<<<<<<
 * import logging
 * import os
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":21
 * """
 * import collections
 * import logging             # <<<<<<<<<<<<<<
 * import os
 * import shutil
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":22
 * import collections
 * import logging
 * import os             # <<<<<<<<<<<<<<
 * import shutil
 * import tempfile
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":23
 * import logging
 * import os
 * import shutil             # <<<<<<<<<<<<<<
 * import tempfile
 * import time
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_shutil, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shutil, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":24
 * import os
 * import shutil
 * import tempfile             # <<<<<<<<<<<<<<
 * import time
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_tempfile, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":25
 * import shutil
 * import tempfile
 * import time             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":41
 * from libcpp.stack cimport stack
 * from libcpp.vector cimport vector
 * from osgeo import gdal             # <<<<<<<<<<<<<<
 * from osgeo import ogr
 * from osgeo import osr
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_gdal);
  __Pyx_GIVEREF(__pyx_n_s_gdal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_gdal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gdal, __pyx_t_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":42
 * from libcpp.vector cimport vector
 * from osgeo import gdal
 * from osgeo import ogr             # <<<<<<<<<<<<<<
 * from osgeo import osr
 * import numpy
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ogr);
  __Pyx_GIVEREF(__pyx_n_s_ogr);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ogr);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ogr, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":43
 * from osgeo import gdal
 * from osgeo import ogr
 * from osgeo import osr             # <<<<<<<<<<<<<<
 * import numpy
 * import shapely.wkb
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_osr);
  __Pyx_GIVEREF(__pyx_n_s_osr);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_osr);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_osr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osr, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":44
 * from osgeo import ogr
 * from osgeo import osr
 * import numpy             # <<<<<<<<<<<<<<
 * import shapely.wkb
 * import shapely.ops
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_2) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":45
 * from osgeo import osr
 * import numpy
 * import shapely.wkb             # <<<<<<<<<<<<<<
 * import shapely.ops
 * import scipy.stats
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_shapely_wkb, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shapely, __pyx_t_2) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":46
 * import numpy
 * import shapely.wkb
 * import shapely.ops             # <<<<<<<<<<<<<<
 * import scipy.stats
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_shapely_ops, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shapely, __pyx_t_2) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":47
 * import shapely.wkb
 * import shapely.ops
 * import scipy.stats             # <<<<<<<<<<<<<<
 * 
 * from ..geoprocessing_core import DEFAULT_OSR_AXIS_MAPPING_STRATEGY
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_stats, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scipy, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":49
 * import scipy.stats
 * 
 * from ..geoprocessing_core import DEFAULT_OSR_AXIS_MAPPING_STRATEGY             # <<<<<<<<<<<<<<
 * import pygeoprocessing
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG);
  __Pyx_GIVEREF(__pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_geoprocessing_core, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG, __pyx_t_2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":50
 * 
 * from ..geoprocessing_core import DEFAULT_OSR_AXIS_MAPPING_STRATEGY
 * import pygeoprocessing             # <<<<<<<<<<<<<<
 * 
 * LOGGER = logging.getLogger(__name__)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pygeoprocessing, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pygeoprocessing, __pyx_t_1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/routing.pyx":52
 * import pygeoprocessing
 * 
 * LOGGER = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 * 
 * cdef float _LOGGING_PERIOD = 10.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOGGER, __pyx_t_3) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":54
 * LOGGER = logging.getLogger(__name__)
 * 
 * cdef float _LOGGING_PERIOD = 10.0             # <<<<<<<<<<<<<<
 * 
 * # This module creates rasters with a memory xy block size of 2**BLOCK_BITS
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing__LOGGING_PERIOD = 10.0;

  /* "src/geoprocessing/routing/routing.pyx":57
 * 
 * # This module creates rasters with a memory xy block size of 2**BLOCK_BITS
 * cdef int BLOCK_BITS = 8             # <<<<<<<<<<<<<<
 * 
 * # Number of raster blocks to hold in memory at once per Managed Raster
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS = 8;

  /* "src/geoprocessing/routing/routing.pyx":60
 * 
 * # Number of raster blocks to hold in memory at once per Managed Raster
 * cdef int MANAGED_RASTER_N_BLOCKS = 2**6             # <<<<<<<<<<<<<<
 * 
 * # these are the creation options that'll be used for all the rasters
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_MANAGED_RASTER_N_BLOCKS = 64;

  /* "src/geoprocessing/routing/routing.pyx":65
 * DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS = ('GTiff', (
 *     'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),             # <<<<<<<<<<<<<<
 *     'BLOCKYSIZE=%d' % (1 << BLOCK_BITS)))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((1 << __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_BLOCKXSIZE_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":66
 *     'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 *     'BLOCKYSIZE=%d' % (1 << BLOCK_BITS)))             # <<<<<<<<<<<<<<
 * 
 * # if nodata is not defined for a float, it's a difficult choice. this number
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((1 << __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_BLOCK_BITS)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_BLOCKYSIZE_d, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/routing.pyx":64
 * # these are the creation options that'll be used for all the rasters
 * DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS = ('GTiff', (
 *     'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',             # <<<<<<<<<<<<<<
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 *     'BLOCKYSIZE=%d' % (1 << BLOCK_BITS)))
 */
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_u_TILED_YES);
  __Pyx_GIVEREF(__pyx_kp_u_TILED_YES);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_TILED_YES);
  __Pyx_INCREF(__pyx_kp_u_BIGTIFF_YES);
  __Pyx_GIVEREF(__pyx_kp_u_BIGTIFF_YES);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u_BIGTIFF_YES);
  __Pyx_INCREF(__pyx_kp_u_COMPRESS_LZW);
  __Pyx_GIVEREF(__pyx_kp_u_COMPRESS_LZW);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_COMPRESS_LZW);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":63
 * 
 * # these are the creation options that'll be used for all the rasters
 * DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS = ('GTiff', (             # <<<<<<<<<<<<<<
 *     'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_GTiff);
  __Pyx_GIVEREF(__pyx_n_u_GTiff);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_GTiff);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT, __pyx_t_2) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":70
 * # if nodata is not defined for a float, it's a difficult choice. this number
 * # probably won't collide with anything ever created by humans
 * cdef double IMPROBABLE_FLOAT_NODATA = -1.23789789e29             # <<<<<<<<<<<<<<
 * 
 * # a pre-computed square root of 2 constant
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_IMPROBABLE_FLOAT_NODATA = -1.23789789e29;

  /* "src/geoprocessing/routing/routing.pyx":73
 * 
 * # a pre-computed square root of 2 constant
 * cdef double SQRT2 = 1.4142135623730951             # <<<<<<<<<<<<<<
 * cdef double SQRT2_INV = 1.0 / 1.4142135623730951
 * 
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2 = 1.4142135623730951;

  /* "src/geoprocessing/routing/routing.pyx":74
 * # a pre-computed square root of 2 constant
 * cdef double SQRT2 = 1.4142135623730951
 * cdef double SQRT2_INV = 1.0 / 1.4142135623730951             # <<<<<<<<<<<<<<
 * 
 * # used to loop over neighbors and offset the x/y values as defined below
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_SQRT2_INV = (1.0 / 1.4142135623730951);

  /* "src/geoprocessing/routing/routing.pyx":80
 * #  4x0
 * #  567
 * cdef int *D8_XOFFSET = [1, 1, 0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * cdef int *D8_YOFFSET = [0, -1, -1, -1, 0, +1, +1, +1]
 * 
 */
  __pyx_t_4[0] = 1;
  __pyx_t_4[1] = 1;
  __pyx_t_4[2] = 0;
  __pyx_t_4[3] = -1;
  __pyx_t_4[4] = -1;
  __pyx_t_4[5] = -1;
  __pyx_t_4[6] = 0;
  __pyx_t_4[7] = 1;
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_XOFFSET = __pyx_t_4;

  /* "src/geoprocessing/routing/routing.pyx":81
 * #  567
 * cdef int *D8_XOFFSET = [1, 1, 0, -1, -1, -1, 0, 1]
 * cdef int *D8_YOFFSET = [0, -1, -1, -1, 0, +1, +1, +1]             # <<<<<<<<<<<<<<
 * 
 * # this is used to calculate the opposite D8 direction interpreting the index
 */
  __pyx_t_5[0] = 0;
  __pyx_t_5[1] = -1;
  __pyx_t_5[2] = -1;
  __pyx_t_5[3] = -1;
  __pyx_t_5[4] = 0;
  __pyx_t_5[5] = 1;
  __pyx_t_5[6] = 1;
  __pyx_t_5[7] = 1;
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_YOFFSET = __pyx_t_5;

  /* "src/geoprocessing/routing/routing.pyx":85
 * # this is used to calculate the opposite D8 direction interpreting the index
 * # as a D8 direction
 * cdef int* D8_REVERSE_DIRECTION = [4, 5, 6, 7, 0, 1, 2, 3]             # <<<<<<<<<<<<<<
 * 
 * # exposing stl::priority_queue so we can have all 3 template arguments so
 */
  __pyx_t_6[0] = 4;
  __pyx_t_6[1] = 5;
  __pyx_t_6[2] = 6;
  __pyx_t_6[3] = 7;
  __pyx_t_6[4] = 0;
  __pyx_t_6[5] = 1;
  __pyx_t_6[6] = 2;
  __pyx_t_6[7] = 3;
  __pyx_v_8ecoshard_13geoprocessing_7routing_7routing_D8_REVERSE_DIRECTION = __pyx_t_6;

  /* "src/geoprocessing/routing/routing.pyx":564
 * 
 * 
 * def _generate_read_bounds(offset_dict, raster_x_size, raster_y_size):             # <<<<<<<<<<<<<<
 *     """Helper function to expand GDAL memory block read bound by 1 pixel.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_1_generate_read_bounds, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_generate_read_bounds, __pyx_t_2) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":613
 *         long long max_pixel_fill_count=-1,
 *         single_outlet_tuple=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """Fill the pits in a DEM.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__4 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":608
 * 
 * 
 * def fill_pits(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_filled_dem_raster_path,
 *         working_dir=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_3fill_pits, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_pits_2, __pyx_t_2) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1053
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """D8 flow direction.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__5 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1050
 * 
 * 
 * def flow_dir_d8(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path,
 *         working_dir=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_5flow_dir_d8, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flow_dir_d8_2, __pyx_t_2) < 0) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1418
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """D8 flow accumulation.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1415
 * 
 * 
 * def flow_accumulation_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_7flow_accumulation_d8, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flow_accumulation_d8, __pyx_t_2) < 0) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1640
 * def flow_dir_mfd(
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """Multiple flow direction.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__9 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1638
 * 
 * 
 * def flow_dir_mfd(             # <<<<<<<<<<<<<<
 *         dem_raster_path_band, target_flow_dir_path, working_dir=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_9flow_dir_mfd, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flow_dir_mfd, __pyx_t_2) < 0) __PYX_ERR(0, 1638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2132
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """Multiple flow direction accumulation.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__10 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2129
 * 
 * 
 * def flow_accumulation_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, target_flow_accum_raster_path,
 *         weight_raster_path_band=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_11flow_accumulation_mfd, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flow_accumulation_mfd, __pyx_t_2) < 0) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2414
 *         target_distance_to_channel_raster_path,
 *         weight_raster_path_band=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """Calculate distance to channel with D8 flow.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__11 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2410
 * 
 * 
 * def distance_to_channel_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_13distance_to_channel_d8, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_distance_to_channel_d8, __pyx_t_2) < 0) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2603
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """Calculate distance to channel with multiple flow direction.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__12 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2600
 * 
 * 
 * def distance_to_channel_mfd(             # <<<<<<<<<<<<<<
 *         flow_dir_mfd_raster_path_band, channel_raster_path_band,
 *         target_distance_to_channel_raster_path, weight_raster_path_band=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_15distance_to_channel_mfd, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_distance_to_channel_mfd, __pyx_t_2) < 0) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2870
 *         double flow_threshold, target_stream_raster_path,
 *         double trace_threshold_proportion=1.0,
 *         raster_driver_creation_tuple=DEFAULT_GTIFF_CREATION_TUPLE_OPTIONS):             # <<<<<<<<<<<<<<
 *     """Classify a stream raster from MFD flow accumulation.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_GTIFF_CREATION_TUPLE_OPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__13 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":2866
 * 
 * 
 * def extract_streams_mfd(             # <<<<<<<<<<<<<<
 *         flow_accum_raster_path_band, flow_dir_mfd_path_band,
 *         double flow_threshold, target_stream_raster_path,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_17extract_streams_mfd, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_streams_mfd, __pyx_t_2) < 0) __PYX_ERR(0, 2866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3066
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_19_is_raster_path_band_formatted, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_raster_path_band_formatted, __pyx_t_2) < 0) __PYX_ERR(0, 3066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3088
 *         float min_p_val=0.05,
 *         autotune_flow_accumulation=False,
 *         osr_axis_mapping_strategy=DEFAULT_OSR_AXIS_MAPPING_STRATEGY):             # <<<<<<<<<<<<<<
 *     """Extract Strahler order stream geometry from flow accumulation.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_OSR_AXIS_MAPPING_STRATEG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__14 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3080
 * 
 * 
 * def extract_strahler_streams_d8(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, flow_accum_raster_path_band,
 *         dem_raster_path_band,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_21extract_strahler_streams_d8, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_strahler_streams_d8, __pyx_t_2) < 0) __PYX_ERR(0, 3080, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3755
 * 
 * 
 * def _build_discovery_finish_rasters(             # <<<<<<<<<<<<<<
 *         flow_dir_d8_raster_path_band, target_discovery_raster_path,
 *         target_finish_raster_path):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_23_build_discovery_finish_rasters, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_build_discovery_finish_rasters, __pyx_t_2) < 0) __PYX_ERR(0, 3755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":3885
 * 
 * 
 * def calculate_subwatershed_boundary(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band,
 *         strahler_stream_vector_path, target_watershed_boundary_vector_path,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_25calculate_subwatershed_boundary, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calculate_subwatershed_boundary_4, __pyx_t_2) < 0) __PYX_ERR(0, 3885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4217
 * 
 * 
 * def detect_lowest_drain_and_sink(dem_raster_path_band):             # <<<<<<<<<<<<<<
 *     """Find the lowest drain and sink pixel in the DEM.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_27detect_lowest_drain_and_sink, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_detect_lowest_drain_and_sink, __pyx_t_2) < 0) __PYX_ERR(0, 4217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4339
 * 
 * 
 * def detect_outlets(             # <<<<<<<<<<<<<<
 *         flow_dir_raster_path_band, flow_dir_type, target_outlet_vector_path):
 *     """Create point vector indicating flow raster outlets.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_29detect_outlets, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_detect_outlets, __pyx_t_2) < 0) __PYX_ERR(0, 4339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":4772
 * 
 * 
 * def _delete_feature(             # <<<<<<<<<<<<<<
 *         stream_feature, stream_layer, upstream_to_downstream_id,
 *         downstream_to_upstream_ids):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_7routing_31_delete_feature, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delete_feature, __pyx_t_2) < 0) __PYX_ERR(0, 4772, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/routing.pyx":1
 * # coding=UTF-8             # <<<<<<<<<<<<<<
 * # distutils: language=c++
 * # cython: language_level=3
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ecoshard.geoprocessing.routing.routing", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ecoshard.geoprocessing.routing.routing");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* None */
  static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* None */
  static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* None */
  static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* CIntToPyUnicode */
  #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(long)*3+2];
    char *dpos, *end = digits + sizeof(long)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    long remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (long) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (long) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (long) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
  static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* pop_index */
  static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(__Pyx_is_valid_index(cix, size))) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* CIntToPyUnicode */
  #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackUnboundCMethod */
  static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
  static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
  static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
  static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
  static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
  static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObjectFormat */
  #if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* pyfrozenset_new */
  static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
  static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
