/* Generated by Cython 0.29.23 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_23"
#define CYTHON_HEX_VERSION 0x001D17F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ecoshard__geoprocessing__routing__watershed
#define __PYX_HAVE_API__ecoshard__geoprocessing__routing__watershed
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <stddef.h>
#include <time.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <list>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <queue>
#include <set>
#include "LRUCache.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "src\\geoprocessing\\routing\\watershed.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds;

/* "src/geoprocessing/routing/watershed.pyx":65
 * # this ctype is used to store the block ID and the block buffer as one object
 * # inside Managed Raster
 * ctypedef pair[int, int*] BlockBufferPair             # <<<<<<<<<<<<<<
 * 
 * # a class to allow fast random per-pixel access to a raster for both setting
 */
typedef std::pair<int,int *>  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_BlockBufferPair;

/* "src/geoprocessing/routing/watershed.pyx":385
 * # CoordinatePair().second is the y coordinate.  Both are in integer pixel
 * # coordinates.
 * ctypedef pair[long, long] CoordinatePair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<long,long>  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair;

/* "src/geoprocessing/routing/watershed.pyx":402
 * 
 * 
 * cdef cset[CoordinatePair] _c_split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, tuple flow_dir_geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows,
 */
struct __pyx_opt_args_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds {
  int __pyx_n;
  PyObject *diagnostic_vector_path;
};

/* "src/geoprocessing/routing/watershed.pyx":69
 * # a class to allow fast random per-pixel access to a raster for both setting
 * # and reading pixels.
 * cdef class _ManagedRaster:             # <<<<<<<<<<<<<<
 *     cdef LRUCache[int, int*]* lru_cache
 *     cdef cset[int] dirty_blocks
 */
struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster {
  PyObject_HEAD
  struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_vtab;
  LRUCache<int,int *>  *lru_cache;
  std::set<int>  dirty_blocks;
  int block_xsize;
  int block_ysize;
  int block_xmod;
  int block_ymod;
  int block_xbits;
  int block_ybits;
  int raster_x_size;
  int raster_y_size;
  int block_nx;
  int block_ny;
  int write_mode;
  PyObject *raster_path;
  int band_id;
  int closed;
};



struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster {
  void (*set)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int, int, int);
  int (*get)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int, int);
  void (*_load_block)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int);
};
static struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_vtabptr_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster;
static CYTHON_INLINE void __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_set(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int, int, int);
static CYTHON_INLINE int __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_get(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int, int);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* None.proto */
static CYTHON_INLINE int __Pyx_div_int(int, int);

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE void __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_set(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi, int __pyx_v_value); /* proto*/
static CYTHON_INLINE int __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_get(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi); /* proto*/
static void __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster__load_block(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, int __pyx_v_block_index); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'libc.time' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'ecoshard.geoprocessing.routing.watershed' */
static PyTypeObject *__pyx_ptype_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster = 0;
static int __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_BLOCK_BITS;
static int __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_MANAGED_RASTER_N_BLOCKS;
static int *__pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_D8_REVERSE_DIRECTION;
static int *__pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_NEIGHBOR_COL;
static int *__pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_NEIGHBOR_ROW;
static std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, struct __pyx_opt_args_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds *__pyx_optional_args); /*proto*/
static PyObject *__pyx_convert_pair_to_py_long____long(std::pair<long,long>  const &); /*proto*/
static std::pair<long,long>  __pyx_convert_pair_from_py_long__and_long(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_uint8 = { "npy_uint8", NULL, sizeof(npy_uint8), { 0 }, 0, IS_UNSIGNED(npy_uint8) ? 'U' : 'I', IS_UNSIGNED(npy_uint8), 0 };
#define __Pyx_MODULE_NAME "ecoshard.geoprocessing.routing.watershed"
extern int __pyx_module_is_main_ecoshard__geoprocessing__routing__watershed;
int __pyx_module_is_main_ecoshard__geoprocessing__routing__watershed = 0;

/* Implementation of 'ecoshard.geoprocessing.routing.watershed' */
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_[] = ", ";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_VRT[] = "VRT";
static const char __pyx_k__10[] = "_";
static const char __pyx_k_box[] = "box";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_fid[] = "fid";
static const char __pyx_k_mem[] = "mem";
static const char __pyx_k_ogr[] = "ogr";
static const char __pyx_k_osr[] = "osr";
static const char __pyx_k_wkb[] = "wkb";
static const char __pyx_k_GPKG[] = "GPKG";
static const char __pyx_k_gdal[] = "gdal";
static const char __pyx_k_geom[] = "geom";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_log2[] = "log2";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_prep[] = "prep";
static const char __pyx_k_seed[] = "seed";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_xoff[] = "xoff";
static const char __pyx_k_yoff[] = "yoff";
static const char __pyx_k_GTiff[] = "GTiff";
static const char __pyx_k_Point[] = "Point";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_osgeo[] = "osgeo";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_seeds[] = "seeds";
static const char __pyx_k_ws_id[] = "ws_id";
static const char __pyx_k_Create[] = "Create";
static const char __pyx_k_GetFID[] = "GetFID";
static const char __pyx_k_LOGGER[] = "LOGGER";
static const char __pyx_k_Memory[] = "Memory";
static const char __pyx_k_OpenEx[] = "OpenEx";
static const char __pyx_k_WSID_1[] = "WSID <= 1!";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_driver[] = "driver";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_gmtime[] = "gmtime";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_ix_max[] = "ix_max";
static const char __pyx_k_ix_min[] = "ix_min";
static const char __pyx_k_iy_max[] = "iy_max";
static const char __pyx_k_iy_min[] = "iy_min";
static const char __pyx_k_nodata[] = "nodata";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_rmtree[] = "rmtree";
static const char __pyx_k_schema[] = "schema";
static const char __pyx_k_shutil[] = "shutil";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_Feature[] = "Feature";
static const char __pyx_k_IsEmpty[] = "IsEmpty";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_Polygon[] = "Polygon";
static const char __pyx_k_band_id[] = "band_id";
static const char __pyx_k_feature[] = "feature";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_mkdtemp[] = "mkdtemp";
static const char __pyx_k_n_bands[] = "n_bands";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_shapely[] = "shapely";
static const char __pyx_k_BuildVRT[] = "BuildVRT";
static const char __pyx_k_GDT_Byte[] = "GDT_Byte";
static const char __pyx_k_Geometry[] = "Geometry";
static const char __pyx_k_GetField[] = "GetField";
static const char __pyx_k_GetLayer[] = "GetLayer";
static const char __pyx_k_SetField[] = "SetField";
static const char __pyx_k_SetWidth[] = "SetWidth";
static const char __pyx_k_geom_wkb[] = "geom_wkb";
static const char __pyx_k_geometry[] = "geometry";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_makedirs[] = "makedirs";
static const char __pyx_k_prepared[] = "prepared";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_strftime[] = "strftime";
static const char __pyx_k_tempfile[] = "tempfile";
static const char __pyx_k_vrt_band[] = "vrt_band";
static const char __pyx_k_vrt_path[] = "vrt_path";
static const char __pyx_k_wkbPoint[] = "wkbPoint";
static const char __pyx_k_FieldDefn[] = "FieldDefn";
static const char __pyx_k_GA_Update[] = "GA_Update";
static const char __pyx_k_OF_RASTER[] = "OF_RASTER";
static const char __pyx_k_OF_VECTOR[] = "OF_VECTOR";
static const char __pyx_k_TILED_YES[] = "TILED=YES";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_bbox_maxx[] = "bbox_maxx";
static const char __pyx_k_bbox_maxy[] = "bbox_maxy";
static const char __pyx_k_bbox_minx[] = "bbox_minx";
static const char __pyx_k_bbox_miny[] = "bbox_miny";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_s_vrt_vrt[] = "%s_vrt.vrt";
static const char __pyx_k_source_gt[] = "source_gt";
static const char __pyx_k_win_xsize[] = "win_xsize";
static const char __pyx_k_win_ysize[] = "win_ysize";
static const char __pyx_k_FlushCache[] = "FlushCache";
static const char __pyx_k_GDT_UInt32[] = "GDT_UInt32";
static const char __pyx_k_GetFeature[] = "GetFeature";
static const char __pyx_k_OFTInteger[] = "OFTInteger";
static const char __pyx_k_Polygonize[] = "Polygonize";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_WriteArray[] = "WriteArray";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_field_name[] = "field_name";
static const char __pyx_k_intersects[] = "intersects";
static const char __pyx_k_iterblocks[] = "iterblocks";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_return_set[] = "return_set";
static const char __pyx_k_vrt_raster[] = "vrt_raster";
static const char __pyx_k_watersheds[] = "watersheds";
static const char __pyx_k_wkbPolygon[] = "wkbPolygon";
static const char __pyx_k_wkbUnknown[] = "wkbUnknown";
static const char __pyx_k_write_mode[] = "write_mode";
static const char __pyx_k_AddGeometry[] = "AddGeometry";
static const char __pyx_k_BIGTIFF_YES[] = "BIGTIFF=YES";
static const char __pyx_k_CreateField[] = "CreateField";
static const char __pyx_k_CreateLayer[] = "CreateLayer";
static const char __pyx_k_DeleteLayer[] = "DeleteLayer";
static const char __pyx_k_ExportToWkb[] = "ExportToWkb";
static const char __pyx_k_ExportToWkt[] = "ExportToWkt";
static const char __pyx_k_GDT_Unknown[] = "GDT_Unknown";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_ReadAsArray[] = "ReadAsArray";
static const char __pyx_k_SetGeometry[] = "SetGeometry";
static const char __pyx_k_burn_values[] = "burn_values";
static const char __pyx_k_current_fid[] = "current_fid";
static const char __pyx_k_field_value[] = "field_value";
static const char __pyx_k_index_field[] = "index_field";
static const char __pyx_k_raster_path[] = "raster_path";
static const char __pyx_k_raster_size[] = "raster_size";
static const char __pyx_k_shapely_wkb[] = "shapely.wkb";
static const char __pyx_k_vrt_options[] = "vrt_options";
static const char __pyx_k_working_dir[] = "working_dir";
static const char __pyx_k_BLOCKXSIZE_d[] = "BLOCKXSIZE=%d";
static const char __pyx_k_BLOCKYSIZE_d[] = "BLOCKYSIZE=%d";
static const char __pyx_k_COMPRESS_LZW[] = "COMPRESS=LZW";
static const char __pyx_k_CreateFields[] = "CreateFields";
static const char __pyx_k_GetLayerDefn[] = "GetLayerDefn";
static const char __pyx_k_ResetReading[] = "ResetReading";
static const char __pyx_k_bounding_box[] = "bounding_box";
static const char __pyx_k_flow_dir_srs[] = "flow_dir_srs";
static const char __pyx_k_geotransform[] = "geotransform";
static const char __pyx_k_gtiff_driver[] = "gtiff_driver";
static const char __pyx_k_neighbor_col[] = "neighbor_col";
static const char __pyx_k_neighbor_row[] = "neighbor_row";
static const char __pyx_k_new_geometry[] = "new_geometry";
static const char __pyx_k_outputBounds[] = "outputBounds";
static const char __pyx_k_reverse_flow[] = "reverse_flow";
static const char __pyx_k_s_seeds_gpkg[] = "%s_seeds.gpkg";
static const char __pyx_k_shapely_geom[] = "shapely_geom";
static const char __pyx_k_source_layer[] = "source_layer";
static const char __pyx_k_CreateFeature[] = "CreateFeature";
static const char __pyx_k_GetRasterBand[] = "GetRasterBand";
static const char __pyx_k_ImportFromWkt[] = "ImportFromWkt";
static const char __pyx_k_ManagedRaster[] = "_ManagedRaster";
static const char __pyx_k_SetProjection[] = "SetProjection";
static const char __pyx_k_current_pixel[] = "current_pixel";
static const char __pyx_k_duplicate_fid[] = "duplicate_fid";
static const char __pyx_k_flow_dir_bbox[] = "flow_dir_bbox";
static const char __pyx_k_flow_dir_info[] = "flow_dir_info";
static const char __pyx_k_last_log_time[] = "last_log_time";
static const char __pyx_k_outflow_layer[] = "outflow_layer";
static const char __pyx_k_process_queue[] = "process_queue";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_s_scratch_tif[] = "%s_scratch.tif";
static const char __pyx_k_seed_iterator[] = "seed_iterator";
static const char __pyx_k_source_vector[] = "source_vector";
static const char __pyx_k_user_geometry[] = "user_geometry";
static const char __pyx_k_GetGeometryRef[] = "GetGeometryRef";
static const char __pyx_k_RasterizeLayer[] = "RasterizeLayer";
static const char __pyx_k_SPARSE_OK_TRUE[] = "SPARSE_OK=TRUE";
static const char __pyx_k_Y_m_d__H__M__S[] = "%Y-%m-%d_%H_%M_%S";
static const char __pyx_k_neighbor_index[] = "neighbor_index";
static const char __pyx_k_neighbor_pixel[] = "neighbor_pixel";
static const char __pyx_k_outflow_vector[] = "outflow_vector";
static const char __pyx_k_projection_wkt[] = "projection_wkt";
static const char __pyx_k_scratch_raster[] = "scratch_raster";
static const char __pyx_k_seeds_iterator[] = "seeds_iterator";
static const char __pyx_k_source_feature[] = "source_feature";
static const char __pyx_k_watersheds_srs[] = "watersheds_srs";
static const char __pyx_k_BuildVRTOptions[] = "BuildVRTOptions";
static const char __pyx_k_GetDriverByName[] = "GetDriverByName";
static const char __pyx_k_GetFeatureCount[] = "GetFeatureCount";
static const char __pyx_k_SetGeoTransform[] = "SetGeoTransform";
static const char __pyx_k_allowed_drivers[] = "allowed_drivers";
static const char __pyx_k_flow_dir_n_cols[] = "flow_dir_n_cols";
static const char __pyx_k_flow_dir_n_rows[] = "flow_dir_n_rows";
static const char __pyx_k_flow_dir_nodata[] = "flow_dir_nodata";
static const char __pyx_k_get_raster_info[] = "get_raster_info";
static const char __pyx_k_n_cells_visited[] = "n_cells_visited";
static const char __pyx_k_pygeoprocessing[] = "pygeoprocessing";
static const char __pyx_k_s_is_not_a_file[] = "%s is not a file.";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_source_geom_wkb[] = "source_geom_wkb";
static const char __pyx_k_wkbMultiPolygon[] = "wkbMultiPolygon";
static const char __pyx_k_ALL_TOUCHED_True[] = "ALL_TOUCHED=True";
static const char __pyx_k_CreateDataSource[] = "CreateDataSource";
static const char __pyx_k_SpatialReference[] = "SpatialReference";
static const char __pyx_k_StartTransaction[] = "StartTransaction";
static const char __pyx_k_raster_path_band[] = "raster_path_band";
static const char __pyx_k_s_rasterized_tif[] = "%s_rasterized.tif";
static const char __pyx_k_shapely_geometry[] = "shapely.geometry";
static const char __pyx_k_shapely_prepared[] = "shapely.prepared";
static const char __pyx_k_watersheds_layer[] = "watersheds_layer";
static const char __pyx_k_working_dir_path[] = "working_dir_path";
static const char __pyx_k_CommitTransaction[] = "CommitTransaction";
static const char __pyx_k_duplicate_feature[] = "duplicate_feature";
static const char __pyx_k_duplicate_ids_set[] = "duplicate_ids_set";
static const char __pyx_k_flow_dir_origin_x[] = "flow_dir_origin_x";
static const char __pyx_k_flow_dir_origin_y[] = "flow_dir_origin_y";
static const char __pyx_k_process_queue_set[] = "process_queue_set";
static const char __pyx_k_remove_temp_files[] = "remove_temp_files";
static const char __pyx_k_seeds_raster_path[] = "seeds_raster_path";
static const char __pyx_k_target_layer_name[] = "target_layer_name";
static const char __pyx_k_watershed_feature[] = "watershed_feature";
static const char __pyx_k_watersheds_vector[] = "watersheds_vector";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_duplicate_geometry[] = "duplicate_geometry";
static const char __pyx_k_seeds_in_watershed[] = "seeds_in_watershed";
static const char __pyx_k_target_raster_path[] = "target_raster_path";
static const char __pyx_k_watersheds_created[] = "watersheds_created";
static const char __pyx_k_outflow_vector_path[] = "outflow_vector_path";
static const char __pyx_k_scratch_raster_path[] = "scratch_raster_path";
static const char __pyx_k_flow_dir_pixelsize_x[] = "flow_dir_pixelsize_x";
static const char __pyx_k_flow_dir_pixelsize_y[] = "flow_dir_pixelsize_y";
static const char __pyx_k_CreateGeometryFromWkb[] = "CreateGeometryFromWkb";
static const char __pyx_k_Testing_geometry_bbox[] = "Testing geometry bbox";
static const char __pyx_k_outflow_feature_count[] = "outflow_feature_count";
static const char __pyx_k_Creating_flow_dir_bbox[] = "Creating flow dir bbox";
static const char __pyx_k_Delineating_watersheds[] = "Delineating watersheds";
static const char __pyx_k_GTIFF_CREATION_OPTIONS[] = "GTIFF_CREATION_OPTIONS";
static const char __pyx_k_diagnostic_vector_path[] = "diagnostic_vector_path";
static const char __pyx_k_polygonized_watersheds[] = "polygonized_watersheds";
static const char __pyx_k_scratch_managed_raster[] = "scratch_managed_raster";
static const char __pyx_k_delineate_watersheds_d8[] = "delineate_watersheds_d8";
static const char __pyx_k_flow_dir_managed_raster[] = "flow_dir_managed_raster";
static const char __pyx_k_write_diagnostic_vector[] = "write_diagnostic_vector";
static const char __pyx_k_fragments_with_duplicates[] = "fragments_with_duplicates";
static const char __pyx_k_split_geometry_into_seeds[] = "_split_geometry_into_seeds";
static const char __pyx_k_duplicate_ids_set_iterator[] = "duplicate_ids_set_iterator";
static const char __pyx_k_d8_flow_dir_raster_path_band[] = "d8_flow_dir_raster_path_band";
static const char __pyx_k_polygonized_watersheds_layer[] = "polygonized_watersheds_layer";
static const char __pyx_k_Finished_vector_consolidation[] = "Finished vector consolidation";
static const char __pyx_k_is_raster_path_band_formatted[] = "_is_raster_path_band_formatted";
static const char __pyx_k_target_watersheds_vector_path[] = "target_watersheds_vector_path";
static const char __pyx_k_Watershed_delineation_complete[] = "Watershed delineation complete";
static const char __pyx_k_Could_not_open_outflow_vector_s[] = "Could not open outflow vector %s";
static const char __pyx_k_Delineating_watershed_s_of_s_ws[] = "Delineating watershed %s of %s (ws_id %s)";
static const char __pyx_k_Error_Block_size_is_not_a_power[] = "Error: Block size is not a power of two: block_xsize: ";
static const char __pyx_k_This_exception_is_happeningin_C[] = ". This exception is happeningin Cython, so it will cause a hard seg-fault, but it'sotherwise meant to be a ValueError.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_s_is_supposed_to_be_a_raster_ba[] = "%s is supposed to be a raster band tuple but it's not.";
static const char __pyx_k_Consolidating_s_fragments_and_co[] = "Consolidating %s fragments and copying field values to watersheds layer.";
static const char __pyx_k_Creating_flow_dir_managed_raster[] = "Creating flow dir managed raster";
static const char __pyx_k_Error_band_ID_s_is_not_a_valid_b[] = "Error: band ID (%s) is not a valid band number. This exception is happening in Cython, so it will cause a hard seg-fault, but it's otherwise meant to be a ValueError.";
static const char __pyx_k_Finished_delineating_s_watershed[] = "Finished delineating %s watersheds";
static const char __pyx_k_Outflow_feature_s_does_not_inter[] = "Outflow feature %s does not intersect any pixels with valid flow direction. Skipping.";
static const char __pyx_k_Outflow_feature_s_does_not_overl[] = "Outflow feature %s does not overlap with the flow direction raster. Skipping.";
static const char __pyx_k_Outflow_feature_s_has_empty_geom[] = "Outflow feature %s has empty geometry.  Skipping.";
static const char __pyx_k_ecoshard_geoprocessing_routing_w[] = "ecoshard.geoprocessing.routing.watershed";
static const char __pyx_k_fragments_with_duplicates_iterat[] = "fragments_with_duplicates_iterator";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_src_geoprocessing_routing_waters[] = "src\\geoprocessing\\routing\\watershed.pyx";
static const char __pyx_k_watershed_delineation_trivial__s[] = "watershed_delineation_trivial_%s_";
static const char __pyx_k_Delineating_watershed_s_of_s_ws_2[] = "Delineating watershed %s of %s (ws_id %s), %s pixels found so far";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_ALL_TOUCHED_True;
static PyObject *__pyx_n_s_AddGeometry;
static PyObject *__pyx_kp_u_BIGTIFF_YES;
static PyObject *__pyx_kp_u_BLOCKXSIZE_d;
static PyObject *__pyx_kp_u_BLOCKYSIZE_d;
static PyObject *__pyx_n_s_BuildVRT;
static PyObject *__pyx_n_s_BuildVRTOptions;
static PyObject *__pyx_kp_u_COMPRESS_LZW;
static PyObject *__pyx_n_s_CommitTransaction;
static PyObject *__pyx_kp_u_Consolidating_s_fragments_and_co;
static PyObject *__pyx_kp_u_Could_not_open_outflow_vector_s;
static PyObject *__pyx_n_s_Create;
static PyObject *__pyx_n_s_CreateDataSource;
static PyObject *__pyx_n_s_CreateFeature;
static PyObject *__pyx_n_s_CreateField;
static PyObject *__pyx_n_s_CreateFields;
static PyObject *__pyx_n_s_CreateGeometryFromWkb;
static PyObject *__pyx_n_s_CreateLayer;
static PyObject *__pyx_kp_u_Creating_flow_dir_bbox;
static PyObject *__pyx_kp_u_Creating_flow_dir_managed_raster;
static PyObject *__pyx_n_s_DeleteLayer;
static PyObject *__pyx_kp_u_Delineating_watershed_s_of_s_ws;
static PyObject *__pyx_kp_u_Delineating_watershed_s_of_s_ws_2;
static PyObject *__pyx_kp_u_Delineating_watersheds;
static PyObject *__pyx_kp_u_Error_Block_size_is_not_a_power;
static PyObject *__pyx_kp_u_Error_band_ID_s_is_not_a_valid_b;
static PyObject *__pyx_n_s_ExportToWkb;
static PyObject *__pyx_n_s_ExportToWkt;
static PyObject *__pyx_n_s_Feature;
static PyObject *__pyx_n_s_FieldDefn;
static PyObject *__pyx_kp_u_Finished_delineating_s_watershed;
static PyObject *__pyx_kp_u_Finished_vector_consolidation;
static PyObject *__pyx_n_s_FlushCache;
static PyObject *__pyx_n_s_GA_Update;
static PyObject *__pyx_n_s_GDT_Byte;
static PyObject *__pyx_n_s_GDT_UInt32;
static PyObject *__pyx_n_s_GDT_Unknown;
static PyObject *__pyx_n_u_GPKG;
static PyObject *__pyx_n_s_GTIFF_CREATION_OPTIONS;
static PyObject *__pyx_n_u_GTiff;
static PyObject *__pyx_n_s_Geometry;
static PyObject *__pyx_n_s_GetDriverByName;
static PyObject *__pyx_n_s_GetFID;
static PyObject *__pyx_n_s_GetFeature;
static PyObject *__pyx_n_s_GetFeatureCount;
static PyObject *__pyx_n_s_GetField;
static PyObject *__pyx_n_s_GetGeometryRef;
static PyObject *__pyx_n_s_GetLayer;
static PyObject *__pyx_n_s_GetLayerDefn;
static PyObject *__pyx_n_s_GetRasterBand;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_ImportFromWkt;
static PyObject *__pyx_n_s_IsEmpty;
static PyObject *__pyx_n_s_LOGGER;
static PyObject *__pyx_n_s_ManagedRaster;
static PyObject *__pyx_n_u_Memory;
static PyObject *__pyx_n_s_OFTInteger;
static PyObject *__pyx_n_s_OF_RASTER;
static PyObject *__pyx_n_s_OF_VECTOR;
static PyObject *__pyx_n_s_OSError;
static PyObject *__pyx_n_s_OpenEx;
static PyObject *__pyx_kp_u_Outflow_feature_s_does_not_inter;
static PyObject *__pyx_kp_u_Outflow_feature_s_does_not_overl;
static PyObject *__pyx_kp_u_Outflow_feature_s_has_empty_geom;
static PyObject *__pyx_n_s_Point;
static PyObject *__pyx_n_s_Polygon;
static PyObject *__pyx_n_s_Polygonize;
static PyObject *__pyx_n_s_RasterizeLayer;
static PyObject *__pyx_n_s_ReadAsArray;
static PyObject *__pyx_n_s_ResetReading;
static PyObject *__pyx_kp_u_SPARSE_OK_TRUE;
static PyObject *__pyx_n_s_SetField;
static PyObject *__pyx_n_s_SetGeoTransform;
static PyObject *__pyx_n_s_SetGeometry;
static PyObject *__pyx_n_s_SetProjection;
static PyObject *__pyx_n_s_SetWidth;
static PyObject *__pyx_n_s_SpatialReference;
static PyObject *__pyx_n_s_StartTransaction;
static PyObject *__pyx_kp_u_TILED_YES;
static PyObject *__pyx_kp_u_Testing_geometry_bbox;
static PyObject *__pyx_kp_u_This_exception_is_happeningin_C;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_u_VRT;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_WSID_1;
static PyObject *__pyx_kp_u_Watershed_delineation_complete;
static PyObject *__pyx_n_s_WriteArray;
static PyObject *__pyx_kp_u_Y_m_d__H__M__S;
static PyObject *__pyx_n_s__10;
static PyObject *__pyx_n_s_allowed_drivers;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_band_id;
static PyObject *__pyx_n_s_bbox_maxx;
static PyObject *__pyx_n_s_bbox_maxy;
static PyObject *__pyx_n_s_bbox_minx;
static PyObject *__pyx_n_s_bbox_miny;
static PyObject *__pyx_n_u_block_size;
static PyObject *__pyx_n_u_bounding_box;
static PyObject *__pyx_n_s_bounds;
static PyObject *__pyx_n_s_box;
static PyObject *__pyx_n_s_burn_values;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_current_fid;
static PyObject *__pyx_n_s_current_pixel;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_d8_flow_dir_raster_path_band;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_delineate_watersheds_d8;
static PyObject *__pyx_n_s_diagnostic_vector_path;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_driver;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_duplicate_feature;
static PyObject *__pyx_n_s_duplicate_fid;
static PyObject *__pyx_n_s_duplicate_geometry;
static PyObject *__pyx_n_s_duplicate_ids_set;
static PyObject *__pyx_n_s_duplicate_ids_set_iterator;
static PyObject *__pyx_n_s_ecoshard_geoprocessing_routing_w;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_feature;
static PyObject *__pyx_n_s_fid;
static PyObject *__pyx_n_s_field_name;
static PyObject *__pyx_n_s_field_value;
static PyObject *__pyx_n_s_flow_dir_bbox;
static PyObject *__pyx_n_s_flow_dir_info;
static PyObject *__pyx_n_s_flow_dir_managed_raster;
static PyObject *__pyx_n_s_flow_dir_n_cols;
static PyObject *__pyx_n_s_flow_dir_n_rows;
static PyObject *__pyx_n_s_flow_dir_nodata;
static PyObject *__pyx_n_s_flow_dir_origin_x;
static PyObject *__pyx_n_s_flow_dir_origin_y;
static PyObject *__pyx_n_s_flow_dir_pixelsize_x;
static PyObject *__pyx_n_s_flow_dir_pixelsize_y;
static PyObject *__pyx_n_s_flow_dir_srs;
static PyObject *__pyx_n_s_fragments_with_duplicates;
static PyObject *__pyx_n_s_fragments_with_duplicates_iterat;
static PyObject *__pyx_n_s_gdal;
static PyObject *__pyx_n_s_geom;
static PyObject *__pyx_n_s_geom_wkb;
static PyObject *__pyx_n_s_geometry;
static PyObject *__pyx_n_s_geotransform;
static PyObject *__pyx_n_u_geotransform;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_raster_info;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gmtime;
static PyObject *__pyx_n_s_gtiff_driver;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index_field;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_intersects;
static PyObject *__pyx_n_s_is_raster_path_band_formatted;
static PyObject *__pyx_n_s_isfile;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iterblocks;
static PyObject *__pyx_n_s_ix_max;
static PyObject *__pyx_n_s_ix_min;
static PyObject *__pyx_n_s_iy_max;
static PyObject *__pyx_n_s_iy_min;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_last_log_time;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_log2;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_makedirs;
static PyObject *__pyx_n_u_mem;
static PyObject *__pyx_n_s_mkdtemp;
static PyObject *__pyx_n_u_n_bands;
static PyObject *__pyx_n_s_n_cells_visited;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_neighbor_col;
static PyObject *__pyx_n_s_neighbor_index;
static PyObject *__pyx_n_s_neighbor_pixel;
static PyObject *__pyx_n_s_neighbor_row;
static PyObject *__pyx_n_s_new_geometry;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_u_nodata;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_ogr;
static PyObject *__pyx_n_s_options;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_osgeo;
static PyObject *__pyx_n_s_osr;
static PyObject *__pyx_n_s_outflow_feature_count;
static PyObject *__pyx_n_s_outflow_layer;
static PyObject *__pyx_n_s_outflow_vector;
static PyObject *__pyx_n_s_outflow_vector_path;
static PyObject *__pyx_n_s_outputBounds;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_u_polygonized_watersheds;
static PyObject *__pyx_n_s_polygonized_watersheds_layer;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_prep;
static PyObject *__pyx_n_s_prepared;
static PyObject *__pyx_n_s_process_queue;
static PyObject *__pyx_n_s_process_queue_set;
static PyObject *__pyx_n_u_projection_wkt;
static PyObject *__pyx_n_s_pygeoprocessing;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raster_path;
static PyObject *__pyx_n_s_raster_path_band;
static PyObject *__pyx_n_u_raster_size;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_remove_temp_files;
static PyObject *__pyx_n_s_return_set;
static PyObject *__pyx_n_s_reverse_flow;
static PyObject *__pyx_n_s_rmtree;
static PyObject *__pyx_kp_u_s_is_not_a_file;
static PyObject *__pyx_kp_u_s_is_supposed_to_be_a_raster_ba;
static PyObject *__pyx_kp_u_s_rasterized_tif;
static PyObject *__pyx_kp_u_s_scratch_tif;
static PyObject *__pyx_kp_u_s_seeds_gpkg;
static PyObject *__pyx_kp_u_s_vrt_vrt;
static PyObject *__pyx_n_s_schema;
static PyObject *__pyx_n_s_scratch_managed_raster;
static PyObject *__pyx_n_s_scratch_raster;
static PyObject *__pyx_n_s_scratch_raster_path;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_seed_iterator;
static PyObject *__pyx_n_s_seeds;
static PyObject *__pyx_n_u_seeds;
static PyObject *__pyx_n_s_seeds_in_watershed;
static PyObject *__pyx_n_s_seeds_iterator;
static PyObject *__pyx_n_s_seeds_raster_path;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shapely;
static PyObject *__pyx_n_s_shapely_geom;
static PyObject *__pyx_n_s_shapely_geometry;
static PyObject *__pyx_n_s_shapely_prepared;
static PyObject *__pyx_n_s_shapely_wkb;
static PyObject *__pyx_n_s_shutil;
static PyObject *__pyx_n_s_source_feature;
static PyObject *__pyx_n_s_source_geom_wkb;
static PyObject *__pyx_n_s_source_gt;
static PyObject *__pyx_n_s_source_layer;
static PyObject *__pyx_n_s_source_vector;
static PyObject *__pyx_n_s_split_geometry_into_seeds;
static PyObject *__pyx_kp_s_src_geoprocessing_routing_waters;
static PyObject *__pyx_n_s_strftime;
static PyObject *__pyx_n_s_target_layer_name;
static PyObject *__pyx_n_s_target_raster_path;
static PyObject *__pyx_n_s_target_watersheds_vector_path;
static PyObject *__pyx_n_s_tempfile;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_u_user_geometry;
static PyObject *__pyx_n_s_vrt_band;
static PyObject *__pyx_n_s_vrt_options;
static PyObject *__pyx_n_s_vrt_path;
static PyObject *__pyx_n_s_vrt_raster;
static PyObject *__pyx_kp_u_watershed_delineation_trivial__s;
static PyObject *__pyx_n_s_watershed_feature;
static PyObject *__pyx_n_u_watersheds;
static PyObject *__pyx_n_s_watersheds_created;
static PyObject *__pyx_n_s_watersheds_layer;
static PyObject *__pyx_n_s_watersheds_srs;
static PyObject *__pyx_n_s_watersheds_vector;
static PyObject *__pyx_n_s_win_xsize;
static PyObject *__pyx_n_s_win_ysize;
static PyObject *__pyx_n_s_wkb;
static PyObject *__pyx_n_s_wkbMultiPolygon;
static PyObject *__pyx_n_s_wkbPoint;
static PyObject *__pyx_n_s_wkbPolygon;
static PyObject *__pyx_n_s_wkbUnknown;
static PyObject *__pyx_n_s_working_dir;
static PyObject *__pyx_n_s_working_dir_path;
static PyObject *__pyx_n_s_write_diagnostic_vector;
static PyObject *__pyx_n_s_write_mode;
static PyObject *__pyx_n_s_ws_id;
static PyObject *__pyx_n_u_ws_id;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_xoff;
static PyObject *__pyx_n_u_xoff;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_yoff;
static PyObject *__pyx_n_u_yoff;
static int __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, PyObject *__pyx_v_raster_path, PyObject *__pyx_v_band_id, CYTHON_UNUSED PyObject *__pyx_v_write_mode); /* proto */
static int __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_2__cinit__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, PyObject *__pyx_v_raster_path, PyObject *__pyx_v_band_id, PyObject *__pyx_v_write_mode); /* proto */
static void __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_4__dealloc__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_6close(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed__is_raster_path_band_formatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_2_split_geometry_into_seeds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_source_geom_wkb, PyObject *__pyx_v_geotransform, PyObject *__pyx_v_flow_dir_srs, PyObject *__pyx_v_flow_dir_n_cols, PyObject *__pyx_v_flow_dir_n_rows, PyObject *__pyx_v_target_raster_path, PyObject *__pyx_v_diagnostic_vector_path); /* proto */
static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_4delineate_watersheds_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d8_flow_dir_raster_path_band, PyObject *__pyx_v_outflow_vector_path, PyObject *__pyx_v_target_watersheds_vector_path, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_write_diagnostic_vector, PyObject *__pyx_v_remove_temp_files, PyObject *__pyx_v_target_layer_name); /* proto */
static PyObject *__pyx_tp_new_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_24;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__12;
/* Late includes */

/* "src/geoprocessing/routing/watershed.pyx":87
 *     cdef int closed
 * 
 *     def __init__(self, raster_path, band_id, write_mode):             # <<<<<<<<<<<<<<
 *         """Create new instance of Managed Raster.
 * 
 */

/* Python wrapper */
static int __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__[] = "Create new instance of Managed Raster.\n\n        Parameters:\n            raster_path (char*): path to raster that has block sizes that are\n                powers of 2. If not, an exception is raised.\n            band_id (int): which band in `raster_path` to index. Uses GDAL\n                notation that starts at 1.\n            write_mode (boolean): if true, this raster is writable and dirty\n                memory blocks will be written back to the raster as blocks\n                are swapped out of the cache or when the object deconstructs.\n\n        Returns:\n            None.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__;
#endif
static int __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_raster_path = 0;
  PyObject *__pyx_v_band_id = 0;
  CYTHON_UNUSED PyObject *__pyx_v_write_mode = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_raster_path,&__pyx_n_s_band_id,&__pyx_n_s_write_mode,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 87, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_write_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 87, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 87, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_raster_path = values[0];
    __pyx_v_band_id = values[1];
    __pyx_v_write_mode = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 87, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self), __pyx_v_raster_path, __pyx_v_band_id, __pyx_v_write_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, PyObject *__pyx_v_raster_path, PyObject *__pyx_v_band_id, CYTHON_UNUSED PyObject *__pyx_v_write_mode) {
  PyObject *__pyx_v_raster_info = NULL;
  PyObject *__pyx_v_err_msg = NULL;
  PyObject *__pyx_v_block_xsize = NULL;
  PyObject *__pyx_v_block_ysize = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "src/geoprocessing/routing/watershed.pyx":102
 *             None.
 *         """
 *         if not os.path.isfile(raster_path):             # <<<<<<<<<<<<<<
 *             LOGGER.error("%s is not a file.", raster_path)
 *             raise OSError('%s is not a file.' % raster_path)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_raster_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/watershed.pyx":103
 *         """
 *         if not os.path.isfile(raster_path):
 *             LOGGER.error("%s is not a file.", raster_path)             # <<<<<<<<<<<<<<
 *             raise OSError('%s is not a file.' % raster_path)
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_u_s_is_not_a_file, __pyx_v_raster_path};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_u_s_is_not_a_file, __pyx_v_raster_path};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_u_s_is_not_a_file);
      __Pyx_GIVEREF(__pyx_kp_u_s_is_not_a_file);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_kp_u_s_is_not_a_file);
      __Pyx_INCREF(__pyx_v_raster_path);
      __Pyx_GIVEREF(__pyx_v_raster_path);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_raster_path);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":104
 *         if not os.path.isfile(raster_path):
 *             LOGGER.error("%s is not a file.", raster_path)
 *             raise OSError('%s is not a file.' % raster_path)             # <<<<<<<<<<<<<<
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 * 
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_not_a_file, __pyx_v_raster_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_OSError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 104, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":102
 *             None.
 *         """
 *         if not os.path.isfile(raster_path):             # <<<<<<<<<<<<<<
 *             LOGGER.error("%s is not a file.", raster_path)
 *             raise OSError('%s is not a file.' % raster_path)
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":105
 *             LOGGER.error("%s is not a file.", raster_path)
 *             raise OSError('%s is not a file.' % raster_path)
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)             # <<<<<<<<<<<<<<
 * 
 *         if not (1 <= band_id <= raster_info['n_bands']):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_v_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_raster_path);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_raster_info = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":107
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 * 
 *         if not (1 <= band_id <= raster_info['n_bands']):             # <<<<<<<<<<<<<<
 *             err_msg = (
 *                 "Error: band ID (%s) is not a valid band number. "
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_int_1, __pyx_v_band_id, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_n_bands); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_band_id, __pyx_t_7, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_5) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "src/geoprocessing/routing/watershed.pyx":112
 *                 "This exception is happening in Cython, so it will cause a "
 *                 "hard seg-fault, but it's otherwise meant to be a "
 *                 "ValueError." % (band_id))             # <<<<<<<<<<<<<<
 *             LOGGER.error(err_msg)
 *             raise ValueError(err_msg)
 */
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Error_band_ID_s_is_not_a_valid_b, __pyx_v_band_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_err_msg = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":113
 *                 "hard seg-fault, but it's otherwise meant to be a "
 *                 "ValueError." % (band_id))
 *             LOGGER.error(err_msg)             # <<<<<<<<<<<<<<
 *             raise ValueError(err_msg)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_v_err_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_err_msg);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":114
 *                 "ValueError." % (band_id))
 *             LOGGER.error(err_msg)
 *             raise ValueError(err_msg)             # <<<<<<<<<<<<<<
 * 
 *         block_xsize, block_ysize = raster_info['block_size']
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_err_msg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 114, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":107
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 * 
 *         if not (1 <= band_id <= raster_info['n_bands']):             # <<<<<<<<<<<<<<
 *             err_msg = (
 *                 "Error: band ID (%s) is not a valid band number. "
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":116
 *             raise ValueError(err_msg)
 * 
 *         block_xsize, block_ysize = raster_info['block_size']             # <<<<<<<<<<<<<<
 *         if (block_xsize & (block_xsize - 1) != 0) or (
 *                 block_ysize & (block_ysize - 1) != 0):
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_block_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 116, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 116, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_block_xsize = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_block_ysize = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":117
 * 
 *         block_xsize, block_ysize = raster_info['block_size']
 *         if (block_xsize & (block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *                 block_ysize & (block_ysize - 1) != 0):
 *             # If inputs are not a power of two, this will at least print
 */
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_block_xsize, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_And(__pyx_v_block_xsize, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L8_bool_binop_done;
  }

  /* "src/geoprocessing/routing/watershed.pyx":118
 *         block_xsize, block_ysize = raster_info['block_size']
 *         if (block_xsize & (block_xsize - 1) != 0) or (
 *                 block_ysize & (block_ysize - 1) != 0):             # <<<<<<<<<<<<<<
 *             # If inputs are not a power of two, this will at least print
 *             # an error message. Unfortunately with Cython, the exception will
 */
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_block_ysize, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_And(__pyx_v_block_ysize, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L8_bool_binop_done:;

  /* "src/geoprocessing/routing/watershed.pyx":117
 * 
 *         block_xsize, block_ysize = raster_info['block_size']
 *         if (block_xsize & (block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *                 block_ysize & (block_ysize - 1) != 0):
 *             # If inputs are not a power of two, this will at least print
 */
  if (unlikely(__pyx_t_4)) {

    /* "src/geoprocessing/routing/watershed.pyx":124
 *             # ValueError in here at least for readability.
 *             err_msg = (
 *                 "Error: Block size is not a power of two: "             # <<<<<<<<<<<<<<
 *                 "block_xsize: %d, %d, %s. This exception is happening"
 *                 "in Cython, so it will cause a hard seg-fault, but it's"
 */
    __pyx_t_3 = PyTuple_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = 0;
    __pyx_t_10 = 127;
    __Pyx_INCREF(__pyx_kp_u_Error_Block_size_is_not_a_power);
    __pyx_t_9 += 54;
    __Pyx_GIVEREF(__pyx_kp_u_Error_Block_size_is_not_a_power);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Error_Block_size_is_not_a_power);

    /* "src/geoprocessing/routing/watershed.pyx":128
 *                 "in Cython, so it will cause a hard seg-fault, but it's"
 *                 "otherwise meant to be a ValueError." % (
 *                     block_xsize, block_ysize, raster_path))             # <<<<<<<<<<<<<<
 *             LOGGER.error(err_msg)
 *             raise ValueError(err_msg)
 */
    __pyx_t_7 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_block_xsize), __pyx_n_u_d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_9 += 2;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_);
    __pyx_t_7 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_block_ysize), __pyx_n_u_d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_9 += 2;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_raster_path), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_This_exception_is_happeningin_C);
    __pyx_t_9 += 118;
    __Pyx_GIVEREF(__pyx_kp_u_This_exception_is_happeningin_C);
    PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_This_exception_is_happeningin_C);

    /* "src/geoprocessing/routing/watershed.pyx":124
 *             # ValueError in here at least for readability.
 *             err_msg = (
 *                 "Error: Block size is not a power of two: "             # <<<<<<<<<<<<<<
 *                 "block_xsize: %d, %d, %s. This exception is happening"
 *                 "in Cython, so it will cause a hard seg-fault, but it's"
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 7, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_err_msg = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":129
 *                 "otherwise meant to be a ValueError." % (
 *                     block_xsize, block_ysize, raster_path))
 *             LOGGER.error(err_msg)             # <<<<<<<<<<<<<<
 *             raise ValueError(err_msg)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_err_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_err_msg);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":130
 *                     block_xsize, block_ysize, raster_path))
 *             LOGGER.error(err_msg)
 *             raise ValueError(err_msg)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, raster_path, band_id, write_mode):
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_v_err_msg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 130, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":117
 * 
 *         block_xsize, block_ysize = raster_info['block_size']
 *         if (block_xsize & (block_xsize - 1) != 0) or (             # <<<<<<<<<<<<<<
 *                 block_ysize & (block_ysize - 1) != 0):
 *             # If inputs are not a power of two, this will at least print
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":87
 *     cdef int closed
 * 
 *     def __init__(self, raster_path, band_id, write_mode):             # <<<<<<<<<<<<<<
 *         """Create new instance of Managed Raster.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raster_info);
  __Pyx_XDECREF(__pyx_v_err_msg);
  __Pyx_XDECREF(__pyx_v_block_xsize);
  __Pyx_XDECREF(__pyx_v_block_ysize);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":132
 *             raise ValueError(err_msg)
 * 
 *     def __cinit__(self, raster_path, band_id, write_mode):             # <<<<<<<<<<<<<<
 *         """Create new instance of Managed Raster.
 * 
 */

/* Python wrapper */
static int __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_raster_path = 0;
  PyObject *__pyx_v_band_id = 0;
  PyObject *__pyx_v_write_mode = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_raster_path,&__pyx_n_s_band_id,&__pyx_n_s_write_mode,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raster_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 132, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_write_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 132, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 132, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_raster_path = values[0];
    __pyx_v_band_id = values[1];
    __pyx_v_write_mode = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 132, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_2__cinit__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self), __pyx_v_raster_path, __pyx_v_band_id, __pyx_v_write_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_2__cinit__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, PyObject *__pyx_v_raster_path, PyObject *__pyx_v_band_id, PyObject *__pyx_v_write_mode) {
  PyObject *__pyx_v_raster_info = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/geoprocessing/routing/watershed.pyx":147
 *             None.
 *         """
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)             # <<<<<<<<<<<<<<
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_raster_path);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_raster_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":148
 *         """
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']             # <<<<<<<<<<<<<<
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 *         self.block_xmod = self.block_xsize-1
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 148, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 148, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->raster_x_size = __pyx_t_6;
  __pyx_v_self->raster_y_size = __pyx_t_7;

  /* "src/geoprocessing/routing/watershed.pyx":149
 *         raster_info = pygeoprocessing.get_raster_info(raster_path)
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 *         self.block_xsize, self.block_ysize = raster_info['block_size']             # <<<<<<<<<<<<<<
 *         self.block_xmod = self.block_xsize-1
 *         self.block_ymod = self.block_ysize-1
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_raster_info, __pyx_n_u_block_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 149, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 149, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->block_xsize = __pyx_t_7;
  __pyx_v_self->block_ysize = __pyx_t_6;

  /* "src/geoprocessing/routing/watershed.pyx":150
 *         self.raster_x_size, self.raster_y_size = raster_info['raster_size']
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 *         self.block_xmod = self.block_xsize-1             # <<<<<<<<<<<<<<
 *         self.block_ymod = self.block_ysize-1
 * 
 */
  __pyx_v_self->block_xmod = (__pyx_v_self->block_xsize - 1);

  /* "src/geoprocessing/routing/watershed.pyx":151
 *         self.block_xsize, self.block_ysize = raster_info['block_size']
 *         self.block_xmod = self.block_xsize-1
 *         self.block_ymod = self.block_ysize-1             # <<<<<<<<<<<<<<
 * 
 *         self.band_id = band_id
 */
  __pyx_v_self->block_ymod = (__pyx_v_self->block_ysize - 1);

  /* "src/geoprocessing/routing/watershed.pyx":153
 *         self.block_ymod = self.block_ysize-1
 * 
 *         self.band_id = band_id             # <<<<<<<<<<<<<<
 * 
 *         self.block_xbits = numpy.log2(self.block_xsize)
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_band_id); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_v_self->band_id = __pyx_t_6;

  /* "src/geoprocessing/routing/watershed.pyx":155
 *         self.band_id = band_id
 * 
 *         self.block_xbits = numpy.log2(self.block_xsize)             # <<<<<<<<<<<<<<
 *         self.block_ybits = numpy.log2(self.block_ysize)
 *         self.block_nx = (
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->block_xbits = __pyx_t_6;

  /* "src/geoprocessing/routing/watershed.pyx":156
 * 
 *         self.block_xbits = numpy.log2(self.block_xsize)
 *         self.block_ybits = numpy.log2(self.block_ysize)             # <<<<<<<<<<<<<<
 *         self.block_nx = (
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_log2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->block_ybits = __pyx_t_6;

  /* "src/geoprocessing/routing/watershed.pyx":158
 *         self.block_ybits = numpy.log2(self.block_ysize)
 *         self.block_nx = (
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize             # <<<<<<<<<<<<<<
 *         self.block_ny = (
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize
 */
  __pyx_t_8 = ((__pyx_v_self->raster_x_size + __pyx_v_self->block_xsize) - 1);
  if (unlikely(__pyx_v_self->block_xsize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 158, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_xsize == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_8))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 158, __pyx_L1_error)
  }

  /* "src/geoprocessing/routing/watershed.pyx":157
 *         self.block_xbits = numpy.log2(self.block_xsize)
 *         self.block_ybits = numpy.log2(self.block_ysize)
 *         self.block_nx = (             # <<<<<<<<<<<<<<
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 *         self.block_ny = (
 */
  __pyx_v_self->block_nx = __Pyx_div_long(__pyx_t_8, __pyx_v_self->block_xsize);

  /* "src/geoprocessing/routing/watershed.pyx":160
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 *         self.block_ny = (
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *         self.lru_cache = new LRUCache[int, int*](MANAGED_RASTER_N_BLOCKS)
 */
  __pyx_t_8 = ((__pyx_v_self->raster_y_size + __pyx_v_self->block_ysize) - 1);
  if (unlikely(__pyx_v_self->block_ysize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 160, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_ysize == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_8))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 160, __pyx_L1_error)
  }

  /* "src/geoprocessing/routing/watershed.pyx":159
 *         self.block_nx = (
 *             self.raster_x_size + (self.block_xsize) - 1) // self.block_xsize
 *         self.block_ny = (             # <<<<<<<<<<<<<<
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize
 * 
 */
  __pyx_v_self->block_ny = __Pyx_div_long(__pyx_t_8, __pyx_v_self->block_ysize);

  /* "src/geoprocessing/routing/watershed.pyx":162
 *             self.raster_y_size + (self.block_ysize) - 1) // self.block_ysize
 * 
 *         self.lru_cache = new LRUCache[int, int*](MANAGED_RASTER_N_BLOCKS)             # <<<<<<<<<<<<<<
 *         self.raster_path = <bytes> raster_path
 *         self.write_mode = write_mode
 */
  __pyx_v_self->lru_cache = new LRUCache<int,int *> (__pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_MANAGED_RASTER_N_BLOCKS);

  /* "src/geoprocessing/routing/watershed.pyx":163
 * 
 *         self.lru_cache = new LRUCache[int, int*](MANAGED_RASTER_N_BLOCKS)
 *         self.raster_path = <bytes> raster_path             # <<<<<<<<<<<<<<
 *         self.write_mode = write_mode
 *         self.closed = 0
 */
  __pyx_t_1 = __pyx_v_raster_path;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->raster_path);
  __Pyx_DECREF(__pyx_v_self->raster_path);
  __pyx_v_self->raster_path = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":164
 *         self.lru_cache = new LRUCache[int, int*](MANAGED_RASTER_N_BLOCKS)
 *         self.raster_path = <bytes> raster_path
 *         self.write_mode = write_mode             # <<<<<<<<<<<<<<
 *         self.closed = 0
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_write_mode); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_v_self->write_mode = __pyx_t_6;

  /* "src/geoprocessing/routing/watershed.pyx":165
 *         self.raster_path = <bytes> raster_path
 *         self.write_mode = write_mode
 *         self.closed = 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->closed = 0;

  /* "src/geoprocessing/routing/watershed.pyx":132
 *             raise ValueError(err_msg)
 * 
 *     def __cinit__(self, raster_path, band_id, write_mode):             # <<<<<<<<<<<<<<
 *         """Create new instance of Managed Raster.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raster_info);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":167
 *         self.closed = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Deallocate _ManagedRaster.
 * 
 */

/* Python wrapper */
static void __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_4__dealloc__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_4__dealloc__(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/geoprocessing/routing/watershed.pyx":173
 *         dirty memory blocks back to the raster if `self.write_mode` is True.
 *         """
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":167
 *         self.closed = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Deallocate _ManagedRaster.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "src/geoprocessing/routing/watershed.pyx":175
 *         self.close()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         """Close the _ManagedRaster and free up resources.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_7close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_6close[] = "Close the _ManagedRaster and free up resources.\n\n            This call writes any dirty blocks to disk, frees up the memory\n            allocated as part of the cache, and frees all GDAL references.\n\n            Any subsequent calls to any other functions in _ManagedRaster will\n            have undefined behavior.\n        ";
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_7close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_6close(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_6close(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self) {
  int __pyx_v_xi_copy;
  int __pyx_v_yi_copy;
  PyArrayObject *__pyx_v_block_array = 0;
  int *__pyx_v_int_buffer;
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_BlockBufferPair> ::iterator __pyx_v_it;
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_BlockBufferPair> ::iterator __pyx_v_end;
  PyObject *__pyx_v_raster = NULL;
  PyObject *__pyx_v_raster_band = NULL;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  PyObject *__pyx_v_block_index = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_block_array;
  __Pyx_Buffer __pyx_pybuffer_block_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  __pyx_pybuffer_block_array.pybuffer.buf = NULL;
  __pyx_pybuffer_block_array.refcount = 0;
  __pyx_pybuffernd_block_array.data = NULL;
  __pyx_pybuffernd_block_array.rcbuffer = &__pyx_pybuffer_block_array;

  /* "src/geoprocessing/routing/watershed.pyx":184
 *             have undefined behavior.
 *         """
 *         if self.closed:             # <<<<<<<<<<<<<<
 *             return
 *         self.closed = 1
 */
  __pyx_t_1 = (__pyx_v_self->closed != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/watershed.pyx":185
 *         """
 *         if self.closed:
 *             return             # <<<<<<<<<<<<<<
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":184
 *             have undefined behavior.
 *         """
 *         if self.closed:             # <<<<<<<<<<<<<<
 *             return
 *         self.closed = 1
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":186
 *         if self.closed:
 *             return
 *         self.closed = 1             # <<<<<<<<<<<<<<
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[int, ndim=2] block_array = numpy.empty(
 */
  __pyx_v_self->closed = 1;

  /* "src/geoprocessing/routing/watershed.pyx":188
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[int, ndim=2] block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         cdef int *int_buffer
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":189
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[int, ndim=2] block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         cdef int *int_buffer
 *         cdef int block_xi
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":188
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[int, ndim=2] block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         cdef int *int_buffer
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":189
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[int, ndim=2] block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         cdef int *int_buffer
 *         cdef int block_xi
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":188
 *         self.closed = 1
 *         cdef int xi_copy, yi_copy
 *         cdef numpy.ndarray[int, ndim=2] block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         cdef int *int_buffer
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_block_array = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 188, __pyx_L1_error)
    } else {__pyx_pybuffernd_block_array.diminfo[0].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_block_array.diminfo[0].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_block_array.diminfo[1].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_block_array.diminfo[1].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_block_array = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":202
 *         cdef int yoff
 * 
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()             # <<<<<<<<<<<<<<
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:
 */
  __pyx_v_it = __pyx_v_self->lru_cache->begin();

  /* "src/geoprocessing/routing/watershed.pyx":203
 * 
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()             # <<<<<<<<<<<<<<
 *         if not self.write_mode:
 *             while it != end:
 */
  __pyx_v_end = __pyx_v_self->lru_cache->end();

  /* "src/geoprocessing/routing/watershed.pyx":204
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:             # <<<<<<<<<<<<<<
 *             while it != end:
 *                 # write the changed value back if desired
 */
  __pyx_t_1 = ((!(__pyx_v_self->write_mode != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/watershed.pyx":205
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:
 *             while it != end:             # <<<<<<<<<<<<<<
 *                 # write the changed value back if desired
 *                 PyMem_Free(deref(it).second)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_it != __pyx_v_end) != 0);
      if (!__pyx_t_1) break;

      /* "src/geoprocessing/routing/watershed.pyx":207
 *             while it != end:
 *                 # write the changed value back if desired
 *                 PyMem_Free(deref(it).second)             # <<<<<<<<<<<<<<
 *                 inc(it)
 *             return
 */
      PyMem_Free((*__pyx_v_it).second);

      /* "src/geoprocessing/routing/watershed.pyx":208
 *                 # write the changed value back if desired
 *                 PyMem_Free(deref(it).second)
 *                 inc(it)             # <<<<<<<<<<<<<<
 *             return
 * 
 */
      (void)((++__pyx_v_it));
    }

    /* "src/geoprocessing/routing/watershed.pyx":209
 *                 PyMem_Free(deref(it).second)
 *                 inc(it)
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raster = gdal.OpenEx(
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":204
 *         cdef clist[BlockBufferPair].iterator it = self.lru_cache.begin()
 *         cdef clist[BlockBufferPair].iterator end = self.lru_cache.end()
 *         if not self.write_mode:             # <<<<<<<<<<<<<<
 *             while it != end:
 *                 # write the changed value back if desired
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":211
 *             return
 * 
 *         raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *             self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":212
 * 
 *         raster = gdal.OpenEx(
 *             self.raster_path, gdal.GA_Update | gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *         raster_band = raster.GetRasterBand(self.band_id)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_gdal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Or(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_self->raster_path, __pyx_t_5};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_self->raster_path, __pyx_t_5};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_v_self->raster_path);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_raster = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":213
 *         raster = gdal.OpenEx(
 *             self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 * 
 *         # if we get here, we're in write_mode
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_raster_band = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":217
 *         # if we get here, we're in write_mode
 *         cdef cset[int].iterator dirty_itr
 *         while it != end:             # <<<<<<<<<<<<<<
 *             int_buffer = deref(it).second
 *             block_index = deref(it).first
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_end) != 0);
    if (!__pyx_t_1) break;

    /* "src/geoprocessing/routing/watershed.pyx":218
 *         cdef cset[int].iterator dirty_itr
 *         while it != end:
 *             int_buffer = deref(it).second             # <<<<<<<<<<<<<<
 *             block_index = deref(it).first
 * 
 */
    __pyx_t_9 = (*__pyx_v_it).second;
    __pyx_v_int_buffer = __pyx_t_9;

    /* "src/geoprocessing/routing/watershed.pyx":219
 *         while it != end:
 *             int_buffer = deref(it).second
 *             block_index = deref(it).first             # <<<<<<<<<<<<<<
 * 
 *             # write to disk if block is dirty
 */
    __pyx_t_6 = __Pyx_PyInt_From_int((*__pyx_v_it).first); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_block_index, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":222
 * 
 *             # write to disk if block is dirty
 *             dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *             if dirty_itr != self.dirty_blocks.end():
 *                 self.dirty_blocks.erase(dirty_itr)
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_block_index); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L1_error)
    __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_t_8);

    /* "src/geoprocessing/routing/watershed.pyx":223
 *             # write to disk if block is dirty
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx
 */
    __pyx_t_1 = ((__pyx_v_dirty_itr != __pyx_v_self->dirty_blocks.end()) != 0);
    if (__pyx_t_1) {

      /* "src/geoprocessing/routing/watershed.pyx":224
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr != self.dirty_blocks.end():
 *                 self.dirty_blocks.erase(dirty_itr)             # <<<<<<<<<<<<<<
 *                 block_xi = block_index % self.block_nx
 *                 block_yi = block_index / self.block_nx
 */
      (void)(__pyx_v_self->dirty_blocks.erase(__pyx_v_dirty_itr));

      /* "src/geoprocessing/routing/watershed.pyx":225
 *             if dirty_itr != self.dirty_blocks.end():
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *                 block_yi = block_index / self.block_nx
 * 
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->block_nx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Remainder(__pyx_v_block_index, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_block_xi = __pyx_t_8;

      /* "src/geoprocessing/routing/watershed.pyx":226
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx
 *                 block_yi = block_index / self.block_nx             # <<<<<<<<<<<<<<
 * 
 *                 # we need the offsets to subtract from global indexes for
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->block_nx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_block_index, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_block_yi = __pyx_t_8;

      /* "src/geoprocessing/routing/watershed.pyx":230
 *                 # we need the offsets to subtract from global indexes for
 *                 # cached array
 *                 xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *                 yoff = block_yi << self.block_ybits
 * 
 */
      __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

      /* "src/geoprocessing/routing/watershed.pyx":231
 *                 # cached array
 *                 xoff = block_xi << self.block_xbits
 *                 yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *                 win_xsize = self.block_xsize
 */
      __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

      /* "src/geoprocessing/routing/watershed.pyx":233
 *                 yoff = block_yi << self.block_ybits
 * 
 *                 win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *                 win_ysize = self.block_ysize
 * 
 */
      __pyx_t_8 = __pyx_v_self->block_xsize;
      __pyx_v_win_xsize = __pyx_t_8;

      /* "src/geoprocessing/routing/watershed.pyx":234
 * 
 *                 win_xsize = self.block_xsize
 *                 win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *                 # clip window sizes if necessary
 */
      __pyx_t_8 = __pyx_v_self->block_ysize;
      __pyx_v_win_ysize = __pyx_t_8;

      /* "src/geoprocessing/routing/watershed.pyx":237
 * 
 *                 # clip window sizes if necessary
 *                 if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 */
      __pyx_t_1 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
      if (__pyx_t_1) {

        /* "src/geoprocessing/routing/watershed.pyx":238
 *                 # clip window sizes if necessary
 *                 if xoff+win_xsize > self.raster_x_size:
 *                     win_xsize = win_xsize - (             # <<<<<<<<<<<<<<
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:
 */
        __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

        /* "src/geoprocessing/routing/watershed.pyx":237
 * 
 *                 # clip window sizes if necessary
 *                 if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":240
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                     win_ysize = win_ysize - (
 *                         yoff+win_ysize - self.raster_y_size)
 */
      __pyx_t_1 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
      if (__pyx_t_1) {

        /* "src/geoprocessing/routing/watershed.pyx":241
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:
 *                     win_ysize = win_ysize - (             # <<<<<<<<<<<<<<
 *                         yoff+win_ysize - self.raster_y_size)
 * 
 */
        __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

        /* "src/geoprocessing/routing/watershed.pyx":240
 *                     win_xsize = win_xsize - (
 *                         xoff+win_xsize - self.raster_x_size)
 *                 if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                     win_ysize = win_ysize - (
 *                         yoff+win_ysize - self.raster_y_size)
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":244
 *                         yoff+win_ysize - self.raster_y_size)
 * 
 *                 for xi_copy in xrange(win_xsize):             # <<<<<<<<<<<<<<
 *                     for yi_copy in xrange(win_ysize):
 *                         block_array[yi_copy, xi_copy] = (
 */
      __pyx_t_8 = __pyx_v_win_xsize;
      __pyx_t_10 = __pyx_t_8;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_xi_copy = __pyx_t_11;

        /* "src/geoprocessing/routing/watershed.pyx":245
 * 
 *                 for xi_copy in xrange(win_xsize):
 *                     for yi_copy in xrange(win_ysize):             # <<<<<<<<<<<<<<
 *                         block_array[yi_copy, xi_copy] = (
 *                             int_buffer[
 */
        __pyx_t_12 = __pyx_v_win_ysize;
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_yi_copy = __pyx_t_14;

          /* "src/geoprocessing/routing/watershed.pyx":246
 *                 for xi_copy in xrange(win_xsize):
 *                     for yi_copy in xrange(win_ysize):
 *                         block_array[yi_copy, xi_copy] = (             # <<<<<<<<<<<<<<
 *                             int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 */
          __pyx_t_15 = __pyx_v_yi_copy;
          __pyx_t_16 = __pyx_v_xi_copy;
          __pyx_t_17 = -1;
          if (__pyx_t_15 < 0) {
            __pyx_t_15 += __pyx_pybuffernd_block_array.diminfo[0].shape;
            if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
          } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_block_array.diminfo[0].shape)) __pyx_t_17 = 0;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_block_array.diminfo[1].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_block_array.diminfo[1].shape)) __pyx_t_17 = 1;
          if (unlikely(__pyx_t_17 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_17);
            __PYX_ERR(0, 246, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided2d(int *, __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_block_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_block_array.diminfo[1].strides) = (__pyx_v_int_buffer[((__pyx_v_yi_copy << __pyx_v_self->block_xbits) + __pyx_v_xi_copy)]);
        }
      }

      /* "src/geoprocessing/routing/watershed.pyx":249
 *                             int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "src/geoprocessing/routing/watershed.pyx":250
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(
 *                     block_array[0:win_ysize, 0:win_xsize],             # <<<<<<<<<<<<<<
 *                     xoff=xoff, yoff=yoff)
 *             PyMem_Free(int_buffer)
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PySlice_New(__pyx_int_0, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySlice_New(__pyx_int_0, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_block_array), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":249
 *                             int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":251
 *                 raster_band.WriteArray(
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)             # <<<<<<<<<<<<<<
 *             PyMem_Free(int_buffer)
 *             inc(it)
 */
      __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_xoff, __pyx_t_3) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_yoff, __pyx_t_3) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":249
 *                             int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy])
 *                 raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":223
 *             # write to disk if block is dirty
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.erase(dirty_itr)
 *                 block_xi = block_index % self.block_nx
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":252
 *                     block_array[0:win_ysize, 0:win_xsize],
 *                     xoff=xoff, yoff=yoff)
 *             PyMem_Free(int_buffer)             # <<<<<<<<<<<<<<
 *             inc(it)
 *         raster_band.FlushCache()
 */
    PyMem_Free(__pyx_v_int_buffer);

    /* "src/geoprocessing/routing/watershed.pyx":253
 *                     xoff=xoff, yoff=yoff)
 *             PyMem_Free(int_buffer)
 *             inc(it)             # <<<<<<<<<<<<<<
 *         raster_band.FlushCache()
 *         raster_band = None
 */
    (void)((++__pyx_v_it));
  }

  /* "src/geoprocessing/routing/watershed.pyx":254
 *             PyMem_Free(int_buffer)
 *             inc(it)
 *         raster_band.FlushCache()             # <<<<<<<<<<<<<<
 *         raster_band = None
 *         raster = None
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_FlushCache); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":255
 *             inc(it)
 *         raster_band.FlushCache()
 *         raster_band = None             # <<<<<<<<<<<<<<
 *         raster = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":256
 *         raster_band.FlushCache()
 *         raster_band = None
 *         raster = None             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void set(self, int xi, int yi, int value):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":175
 *         self.close()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         """Close the _ManagedRaster and free up resources.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_block_array);
  __Pyx_XDECREF(__pyx_v_raster);
  __Pyx_XDECREF(__pyx_v_raster_band);
  __Pyx_XDECREF(__pyx_v_block_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":258
 *         raster = None
 * 
 *     cdef inline void set(self, int xi, int yi, int value):             # <<<<<<<<<<<<<<
 *         """Set the pixel at `xi,yi` to `value`."""
 *         cdef int block_xi = xi >> self.block_xbits
 */

static CYTHON_INLINE void __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_set(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi, int __pyx_v_value) {
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_block_index;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 0);

  /* "src/geoprocessing/routing/watershed.pyx":260
 *     cdef inline void set(self, int xi, int yi, int value):
 *         """Set the pixel at `xi,yi` to `value`."""
 *         cdef int block_xi = xi >> self.block_xbits             # <<<<<<<<<<<<<<
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 */
  __pyx_v_block_xi = (__pyx_v_xi >> __pyx_v_self->block_xbits);

  /* "src/geoprocessing/routing/watershed.pyx":261
 *         """Set the pixel at `xi,yi` to `value`."""
 *         cdef int block_xi = xi >> self.block_xbits
 *         cdef int block_yi = yi >> self.block_ybits             # <<<<<<<<<<<<<<
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 */
  __pyx_v_block_yi = (__pyx_v_yi >> __pyx_v_self->block_ybits);

  /* "src/geoprocessing/routing/watershed.pyx":263
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi             # <<<<<<<<<<<<<<
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)
 */
  __pyx_v_block_index = ((__pyx_v_block_yi * __pyx_v_self->block_nx) + __pyx_v_block_xi);

  /* "src/geoprocessing/routing/watershed.pyx":264
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         self.lru_cache.get(
 */
  __pyx_t_1 = ((!(__pyx_v_self->lru_cache->exist(__pyx_v_block_index) != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/watershed.pyx":265
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)             # <<<<<<<<<<<<<<
 *         self.lru_cache.get(
 *             block_index)[
 */
    ((struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self->__pyx_vtab)->_load_block(__pyx_v_self, __pyx_v_block_index); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":264
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         self.lru_cache.get(
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":268
 *         self.lru_cache.get(
 *             block_index)[
 *                 ((yi & (self.block_ymod))<<self.block_xbits) +             # <<<<<<<<<<<<<<
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:
 */
  (__pyx_v_self->lru_cache->get(__pyx_v_block_index)[(((__pyx_v_yi & __pyx_v_self->block_ymod) << __pyx_v_self->block_xbits) + (__pyx_v_xi & __pyx_v_self->block_xmod))]) = __pyx_v_value;

  /* "src/geoprocessing/routing/watershed.pyx":270
 *                 ((yi & (self.block_ymod))<<self.block_xbits) +
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():
 */
  __pyx_t_1 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/watershed.pyx":271
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:
 *             dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *             if dirty_itr == self.dirty_blocks.end():
 *                 self.dirty_blocks.insert(block_index)
 */
    __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_v_block_index);

    /* "src/geoprocessing/routing/watershed.pyx":272
 *         if self.write_mode:
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.insert(block_index)
 * 
 */
    __pyx_t_1 = ((__pyx_v_dirty_itr == __pyx_v_self->dirty_blocks.end()) != 0);
    if (__pyx_t_1) {

      /* "src/geoprocessing/routing/watershed.pyx":273
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():
 *                 self.dirty_blocks.insert(block_index)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int get(self, int xi, int yi):
 */
      try {
        __pyx_v_self->dirty_blocks.insert(__pyx_v_block_index);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 273, __pyx_L1_error)
      }

      /* "src/geoprocessing/routing/watershed.pyx":272
 *         if self.write_mode:
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                 self.dirty_blocks.insert(block_index)
 * 
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":270
 *                 ((yi & (self.block_ymod))<<self.block_xbits) +
 *                 (xi & (self.block_xmod))] = value
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             dirty_itr = self.dirty_blocks.find(block_index)
 *             if dirty_itr == self.dirty_blocks.end():
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":258
 *         raster = None
 * 
 *     cdef inline void set(self, int xi, int yi, int value):             # <<<<<<<<<<<<<<
 *         """Set the pixel at `xi,yi` to `value`."""
 *         cdef int block_xi = xi >> self.block_xbits
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.watershed._ManagedRaster.set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "src/geoprocessing/routing/watershed.pyx":275
 *                 self.dirty_blocks.insert(block_index)
 * 
 *     cdef inline int get(self, int xi, int yi):             # <<<<<<<<<<<<<<
 *         """Return the value of the pixel at `xi,yi`."""
 *         cdef int block_xi = xi >> self.block_xbits
 */

static CYTHON_INLINE int __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_get(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, int __pyx_v_xi, int __pyx_v_yi) {
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_block_index;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "src/geoprocessing/routing/watershed.pyx":277
 *     cdef inline int get(self, int xi, int yi):
 *         """Return the value of the pixel at `xi,yi`."""
 *         cdef int block_xi = xi >> self.block_xbits             # <<<<<<<<<<<<<<
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 */
  __pyx_v_block_xi = (__pyx_v_xi >> __pyx_v_self->block_xbits);

  /* "src/geoprocessing/routing/watershed.pyx":278
 *         """Return the value of the pixel at `xi,yi`."""
 *         cdef int block_xi = xi >> self.block_xbits
 *         cdef int block_yi = yi >> self.block_ybits             # <<<<<<<<<<<<<<
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 */
  __pyx_v_block_yi = (__pyx_v_yi >> __pyx_v_self->block_ybits);

  /* "src/geoprocessing/routing/watershed.pyx":280
 *         cdef int block_yi = yi >> self.block_ybits
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi             # <<<<<<<<<<<<<<
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)
 */
  __pyx_v_block_index = ((__pyx_v_block_yi * __pyx_v_self->block_nx) + __pyx_v_block_xi);

  /* "src/geoprocessing/routing/watershed.pyx":281
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         return self.lru_cache.get(
 */
  __pyx_t_1 = ((!(__pyx_v_self->lru_cache->exist(__pyx_v_block_index) != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/watershed.pyx":282
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):
 *             self._load_block(block_index)             # <<<<<<<<<<<<<<
 *         return self.lru_cache.get(
 *             block_index)[
 */
    ((struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self->__pyx_vtab)->_load_block(__pyx_v_self, __pyx_v_block_index); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":281
 *         # this is the flat index for the block
 *         cdef int block_index = block_yi * self.block_nx + block_xi
 *         if not self.lru_cache.exist(block_index):             # <<<<<<<<<<<<<<
 *             self._load_block(block_index)
 *         return self.lru_cache.get(
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":284
 *             self._load_block(block_index)
 *         return self.lru_cache.get(
 *             block_index)[             # <<<<<<<<<<<<<<
 *                 ((yi & (self.block_ymod))<<self.block_xbits) +
 *                 (xi & (self.block_xmod))]
 */
  __pyx_r = (__pyx_v_self->lru_cache->get(__pyx_v_block_index)[(((__pyx_v_yi & __pyx_v_self->block_ymod) << __pyx_v_self->block_xbits) + (__pyx_v_xi & __pyx_v_self->block_xmod))]);
  goto __pyx_L0;

  /* "src/geoprocessing/routing/watershed.pyx":275
 *                 self.dirty_blocks.insert(block_index)
 * 
 *     cdef inline int get(self, int xi, int yi):             # <<<<<<<<<<<<<<
 *         """Return the value of the pixel at `xi,yi`."""
 *         cdef int block_xi = xi >> self.block_xbits
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.watershed._ManagedRaster.get", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":288
 *                 (xi & (self.block_xmod))]
 * 
 *     cdef void _load_block(self, int block_index) except *:             # <<<<<<<<<<<<<<
 *         cdef int block_xi = block_index % self.block_nx
 *         cdef int block_yi = block_index // self.block_nx
 */

static void __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster__load_block(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, int __pyx_v_block_index) {
  int __pyx_v_block_xi;
  int __pyx_v_block_yi;
  int __pyx_v_xoff;
  int __pyx_v_yoff;
  int __pyx_v_xi_copy;
  int __pyx_v_yi_copy;
  PyArrayObject *__pyx_v_block_array = 0;
  int *__pyx_v_int_buffer;
  std::list<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_BlockBufferPair>  __pyx_v_removed_value_list;
  int __pyx_v_win_xsize;
  int __pyx_v_win_ysize;
  PyObject *__pyx_v_raster = NULL;
  PyObject *__pyx_v_raster_band = NULL;
  std::set<int> ::iterator __pyx_v_dirty_itr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_block_array;
  __Pyx_Buffer __pyx_pybuffer_block_array;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  int *__pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_block", 0);
  __pyx_pybuffer_block_array.pybuffer.buf = NULL;
  __pyx_pybuffer_block_array.refcount = 0;
  __pyx_pybuffernd_block_array.data = NULL;
  __pyx_pybuffernd_block_array.rcbuffer = &__pyx_pybuffer_block_array;

  /* "src/geoprocessing/routing/watershed.pyx":289
 * 
 *     cdef void _load_block(self, int block_index) except *:
 *         cdef int block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *         cdef int block_yi = block_index // self.block_nx
 * 
 */
  if (unlikely(__pyx_v_self->block_nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 289, __pyx_L1_error)
  }
  __pyx_v_block_xi = __Pyx_mod_int(__pyx_v_block_index, __pyx_v_self->block_nx);

  /* "src/geoprocessing/routing/watershed.pyx":290
 *     cdef void _load_block(self, int block_index) except *:
 *         cdef int block_xi = block_index % self.block_nx
 *         cdef int block_yi = block_index // self.block_nx             # <<<<<<<<<<<<<<
 * 
 *         # we need the offsets to subtract from global indexes for cached array
 */
  if (unlikely(__pyx_v_self->block_nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 290, __pyx_L1_error)
  }
  else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_nx == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_block_index))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __pyx_v_block_yi = __Pyx_div_int(__pyx_v_block_index, __pyx_v_self->block_nx);

  /* "src/geoprocessing/routing/watershed.pyx":293
 * 
 *         # we need the offsets to subtract from global indexes for cached array
 *         cdef int xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *         cdef int yoff = block_yi << self.block_ybits
 * 
 */
  __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

  /* "src/geoprocessing/routing/watershed.pyx":294
 *         # we need the offsets to subtract from global indexes for cached array
 *         cdef int xoff = block_xi << self.block_xbits
 *         cdef int yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *         cdef int xi_copy, yi_copy
 */
  __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

  /* "src/geoprocessing/routing/watershed.pyx":305
 *         # initially the win size is the same as the block size unless
 *         # we're at the edge of a raster
 *         cdef int win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *         cdef int win_ysize = self.block_ysize
 * 
 */
  __pyx_t_1 = __pyx_v_self->block_xsize;
  __pyx_v_win_xsize = __pyx_t_1;

  /* "src/geoprocessing/routing/watershed.pyx":306
 *         # we're at the edge of a raster
 *         cdef int win_xsize = self.block_xsize
 *         cdef int win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *         # load a new block
 */
  __pyx_t_1 = __pyx_v_self->block_ysize;
  __pyx_v_win_ysize = __pyx_t_1;

  /* "src/geoprocessing/routing/watershed.pyx":309
 * 
 *         # load a new block
 *         if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:
 */
  __pyx_t_2 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":310
 *         # load a new block
 *         if xoff+win_xsize > self.raster_x_size:
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)             # <<<<<<<<<<<<<<
 *         if yoff+win_ysize > self.raster_y_size:
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 */
    __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

    /* "src/geoprocessing/routing/watershed.pyx":309
 * 
 *         # load a new block
 *         if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":311
 *         if xoff+win_xsize > self.raster_x_size:
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 * 
 */
  __pyx_t_2 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":312
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)             # <<<<<<<<<<<<<<
 * 
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 */
    __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

    /* "src/geoprocessing/routing/watershed.pyx":311
 *         if xoff+win_xsize > self.raster_x_size:
 *             win_xsize = win_xsize - (xoff+win_xsize - self.raster_x_size)
 *         if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 * 
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":314
 *             win_ysize = win_ysize - (yoff+win_ysize - self.raster_y_size)
 * 
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gdal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_v_self->raster_path);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_v_self->raster_path);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_raster = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":315
 * 
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_raster_band = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":316
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_ReadAsArray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "src/geoprocessing/routing/watershed.pyx":317
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,             # <<<<<<<<<<<<<<
 *             win_ysize=win_ysize).astype(
 *             numpy.int32)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_xoff, __pyx_t_6) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_yoff, __pyx_t_6) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_win_xsize, __pyx_t_6) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":318
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(             # <<<<<<<<<<<<<<
 *             numpy.int32)
 *         raster_band = None
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_win_ysize, __pyx_t_6) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":316
 *         raster = gdal.OpenEx(self.raster_path, gdal.OF_RASTER)
 *         raster_band = raster.GetRasterBand(self.band_id)
 *         block_array = raster_band.ReadAsArray(             # <<<<<<<<<<<<<<
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":318
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(             # <<<<<<<<<<<<<<
 *             numpy.int32)
 *         raster_band = None
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":319
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(
 *             numpy.int32)             # <<<<<<<<<<<<<<
 *         raster_band = None
 *         raster = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":318
 *         block_array = raster_band.ReadAsArray(
 *             xoff=xoff, yoff=yoff, win_xsize=win_xsize,
 *             win_ysize=win_ysize).astype(             # <<<<<<<<<<<<<<
 *             numpy.int32)
 *         raster_band = None
 */
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 318, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_block_array, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_block_array.diminfo[0].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_block_array.diminfo[0].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_block_array.diminfo[1].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_block_array.diminfo[1].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 316, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_block_array = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":320
 *             win_ysize=win_ysize).astype(
 *             numpy.int32)
 *         raster_band = None             # <<<<<<<<<<<<<<
 *         raster = None
 *         int_buffer = <int*>PyMem_Malloc(
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":321
 *             numpy.int32)
 *         raster_band = None
 *         raster = None             # <<<<<<<<<<<<<<
 *         int_buffer = <int*>PyMem_Malloc(
 *             (sizeof(int) << self.block_xbits) * win_ysize)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":322
 *         raster_band = None
 *         raster = None
 *         int_buffer = <int*>PyMem_Malloc(             # <<<<<<<<<<<<<<
 *             (sizeof(int) << self.block_xbits) * win_ysize)
 *         for xi_copy in xrange(win_xsize):
 */
  __pyx_v_int_buffer = ((int *)PyMem_Malloc((((sizeof(int)) << __pyx_v_self->block_xbits) * __pyx_v_win_ysize)));

  /* "src/geoprocessing/routing/watershed.pyx":324
 *         int_buffer = <int*>PyMem_Malloc(
 *             (sizeof(int) << self.block_xbits) * win_ysize)
 *         for xi_copy in xrange(win_xsize):             # <<<<<<<<<<<<<<
 *             for yi_copy in xrange(win_ysize):
 *                 int_buffer[(yi_copy<<self.block_xbits)+xi_copy] = (
 */
  __pyx_t_1 = __pyx_v_win_xsize;
  __pyx_t_12 = __pyx_t_1;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_xi_copy = __pyx_t_13;

    /* "src/geoprocessing/routing/watershed.pyx":325
 *             (sizeof(int) << self.block_xbits) * win_ysize)
 *         for xi_copy in xrange(win_xsize):
 *             for yi_copy in xrange(win_ysize):             # <<<<<<<<<<<<<<
 *                 int_buffer[(yi_copy<<self.block_xbits)+xi_copy] = (
 *                     block_array[yi_copy, xi_copy])
 */
    __pyx_t_14 = __pyx_v_win_ysize;
    __pyx_t_15 = __pyx_t_14;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_yi_copy = __pyx_t_16;

      /* "src/geoprocessing/routing/watershed.pyx":327
 *             for yi_copy in xrange(win_ysize):
 *                 int_buffer[(yi_copy<<self.block_xbits)+xi_copy] = (
 *                     block_array[yi_copy, xi_copy])             # <<<<<<<<<<<<<<
 *         self.lru_cache.put(
 *             <int>block_index, <int*>int_buffer, removed_value_list)
 */
      __pyx_t_17 = __pyx_v_yi_copy;
      __pyx_t_18 = __pyx_v_xi_copy;
      __pyx_t_19 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_block_array.diminfo[0].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_19 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_block_array.diminfo[0].shape)) __pyx_t_19 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_block_array.diminfo[1].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_19 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_block_array.diminfo[1].shape)) __pyx_t_19 = 1;
      if (unlikely(__pyx_t_19 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_19);
        __PYX_ERR(0, 327, __pyx_L1_error)
      }

      /* "src/geoprocessing/routing/watershed.pyx":326
 *         for xi_copy in xrange(win_xsize):
 *             for yi_copy in xrange(win_ysize):
 *                 int_buffer[(yi_copy<<self.block_xbits)+xi_copy] = (             # <<<<<<<<<<<<<<
 *                     block_array[yi_copy, xi_copy])
 *         self.lru_cache.put(
 */
      (__pyx_v_int_buffer[((__pyx_v_yi_copy << __pyx_v_self->block_xbits) + __pyx_v_xi_copy)]) = (*__Pyx_BufPtrStrided2d(int *, __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_block_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_block_array.diminfo[1].strides));
    }
  }

  /* "src/geoprocessing/routing/watershed.pyx":328
 *                 int_buffer[(yi_copy<<self.block_xbits)+xi_copy] = (
 *                     block_array[yi_copy, xi_copy])
 *         self.lru_cache.put(             # <<<<<<<<<<<<<<
 *             <int>block_index, <int*>int_buffer, removed_value_list)
 * 
 */
  __pyx_v_self->lru_cache->put(((int)__pyx_v_block_index), ((int *)__pyx_v_int_buffer), __pyx_v_removed_value_list);

  /* "src/geoprocessing/routing/watershed.pyx":331
 *             <int>block_index, <int*>int_buffer, removed_value_list)
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster = gdal.OpenEx(
 *                 self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 */
  __pyx_t_2 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":332
 * 
 *         if self.write_mode:
 *             raster = gdal.OpenEx(             # <<<<<<<<<<<<<<
 *                 self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *             raster_band = raster.GetRasterBand(self.band_id)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":333
 *         if self.write_mode:
 *             raster = gdal.OpenEx(
 *                 self.raster_path, gdal.GA_Update | gdal.OF_RASTER)             # <<<<<<<<<<<<<<
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GA_Update); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Or(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->raster_path, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->raster_path);
      __Pyx_GIVEREF(__pyx_v_self->raster_path);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_v_self->raster_path);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_raster, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":334
 *             raster = gdal.OpenEx(
 *                 self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 *             raster_band = raster.GetRasterBand(self.band_id)             # <<<<<<<<<<<<<<
 * 
 *         block_array = numpy.empty(
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->band_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_raster_band, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":331
 *             <int>block_index, <int*>int_buffer, removed_value_list)
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster = gdal.OpenEx(
 *                 self.raster_path, gdal.GA_Update | gdal.OF_RASTER)
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":336
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         while not removed_value_list.empty():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":337
 * 
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->block_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->block_xsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":336
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         while not removed_value_list.empty():
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":337
 * 
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)             # <<<<<<<<<<<<<<
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":336
 *             raster_band = raster.GetRasterBand(self.band_id)
 * 
 *         block_array = numpy.empty(             # <<<<<<<<<<<<<<
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         while not removed_value_list.empty():
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_block_array, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_block_array.diminfo[0].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_block_array.diminfo[0].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_block_array.diminfo[1].strides = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_block_array.diminfo[1].shape = __pyx_pybuffernd_block_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_block_array, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":338
 *         block_array = numpy.empty(
 *             (self.block_ysize, self.block_xsize), dtype=numpy.int32)
 *         while not removed_value_list.empty():             # <<<<<<<<<<<<<<
 *             # write the changed value back if desired
 *             int_buffer = removed_value_list.front().second
 */
  while (1) {
    __pyx_t_2 = ((!(__pyx_v_removed_value_list.empty() != 0)) != 0);
    if (!__pyx_t_2) break;

    /* "src/geoprocessing/routing/watershed.pyx":340
 *         while not removed_value_list.empty():
 *             # write the changed value back if desired
 *             int_buffer = removed_value_list.front().second             # <<<<<<<<<<<<<<
 * 
 *             if self.write_mode:
 */
    __pyx_t_20 = __pyx_v_removed_value_list.front().second;
    __pyx_v_int_buffer = __pyx_t_20;

    /* "src/geoprocessing/routing/watershed.pyx":342
 *             int_buffer = removed_value_list.front().second
 * 
 *             if self.write_mode:             # <<<<<<<<<<<<<<
 *                 block_index = removed_value_list.front().first
 * 
 */
    __pyx_t_2 = (__pyx_v_self->write_mode != 0);
    if (__pyx_t_2) {

      /* "src/geoprocessing/routing/watershed.pyx":343
 * 
 *             if self.write_mode:
 *                 block_index = removed_value_list.front().first             # <<<<<<<<<<<<<<
 * 
 *                 # write back the block if it's dirty
 */
      __pyx_t_1 = __pyx_v_removed_value_list.front().first;
      __pyx_v_block_index = __pyx_t_1;

      /* "src/geoprocessing/routing/watershed.pyx":346
 * 
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)             # <<<<<<<<<<<<<<
 *                 if dirty_itr != self.dirty_blocks.end():
 *                     self.dirty_blocks.erase(dirty_itr)
 */
      __pyx_v_dirty_itr = __pyx_v_self->dirty_blocks.find(__pyx_v_block_index);

      /* "src/geoprocessing/routing/watershed.pyx":347
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 */
      __pyx_t_2 = ((__pyx_v_dirty_itr != __pyx_v_self->dirty_blocks.end()) != 0);
      if (__pyx_t_2) {

        /* "src/geoprocessing/routing/watershed.pyx":348
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():
 *                     self.dirty_blocks.erase(dirty_itr)             # <<<<<<<<<<<<<<
 * 
 *                     block_xi = block_index % self.block_nx
 */
        (void)(__pyx_v_self->dirty_blocks.erase(__pyx_v_dirty_itr));

        /* "src/geoprocessing/routing/watershed.pyx":350
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 *                     block_xi = block_index % self.block_nx             # <<<<<<<<<<<<<<
 *                     block_yi = block_index // self.block_nx
 * 
 */
        if (unlikely(__pyx_v_self->block_nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 350, __pyx_L1_error)
        }
        __pyx_v_block_xi = __Pyx_mod_int(__pyx_v_block_index, __pyx_v_self->block_nx);

        /* "src/geoprocessing/routing/watershed.pyx":351
 * 
 *                     block_xi = block_index % self.block_nx
 *                     block_yi = block_index // self.block_nx             # <<<<<<<<<<<<<<
 * 
 *                     xoff = block_xi << self.block_xbits
 */
        if (unlikely(__pyx_v_self->block_nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 351, __pyx_L1_error)
        }
        else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->block_nx == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_block_index))) {
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          __PYX_ERR(0, 351, __pyx_L1_error)
        }
        __pyx_v_block_yi = __Pyx_div_int(__pyx_v_block_index, __pyx_v_self->block_nx);

        /* "src/geoprocessing/routing/watershed.pyx":353
 *                     block_yi = block_index // self.block_nx
 * 
 *                     xoff = block_xi << self.block_xbits             # <<<<<<<<<<<<<<
 *                     yoff = block_yi << self.block_ybits
 * 
 */
        __pyx_v_xoff = (__pyx_v_block_xi << __pyx_v_self->block_xbits);

        /* "src/geoprocessing/routing/watershed.pyx":354
 * 
 *                     xoff = block_xi << self.block_xbits
 *                     yoff = block_yi << self.block_ybits             # <<<<<<<<<<<<<<
 * 
 *                     win_xsize = self.block_xsize
 */
        __pyx_v_yoff = (__pyx_v_block_yi << __pyx_v_self->block_ybits);

        /* "src/geoprocessing/routing/watershed.pyx":356
 *                     yoff = block_yi << self.block_ybits
 * 
 *                     win_xsize = self.block_xsize             # <<<<<<<<<<<<<<
 *                     win_ysize = self.block_ysize
 * 
 */
        __pyx_t_1 = __pyx_v_self->block_xsize;
        __pyx_v_win_xsize = __pyx_t_1;

        /* "src/geoprocessing/routing/watershed.pyx":357
 * 
 *                     win_xsize = self.block_xsize
 *                     win_ysize = self.block_ysize             # <<<<<<<<<<<<<<
 * 
 *                     if xoff+win_xsize > self.raster_x_size:
 */
        __pyx_t_1 = __pyx_v_self->block_ysize;
        __pyx_v_win_ysize = __pyx_t_1;

        /* "src/geoprocessing/routing/watershed.pyx":359
 *                     win_ysize = self.block_ysize
 * 
 *                     if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 */
        __pyx_t_2 = (((__pyx_v_xoff + __pyx_v_win_xsize) > __pyx_v_self->raster_x_size) != 0);
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/watershed.pyx":360
 * 
 *                     if xoff+win_xsize > self.raster_x_size:
 *                         win_xsize = win_xsize - (             # <<<<<<<<<<<<<<
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:
 */
          __pyx_v_win_xsize = (__pyx_v_win_xsize - ((__pyx_v_xoff + __pyx_v_win_xsize) - __pyx_v_self->raster_x_size));

          /* "src/geoprocessing/routing/watershed.pyx":359
 *                     win_ysize = self.block_ysize
 * 
 *                     if xoff+win_xsize > self.raster_x_size:             # <<<<<<<<<<<<<<
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":362
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                         win_ysize = win_ysize - (
 *                             yoff+win_ysize - self.raster_y_size)
 */
        __pyx_t_2 = (((__pyx_v_yoff + __pyx_v_win_ysize) > __pyx_v_self->raster_y_size) != 0);
        if (__pyx_t_2) {

          /* "src/geoprocessing/routing/watershed.pyx":363
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:
 *                         win_ysize = win_ysize - (             # <<<<<<<<<<<<<<
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 */
          __pyx_v_win_ysize = (__pyx_v_win_ysize - ((__pyx_v_yoff + __pyx_v_win_ysize) - __pyx_v_self->raster_y_size));

          /* "src/geoprocessing/routing/watershed.pyx":362
 *                         win_xsize = win_xsize - (
 *                             xoff+win_xsize - self.raster_x_size)
 *                     if yoff+win_ysize > self.raster_y_size:             # <<<<<<<<<<<<<<
 *                         win_ysize = win_ysize - (
 *                             yoff+win_ysize - self.raster_y_size)
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":366
 *                             yoff+win_ysize - self.raster_y_size)
 * 
 *                     for xi_copy in xrange(win_xsize):             # <<<<<<<<<<<<<<
 *                         for yi_copy in xrange(win_ysize):
 *                             block_array[yi_copy, xi_copy] = int_buffer[
 */
        __pyx_t_1 = __pyx_v_win_xsize;
        __pyx_t_12 = __pyx_t_1;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_xi_copy = __pyx_t_13;

          /* "src/geoprocessing/routing/watershed.pyx":367
 * 
 *                     for xi_copy in xrange(win_xsize):
 *                         for yi_copy in xrange(win_ysize):             # <<<<<<<<<<<<<<
 *                             block_array[yi_copy, xi_copy] = int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 */
          __pyx_t_14 = __pyx_v_win_ysize;
          __pyx_t_15 = __pyx_t_14;
          for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
            __pyx_v_yi_copy = __pyx_t_16;

            /* "src/geoprocessing/routing/watershed.pyx":368
 *                     for xi_copy in xrange(win_xsize):
 *                         for yi_copy in xrange(win_ysize):
 *                             block_array[yi_copy, xi_copy] = int_buffer[             # <<<<<<<<<<<<<<
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(
 */
            __pyx_t_18 = __pyx_v_yi_copy;
            __pyx_t_17 = __pyx_v_xi_copy;
            __pyx_t_19 = -1;
            if (__pyx_t_18 < 0) {
              __pyx_t_18 += __pyx_pybuffernd_block_array.diminfo[0].shape;
              if (unlikely(__pyx_t_18 < 0)) __pyx_t_19 = 0;
            } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_block_array.diminfo[0].shape)) __pyx_t_19 = 0;
            if (__pyx_t_17 < 0) {
              __pyx_t_17 += __pyx_pybuffernd_block_array.diminfo[1].shape;
              if (unlikely(__pyx_t_17 < 0)) __pyx_t_19 = 1;
            } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_block_array.diminfo[1].shape)) __pyx_t_19 = 1;
            if (unlikely(__pyx_t_19 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_19);
              __PYX_ERR(0, 368, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided2d(int *, __pyx_pybuffernd_block_array.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_block_array.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_block_array.diminfo[1].strides) = (__pyx_v_int_buffer[((__pyx_v_yi_copy << __pyx_v_self->block_xbits) + __pyx_v_xi_copy)]);
          }
        }

        /* "src/geoprocessing/routing/watershed.pyx":370
 *                             block_array[yi_copy, xi_copy] = int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster_band, __pyx_n_s_WriteArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "src/geoprocessing/routing/watershed.pyx":371
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],             # <<<<<<<<<<<<<<
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(int_buffer)
 */
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_win_ysize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PySlice_New(__pyx_int_0, __pyx_t_7, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_win_xsize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PySlice_New(__pyx_int_0, __pyx_t_7, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_block_array), __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":370
 *                             block_array[yi_copy, xi_copy] = int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":372
 *                     raster_band.WriteArray(
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)             # <<<<<<<<<<<<<<
 *             PyMem_Free(int_buffer)
 *             removed_value_list.pop_front()
 */
        __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_xoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_xoff, __pyx_t_6) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_yoff); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_yoff, __pyx_t_6) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":370
 *                             block_array[yi_copy, xi_copy] = int_buffer[
 *                                 (yi_copy << self.block_xbits) + xi_copy]
 *                     raster_band.WriteArray(             # <<<<<<<<<<<<<<
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 */
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":347
 *                 # write back the block if it's dirty
 *                 dirty_itr = self.dirty_blocks.find(block_index)
 *                 if dirty_itr != self.dirty_blocks.end():             # <<<<<<<<<<<<<<
 *                     self.dirty_blocks.erase(dirty_itr)
 * 
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":342
 *             int_buffer = removed_value_list.front().second
 * 
 *             if self.write_mode:             # <<<<<<<<<<<<<<
 *                 block_index = removed_value_list.front().first
 * 
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":373
 *                         block_array[0:win_ysize, 0:win_xsize],
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(int_buffer)             # <<<<<<<<<<<<<<
 *             removed_value_list.pop_front()
 * 
 */
    PyMem_Free(__pyx_v_int_buffer);

    /* "src/geoprocessing/routing/watershed.pyx":374
 *                         xoff=xoff, yoff=yoff)
 *             PyMem_Free(int_buffer)
 *             removed_value_list.pop_front()             # <<<<<<<<<<<<<<
 * 
 *         if self.write_mode:
 */
    __pyx_v_removed_value_list.pop_front();
  }

  /* "src/geoprocessing/routing/watershed.pyx":376
 *             removed_value_list.pop_front()
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster_band = None
 *             raster = None
 */
  __pyx_t_2 = (__pyx_v_self->write_mode != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":377
 * 
 *         if self.write_mode:
 *             raster_band = None             # <<<<<<<<<<<<<<
 *             raster = None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_raster_band, Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":378
 *         if self.write_mode:
 *             raster_band = None
 *             raster = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":376
 *             removed_value_list.pop_front()
 * 
 *         if self.write_mode:             # <<<<<<<<<<<<<<
 *             raster_band = None
 *             raster = None
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":288
 *                 (xi & (self.block_xmod))]
 * 
 *     cdef void _load_block(self, int block_index) except *:             # <<<<<<<<<<<<<<
 *         cdef int block_xi = block_index % self.block_nx
 *         cdef int block_yi = block_index // self.block_nx
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster._load_block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_block_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_block_array);
  __Pyx_XDECREF(__pyx_v_raster);
  __Pyx_XDECREF(__pyx_v_raster_band);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_8__reduce_cython__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_10__setstate_cython__(((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._ManagedRaster.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":388
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_1_is_raster_path_band_formatted(PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed__is_raster_path_band_formatted[] = "Return true if raster path band is a (str, int) tuple/list.";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_9watershed_1_is_raster_path_band_formatted = {"_is_raster_path_band_formatted", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_1_is_raster_path_band_formatted, METH_O, __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed__is_raster_path_band_formatted};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_1_is_raster_path_band_formatted(PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_raster_path_band_formatted (wrapper)", 0);
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed__is_raster_path_band_formatted(__pyx_self, ((PyObject *)__pyx_v_raster_path_band));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed__is_raster_path_band_formatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_raster_path_band) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_raster_path_band_formatted", 0);

  /* "src/geoprocessing/routing/watershed.pyx":390
 * def _is_raster_path_band_formatted(raster_path_band):
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):             # <<<<<<<<<<<<<<
 *         return False
 *     elif len(raster_path_band) != 2:
 */
  __pyx_t_2 = PyList_Check(__pyx_v_raster_path_band); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_Check(__pyx_v_raster_path_band); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":391
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 *         return False             # <<<<<<<<<<<<<<
 *     elif len(raster_path_band) != 2:
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":390
 * def _is_raster_path_band_formatted(raster_path_band):
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):             # <<<<<<<<<<<<<<
 *         return False
 *     elif len(raster_path_band) != 2:
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":392
 *     if not isinstance(raster_path_band, (list, tuple)):
 *         return False
 *     elif len(raster_path_band) != 2:             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_raster_path_band); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_4 != 2) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":393
 *         return False
 *     elif len(raster_path_band) != 2:
 *         return False             # <<<<<<<<<<<<<<
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":392
 *     if not isinstance(raster_path_band, (list, tuple)):
 *         return False
 *     elif len(raster_path_band) != 2:             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":394
 *     elif len(raster_path_band) != 2:
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[1], int):
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyBaseString_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "src/geoprocessing/routing/watershed.pyx":395
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False             # <<<<<<<<<<<<<<
 *     elif not isinstance(raster_path_band[1], int):
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":394
 *     elif len(raster_path_band) != 2:
 *         return False
 *     elif not isinstance(raster_path_band[0], basestring):             # <<<<<<<<<<<<<<
 *         return False
 *     elif not isinstance(raster_path_band[1], int):
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":396
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False
 *     elif not isinstance(raster_path_band[1], int):             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyInt_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "src/geoprocessing/routing/watershed.pyx":397
 *         return False
 *     elif not isinstance(raster_path_band[1], int):
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":396
 *     elif not isinstance(raster_path_band[0], basestring):
 *         return False
 *     elif not isinstance(raster_path_band[1], int):             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":399
 *         return False
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }

  /* "src/geoprocessing/routing/watershed.pyx":388
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._is_raster_path_band_formatted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":402
 * 
 * 
 * cdef cset[CoordinatePair] _c_split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, tuple flow_dir_geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows,
 */

static std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds(PyObject *__pyx_v_source_geom_wkb, PyObject *__pyx_v_flow_dir_geotransform, PyObject *__pyx_v_flow_dir_srs, PyObject *__pyx_v_flow_dir_n_cols, PyObject *__pyx_v_flow_dir_n_rows, PyObject *__pyx_v_target_raster_path, struct __pyx_opt_args_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds *__pyx_optional_args) {

  /* "src/geoprocessing/routing/watershed.pyx":405
 *         source_geom_wkb, tuple flow_dir_geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows,
 *         target_raster_path, diagnostic_vector_path=None):             # <<<<<<<<<<<<<<
 *     """Split a geometry into 'seeds' of (x, y) coordinate pairs.
 * 
 */
  PyObject *__pyx_v_diagnostic_vector_path = ((PyObject *)Py_None);
  float __pyx_v_minx;
  float __pyx_v_miny;
  float __pyx_v_maxx;
  float __pyx_v_maxy;
  double __pyx_v_x_origin;
  double __pyx_v_y_origin;
  double __pyx_v_x_pixelwidth;
  double __pyx_v_y_pixelwidth;
  double __pyx_v_flow_dir_maxx;
  double __pyx_v_flow_dir_miny;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_v_seed_set;
  PyObject *__pyx_v_geometry = NULL;
  int __pyx_v_minx_pixelcoord;
  int __pyx_v_miny_pixelcoord;
  int __pyx_v_maxx_pixelcoord;
  int __pyx_v_maxy_pixelcoord;
  PyObject *__pyx_v_seed = NULL;
  double __pyx_v_minx_aligned;
  double __pyx_v_miny_aligned;
  double __pyx_v_maxx_aligned;
  double __pyx_v_maxy_aligned;
  double __pyx_v_local_n_cols;
  double __pyx_v_local_n_rows;
  PyObject *__pyx_v_memory_driver = NULL;
  PyObject *__pyx_v_new_vector = NULL;
  PyObject *__pyx_v_new_layer = NULL;
  PyObject *__pyx_v_new_feature = NULL;
  double __pyx_v_local_origin_x;
  double __pyx_v_local_origin_y;
  PyObject *__pyx_v_local_geotransform = NULL;
  PyObject *__pyx_v_gtiff_driver = NULL;
  PyObject *__pyx_v_raster = NULL;
  int __pyx_v_write_diagnostic_vector;
  PyObject *__pyx_v_diagnostic_vector = NULL;
  PyObject *__pyx_v_diagnostic_layer = NULL;
  PyObject *__pyx_v_gpkg_driver = NULL;
  PyObject *__pyx_v_user_geometry_layer = NULL;
  PyObject *__pyx_v_user_feature = NULL;
  int __pyx_v_row;
  int __pyx_v_col;
  int __pyx_v_global_row;
  int __pyx_v_global_col;
  int __pyx_v_seed_raster_origin_col;
  int __pyx_v_seed_raster_origin_row;
  PyObject *__pyx_v_block_info = 0;
  int __pyx_v_block_xoff;
  int __pyx_v_block_yoff;
  PyArrayObject *__pyx_v_seed_array = 0;
  npy_intp __pyx_v_n_rows;
  npy_intp __pyx_v_n_cols;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_seed_array;
  __Pyx_Buffer __pyx_pybuffer_seed_array;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  long __pyx_t_18;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  Py_ssize_t __pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  PyArrayObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  npy_intp __pyx_t_27;
  npy_intp __pyx_t_28;
  npy_intp __pyx_t_29;
  npy_intp __pyx_t_30;
  int __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  int __pyx_t_37;
  PyObject *__pyx_t_38 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_c_split_geometry_into_seeds", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_diagnostic_vector_path = __pyx_optional_args->diagnostic_vector_path;
    }
  }
  __pyx_pybuffer_seed_array.pybuffer.buf = NULL;
  __pyx_pybuffer_seed_array.refcount = 0;
  __pyx_pybuffernd_seed_array.data = NULL;
  __pyx_pybuffernd_seed_array.rcbuffer = &__pyx_pybuffer_seed_array;

  /* "src/geoprocessing/routing/watershed.pyx":435
 *     """
 *     cdef float minx, miny, maxx, maxy
 *     cdef double x_origin = flow_dir_geotransform[0]             # <<<<<<<<<<<<<<
 *     cdef double y_origin = flow_dir_geotransform[3]
 *     cdef double x_pixelwidth = flow_dir_geotransform[1]
 */
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 435, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x_origin = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":436
 *     cdef float minx, miny, maxx, maxy
 *     cdef double x_origin = flow_dir_geotransform[0]
 *     cdef double y_origin = flow_dir_geotransform[3]             # <<<<<<<<<<<<<<
 *     cdef double x_pixelwidth = flow_dir_geotransform[1]
 *     cdef double y_pixelwidth = flow_dir_geotransform[5]
 */
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 436, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y_origin = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":437
 *     cdef double x_origin = flow_dir_geotransform[0]
 *     cdef double y_origin = flow_dir_geotransform[3]
 *     cdef double x_pixelwidth = flow_dir_geotransform[1]             # <<<<<<<<<<<<<<
 *     cdef double y_pixelwidth = flow_dir_geotransform[5]
 *     cdef double flow_dir_maxx = x_origin + (flow_dir_n_cols * x_pixelwidth)
 */
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 437, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x_pixelwidth = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":438
 *     cdef double y_origin = flow_dir_geotransform[3]
 *     cdef double x_pixelwidth = flow_dir_geotransform[1]
 *     cdef double y_pixelwidth = flow_dir_geotransform[5]             # <<<<<<<<<<<<<<
 *     cdef double flow_dir_maxx = x_origin + (flow_dir_n_cols * x_pixelwidth)
 *     cdef double flow_dir_miny = y_origin + (flow_dir_n_rows * y_pixelwidth)
 */
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 438, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y_pixelwidth = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":439
 *     cdef double x_pixelwidth = flow_dir_geotransform[1]
 *     cdef double y_pixelwidth = flow_dir_geotransform[5]
 *     cdef double flow_dir_maxx = x_origin + (flow_dir_n_cols * x_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef double flow_dir_miny = y_origin + (flow_dir_n_rows * y_pixelwidth)
 *     cdef cset[CoordinatePair] seed_set
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x_origin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x_pixelwidth); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_flow_dir_n_cols, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_flow_dir_maxx = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":440
 *     cdef double y_pixelwidth = flow_dir_geotransform[5]
 *     cdef double flow_dir_maxx = x_origin + (flow_dir_n_cols * x_pixelwidth)
 *     cdef double flow_dir_miny = y_origin + (flow_dir_n_rows * y_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef cset[CoordinatePair] seed_set
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y_origin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y_pixelwidth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_flow_dir_n_rows, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_flow_dir_miny = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":443
 *     cdef cset[CoordinatePair] seed_set
 * 
 *     geometry = shapely.wkb.loads(source_geom_wkb)             # <<<<<<<<<<<<<<
 * 
 *     minx, miny, maxx, maxy = geometry.bounds
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_shapely); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_wkb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_loads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_source_geom_wkb) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_source_geom_wkb);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_geometry = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":445
 *     geometry = shapely.wkb.loads(source_geom_wkb)
 * 
 *     minx, miny, maxx, maxy = geometry.bounds             # <<<<<<<<<<<<<<
 *     cdef int minx_pixelcoord = <int>((minx - x_origin) // x_pixelwidth)
 *     cdef int miny_pixelcoord = <int>((miny - y_origin) // y_pixelwidth)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_geometry, __pyx_n_s_bounds); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 445, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 445, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 445, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_minx = __pyx_t_9;
  __pyx_v_miny = __pyx_t_10;
  __pyx_v_maxx = __pyx_t_11;
  __pyx_v_maxy = __pyx_t_12;

  /* "src/geoprocessing/routing/watershed.pyx":446
 * 
 *     minx, miny, maxx, maxy = geometry.bounds
 *     cdef int minx_pixelcoord = <int>((minx - x_origin) // x_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef int miny_pixelcoord = <int>((miny - y_origin) // y_pixelwidth)
 *     cdef int maxx_pixelcoord = <int>((maxx - x_origin) // x_pixelwidth)
 */
  __pyx_t_2 = (__pyx_v_minx - __pyx_v_x_origin);
  if (unlikely(__pyx_v_x_pixelwidth == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 446, __pyx_L1_error)
  }
  __pyx_v_minx_pixelcoord = ((int)floor(__pyx_t_2 / __pyx_v_x_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":447
 *     minx, miny, maxx, maxy = geometry.bounds
 *     cdef int minx_pixelcoord = <int>((minx - x_origin) // x_pixelwidth)
 *     cdef int miny_pixelcoord = <int>((miny - y_origin) // y_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef int maxx_pixelcoord = <int>((maxx - x_origin) // x_pixelwidth)
 *     cdef int maxy_pixelcoord = <int>((maxy - y_origin) // y_pixelwidth)
 */
  __pyx_t_2 = (__pyx_v_miny - __pyx_v_y_origin);
  if (unlikely(__pyx_v_y_pixelwidth == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 447, __pyx_L1_error)
  }
  __pyx_v_miny_pixelcoord = ((int)floor(__pyx_t_2 / __pyx_v_y_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":448
 *     cdef int minx_pixelcoord = <int>((minx - x_origin) // x_pixelwidth)
 *     cdef int miny_pixelcoord = <int>((miny - y_origin) // y_pixelwidth)
 *     cdef int maxx_pixelcoord = <int>((maxx - x_origin) // x_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef int maxy_pixelcoord = <int>((maxy - y_origin) // y_pixelwidth)
 * 
 */
  __pyx_t_2 = (__pyx_v_maxx - __pyx_v_x_origin);
  if (unlikely(__pyx_v_x_pixelwidth == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 448, __pyx_L1_error)
  }
  __pyx_v_maxx_pixelcoord = ((int)floor(__pyx_t_2 / __pyx_v_x_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":449
 *     cdef int miny_pixelcoord = <int>((miny - y_origin) // y_pixelwidth)
 *     cdef int maxx_pixelcoord = <int>((maxx - x_origin) // x_pixelwidth)
 *     cdef int maxy_pixelcoord = <int>((maxy - y_origin) // y_pixelwidth)             # <<<<<<<<<<<<<<
 * 
 *     # If the geometry only intersects a single pixel, we can treat it
 */
  __pyx_t_2 = (__pyx_v_maxy - __pyx_v_y_origin);
  if (unlikely(__pyx_v_y_pixelwidth == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 449, __pyx_L1_error)
  }
  __pyx_v_maxy_pixelcoord = ((int)floor(__pyx_t_2 / __pyx_v_y_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":455
 *     # seeds data structure and not have to include it in the disjoint set
 *     # determination.
 *     if minx_pixelcoord == maxx_pixelcoord and miny_pixelcoord == maxy_pixelcoord:             # <<<<<<<<<<<<<<
 *         # If the point is over nodata, skip it.
 *         seed = CoordinatePair(minx_pixelcoord, miny_pixelcoord)
 */
  __pyx_t_14 = ((__pyx_v_minx_pixelcoord == __pyx_v_maxx_pixelcoord) != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_13 = __pyx_t_14;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_14 = ((__pyx_v_miny_pixelcoord == __pyx_v_maxy_pixelcoord) != 0);
  __pyx_t_13 = __pyx_t_14;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_13) {

    /* "src/geoprocessing/routing/watershed.pyx":457
 *     if minx_pixelcoord == maxx_pixelcoord and miny_pixelcoord == maxy_pixelcoord:
 *         # If the point is over nodata, skip it.
 *         seed = CoordinatePair(minx_pixelcoord, miny_pixelcoord)             # <<<<<<<<<<<<<<
 *         seed_set.insert(seed)
 *         return seed_set
 */
    try {
      __pyx_t_15 = __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair(__pyx_v_minx_pixelcoord, __pyx_v_miny_pixelcoord);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 457, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_convert_pair_to_py_long____long(__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_seed = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":458
 *         # If the point is over nodata, skip it.
 *         seed = CoordinatePair(minx_pixelcoord, miny_pixelcoord)
 *         seed_set.insert(seed)             # <<<<<<<<<<<<<<
 *         return seed_set
 * 
 */
    __pyx_t_15 = __pyx_convert_pair_from_py_long__and_long(__pyx_v_seed); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    try {
      __pyx_v_seed_set.insert(__pyx_t_15);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 458, __pyx_L1_error)
    }

    /* "src/geoprocessing/routing/watershed.pyx":459
 *         seed = CoordinatePair(minx_pixelcoord, miny_pixelcoord)
 *         seed_set.insert(seed)
 *         return seed_set             # <<<<<<<<<<<<<<
 * 
 *     # If the geometry's bounding box covers more than one pixel, we need to
 */
    __pyx_r = __pyx_v_seed_set;
    goto __pyx_L0;

    /* "src/geoprocessing/routing/watershed.pyx":455
 *     # seeds data structure and not have to include it in the disjoint set
 *     # determination.
 *     if minx_pixelcoord == maxx_pixelcoord and miny_pixelcoord == maxy_pixelcoord:             # <<<<<<<<<<<<<<
 *         # If the point is over nodata, skip it.
 *         seed = CoordinatePair(minx_pixelcoord, miny_pixelcoord)
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":465
 *     cdef double minx_aligned = max(
 *         x_origin + (minx_pixelcoord * x_pixelwidth),
 *         x_origin)             # <<<<<<<<<<<<<<
 *     cdef double miny_aligned = max(
 *         y_origin + ((miny_pixelcoord+1) * y_pixelwidth),
 */
  __pyx_t_2 = __pyx_v_x_origin;

  /* "src/geoprocessing/routing/watershed.pyx":464
 *     # rasterize it to determine which pixels it intersects.
 *     cdef double minx_aligned = max(
 *         x_origin + (minx_pixelcoord * x_pixelwidth),             # <<<<<<<<<<<<<<
 *         x_origin)
 *     cdef double miny_aligned = max(
 */
  __pyx_t_16 = (__pyx_v_x_origin + (__pyx_v_minx_pixelcoord * __pyx_v_x_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":465
 *     cdef double minx_aligned = max(
 *         x_origin + (minx_pixelcoord * x_pixelwidth),
 *         x_origin)             # <<<<<<<<<<<<<<
 *     cdef double miny_aligned = max(
 *         y_origin + ((miny_pixelcoord+1) * y_pixelwidth),
 */
  if (((__pyx_t_2 > __pyx_t_16) != 0)) {
    __pyx_t_17 = __pyx_t_2;
  } else {
    __pyx_t_17 = __pyx_t_16;
  }
  __pyx_v_minx_aligned = __pyx_t_17;

  /* "src/geoprocessing/routing/watershed.pyx":468
 *     cdef double miny_aligned = max(
 *         y_origin + ((miny_pixelcoord+1) * y_pixelwidth),
 *         flow_dir_miny)             # <<<<<<<<<<<<<<
 *     cdef double maxx_aligned = min(
 *         x_origin + ((maxx_pixelcoord+1) * x_pixelwidth),
 */
  __pyx_t_17 = __pyx_v_flow_dir_miny;

  /* "src/geoprocessing/routing/watershed.pyx":467
 *         x_origin)
 *     cdef double miny_aligned = max(
 *         y_origin + ((miny_pixelcoord+1) * y_pixelwidth),             # <<<<<<<<<<<<<<
 *         flow_dir_miny)
 *     cdef double maxx_aligned = min(
 */
  __pyx_t_2 = (__pyx_v_y_origin + ((__pyx_v_miny_pixelcoord + 1) * __pyx_v_y_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":468
 *     cdef double miny_aligned = max(
 *         y_origin + ((miny_pixelcoord+1) * y_pixelwidth),
 *         flow_dir_miny)             # <<<<<<<<<<<<<<
 *     cdef double maxx_aligned = min(
 *         x_origin + ((maxx_pixelcoord+1) * x_pixelwidth),
 */
  if (((__pyx_t_17 > __pyx_t_2) != 0)) {
    __pyx_t_16 = __pyx_t_17;
  } else {
    __pyx_t_16 = __pyx_t_2;
  }
  __pyx_v_miny_aligned = __pyx_t_16;

  /* "src/geoprocessing/routing/watershed.pyx":471
 *     cdef double maxx_aligned = min(
 *         x_origin + ((maxx_pixelcoord+1) * x_pixelwidth),
 *         flow_dir_maxx)             # <<<<<<<<<<<<<<
 *     cdef double maxy_aligned = min(
 *         y_origin + (maxy_pixelcoord * y_pixelwidth),
 */
  __pyx_t_16 = __pyx_v_flow_dir_maxx;

  /* "src/geoprocessing/routing/watershed.pyx":470
 *         flow_dir_miny)
 *     cdef double maxx_aligned = min(
 *         x_origin + ((maxx_pixelcoord+1) * x_pixelwidth),             # <<<<<<<<<<<<<<
 *         flow_dir_maxx)
 *     cdef double maxy_aligned = min(
 */
  __pyx_t_17 = (__pyx_v_x_origin + ((__pyx_v_maxx_pixelcoord + 1) * __pyx_v_x_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":471
 *     cdef double maxx_aligned = min(
 *         x_origin + ((maxx_pixelcoord+1) * x_pixelwidth),
 *         flow_dir_maxx)             # <<<<<<<<<<<<<<
 *     cdef double maxy_aligned = min(
 *         y_origin + (maxy_pixelcoord * y_pixelwidth),
 */
  if (((__pyx_t_16 < __pyx_t_17) != 0)) {
    __pyx_t_2 = __pyx_t_16;
  } else {
    __pyx_t_2 = __pyx_t_17;
  }
  __pyx_v_maxx_aligned = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":474
 *     cdef double maxy_aligned = min(
 *         y_origin + (maxy_pixelcoord * y_pixelwidth),
 *         y_origin)             # <<<<<<<<<<<<<<
 * 
 *     # It's possible for a perfectly vertical or horizontal line to cover 0 rows
 */
  __pyx_t_2 = __pyx_v_y_origin;

  /* "src/geoprocessing/routing/watershed.pyx":473
 *         flow_dir_maxx)
 *     cdef double maxy_aligned = min(
 *         y_origin + (maxy_pixelcoord * y_pixelwidth),             # <<<<<<<<<<<<<<
 *         y_origin)
 * 
 */
  __pyx_t_16 = (__pyx_v_y_origin + (__pyx_v_maxy_pixelcoord * __pyx_v_y_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":474
 *     cdef double maxy_aligned = min(
 *         y_origin + (maxy_pixelcoord * y_pixelwidth),
 *         y_origin)             # <<<<<<<<<<<<<<
 * 
 *     # It's possible for a perfectly vertical or horizontal line to cover 0 rows
 */
  if (((__pyx_t_2 < __pyx_t_16) != 0)) {
    __pyx_t_17 = __pyx_t_2;
  } else {
    __pyx_t_17 = __pyx_t_16;
  }
  __pyx_v_maxy_aligned = __pyx_t_17;

  /* "src/geoprocessing/routing/watershed.pyx":478
 *     # It's possible for a perfectly vertical or horizontal line to cover 0 rows
 *     # or columns, so defaulting to row/col count of 1 in these cases.
 *     local_n_cols = max(abs(maxx_aligned - minx_aligned) // abs(x_pixelwidth), 1)             # <<<<<<<<<<<<<<
 *     local_n_rows = max(abs(maxy_aligned - miny_aligned) // abs(y_pixelwidth), 1)
 * 
 */
  __pyx_t_18 = 1;
  __pyx_t_17 = fabs((__pyx_v_maxx_aligned - __pyx_v_minx_aligned));
  __pyx_t_2 = fabs(__pyx_v_x_pixelwidth);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 478, __pyx_L1_error)
  }
  __pyx_t_16 = floor(__pyx_t_17 / __pyx_t_2);
  if (((__pyx_t_18 > __pyx_t_16) != 0)) {
    __pyx_t_2 = __pyx_t_18;
  } else {
    __pyx_t_2 = __pyx_t_16;
  }
  __pyx_v_local_n_cols = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":479
 *     # or columns, so defaulting to row/col count of 1 in these cases.
 *     local_n_cols = max(abs(maxx_aligned - minx_aligned) // abs(x_pixelwidth), 1)
 *     local_n_rows = max(abs(maxy_aligned - miny_aligned) // abs(y_pixelwidth), 1)             # <<<<<<<<<<<<<<
 * 
 *     # The geometry does not fit into a single pixel, so let's create a new
 */
  __pyx_t_18 = 1;
  __pyx_t_2 = fabs((__pyx_v_maxy_aligned - __pyx_v_miny_aligned));
  __pyx_t_16 = fabs(__pyx_v_y_pixelwidth);
  if (unlikely(__pyx_t_16 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __pyx_t_17 = floor(__pyx_t_2 / __pyx_t_16);
  if (((__pyx_t_18 > __pyx_t_17) != 0)) {
    __pyx_t_16 = __pyx_t_18;
  } else {
    __pyx_t_16 = __pyx_t_17;
  }
  __pyx_v_local_n_rows = __pyx_t_16;

  /* "src/geoprocessing/routing/watershed.pyx":483
 *     # The geometry does not fit into a single pixel, so let's create a new
 *     # raster onto which to rasterize it.
 *     memory_driver = gdal.GetDriverByName('Memory')             # <<<<<<<<<<<<<<
 *     new_vector = memory_driver.Create('mem', 0, 0, 0, gdal.GDT_Unknown)
 *     new_layer = new_vector.CreateLayer('user_geometry', flow_dir_srs, ogr.wkbUnknown)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_u_Memory) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_u_Memory);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_memory_driver = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":484
 *     # raster onto which to rasterize it.
 *     memory_driver = gdal.GetDriverByName('Memory')
 *     new_vector = memory_driver.Create('mem', 0, 0, 0, gdal.GDT_Unknown)             # <<<<<<<<<<<<<<
 *     new_layer = new_vector.CreateLayer('user_geometry', flow_dir_srs, ogr.wkbUnknown)
 *     new_layer.StartTransaction()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_memory_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_gdal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_GDT_Unknown); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_19 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_19 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[6] = {__pyx_t_6, __pyx_n_u_mem, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_19, 5+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[6] = {__pyx_t_6, __pyx_n_u_mem, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_19, 5+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(5+__pyx_t_19); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_mem);
    __Pyx_GIVEREF(__pyx_n_u_mem);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_19, __pyx_n_u_mem);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_19, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_19, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_19, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_19, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_new_vector = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":485
 *     memory_driver = gdal.GetDriverByName('Memory')
 *     new_vector = memory_driver.Create('mem', 0, 0, 0, gdal.GDT_Unknown)
 *     new_layer = new_vector.CreateLayer('user_geometry', flow_dir_srs, ogr.wkbUnknown)             # <<<<<<<<<<<<<<
 *     new_layer.StartTransaction()
 *     new_feature = ogr.Feature(new_layer.GetLayerDefn())
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_wkbUnknown); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_19 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_19 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_n_u_user_geometry, __pyx_v_flow_dir_srs, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_19, 3+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_n_u_user_geometry, __pyx_v_flow_dir_srs, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_19, 3+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_19); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_user_geometry);
    __Pyx_GIVEREF(__pyx_n_u_user_geometry);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_19, __pyx_n_u_user_geometry);
    __Pyx_INCREF(__pyx_v_flow_dir_srs);
    __Pyx_GIVEREF(__pyx_v_flow_dir_srs);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_19, __pyx_v_flow_dir_srs);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_19, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_new_layer = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":486
 *     new_vector = memory_driver.Create('mem', 0, 0, 0, gdal.GDT_Unknown)
 *     new_layer = new_vector.CreateLayer('user_geometry', flow_dir_srs, ogr.wkbUnknown)
 *     new_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *     new_feature = ogr.Feature(new_layer.GetLayerDefn())
 *     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":487
 *     new_layer = new_vector.CreateLayer('user_geometry', flow_dir_srs, ogr.wkbUnknown)
 *     new_layer.StartTransaction()
 *     new_feature = ogr.Feature(new_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 *     new_layer.CreateFeature(new_feature)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Feature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_new_feature = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":488
 *     new_layer.StartTransaction()
 *     new_feature = ogr.Feature(new_layer.GetLayerDefn())
 *     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))             # <<<<<<<<<<<<<<
 *     new_layer.CreateFeature(new_feature)
 *     new_layer.CommitTransaction()
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ogr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_CreateGeometryFromWkb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_source_geom_wkb) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_source_geom_wkb);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":489
 *     new_feature = ogr.Feature(new_layer.GetLayerDefn())
 *     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 *     new_layer.CreateFeature(new_feature)             # <<<<<<<<<<<<<<
 *     new_layer.CommitTransaction()
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_new_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_new_feature);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":490
 *     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 *     new_layer.CreateFeature(new_feature)
 *     new_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 * 
 *     local_origin_x = max(minx_aligned, x_origin)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":492
 *     new_layer.CommitTransaction()
 * 
 *     local_origin_x = max(minx_aligned, x_origin)             # <<<<<<<<<<<<<<
 *     local_origin_y = min(maxy_aligned, y_origin)
 * 
 */
  __pyx_t_16 = __pyx_v_x_origin;
  __pyx_t_17 = __pyx_v_minx_aligned;
  if (((__pyx_t_16 > __pyx_t_17) != 0)) {
    __pyx_t_2 = __pyx_t_16;
  } else {
    __pyx_t_2 = __pyx_t_17;
  }
  __pyx_v_local_origin_x = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":493
 * 
 *     local_origin_x = max(minx_aligned, x_origin)
 *     local_origin_y = min(maxy_aligned, y_origin)             # <<<<<<<<<<<<<<
 * 
 *     local_geotransform = [
 */
  __pyx_t_2 = __pyx_v_y_origin;
  __pyx_t_16 = __pyx_v_maxy_aligned;
  if (((__pyx_t_2 < __pyx_t_16) != 0)) {
    __pyx_t_17 = __pyx_t_2;
  } else {
    __pyx_t_17 = __pyx_t_16;
  }
  __pyx_v_local_origin_y = __pyx_t_17;

  /* "src/geoprocessing/routing/watershed.pyx":496
 * 
 *     local_geotransform = [
 *         local_origin_x, flow_dir_geotransform[1], flow_dir_geotransform[2],             # <<<<<<<<<<<<<<
 *         local_origin_y, flow_dir_geotransform[4], flow_dir_geotransform[5]]
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_local_origin_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 496, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 496, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "src/geoprocessing/routing/watershed.pyx":497
 *     local_geotransform = [
 *         local_origin_x, flow_dir_geotransform[1], flow_dir_geotransform[2],
 *         local_origin_y, flow_dir_geotransform[4], flow_dir_geotransform[5]]             # <<<<<<<<<<<<<<
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 *     # Raster is sparse, no need to fill.
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_local_origin_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 497, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_flow_dir_geotransform == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 497, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v_flow_dir_geotransform, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/geoprocessing/routing/watershed.pyx":495
 *     local_origin_y = min(maxy_aligned, y_origin)
 * 
 *     local_geotransform = [             # <<<<<<<<<<<<<<
 *         local_origin_x, flow_dir_geotransform[1], flow_dir_geotransform[2],
 *         local_origin_y, flow_dir_geotransform[4], flow_dir_geotransform[5]]
 */
  __pyx_t_20 = PyList_New(6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_20, 3, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_20, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_20, 5, __pyx_t_7);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_v_local_geotransform = ((PyObject*)__pyx_t_20);
  __pyx_t_20 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":498
 *         local_origin_x, flow_dir_geotransform[1], flow_dir_geotransform[2],
 *         local_origin_y, flow_dir_geotransform[4], flow_dir_geotransform[5]]
 *     gtiff_driver = gdal.GetDriverByName('GTiff')             # <<<<<<<<<<<<<<
 *     # Raster is sparse, no need to fill.
 *     raster = gtiff_driver.Create(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_20 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_n_u_GTiff) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_GTiff);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_gtiff_driver = __pyx_t_20;
  __pyx_t_20 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":500
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 *     # Raster is sparse, no need to fill.
 *     raster = gtiff_driver.Create(             # <<<<<<<<<<<<<<
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)
 */
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_gtiff_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);

  /* "src/geoprocessing/routing/watershed.pyx":501
 *     # Raster is sparse, no need to fill.
 *     raster = gtiff_driver.Create(
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,             # <<<<<<<<<<<<<<
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)
 *     raster.SetProjection(flow_dir_srs.ExportToWkt())
 */
  __pyx_t_3 = __Pyx_PyInt_FromDouble(__pyx_v_local_n_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_FromDouble(__pyx_v_local_n_rows); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/geoprocessing/routing/watershed.pyx":502
 *     raster = gtiff_driver.Create(
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)             # <<<<<<<<<<<<<<
 *     raster.SetProjection(flow_dir_srs.ExportToWkt())
 *     raster.SetGeoTransform(local_geotransform)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GDT_Byte); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":500
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 *     # Raster is sparse, no need to fill.
 *     raster = gtiff_driver.Create(             # <<<<<<<<<<<<<<
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_target_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_raster_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_target_raster_path);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":502
 *     raster = gtiff_driver.Create(
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)             # <<<<<<<<<<<<<<
 *     raster.SetProjection(flow_dir_srs.ExportToWkt())
 *     raster.SetGeoTransform(local_geotransform)
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_GTIFF_CREATION_OPTIONS); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_options, __pyx_t_7) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":500
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 *     # Raster is sparse, no need to fill.
 *     raster = gtiff_driver.Create(             # <<<<<<<<<<<<<<
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_raster = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":503
 *         target_raster_path, int(local_n_cols), int(local_n_rows), 1,
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)
 *     raster.SetProjection(flow_dir_srs.ExportToWkt())             # <<<<<<<<<<<<<<
 *     raster.SetGeoTransform(local_geotransform)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_SetProjection); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_srs, __pyx_n_s_ExportToWkt); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_20);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_20, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_20)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_20);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_7 = (__pyx_t_20) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_20, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":504
 *         gdal.GDT_Byte, options=GTIFF_CREATION_OPTIONS)
 *     raster.SetProjection(flow_dir_srs.ExportToWkt())
 *     raster.SetGeoTransform(local_geotransform)             # <<<<<<<<<<<<<<
 * 
 *     gdal.RasterizeLayer(
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_raster, __pyx_n_s_SetGeoTransform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_local_geotransform) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_local_geotransform);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":506
 *     raster.SetGeoTransform(local_geotransform)
 * 
 *     gdal.RasterizeLayer(             # <<<<<<<<<<<<<<
 *         raster, [1], new_layer, burn_values=[1], options=['ALL_TOUCHED=True'])
 *     raster = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_RasterizeLayer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":507
 * 
 *     gdal.RasterizeLayer(
 *         raster, [1], new_layer, burn_values=[1], options=['ALL_TOUCHED=True'])             # <<<<<<<<<<<<<<
 *     raster = None
 * 
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_int_1);

  /* "src/geoprocessing/routing/watershed.pyx":506
 *     raster.SetGeoTransform(local_geotransform)
 * 
 *     gdal.RasterizeLayer(             # <<<<<<<<<<<<<<
 *         raster, [1], new_layer, burn_values=[1], options=['ALL_TOUCHED=True'])
 *     raster = None
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_raster);
  __Pyx_GIVEREF(__pyx_v_raster);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_raster);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_new_layer);
  __Pyx_GIVEREF(__pyx_v_new_layer);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_new_layer);
  __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":507
 * 
 *     gdal.RasterizeLayer(
 *         raster, [1], new_layer, burn_values=[1], options=['ALL_TOUCHED=True'])             # <<<<<<<<<<<<<<
 *     raster = None
 * 
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_20 = PyList_New(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_20, 0, __pyx_int_1);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_burn_values, __pyx_t_20) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyList_New(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_kp_u_ALL_TOUCHED_True);
  __Pyx_GIVEREF(__pyx_kp_u_ALL_TOUCHED_True);
  PyList_SET_ITEM(__pyx_t_20, 0, __pyx_kp_u_ALL_TOUCHED_True);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_options, __pyx_t_20) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":506
 *     raster.SetGeoTransform(local_geotransform)
 * 
 *     gdal.RasterizeLayer(             # <<<<<<<<<<<<<<
 *         raster, [1], new_layer, burn_values=[1], options=['ALL_TOUCHED=True'])
 *     raster = None
 */
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":508
 *     gdal.RasterizeLayer(
 *         raster, [1], new_layer, burn_values=[1], options=['ALL_TOUCHED=True'])
 *     raster = None             # <<<<<<<<<<<<<<
 * 
 *     cdef int write_diagnostic_vector = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_raster, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":510
 *     raster = None
 * 
 *     cdef int write_diagnostic_vector = 0             # <<<<<<<<<<<<<<
 *     diagnostic_vector = None
 *     diagnostic_layer = None
 */
  __pyx_v_write_diagnostic_vector = 0;

  /* "src/geoprocessing/routing/watershed.pyx":511
 * 
 *     cdef int write_diagnostic_vector = 0
 *     diagnostic_vector = None             # <<<<<<<<<<<<<<
 *     diagnostic_layer = None
 *     if diagnostic_vector_path is not None:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_diagnostic_vector = Py_None;

  /* "src/geoprocessing/routing/watershed.pyx":512
 *     cdef int write_diagnostic_vector = 0
 *     diagnostic_vector = None
 *     diagnostic_layer = None             # <<<<<<<<<<<<<<
 *     if diagnostic_vector_path is not None:
 *         write_diagnostic_vector = 1
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_diagnostic_layer = Py_None;

  /* "src/geoprocessing/routing/watershed.pyx":513
 *     diagnostic_vector = None
 *     diagnostic_layer = None
 *     if diagnostic_vector_path is not None:             # <<<<<<<<<<<<<<
 *         write_diagnostic_vector = 1
 * 
 */
  __pyx_t_13 = (__pyx_v_diagnostic_vector_path != Py_None);
  __pyx_t_14 = (__pyx_t_13 != 0);
  if (__pyx_t_14) {

    /* "src/geoprocessing/routing/watershed.pyx":514
 *     diagnostic_layer = None
 *     if diagnostic_vector_path is not None:
 *         write_diagnostic_vector = 1             # <<<<<<<<<<<<<<
 * 
 *         gpkg_driver = gdal.GetDriverByName('GPKG')
 */
    __pyx_v_write_diagnostic_vector = 1;

    /* "src/geoprocessing/routing/watershed.pyx":516
 *         write_diagnostic_vector = 1
 * 
 *         gpkg_driver = gdal.GetDriverByName('GPKG')             # <<<<<<<<<<<<<<
 *         diagnostic_vector = gpkg_driver.Create(
 *             diagnostic_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_20 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_n_u_GPKG) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_u_GPKG);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_gpkg_driver = __pyx_t_20;
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":517
 * 
 *         gpkg_driver = gdal.GetDriverByName('GPKG')
 *         diagnostic_vector = gpkg_driver.Create(             # <<<<<<<<<<<<<<
 *             diagnostic_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *         diagnostic_layer = diagnostic_vector.CreateLayer(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_gpkg_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/watershed.pyx":518
 *         gpkg_driver = gdal.GetDriverByName('GPKG')
 *         diagnostic_vector = gpkg_driver.Create(
 *             diagnostic_vector_path, 0, 0, 0, gdal.GDT_Unknown)             # <<<<<<<<<<<<<<
 *         diagnostic_layer = diagnostic_vector.CreateLayer(
 *             'seeds', flow_dir_srs, ogr.wkbPoint)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GDT_Unknown); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_19 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_19 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[6] = {__pyx_t_7, __pyx_v_diagnostic_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_5};
      __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_19, 5+__pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[6] = {__pyx_t_7, __pyx_v_diagnostic_vector_path, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_t_5};
      __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_19, 5+__pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(5+__pyx_t_19); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_diagnostic_vector_path);
      __Pyx_GIVEREF(__pyx_v_diagnostic_vector_path);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_19, __pyx_v_diagnostic_vector_path);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_19, __pyx_int_0);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_19, __pyx_int_0);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_19, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_19, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_diagnostic_vector, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":519
 *         diagnostic_vector = gpkg_driver.Create(
 *             diagnostic_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *         diagnostic_layer = diagnostic_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *             'seeds', flow_dir_srs, ogr.wkbPoint)
 *         user_geometry_layer = diagnostic_vector.CreateLayer(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_diagnostic_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/watershed.pyx":520
 *             diagnostic_vector_path, 0, 0, 0, gdal.GDT_Unknown)
 *         diagnostic_layer = diagnostic_vector.CreateLayer(
 *             'seeds', flow_dir_srs, ogr.wkbPoint)             # <<<<<<<<<<<<<<
 *         user_geometry_layer = diagnostic_vector.CreateLayer(
 *             'user_geometry', flow_dir_srs, ogr.wkbUnknown)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ogr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wkbPoint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_19 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_19 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_n_u_seeds, __pyx_v_flow_dir_srs, __pyx_t_5};
      __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_19, 3+__pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_n_u_seeds, __pyx_v_flow_dir_srs, __pyx_t_5};
      __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_19, 3+__pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_19); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_seeds);
      __Pyx_GIVEREF(__pyx_n_u_seeds);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_19, __pyx_n_u_seeds);
      __Pyx_INCREF(__pyx_v_flow_dir_srs);
      __Pyx_GIVEREF(__pyx_v_flow_dir_srs);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_19, __pyx_v_flow_dir_srs);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_19, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_diagnostic_layer, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":521
 *         diagnostic_layer = diagnostic_vector.CreateLayer(
 *             'seeds', flow_dir_srs, ogr.wkbPoint)
 *         user_geometry_layer = diagnostic_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *             'user_geometry', flow_dir_srs, ogr.wkbUnknown)
 *         user_geometry_layer.StartTransaction()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_diagnostic_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "src/geoprocessing/routing/watershed.pyx":522
 *             'seeds', flow_dir_srs, ogr.wkbPoint)
 *         user_geometry_layer = diagnostic_vector.CreateLayer(
 *             'user_geometry', flow_dir_srs, ogr.wkbUnknown)             # <<<<<<<<<<<<<<
 *         user_geometry_layer.StartTransaction()
 *         user_feature = ogr.Feature(user_geometry_layer.GetLayerDefn())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_wkbUnknown); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_19 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_19 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_n_u_user_geometry, __pyx_v_flow_dir_srs, __pyx_t_5};
      __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_19, 3+__pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 521, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_n_u_user_geometry, __pyx_v_flow_dir_srs, __pyx_t_5};
      __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_19, 3+__pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 521, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_19); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_user_geometry);
      __Pyx_GIVEREF(__pyx_n_u_user_geometry);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_19, __pyx_n_u_user_geometry);
      __Pyx_INCREF(__pyx_v_flow_dir_srs);
      __Pyx_GIVEREF(__pyx_v_flow_dir_srs);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_19, __pyx_v_flow_dir_srs);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_19, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_user_geometry_layer = __pyx_t_20;
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":523
 *         user_geometry_layer = diagnostic_vector.CreateLayer(
 *             'user_geometry', flow_dir_srs, ogr.wkbUnknown)
 *         user_geometry_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *         user_feature = ogr.Feature(user_geometry_layer.GetLayerDefn())
 *         user_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_user_geometry_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_20 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":524
 *             'user_geometry', flow_dir_srs, ogr.wkbUnknown)
 *         user_geometry_layer.StartTransaction()
 *         user_feature = ogr.Feature(user_geometry_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *         user_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 *         user_geometry_layer.CreateFeature(user_feature)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Feature); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_user_geometry_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_20 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_user_feature = __pyx_t_20;
    __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":525
 *         user_geometry_layer.StartTransaction()
 *         user_feature = ogr.Feature(user_geometry_layer.GetLayerDefn())
 *         user_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))             # <<<<<<<<<<<<<<
 *         user_geometry_layer.CreateFeature(user_feature)
 *         user_geometry_layer.CommitTransaction()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_user_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_CreateGeometryFromWkb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_v_source_geom_wkb) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_source_geom_wkb);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_20 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":526
 *         user_feature = ogr.Feature(user_geometry_layer.GetLayerDefn())
 *         user_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 *         user_geometry_layer.CreateFeature(user_feature)             # <<<<<<<<<<<<<<
 *         user_geometry_layer.CommitTransaction()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_user_geometry_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_20 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_user_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_user_feature);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":527
 *         user_feature.SetGeometry(ogr.CreateGeometryFromWkb(source_geom_wkb))
 *         user_geometry_layer.CreateFeature(user_feature)
 *         user_geometry_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 * 
 *     cdef int row, col
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_user_geometry_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_20 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":513
 *     diagnostic_vector = None
 *     diagnostic_layer = None
 *     if diagnostic_vector_path is not None:             # <<<<<<<<<<<<<<
 *         write_diagnostic_vector = 1
 * 
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":531
 *     cdef int row, col
 *     cdef int global_row, global_col
 *     cdef int seed_raster_origin_col = <int>((local_origin_x - x_origin) // x_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef int seed_raster_origin_row = <int>((local_origin_y - y_origin) // y_pixelwidth)
 *     cdef dict block_info
 */
  __pyx_t_17 = (__pyx_v_local_origin_x - __pyx_v_x_origin);
  if (unlikely(__pyx_v_x_pixelwidth == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 531, __pyx_L1_error)
  }
  __pyx_v_seed_raster_origin_col = ((int)floor(__pyx_t_17 / __pyx_v_x_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":532
 *     cdef int global_row, global_col
 *     cdef int seed_raster_origin_col = <int>((local_origin_x - x_origin) // x_pixelwidth)
 *     cdef int seed_raster_origin_row = <int>((local_origin_y - y_origin) // y_pixelwidth)             # <<<<<<<<<<<<<<
 *     cdef dict block_info
 *     cdef int block_xoff
 */
  __pyx_t_17 = (__pyx_v_local_origin_y - __pyx_v_y_origin);
  if (unlikely(__pyx_v_y_pixelwidth == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 532, __pyx_L1_error)
  }
  __pyx_v_seed_raster_origin_row = ((int)floor(__pyx_t_17 / __pyx_v_y_pixelwidth));

  /* "src/geoprocessing/routing/watershed.pyx":537
 *     cdef int block_yoff
 *     cdef numpy.ndarray[numpy.npy_uint8, ndim=2] seed_array
 *     for block_info, seed_array in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_raster_path, 1)):
 *         block_xoff = block_info['xoff']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterblocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":538
 *     cdef numpy.ndarray[numpy.npy_uint8, ndim=2] seed_array
 *     for block_info, seed_array in pygeoprocessing.iterblocks(
 *             (target_raster_path, 1)):             # <<<<<<<<<<<<<<
 *         block_xoff = block_info['xoff']
 *         block_yoff = block_info['yoff']
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_target_raster_path);
  __Pyx_GIVEREF(__pyx_v_target_raster_path);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_target_raster_path);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_20 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":537
 *     cdef int block_yoff
 *     cdef numpy.ndarray[numpy.npy_uint8, ndim=2] seed_array
 *     for block_info, seed_array in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_raster_path, 1)):
 *         block_xoff = block_info['xoff']
 */
  if (likely(PyList_CheckExact(__pyx_t_20)) || PyTuple_CheckExact(__pyx_t_20)) {
    __pyx_t_1 = __pyx_t_20; __Pyx_INCREF(__pyx_t_1); __pyx_t_21 = 0;
    __pyx_t_22 = NULL;
  } else {
    __pyx_t_21 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_20); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_22 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 537, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  for (;;) {
    if (likely(!__pyx_t_22)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_21); __Pyx_INCREF(__pyx_t_20); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 537, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_1, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      } else {
        if (__pyx_t_21 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_21); __Pyx_INCREF(__pyx_t_20); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 537, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_1, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      }
    } else {
      __pyx_t_20 = __pyx_t_22(__pyx_t_1);
      if (unlikely(!__pyx_t_20)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 537, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_20);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_20))) || (PyList_CheckExact(__pyx_t_20))) {
      PyObject* sequence = __pyx_t_20;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 537, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_20); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_5), 2) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 537, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 537, __pyx_L1_error)
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_block_info, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;
    __pyx_t_23 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_seed_array.rcbuffer->pybuffer);
      __pyx_t_19 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_seed_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_23, &__Pyx_TypeInfo_nn_npy_uint8, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_19 < 0)) {
        PyErr_Fetch(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_seed_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_seed_array, &__Pyx_TypeInfo_nn_npy_uint8, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_24); Py_XDECREF(__pyx_t_25); Py_XDECREF(__pyx_t_26);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_24, __pyx_t_25, __pyx_t_26);
        }
        __pyx_t_24 = __pyx_t_25 = __pyx_t_26 = 0;
      }
      __pyx_pybuffernd_seed_array.diminfo[0].strides = __pyx_pybuffernd_seed_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_seed_array.diminfo[0].shape = __pyx_pybuffernd_seed_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_seed_array.diminfo[1].strides = __pyx_pybuffernd_seed_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_seed_array.diminfo[1].shape = __pyx_pybuffernd_seed_array.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 537, __pyx_L1_error)
    }
    __pyx_t_23 = 0;
    __Pyx_XDECREF_SET(__pyx_v_seed_array, ((PyArrayObject *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":539
 *     for block_info, seed_array in pygeoprocessing.iterblocks(
 *             (target_raster_path, 1)):
 *         block_xoff = block_info['xoff']             # <<<<<<<<<<<<<<
 *         block_yoff = block_info['yoff']
 *         n_rows = seed_array.shape[0]
 */
    if (unlikely(__pyx_v_block_info == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 539, __pyx_L1_error)
    }
    __pyx_t_20 = __Pyx_PyDict_GetItem(__pyx_v_block_info, __pyx_n_u_xoff); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_20); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_v_block_xoff = __pyx_t_19;

    /* "src/geoprocessing/routing/watershed.pyx":540
 *             (target_raster_path, 1)):
 *         block_xoff = block_info['xoff']
 *         block_yoff = block_info['yoff']             # <<<<<<<<<<<<<<
 *         n_rows = seed_array.shape[0]
 *         n_cols = seed_array.shape[1]
 */
    if (unlikely(__pyx_v_block_info == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 540, __pyx_L1_error)
    }
    __pyx_t_20 = __Pyx_PyDict_GetItem(__pyx_v_block_info, __pyx_n_u_yoff); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_20); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_v_block_yoff = __pyx_t_19;

    /* "src/geoprocessing/routing/watershed.pyx":541
 *         block_xoff = block_info['xoff']
 *         block_yoff = block_info['yoff']
 *         n_rows = seed_array.shape[0]             # <<<<<<<<<<<<<<
 *         n_cols = seed_array.shape[1]
 * 
 */
    __pyx_v_n_rows = (__pyx_v_seed_array->dimensions[0]);

    /* "src/geoprocessing/routing/watershed.pyx":542
 *         block_yoff = block_info['yoff']
 *         n_rows = seed_array.shape[0]
 *         n_cols = seed_array.shape[1]             # <<<<<<<<<<<<<<
 * 
 *         for row in range(n_rows):
 */
    __pyx_v_n_cols = (__pyx_v_seed_array->dimensions[1]);

    /* "src/geoprocessing/routing/watershed.pyx":544
 *         n_cols = seed_array.shape[1]
 * 
 *         for row in range(n_rows):             # <<<<<<<<<<<<<<
 *             for col in range(n_cols):
 *                 with cython.boundscheck(False):
 */
    __pyx_t_27 = __pyx_v_n_rows;
    __pyx_t_28 = __pyx_t_27;
    for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_28; __pyx_t_19+=1) {
      __pyx_v_row = __pyx_t_19;

      /* "src/geoprocessing/routing/watershed.pyx":545
 * 
 *         for row in range(n_rows):
 *             for col in range(n_cols):             # <<<<<<<<<<<<<<
 *                 with cython.boundscheck(False):
 *                     # Check if the pixel does not overlap the geometry.
 */
      __pyx_t_29 = __pyx_v_n_cols;
      __pyx_t_30 = __pyx_t_29;
      for (__pyx_t_31 = 0; __pyx_t_31 < __pyx_t_30; __pyx_t_31+=1) {
        __pyx_v_col = __pyx_t_31;

        /* "src/geoprocessing/routing/watershed.pyx":548
 *                 with cython.boundscheck(False):
 *                     # Check if the pixel does not overlap the geometry.
 *                     if seed_array[row, col] == 0:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
        __pyx_t_32 = __pyx_v_row;
        __pyx_t_33 = __pyx_v_col;
        if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_pybuffernd_seed_array.diminfo[0].shape;
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_pybuffernd_seed_array.diminfo[1].shape;
        __pyx_t_14 = (((*__Pyx_BufPtrStrided2d(npy_uint8 *, __pyx_pybuffernd_seed_array.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_seed_array.diminfo[0].strides, __pyx_t_33, __pyx_pybuffernd_seed_array.diminfo[1].strides)) == 0) != 0);
        if (__pyx_t_14) {

          /* "src/geoprocessing/routing/watershed.pyx":549
 *                     # Check if the pixel does not overlap the geometry.
 *                     if seed_array[row, col] == 0:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                 global_row = seed_raster_origin_row + block_yoff + row
 */
          goto __pyx_L15_continue;

          /* "src/geoprocessing/routing/watershed.pyx":548
 *                 with cython.boundscheck(False):
 *                     # Check if the pixel does not overlap the geometry.
 *                     if seed_array[row, col] == 0:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":551
 *                         continue
 * 
 *                 global_row = seed_raster_origin_row + block_yoff + row             # <<<<<<<<<<<<<<
 *                 global_col = seed_raster_origin_col + block_xoff + col
 * 
 */
        __pyx_v_global_row = ((__pyx_v_seed_raster_origin_row + __pyx_v_block_yoff) + __pyx_v_row);

        /* "src/geoprocessing/routing/watershed.pyx":552
 * 
 *                 global_row = seed_raster_origin_row + block_yoff + row
 *                 global_col = seed_raster_origin_col + block_xoff + col             # <<<<<<<<<<<<<<
 * 
 *                 if write_diagnostic_vector == 1:
 */
        __pyx_v_global_col = ((__pyx_v_seed_raster_origin_col + __pyx_v_block_xoff) + __pyx_v_col);

        /* "src/geoprocessing/routing/watershed.pyx":554
 *                 global_col = seed_raster_origin_col + block_xoff + col
 * 
 *                 if write_diagnostic_vector == 1:             # <<<<<<<<<<<<<<
 *                     diagnostic_layer.StartTransaction()
 *                     new_feature = ogr.Feature(diagnostic_layer.GetLayerDefn())
 */
        __pyx_t_14 = ((__pyx_v_write_diagnostic_vector == 1) != 0);
        if (__pyx_t_14) {

          /* "src/geoprocessing/routing/watershed.pyx":555
 * 
 *                 if write_diagnostic_vector == 1:
 *                     diagnostic_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *                     new_feature = ogr.Feature(diagnostic_layer.GetLayerDefn())
 *                     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_diagnostic_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_20 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":556
 *                 if write_diagnostic_vector == 1:
 *                     diagnostic_layer.StartTransaction()
 *                     new_feature = ogr.Feature(diagnostic_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *                     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(
 *                         shapely.geometry.Point(
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Feature); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_diagnostic_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_20 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF_SET(__pyx_v_new_feature, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":557
 *                     diagnostic_layer.StartTransaction()
 *                     new_feature = ogr.Feature(diagnostic_layer.GetLayerDefn())
 *                     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(             # <<<<<<<<<<<<<<
 *                         shapely.geometry.Point(
 *                             x_origin + ((global_col*x_pixelwidth) +
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ogr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_CreateGeometryFromWkb); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":558
 *                     new_feature = ogr.Feature(diagnostic_layer.GetLayerDefn())
 *                     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(
 *                         shapely.geometry.Point(             # <<<<<<<<<<<<<<
 *                             x_origin + ((global_col*x_pixelwidth) +
 *                                         (x_pixelwidth / 2.)),
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_shapely); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_34 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_geometry); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 558, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_34);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_Point); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":559
 *                     new_feature.SetGeometry(ogr.CreateGeometryFromWkb(
 *                         shapely.geometry.Point(
 *                             x_origin + ((global_col*x_pixelwidth) +             # <<<<<<<<<<<<<<
 *                                         (x_pixelwidth / 2.)),
 *                             y_origin + ((global_row*y_pixelwidth) +
 */
          __pyx_t_34 = PyFloat_FromDouble((__pyx_v_x_origin + ((__pyx_v_global_col * __pyx_v_x_pixelwidth) + (__pyx_v_x_pixelwidth / 2.)))); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_34);

          /* "src/geoprocessing/routing/watershed.pyx":561
 *                             x_origin + ((global_col*x_pixelwidth) +
 *                                         (x_pixelwidth / 2.)),
 *                             y_origin + ((global_row*y_pixelwidth) +             # <<<<<<<<<<<<<<
 *                                         (y_pixelwidth / 2.))).wkb))
 *                     diagnostic_layer.CreateFeature(new_feature)
 */
          __pyx_t_35 = PyFloat_FromDouble((__pyx_v_y_origin + ((__pyx_v_global_row * __pyx_v_y_pixelwidth) + (__pyx_v_y_pixelwidth / 2.)))); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 561, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_35);
          __pyx_t_36 = NULL;
          __pyx_t_37 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_36 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_36)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_36);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_37 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_36, __pyx_t_34, __pyx_t_35};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_37, 2+__pyx_t_37); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 558, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_36); __pyx_t_36 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
            __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_36, __pyx_t_34, __pyx_t_35};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_37, 2+__pyx_t_37); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 558, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_36); __pyx_t_36 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
            __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
          } else
          #endif
          {
            __pyx_t_38 = PyTuple_New(2+__pyx_t_37); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 558, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_38);
            if (__pyx_t_36) {
              __Pyx_GIVEREF(__pyx_t_36); PyTuple_SET_ITEM(__pyx_t_38, 0, __pyx_t_36); __pyx_t_36 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_34);
            PyTuple_SET_ITEM(__pyx_t_38, 0+__pyx_t_37, __pyx_t_34);
            __Pyx_GIVEREF(__pyx_t_35);
            PyTuple_SET_ITEM(__pyx_t_38, 1+__pyx_t_37, __pyx_t_35);
            __pyx_t_34 = 0;
            __pyx_t_35 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_38, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 558, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":562
 *                                         (x_pixelwidth / 2.)),
 *                             y_origin + ((global_row*y_pixelwidth) +
 *                                         (y_pixelwidth / 2.))).wkb))             # <<<<<<<<<<<<<<
 *                     diagnostic_layer.CreateFeature(new_feature)
 *                     diagnostic_layer.CommitTransaction()
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_wkb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 562, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_20 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":563
 *                             y_origin + ((global_row*y_pixelwidth) +
 *                                         (y_pixelwidth / 2.))).wkb))
 *                     diagnostic_layer.CreateFeature(new_feature)             # <<<<<<<<<<<<<<
 *                     diagnostic_layer.CommitTransaction()
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_diagnostic_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_20 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_new_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_new_feature);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":564
 *                                         (y_pixelwidth / 2.))).wkb))
 *                     diagnostic_layer.CreateFeature(new_feature)
 *                     diagnostic_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 * 
 *                 seed_set.insert(CoordinatePair(global_col, global_row))
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_diagnostic_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 564, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_20 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 564, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

          /* "src/geoprocessing/routing/watershed.pyx":554
 *                 global_col = seed_raster_origin_col + block_xoff + col
 * 
 *                 if write_diagnostic_vector == 1:             # <<<<<<<<<<<<<<
 *                     diagnostic_layer.StartTransaction()
 *                     new_feature = ogr.Feature(diagnostic_layer.GetLayerDefn())
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":566
 *                     diagnostic_layer.CommitTransaction()
 * 
 *                 seed_set.insert(CoordinatePair(global_col, global_row))             # <<<<<<<<<<<<<<
 * 
 *     return seed_set
 */
        try {
          __pyx_t_15 = __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair(__pyx_v_global_col, __pyx_v_global_row);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 566, __pyx_L1_error)
        }
        try {
          __pyx_v_seed_set.insert(__pyx_t_15);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 566, __pyx_L1_error)
        }
        __pyx_L15_continue:;
      }
    }

    /* "src/geoprocessing/routing/watershed.pyx":537
 *     cdef int block_yoff
 *     cdef numpy.ndarray[numpy.npy_uint8, ndim=2] seed_array
 *     for block_info, seed_array in pygeoprocessing.iterblocks(             # <<<<<<<<<<<<<<
 *             (target_raster_path, 1)):
 *         block_xoff = block_info['xoff']
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":568
 *                 seed_set.insert(CoordinatePair(global_col, global_row))
 * 
 *     return seed_set             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_seed_set;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/watershed.pyx":402
 * 
 * 
 * cdef cset[CoordinatePair] _c_split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, tuple flow_dir_geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_38);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_seed_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("ecoshard.geoprocessing.routing.watershed._c_split_geometry_into_seeds", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_seed_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_geometry);
  __Pyx_XDECREF(__pyx_v_seed);
  __Pyx_XDECREF(__pyx_v_memory_driver);
  __Pyx_XDECREF(__pyx_v_new_vector);
  __Pyx_XDECREF(__pyx_v_new_layer);
  __Pyx_XDECREF(__pyx_v_new_feature);
  __Pyx_XDECREF(__pyx_v_local_geotransform);
  __Pyx_XDECREF(__pyx_v_gtiff_driver);
  __Pyx_XDECREF(__pyx_v_raster);
  __Pyx_XDECREF(__pyx_v_diagnostic_vector);
  __Pyx_XDECREF(__pyx_v_diagnostic_layer);
  __Pyx_XDECREF(__pyx_v_gpkg_driver);
  __Pyx_XDECREF(__pyx_v_user_geometry_layer);
  __Pyx_XDECREF(__pyx_v_user_feature);
  __Pyx_XDECREF(__pyx_v_block_info);
  __Pyx_XDECREF((PyObject *)__pyx_v_seed_array);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":571
 * 
 * 
 * def _split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows, target_raster_path,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_3_split_geometry_into_seeds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_2_split_geometry_into_seeds[] = "Split a geometry into 'seeds' of (x, y) coordinate pairs.\n\n    This function is a python wrapper around ``_c_split_geometry_into_seeds``\n    that is useful for testing.\n\n    Parameters:\n        source_geom_wkb (str): A string of bytes in WKB representing\n            a geometry. Must be in the same projected coordinate system\n            as the flow direction raster from which\n            ``flow_dir_geotransform`` and ``flow_dir_srs`` are derived.\n        flow_dir_geotransform (list): A 6-element array representing\n            the GDAL affine geotransform from the flow direction raster.\n        flow_dir_srs (osr.SpatialReference): The OSR SpatialReference\n            object from the flow direction raster.\n        flow_dir_n_cols (int): the number of columns in the flow\n            direction raster.\n        flow_dir_n_rows (int): the number of rows in the flow\n            direction raster.\n        target_raster_path (str): The path to a raster onto which\n            the geometry might be rasterized.  If the geometry is small\n            enough to be completely contained within a single pixel, no\n            raster will be written to this location.\n        diagnostic_vector_path (string or None): If a string, a GeoPackage\n            vector will be written to this path containing georeferenced\n            points representing the 'seeds' determined by this function.\n            If ``None``, no vector is created.\n\n    Returns:\n        A python ``set`` of (x-index, y-index) tuples.\n\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_9watershed_3_split_geometry_into_seeds = {"_split_geometry_into_seeds", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_3_split_geometry_into_seeds, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_2_split_geometry_into_seeds};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_3_split_geometry_into_seeds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_geom_wkb = 0;
  PyObject *__pyx_v_geotransform = 0;
  PyObject *__pyx_v_flow_dir_srs = 0;
  PyObject *__pyx_v_flow_dir_n_cols = 0;
  PyObject *__pyx_v_flow_dir_n_rows = 0;
  PyObject *__pyx_v_target_raster_path = 0;
  PyObject *__pyx_v_diagnostic_vector_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_split_geometry_into_seeds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_geom_wkb,&__pyx_n_s_geotransform,&__pyx_n_s_flow_dir_srs,&__pyx_n_s_flow_dir_n_cols,&__pyx_n_s_flow_dir_n_rows,&__pyx_n_s_target_raster_path,&__pyx_n_s_diagnostic_vector_path,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "src/geoprocessing/routing/watershed.pyx":574
 *         source_geom_wkb, geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows, target_raster_path,
 *         diagnostic_vector_path=None):             # <<<<<<<<<<<<<<
 *     """Split a geometry into 'seeds' of (x, y) coordinate pairs.
 * 
 */
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_geom_wkb)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geotransform)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_geometry_into_seeds", 0, 6, 7, 1); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_srs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_geometry_into_seeds", 0, 6, 7, 2); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_n_cols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_geometry_into_seeds", 0, 6, 7, 3); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_dir_n_rows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_geometry_into_seeds", 0, 6, 7, 4); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_raster_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_geometry_into_seeds", 0, 6, 7, 5); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_diagnostic_vector_path);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_split_geometry_into_seeds") < 0)) __PYX_ERR(0, 571, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source_geom_wkb = values[0];
    __pyx_v_geotransform = values[1];
    __pyx_v_flow_dir_srs = values[2];
    __pyx_v_flow_dir_n_cols = values[3];
    __pyx_v_flow_dir_n_rows = values[4];
    __pyx_v_target_raster_path = values[5];
    __pyx_v_diagnostic_vector_path = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_split_geometry_into_seeds", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._split_geometry_into_seeds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_2_split_geometry_into_seeds(__pyx_self, __pyx_v_source_geom_wkb, __pyx_v_geotransform, __pyx_v_flow_dir_srs, __pyx_v_flow_dir_n_cols, __pyx_v_flow_dir_n_rows, __pyx_v_target_raster_path, __pyx_v_diagnostic_vector_path);

  /* "src/geoprocessing/routing/watershed.pyx":571
 * 
 * 
 * def _split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows, target_raster_path,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_2_split_geometry_into_seeds(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_source_geom_wkb, PyObject *__pyx_v_geotransform, PyObject *__pyx_v_flow_dir_srs, PyObject *__pyx_v_flow_dir_n_cols, PyObject *__pyx_v_flow_dir_n_rows, PyObject *__pyx_v_target_raster_path, PyObject *__pyx_v_diagnostic_vector_path) {
  PyObject *__pyx_v_return_set = NULL;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_v_seeds;
  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair __pyx_v_seed;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair> ::iterator __pyx_v_seeds_iterator;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_t_2;
  struct __pyx_opt_args_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_split_geometry_into_seeds", 0);

  /* "src/geoprocessing/routing/watershed.pyx":607
 *     """
 * 
 *     return_set = set()             # <<<<<<<<<<<<<<
 *     cdef cset[CoordinatePair] seeds = _c_split_geometry_into_seeds(
 *         source_geom_wkb, geotransform, flow_dir_srs, flow_dir_n_cols,
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_return_set = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":609
 *     return_set = set()
 *     cdef cset[CoordinatePair] seeds = _c_split_geometry_into_seeds(
 *         source_geom_wkb, geotransform, flow_dir_srs, flow_dir_n_cols,             # <<<<<<<<<<<<<<
 *         flow_dir_n_rows, target_raster_path, diagnostic_vector_path)
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_geotransform))||((__pyx_v_geotransform) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_geotransform)->tp_name), 0))) __PYX_ERR(0, 609, __pyx_L1_error)

  /* "src/geoprocessing/routing/watershed.pyx":608
 * 
 *     return_set = set()
 *     cdef cset[CoordinatePair] seeds = _c_split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, geotransform, flow_dir_srs, flow_dir_n_cols,
 *         flow_dir_n_rows, target_raster_path, diagnostic_vector_path)
 */
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.diagnostic_vector_path = __pyx_v_diagnostic_vector_path;
  __pyx_t_2 = __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds(__pyx_v_source_geom_wkb, ((PyObject*)__pyx_v_geotransform), __pyx_v_flow_dir_srs, __pyx_v_flow_dir_n_cols, __pyx_v_flow_dir_n_rows, __pyx_v_target_raster_path, &__pyx_t_3); 
  __pyx_v_seeds = __pyx_t_2;

  /* "src/geoprocessing/routing/watershed.pyx":613
 * 
 *     cdef CoordinatePair seed
 *     cdef cset[CoordinatePair].iterator seeds_iterator = seeds.begin()             # <<<<<<<<<<<<<<
 *     while seeds_iterator != seeds.end():
 *         seed = deref(seeds_iterator)
 */
  __pyx_v_seeds_iterator = __pyx_v_seeds.begin();

  /* "src/geoprocessing/routing/watershed.pyx":614
 *     cdef CoordinatePair seed
 *     cdef cset[CoordinatePair].iterator seeds_iterator = seeds.begin()
 *     while seeds_iterator != seeds.end():             # <<<<<<<<<<<<<<
 *         seed = deref(seeds_iterator)
 *         inc(seeds_iterator)
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_seeds_iterator != __pyx_v_seeds.end()) != 0);
    if (!__pyx_t_4) break;

    /* "src/geoprocessing/routing/watershed.pyx":615
 *     cdef cset[CoordinatePair].iterator seeds_iterator = seeds.begin()
 *     while seeds_iterator != seeds.end():
 *         seed = deref(seeds_iterator)             # <<<<<<<<<<<<<<
 *         inc(seeds_iterator)
 * 
 */
    __pyx_v_seed = (*__pyx_v_seeds_iterator);

    /* "src/geoprocessing/routing/watershed.pyx":616
 *     while seeds_iterator != seeds.end():
 *         seed = deref(seeds_iterator)
 *         inc(seeds_iterator)             # <<<<<<<<<<<<<<
 * 
 *         return_set.add((seed.first, seed.second))
 */
    (void)((++__pyx_v_seeds_iterator));

    /* "src/geoprocessing/routing/watershed.pyx":618
 *         inc(seeds_iterator)
 * 
 *         return_set.add((seed.first, seed.second))             # <<<<<<<<<<<<<<
 * 
 *     return return_set
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_seed.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_seed.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = PySet_Add(__pyx_v_return_set, __pyx_t_6); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "src/geoprocessing/routing/watershed.pyx":620
 *         return_set.add((seed.first, seed.second))
 * 
 *     return return_set             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_return_set);
  __pyx_r = __pyx_v_return_set;
  goto __pyx_L0;

  /* "src/geoprocessing/routing/watershed.pyx":571
 * 
 * 
 * def _split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows, target_raster_path,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed._split_geometry_into_seeds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_return_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/geoprocessing/routing/watershed.pyx":624
 * 
 * @cython.boundscheck(False)
 * def delineate_watersheds_d8(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_5delineate_watersheds_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_4delineate_watersheds_d8[] = "Delineate watersheds for a vector of geometries using D8 flow dir.\n\n    Args:\n        d8_flow_dir_raster_path_band (tuple): A (path, band_id) tuple\n            to a D8 flow direction raster.  This raster must be a tiled raster\n            with block sizes being a power of 2.\n        outflow_vector_path (str): The path to a vector on disk containing\n            features with valid geometries from which watersheds will be\n            delineated.  Only those parts of the geometry that overlap valid\n            flow direction pixels will be included in the output watersheds\n            vector.\n        target_watersheds_vector_path (str): The path to a vector on disk\n            where the target watersheds will be stored.  Must have the\n            extension ``.gpkg``.\n        working_dir=None (str or None): The path to a directory on disk\n            within which various intermediate files will be stored.  If None,\n            a folder will be created within the system's temp directory.\n        write_diagnostic_vector=False (bool): If ``True``, a set of vectors will\n            be written to ``working_dir``, one per watershed.  Each vector\n            includes geometries for the watershed being represented and\n            for the watershed seed pixels the geometry overlaps.  Useful in\n            debugging issues with feature overlap of the DEM.  Setting this\n            parameter to ``True`` will dramatically increase runtime when\n            outflow geometries cover many pixels.\n        remove_temp_files=True (bool): Whether to remove the created temp\n            directory at the end of the watershed delineation run.\n        target_layer_name='watersheds' (str): The string name to use for\n            the watersheds layer.  This layer name may be named anything\n            except for \"polygonized_watersheds\".\n\n    Returns:\n        ``None``\n\n    ";
static PyMethodDef __pyx_mdef_8ecoshard_13geoprocessing_7routing_9watershed_5delineate_watersheds_d8 = {"delineate_watersheds_d8", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_5delineate_watersheds_d8, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_4delineate_watersheds_d8};
static PyObject *__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_5delineate_watersheds_d8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_d8_flow_dir_raster_path_band = 0;
  PyObject *__pyx_v_outflow_vector_path = 0;
  PyObject *__pyx_v_target_watersheds_vector_path = 0;
  PyObject *__pyx_v_working_dir = 0;
  PyObject *__pyx_v_write_diagnostic_vector = 0;
  PyObject *__pyx_v_remove_temp_files = 0;
  PyObject *__pyx_v_target_layer_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delineate_watersheds_d8 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d8_flow_dir_raster_path_band,&__pyx_n_s_outflow_vector_path,&__pyx_n_s_target_watersheds_vector_path,&__pyx_n_s_working_dir,&__pyx_n_s_write_diagnostic_vector,&__pyx_n_s_remove_temp_files,&__pyx_n_s_target_layer_name,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "src/geoprocessing/routing/watershed.pyx":626
 * def delineate_watersheds_d8(
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,             # <<<<<<<<<<<<<<
 *         write_diagnostic_vector=False, remove_temp_files=True,
 *         target_layer_name='watersheds'):
 */
    values[3] = ((PyObject *)Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":627
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,
 *         write_diagnostic_vector=False, remove_temp_files=True,             # <<<<<<<<<<<<<<
 *         target_layer_name='watersheds'):
 *     """Delineate watersheds for a vector of geometries using D8 flow dir.
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_True);
    values[6] = ((PyObject *)__pyx_n_u_watersheds);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d8_flow_dir_raster_path_band)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outflow_vector_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("delineate_watersheds_d8", 0, 3, 7, 1); __PYX_ERR(0, 624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_watersheds_vector_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("delineate_watersheds_d8", 0, 3, 7, 2); __PYX_ERR(0, 624, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dir);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_write_diagnostic_vector);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_remove_temp_files);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_layer_name);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delineate_watersheds_d8") < 0)) __PYX_ERR(0, 624, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_d8_flow_dir_raster_path_band = values[0];
    __pyx_v_outflow_vector_path = values[1];
    __pyx_v_target_watersheds_vector_path = values[2];
    __pyx_v_working_dir = values[3];
    __pyx_v_write_diagnostic_vector = values[4];
    __pyx_v_remove_temp_files = values[5];
    __pyx_v_target_layer_name = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delineate_watersheds_d8", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 624, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed.delineate_watersheds_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_4delineate_watersheds_d8(__pyx_self, __pyx_v_d8_flow_dir_raster_path_band, __pyx_v_outflow_vector_path, __pyx_v_target_watersheds_vector_path, __pyx_v_working_dir, __pyx_v_write_diagnostic_vector, __pyx_v_remove_temp_files, __pyx_v_target_layer_name);

  /* "src/geoprocessing/routing/watershed.pyx":624
 * 
 * @cython.boundscheck(False)
 * def delineate_watersheds_d8(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8ecoshard_13geoprocessing_7routing_9watershed_4delineate_watersheds_d8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d8_flow_dir_raster_path_band, PyObject *__pyx_v_outflow_vector_path, PyObject *__pyx_v_target_watersheds_vector_path, PyObject *__pyx_v_working_dir, PyObject *__pyx_v_write_diagnostic_vector, PyObject *__pyx_v_remove_temp_files, PyObject *__pyx_v_target_layer_name) {
  PyObject *__pyx_v_working_dir_path = NULL;
  PyObject *__pyx_v_flow_dir_info = NULL;
  int __pyx_v_flow_dir_nodata;
  PyObject *__pyx_v_source_gt = NULL;
  double __pyx_v_flow_dir_origin_x;
  double __pyx_v_flow_dir_origin_y;
  double __pyx_v_flow_dir_pixelsize_x;
  double __pyx_v_flow_dir_pixelsize_y;
  int __pyx_v_flow_dir_n_cols;
  int __pyx_v_flow_dir_n_rows;
  int __pyx_v_ws_id;
  PyObject *__pyx_v_bbox_minx = NULL;
  PyObject *__pyx_v_bbox_miny = NULL;
  PyObject *__pyx_v_bbox_maxx = NULL;
  PyObject *__pyx_v_bbox_maxy = NULL;
  PyObject *__pyx_v_flow_dir_bbox = NULL;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_flow_dir_managed_raster = NULL;
  PyObject *__pyx_v_gtiff_driver = NULL;
  PyObject *__pyx_v_flow_dir_srs = NULL;
  PyObject *__pyx_v_outflow_vector = NULL;
  PyObject *__pyx_v_driver = NULL;
  PyObject *__pyx_v_watersheds_srs = NULL;
  PyObject *__pyx_v_watersheds_vector = NULL;
  PyObject *__pyx_v_polygonized_watersheds_layer = NULL;
  PyObject *__pyx_v_watersheds_layer = NULL;
  PyObject *__pyx_v_index_field = NULL;
  int *__pyx_v_reverse_flow;
  int *__pyx_v_neighbor_col;
  int *__pyx_v_neighbor_row;
  std::queue<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_v_process_queue;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_v_process_queue_set;
  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair __pyx_v_neighbor_pixel;
  int __pyx_v_ix_min;
  int __pyx_v_iy_min;
  int __pyx_v_ix_max;
  int __pyx_v_iy_max;
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *__pyx_v_scratch_managed_raster = 0;
  int __pyx_v_watersheds_created;
  int __pyx_v_current_fid;
  int __pyx_v_outflow_feature_count;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair> ::iterator __pyx_v_seed_iterator;
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_v_seeds_in_watershed;
  time_t __pyx_v_last_log_time;
  int __pyx_v_n_cells_visited;
  PyObject *__pyx_v_outflow_layer = NULL;
  PyObject *__pyx_v_feature = NULL;
  PyObject *__pyx_v_geom = NULL;
  PyObject *__pyx_v_geom_wkb = NULL;
  PyObject *__pyx_v_shapely_geom = NULL;
  PyObject *__pyx_v_seeds_raster_path = NULL;
  PyObject *__pyx_v_diagnostic_vector_path = NULL;
  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair __pyx_v_seed;
  PyObject *__pyx_v_scratch_raster_path = NULL;
  PyObject *__pyx_v_scratch_raster = NULL;
  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair __pyx_v_current_pixel;
  long __pyx_v_neighbor_index;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_x2;
  double __pyx_v_y2;
  PyObject *__pyx_v_vrt_options = NULL;
  PyObject *__pyx_v_vrt_path = NULL;
  PyObject *__pyx_v_vrt_raster = NULL;
  PyObject *__pyx_v_vrt_band = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  std::map<int,std::set<int> >  __pyx_v_fragments_with_duplicates;
  int __pyx_v_fid;
  PyObject *__pyx_v_source_vector = NULL;
  PyObject *__pyx_v_source_layer = NULL;
  int __pyx_v_duplicate_fid;
  std::set<int>  __pyx_v_duplicate_ids_set;
  std::set<int> ::iterator __pyx_v_duplicate_ids_set_iterator;
  std::map<int,std::set<int> > ::iterator __pyx_v_fragments_with_duplicates_iterator;
  PyObject *__pyx_v_source_feature = NULL;
  PyObject *__pyx_v_new_geometry = NULL;
  PyObject *__pyx_v_duplicate_feature = NULL;
  PyObject *__pyx_v_duplicate_geometry = NULL;
  PyObject *__pyx_v_watershed_feature = NULL;
  PyObject *__pyx_v_field_name = NULL;
  PyObject *__pyx_v_field_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  double __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20[8];
  int __pyx_t_21[8];
  int __pyx_t_22[8];
  Py_ssize_t __pyx_t_23;
  PyObject *(*__pyx_t_24)(PyObject *);
  std::set<__pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair>  __pyx_t_25;
  struct __pyx_opt_args_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair __pyx_t_29;
  long __pyx_t_30;
  double __pyx_t_31;
  double __pyx_t_32;
  std::set<int>  __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  int __pyx_t_35;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delineate_watersheds_d8", 0);

  /* "src/geoprocessing/routing/watershed.pyx":663
 * 
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "src/geoprocessing/routing/watershed.pyx":664
 *     """
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      __pyx_t_4 = (__pyx_v_working_dir != Py_None);
      __pyx_t_5 = (__pyx_t_4 != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":665
 *     try:
 *         if working_dir is not None:
 *             os.makedirs(working_dir)             # <<<<<<<<<<<<<<
 *     except OSError:
 *         pass
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 665, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 665, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_working_dir) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_working_dir);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 665, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":664
 *     """
 *     try:
 *         if working_dir is not None:             # <<<<<<<<<<<<<<
 *             os.makedirs(working_dir)
 *     except OSError:
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":663
 * 
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":666
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 *     except OSError:             # <<<<<<<<<<<<<<
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_9) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "src/geoprocessing/routing/watershed.pyx":663
 * 
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         if working_dir is not None:
 *             os.makedirs(working_dir)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "src/geoprocessing/routing/watershed.pyx":668
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir, prefix='watershed_delineation_trivial_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_mkdtemp); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":669
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='watershed_delineation_trivial_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dir, __pyx_v_working_dir) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_time); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_strftime); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":670
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='watershed_delineation_trivial_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))             # <<<<<<<<<<<<<<
 * 
 *     if (d8_flow_dir_raster_path_band is not None and not
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_time); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_gmtime); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_10};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_kp_u_Y_m_d__H__M__S, __pyx_t_10};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_13) {
      __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13); __pyx_t_13 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_kp_u_Y_m_d__H__M__S);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_9, __pyx_kp_u_Y_m_d__H__M__S);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_9, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":669
 *         pass
 *     working_dir_path = tempfile.mkdtemp(
 *         dir=working_dir, prefix='watershed_delineation_trivial_%s_' % time.strftime(             # <<<<<<<<<<<<<<
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 */
  __pyx_t_11 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_watershed_delineation_trivial__s, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_prefix, __pyx_t_11) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":668
 *     except OSError:
 *         pass
 *     working_dir_path = tempfile.mkdtemp(             # <<<<<<<<<<<<<<
 *         dir=working_dir, prefix='watershed_delineation_trivial_%s_' % time.strftime(
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 */
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_working_dir_path = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":672
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 *     if (d8_flow_dir_raster_path_band is not None and not             # <<<<<<<<<<<<<<
 *             _is_raster_path_band_formatted(d8_flow_dir_raster_path_band)):
 *         raise ValueError(
 */
  __pyx_t_4 = (__pyx_v_d8_flow_dir_raster_path_band != Py_None);
  __pyx_t_14 = (__pyx_t_4 != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_5 = __pyx_t_14;
    goto __pyx_L11_bool_binop_done;
  }

  /* "src/geoprocessing/routing/watershed.pyx":673
 * 
 *     if (d8_flow_dir_raster_path_band is not None and not
 *             _is_raster_path_band_formatted(d8_flow_dir_raster_path_band)):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_is_raster_path_band_formatted); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_11 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_v_d8_flow_dir_raster_path_band) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_d8_flow_dir_raster_path_band);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":672
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 *     if (d8_flow_dir_raster_path_band is not None and not             # <<<<<<<<<<<<<<
 *             _is_raster_path_band_formatted(d8_flow_dir_raster_path_band)):
 *         raise ValueError(
 */
  __pyx_t_4 = ((!__pyx_t_14) != 0);
  __pyx_t_5 = __pyx_t_4;
  __pyx_L11_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "src/geoprocessing/routing/watershed.pyx":675
 *             _is_raster_path_band_formatted(d8_flow_dir_raster_path_band)):
 *         raise ValueError(
 *             "%s is supposed to be a raster band tuple but it's not." % (             # <<<<<<<<<<<<<<
 *                 d8_flow_dir_raster_path_band))
 * 
 */
    __pyx_t_11 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_v_d8_flow_dir_raster_path_band); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "src/geoprocessing/routing/watershed.pyx":674
 *     if (d8_flow_dir_raster_path_band is not None and not
 *             _is_raster_path_band_formatted(d8_flow_dir_raster_path_band)):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "%s is supposed to be a raster band tuple but it's not." % (
 *                 d8_flow_dir_raster_path_band))
 */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 674, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":672
 *             '%Y-%m-%d_%H_%M_%S', time.gmtime()))
 * 
 *     if (d8_flow_dir_raster_path_band is not None and not             # <<<<<<<<<<<<<<
 *             _is_raster_path_band_formatted(d8_flow_dir_raster_path_band)):
 *         raise ValueError(
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":678
 *                 d8_flow_dir_raster_path_band))
 * 
 *     flow_dir_info = pygeoprocessing.get_raster_info(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band[0])
 *     cdef int flow_dir_nodata = flow_dir_info['nodata'][0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_pygeoprocessing); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_get_raster_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":679
 * 
 *     flow_dir_info = pygeoprocessing.get_raster_info(
 *         d8_flow_dir_raster_path_band[0])             # <<<<<<<<<<<<<<
 *     cdef int flow_dir_nodata = flow_dir_info['nodata'][0]
 *     source_gt = flow_dir_info['geotransform']
 */
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_d8_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_info = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":680
 *     flow_dir_info = pygeoprocessing.get_raster_info(
 *         d8_flow_dir_raster_path_band[0])
 *     cdef int flow_dir_nodata = flow_dir_info['nodata'][0]             # <<<<<<<<<<<<<<
 *     source_gt = flow_dir_info['geotransform']
 *     cdef double flow_dir_origin_x = source_gt[0]
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_nodata); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_nodata = __pyx_t_9;

  /* "src/geoprocessing/routing/watershed.pyx":681
 *         d8_flow_dir_raster_path_band[0])
 *     cdef int flow_dir_nodata = flow_dir_info['nodata'][0]
 *     source_gt = flow_dir_info['geotransform']             # <<<<<<<<<<<<<<
 *     cdef double flow_dir_origin_x = source_gt[0]
 *     cdef double flow_dir_origin_y = source_gt[3]
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_geotransform); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_source_gt = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":682
 *     cdef int flow_dir_nodata = flow_dir_info['nodata'][0]
 *     source_gt = flow_dir_info['geotransform']
 *     cdef double flow_dir_origin_x = source_gt[0]             # <<<<<<<<<<<<<<
 *     cdef double flow_dir_origin_y = source_gt[3]
 *     cdef double flow_dir_pixelsize_x = source_gt[1]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_source_gt, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_origin_x = __pyx_t_15;

  /* "src/geoprocessing/routing/watershed.pyx":683
 *     source_gt = flow_dir_info['geotransform']
 *     cdef double flow_dir_origin_x = source_gt[0]
 *     cdef double flow_dir_origin_y = source_gt[3]             # <<<<<<<<<<<<<<
 *     cdef double flow_dir_pixelsize_x = source_gt[1]
 *     cdef double flow_dir_pixelsize_y = source_gt[5]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_source_gt, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_origin_y = __pyx_t_15;

  /* "src/geoprocessing/routing/watershed.pyx":684
 *     cdef double flow_dir_origin_x = source_gt[0]
 *     cdef double flow_dir_origin_y = source_gt[3]
 *     cdef double flow_dir_pixelsize_x = source_gt[1]             # <<<<<<<<<<<<<<
 *     cdef double flow_dir_pixelsize_y = source_gt[5]
 *     cdef int flow_dir_n_cols = flow_dir_info['raster_size'][0]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_source_gt, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_pixelsize_x = __pyx_t_15;

  /* "src/geoprocessing/routing/watershed.pyx":685
 *     cdef double flow_dir_origin_y = source_gt[3]
 *     cdef double flow_dir_pixelsize_x = source_gt[1]
 *     cdef double flow_dir_pixelsize_y = source_gt[5]             # <<<<<<<<<<<<<<
 *     cdef int flow_dir_n_cols = flow_dir_info['raster_size'][0]
 *     cdef int flow_dir_n_rows = flow_dir_info['raster_size'][1]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_source_gt, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_pixelsize_y = __pyx_t_15;

  /* "src/geoprocessing/routing/watershed.pyx":686
 *     cdef double flow_dir_pixelsize_x = source_gt[1]
 *     cdef double flow_dir_pixelsize_y = source_gt[5]
 *     cdef int flow_dir_n_cols = flow_dir_info['raster_size'][0]             # <<<<<<<<<<<<<<
 *     cdef int flow_dir_n_rows = flow_dir_info['raster_size'][1]
 *     cdef int ws_id
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_flow_dir_n_cols = __pyx_t_9;

  /* "src/geoprocessing/routing/watershed.pyx":687
 *     cdef double flow_dir_pixelsize_y = source_gt[5]
 *     cdef int flow_dir_n_cols = flow_dir_info['raster_size'][0]
 *     cdef int flow_dir_n_rows = flow_dir_info['raster_size'][1]             # <<<<<<<<<<<<<<
 *     cdef int ws_id
 *     bbox_minx, bbox_miny, bbox_maxx, bbox_maxy = flow_dir_info['bounding_box']
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_raster_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_flow_dir_n_rows = __pyx_t_9;

  /* "src/geoprocessing/routing/watershed.pyx":689
 *     cdef int flow_dir_n_rows = flow_dir_info['raster_size'][1]
 *     cdef int ws_id
 *     bbox_minx, bbox_miny, bbox_maxx, bbox_maxy = flow_dir_info['bounding_box']             # <<<<<<<<<<<<<<
 *     LOGGER.debug('Creating flow dir bbox')
 *     flow_dir_bbox = shapely.prepared.prep(
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_bounding_box); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 689, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_12 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_12);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_11,&__pyx_t_7,&__pyx_t_12};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_11,&__pyx_t_7,&__pyx_t_12};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_16 = Py_TYPE(__pyx_t_10)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_16(__pyx_t_10); if (unlikely(!item)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_10), 4) < 0) __PYX_ERR(0, 689, __pyx_L1_error)
    __pyx_t_16 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L14_unpacking_done;
    __pyx_L13_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_16 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 689, __pyx_L1_error)
    __pyx_L14_unpacking_done:;
  }
  __pyx_v_bbox_minx = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_bbox_miny = __pyx_t_11;
  __pyx_t_11 = 0;
  __pyx_v_bbox_maxx = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_bbox_maxy = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":690
 *     cdef int ws_id
 *     bbox_minx, bbox_miny, bbox_maxx, bbox_maxy = flow_dir_info['bounding_box']
 *     LOGGER.debug('Creating flow dir bbox')             # <<<<<<<<<<<<<<
 *     flow_dir_bbox = shapely.prepared.prep(
 *         shapely.geometry.Polygon([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_debug); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_kp_u_Creating_flow_dir_bbox) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_Creating_flow_dir_bbox);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":691
 *     bbox_minx, bbox_miny, bbox_maxx, bbox_maxy = flow_dir_info['bounding_box']
 *     LOGGER.debug('Creating flow dir bbox')
 *     flow_dir_bbox = shapely.prepared.prep(             # <<<<<<<<<<<<<<
 *         shapely.geometry.Polygon([
 *             (bbox_minx, bbox_maxy),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_shapely); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_prepared); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_prep); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":692
 *     LOGGER.debug('Creating flow dir bbox')
 *     flow_dir_bbox = shapely.prepared.prep(
 *         shapely.geometry.Polygon([             # <<<<<<<<<<<<<<
 *             (bbox_minx, bbox_maxy),
 *             (bbox_minx, bbox_miny),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_shapely); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_geometry); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Polygon); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":693
 *     flow_dir_bbox = shapely.prepared.prep(
 *         shapely.geometry.Polygon([
 *             (bbox_minx, bbox_maxy),             # <<<<<<<<<<<<<<
 *             (bbox_minx, bbox_miny),
 *             (bbox_maxx, bbox_miny),
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_bbox_minx);
  __Pyx_GIVEREF(__pyx_v_bbox_minx);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_bbox_minx);
  __Pyx_INCREF(__pyx_v_bbox_maxy);
  __Pyx_GIVEREF(__pyx_v_bbox_maxy);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_bbox_maxy);

  /* "src/geoprocessing/routing/watershed.pyx":694
 *         shapely.geometry.Polygon([
 *             (bbox_minx, bbox_maxy),
 *             (bbox_minx, bbox_miny),             # <<<<<<<<<<<<<<
 *             (bbox_maxx, bbox_miny),
 *             (bbox_maxx, bbox_maxy),
 */
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_bbox_minx);
  __Pyx_GIVEREF(__pyx_v_bbox_minx);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_bbox_minx);
  __Pyx_INCREF(__pyx_v_bbox_miny);
  __Pyx_GIVEREF(__pyx_v_bbox_miny);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_bbox_miny);

  /* "src/geoprocessing/routing/watershed.pyx":695
 *             (bbox_minx, bbox_maxy),
 *             (bbox_minx, bbox_miny),
 *             (bbox_maxx, bbox_miny),             # <<<<<<<<<<<<<<
 *             (bbox_maxx, bbox_maxy),
 *             (bbox_minx, bbox_maxy)]))
 */
  __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_v_bbox_maxx);
  __Pyx_GIVEREF(__pyx_v_bbox_maxx);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_bbox_maxx);
  __Pyx_INCREF(__pyx_v_bbox_miny);
  __Pyx_GIVEREF(__pyx_v_bbox_miny);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_bbox_miny);

  /* "src/geoprocessing/routing/watershed.pyx":696
 *             (bbox_minx, bbox_miny),
 *             (bbox_maxx, bbox_miny),
 *             (bbox_maxx, bbox_maxy),             # <<<<<<<<<<<<<<
 *             (bbox_minx, bbox_maxy)]))
 *     LOGGER.debug('Creating flow dir managed raster')
 */
  __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_v_bbox_maxx);
  __Pyx_GIVEREF(__pyx_v_bbox_maxx);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_v_bbox_maxx);
  __Pyx_INCREF(__pyx_v_bbox_maxy);
  __Pyx_GIVEREF(__pyx_v_bbox_maxy);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_v_bbox_maxy);

  /* "src/geoprocessing/routing/watershed.pyx":697
 *             (bbox_maxx, bbox_miny),
 *             (bbox_maxx, bbox_maxy),
 *             (bbox_minx, bbox_maxy)]))             # <<<<<<<<<<<<<<
 *     LOGGER.debug('Creating flow dir managed raster')
 *     flow_dir_managed_raster = _ManagedRaster(d8_flow_dir_raster_path_band[0],
 */
  __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_v_bbox_minx);
  __Pyx_GIVEREF(__pyx_v_bbox_minx);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_v_bbox_minx);
  __Pyx_INCREF(__pyx_v_bbox_maxy);
  __Pyx_GIVEREF(__pyx_v_bbox_maxy);
  PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_v_bbox_maxy);

  /* "src/geoprocessing/routing/watershed.pyx":692
 *     LOGGER.debug('Creating flow dir bbox')
 *     flow_dir_bbox = shapely.prepared.prep(
 *         shapely.geometry.Polygon([             # <<<<<<<<<<<<<<
 *             (bbox_minx, bbox_maxy),
 *             (bbox_minx, bbox_miny),
 */
  __pyx_t_19 = PyList_New(5); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_19, 3, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_19, 4, __pyx_t_18);
  __pyx_t_6 = 0;
  __pyx_t_10 = 0;
  __pyx_t_13 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  __pyx_t_12 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_18, __pyx_t_19) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_19);
  __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_flow_dir_bbox = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":698
 *             (bbox_maxx, bbox_maxy),
 *             (bbox_minx, bbox_maxy)]))
 *     LOGGER.debug('Creating flow dir managed raster')             # <<<<<<<<<<<<<<
 *     flow_dir_managed_raster = _ManagedRaster(d8_flow_dir_raster_path_band[0],
 *                                              d8_flow_dir_raster_path_band[1], 0)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_debug); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_7, __pyx_kp_u_Creating_flow_dir_managed_raster) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_kp_u_Creating_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":699
 *             (bbox_minx, bbox_maxy)]))
 *     LOGGER.debug('Creating flow dir managed raster')
 *     flow_dir_managed_raster = _ManagedRaster(d8_flow_dir_raster_path_band[0],             # <<<<<<<<<<<<<<
 *                                              d8_flow_dir_raster_path_band[1], 0)
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_d8_flow_dir_raster_path_band, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "src/geoprocessing/routing/watershed.pyx":700
 *     LOGGER.debug('Creating flow dir managed raster')
 *     flow_dir_managed_raster = _ManagedRaster(d8_flow_dir_raster_path_band[0],
 *                                              d8_flow_dir_raster_path_band[1], 0)             # <<<<<<<<<<<<<<
 * 
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 */
  __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_d8_flow_dir_raster_path_band, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "src/geoprocessing/routing/watershed.pyx":699
 *             (bbox_minx, bbox_maxy)]))
 *     LOGGER.debug('Creating flow dir managed raster')
 *     flow_dir_managed_raster = _ManagedRaster(d8_flow_dir_raster_path_band[0],             # <<<<<<<<<<<<<<
 *                                              d8_flow_dir_raster_path_band[1], 0)
 * 
 */
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_12);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_int_0);
  __pyx_t_8 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster), __pyx_t_7, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_flow_dir_managed_raster = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":702
 *                                              d8_flow_dir_raster_path_band[1], 0)
 * 
 *     gtiff_driver = gdal.GetDriverByName('GTiff')             # <<<<<<<<<<<<<<
 *     flow_dir_srs = osr.SpatialReference()
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_12 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_n_u_GTiff) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_n_u_GTiff);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_gtiff_driver = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":703
 * 
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 *     flow_dir_srs = osr.SpatialReference()             # <<<<<<<<<<<<<<
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_osr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_SpatialReference); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_12 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_flow_dir_srs = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":704
 *     gtiff_driver = gdal.GetDriverByName('GTiff')
 *     flow_dir_srs = osr.SpatialReference()
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])             # <<<<<<<<<<<<<<
 * 
 *     outflow_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_srs, __pyx_n_s_ImportFromWkt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_12 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_11, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":706
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 * 
 *     outflow_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)             # <<<<<<<<<<<<<<
 *     if outflow_vector is None:
 *         raise ValueError(u'Could not open outflow vector %s' % outflow_vector_path)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OF_VECTOR); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_outflow_vector_path, __pyx_t_11};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_outflow_vector_path, __pyx_t_11};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_19 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_outflow_vector_path);
    __Pyx_GIVEREF(__pyx_v_outflow_vector_path);
    PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_9, __pyx_v_outflow_vector_path);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_9, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_19, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_outflow_vector = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":707
 * 
 *     outflow_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 *     if outflow_vector is None:             # <<<<<<<<<<<<<<
 *         raise ValueError(u'Could not open outflow vector %s' % outflow_vector_path)
 * 
 */
  __pyx_t_5 = (__pyx_v_outflow_vector == Py_None);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "src/geoprocessing/routing/watershed.pyx":708
 *     outflow_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 *     if outflow_vector is None:
 *         raise ValueError(u'Could not open outflow vector %s' % outflow_vector_path)             # <<<<<<<<<<<<<<
 * 
 *     driver = ogr.GetDriverByName('GPKG')
 */
    __pyx_t_12 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Could_not_open_outflow_vector_s, __pyx_v_outflow_vector_path); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 708, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":707
 * 
 *     outflow_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 *     if outflow_vector is None:             # <<<<<<<<<<<<<<
 *         raise ValueError(u'Could not open outflow vector %s' % outflow_vector_path)
 * 
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":710
 *         raise ValueError(u'Could not open outflow vector %s' % outflow_vector_path)
 * 
 *     driver = ogr.GetDriverByName('GPKG')             # <<<<<<<<<<<<<<
 *     watersheds_srs = osr.SpatialReference()
 *     watersheds_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ogr); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_GetDriverByName); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
    }
  }
  __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_12, __pyx_n_u_GPKG) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_n_u_GPKG);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_v_driver = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":711
 * 
 *     driver = ogr.GetDriverByName('GPKG')
 *     watersheds_srs = osr.SpatialReference()             # <<<<<<<<<<<<<<
 *     watersheds_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *     watersheds_vector = driver.CreateDataSource(target_watersheds_vector_path)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_osr); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_SpatialReference); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_8 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_watersheds_srs = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":712
 *     driver = ogr.GetDriverByName('GPKG')
 *     watersheds_srs = osr.SpatialReference()
 *     watersheds_srs.ImportFromWkt(flow_dir_info['projection_wkt'])             # <<<<<<<<<<<<<<
 *     watersheds_vector = driver.CreateDataSource(target_watersheds_vector_path)
 *     polygonized_watersheds_layer = watersheds_vector.CreateLayer(
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_srs, __pyx_n_s_ImportFromWkt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_19 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, __pyx_t_19) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_19);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":713
 *     watersheds_srs = osr.SpatialReference()
 *     watersheds_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *     watersheds_vector = driver.CreateDataSource(target_watersheds_vector_path)             # <<<<<<<<<<<<<<
 *     polygonized_watersheds_layer = watersheds_vector.CreateLayer(
 *         'polygonized_watersheds', watersheds_srs, ogr.wkbPolygon)
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_driver, __pyx_n_s_CreateDataSource); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_8 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_19, __pyx_v_target_watersheds_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_target_watersheds_vector_path);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_watersheds_vector = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":714
 *     watersheds_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *     watersheds_vector = driver.CreateDataSource(target_watersheds_vector_path)
 *     polygonized_watersheds_layer = watersheds_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *         'polygonized_watersheds', watersheds_srs, ogr.wkbPolygon)
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "src/geoprocessing/routing/watershed.pyx":715
 *     watersheds_vector = driver.CreateDataSource(target_watersheds_vector_path)
 *     polygonized_watersheds_layer = watersheds_vector.CreateLayer(
 *         'polygonized_watersheds', watersheds_srs, ogr.wkbPolygon)             # <<<<<<<<<<<<<<
 * 
 *     # Using wkbUnknown layer data type because it's possible for a single
 */
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_ogr); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_wkbPolygon); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[4] = {__pyx_t_19, __pyx_n_u_polygonized_watersheds, __pyx_v_watersheds_srs, __pyx_t_11};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[4] = {__pyx_t_19, __pyx_n_u_polygonized_watersheds, __pyx_v_watersheds_srs, __pyx_t_11};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_19) {
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_19); __pyx_t_19 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_polygonized_watersheds);
    __Pyx_GIVEREF(__pyx_n_u_polygonized_watersheds);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_n_u_polygonized_watersheds);
    __Pyx_INCREF(__pyx_v_watersheds_srs);
    __Pyx_GIVEREF(__pyx_v_watersheds_srs);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_v_watersheds_srs);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_9, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_polygonized_watersheds_layer = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":722
 *     # technically not supported by the GPKG standard although GDAL
 *     # allows it for the time being.
 *     watersheds_layer = watersheds_vector.CreateLayer(             # <<<<<<<<<<<<<<
 *         target_layer_name, watersheds_srs, ogr.wkbUnknown)
 *     index_field = ogr.FieldDefn('ws_id', ogr.OFTInteger)
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_vector, __pyx_n_s_CreateLayer); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "src/geoprocessing/routing/watershed.pyx":723
 *     # allows it for the time being.
 *     watersheds_layer = watersheds_vector.CreateLayer(
 *         target_layer_name, watersheds_srs, ogr.wkbUnknown)             # <<<<<<<<<<<<<<
 *     index_field = ogr.FieldDefn('ws_id', ogr.OFTInteger)
 *     index_field.SetWidth(24)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ogr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_wkbUnknown); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_target_layer_name, __pyx_v_watersheds_srs, __pyx_t_11};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_target_layer_name, __pyx_v_watersheds_srs, __pyx_t_11};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_19 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target_layer_name);
    __Pyx_GIVEREF(__pyx_v_target_layer_name);
    PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_9, __pyx_v_target_layer_name);
    __Pyx_INCREF(__pyx_v_watersheds_srs);
    __Pyx_GIVEREF(__pyx_v_watersheds_srs);
    PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_9, __pyx_v_watersheds_srs);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_19, 2+__pyx_t_9, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_19, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_watersheds_layer = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":724
 *     watersheds_layer = watersheds_vector.CreateLayer(
 *         target_layer_name, watersheds_srs, ogr.wkbUnknown)
 *     index_field = ogr.FieldDefn('ws_id', ogr.OFTInteger)             # <<<<<<<<<<<<<<
 *     index_field.SetWidth(24)
 *     polygonized_watersheds_layer.CreateField(index_field)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ogr); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_FieldDefn); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ogr); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_OFTInteger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_19)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_n_u_ws_id, __pyx_t_11};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_n_u_ws_id, __pyx_t_11};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ws_id);
    __Pyx_GIVEREF(__pyx_n_u_ws_id);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_n_u_ws_id);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_v_index_field = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":725
 *         target_layer_name, watersheds_srs, ogr.wkbUnknown)
 *     index_field = ogr.FieldDefn('ws_id', ogr.OFTInteger)
 *     index_field.SetWidth(24)             # <<<<<<<<<<<<<<
 *     polygonized_watersheds_layer.CreateField(index_field)
 * 
 */
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_v_index_field, __pyx_n_s_SetWidth); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_7, __pyx_int_24) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_int_24);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":726
 *     index_field = ogr.FieldDefn('ws_id', ogr.OFTInteger)
 *     index_field.SetWidth(24)
 *     polygonized_watersheds_layer.CreateField(index_field)             # <<<<<<<<<<<<<<
 * 
 *     cdef int* reverse_flow = [4, 5, 6, 7, 0, 1, 2, 3]
 */
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_v_polygonized_watersheds_layer, __pyx_n_s_CreateField); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_7, __pyx_v_index_field) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_v_index_field);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":728
 *     polygonized_watersheds_layer.CreateField(index_field)
 * 
 *     cdef int* reverse_flow = [4, 5, 6, 7, 0, 1, 2, 3]             # <<<<<<<<<<<<<<
 *     cdef int* neighbor_col = [1, 1, 0, -1, -1, -1, 0, 1]
 *     cdef int* neighbor_row = [0, -1, -1, -1, 0, 1, 1, 1]
 */
  __pyx_t_20[0] = 4;
  __pyx_t_20[1] = 5;
  __pyx_t_20[2] = 6;
  __pyx_t_20[3] = 7;
  __pyx_t_20[4] = 0;
  __pyx_t_20[5] = 1;
  __pyx_t_20[6] = 2;
  __pyx_t_20[7] = 3;
  __pyx_v_reverse_flow = __pyx_t_20;

  /* "src/geoprocessing/routing/watershed.pyx":729
 * 
 *     cdef int* reverse_flow = [4, 5, 6, 7, 0, 1, 2, 3]
 *     cdef int* neighbor_col = [1, 1, 0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 *     cdef int* neighbor_row = [0, -1, -1, -1, 0, 1, 1, 1]
 *     cdef queue[CoordinatePair] process_queue
 */
  __pyx_t_21[0] = 1;
  __pyx_t_21[1] = 1;
  __pyx_t_21[2] = 0;
  __pyx_t_21[3] = -1;
  __pyx_t_21[4] = -1;
  __pyx_t_21[5] = -1;
  __pyx_t_21[6] = 0;
  __pyx_t_21[7] = 1;
  __pyx_v_neighbor_col = __pyx_t_21;

  /* "src/geoprocessing/routing/watershed.pyx":730
 *     cdef int* reverse_flow = [4, 5, 6, 7, 0, 1, 2, 3]
 *     cdef int* neighbor_col = [1, 1, 0, -1, -1, -1, 0, 1]
 *     cdef int* neighbor_row = [0, -1, -1, -1, 0, 1, 1, 1]             # <<<<<<<<<<<<<<
 *     cdef queue[CoordinatePair] process_queue
 *     cdef cset[CoordinatePair] process_queue_set
 */
  __pyx_t_22[0] = 0;
  __pyx_t_22[1] = -1;
  __pyx_t_22[2] = -1;
  __pyx_t_22[3] = -1;
  __pyx_t_22[4] = 0;
  __pyx_t_22[5] = 1;
  __pyx_t_22[6] = 1;
  __pyx_t_22[7] = 1;
  __pyx_v_neighbor_row = __pyx_t_22;

  /* "src/geoprocessing/routing/watershed.pyx":736
 *     cdef int ix_min, iy_min, ix_max, iy_max
 *     cdef _ManagedRaster scratch_managed_raster
 *     cdef int watersheds_created = 0             # <<<<<<<<<<<<<<
 *     cdef int current_fid, outflow_feature_count
 *     cdef cset[CoordinatePair].iterator seed_iterator
 */
  __pyx_v_watersheds_created = 0;

  /* "src/geoprocessing/routing/watershed.pyx":741
 *     cdef cset[CoordinatePair] seeds_in_watershed
 *     cdef time_t last_log_time
 *     cdef int n_cells_visited = 0             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info('Delineating watersheds')
 */
  __pyx_v_n_cells_visited = 0;

  /* "src/geoprocessing/routing/watershed.pyx":743
 *     cdef int n_cells_visited = 0
 * 
 *     LOGGER.info('Delineating watersheds')             # <<<<<<<<<<<<<<
 *     outflow_layer = outflow_vector.GetLayer()
 *     outflow_feature_count = outflow_layer.GetFeatureCount()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_19, __pyx_kp_u_Delineating_watersheds) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_Delineating_watersheds);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":744
 * 
 *     LOGGER.info('Delineating watersheds')
 *     outflow_layer = outflow_vector.GetLayer()             # <<<<<<<<<<<<<<
 *     outflow_feature_count = outflow_layer.GetFeatureCount()
 *     flow_dir_srs = osr.SpatialReference()
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_vector, __pyx_n_s_GetLayer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_outflow_layer = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":745
 *     LOGGER.info('Delineating watersheds')
 *     outflow_layer = outflow_vector.GetLayer()
 *     outflow_feature_count = outflow_layer.GetFeatureCount()             # <<<<<<<<<<<<<<
 *     flow_dir_srs = osr.SpatialReference()
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_outflow_layer, __pyx_n_s_GetFeatureCount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_outflow_feature_count = __pyx_t_9;

  /* "src/geoprocessing/routing/watershed.pyx":746
 *     outflow_layer = outflow_vector.GetLayer()
 *     outflow_feature_count = outflow_layer.GetFeatureCount()
 *     flow_dir_srs = osr.SpatialReference()             # <<<<<<<<<<<<<<
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *     for feature in outflow_layer:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_osr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_SpatialReference); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF_SET(__pyx_v_flow_dir_srs, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":747
 *     outflow_feature_count = outflow_layer.GetFeatureCount()
 *     flow_dir_srs = osr.SpatialReference()
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])             # <<<<<<<<<<<<<<
 *     for feature in outflow_layer:
 *         # Some vectors start indexing their FIDs at 0.
 */
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_srs, __pyx_n_s_ImportFromWkt); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
    }
  }
  __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_11, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":748
 *     flow_dir_srs = osr.SpatialReference()
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *     for feature in outflow_layer:             # <<<<<<<<<<<<<<
 *         # Some vectors start indexing their FIDs at 0.
 *         # The mask raster input to polygonization, however, only regards pixels
 */
  if (likely(PyList_CheckExact(__pyx_v_outflow_layer)) || PyTuple_CheckExact(__pyx_v_outflow_layer)) {
    __pyx_t_8 = __pyx_v_outflow_layer; __Pyx_INCREF(__pyx_t_8); __pyx_t_23 = 0;
    __pyx_t_24 = NULL;
  } else {
    __pyx_t_23 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_outflow_layer); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_24 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 748, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_24)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_23 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_19 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_23); __Pyx_INCREF(__pyx_t_19); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
        #else
        __pyx_t_19 = PySequence_ITEM(__pyx_t_8, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        #endif
      } else {
        if (__pyx_t_23 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_19 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_23); __Pyx_INCREF(__pyx_t_19); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
        #else
        __pyx_t_19 = PySequence_ITEM(__pyx_t_8, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        #endif
      }
    } else {
      __pyx_t_19 = __pyx_t_24(__pyx_t_8);
      if (unlikely(!__pyx_t_19)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_19);
    }
    __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_19);
    __pyx_t_19 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":753
 *         # as zero or nonzero.  Therefore, to make sure we can use the ws_id as
 *         # the FID and not maintain a separate mask raster, we'll just add 1.
 *         current_fid = feature.GetFID()             # <<<<<<<<<<<<<<
 *         ws_id = current_fid + 1
 *         assert ws_id >= 1, 'WSID <= 1!'
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_19 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_19); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_v_current_fid = __pyx_t_9;

    /* "src/geoprocessing/routing/watershed.pyx":754
 *         # the FID and not maintain a separate mask raster, we'll just add 1.
 *         current_fid = feature.GetFID()
 *         ws_id = current_fid + 1             # <<<<<<<<<<<<<<
 *         assert ws_id >= 1, 'WSID <= 1!'
 * 
 */
    __pyx_v_ws_id = (__pyx_v_current_fid + 1);

    /* "src/geoprocessing/routing/watershed.pyx":755
 *         current_fid = feature.GetFID()
 *         ws_id = current_fid + 1
 *         assert ws_id >= 1, 'WSID <= 1!'             # <<<<<<<<<<<<<<
 * 
 *         geom = feature.GetGeometryRef()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_ws_id >= 1) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_WSID_1);
        __PYX_ERR(0, 755, __pyx_L1_error)
      }
    }
    #endif

    /* "src/geoprocessing/routing/watershed.pyx":757
 *         assert ws_id >= 1, 'WSID <= 1!'
 * 
 *         geom = feature.GetGeometryRef()             # <<<<<<<<<<<<<<
 *         if geom.IsEmpty():
 *             LOGGER.debug(
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature, __pyx_n_s_GetGeometryRef); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_19 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_geom, __pyx_t_19);
    __pyx_t_19 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":758
 * 
 *         geom = feature.GetGeometryRef()
 *         if geom.IsEmpty():             # <<<<<<<<<<<<<<
 *             LOGGER.debug(
 *                 'Outflow feature %s has empty geometry.  Skipping.',
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_geom, __pyx_n_s_IsEmpty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_19 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_19); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (__pyx_t_4) {

      /* "src/geoprocessing/routing/watershed.pyx":759
 *         geom = feature.GetGeometryRef()
 *         if geom.IsEmpty():
 *             LOGGER.debug(             # <<<<<<<<<<<<<<
 *                 'Outflow feature %s has empty geometry.  Skipping.',
 *                 current_fid)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_debug); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":761
 *             LOGGER.debug(
 *                 'Outflow feature %s has empty geometry.  Skipping.',
 *                 current_fid)             # <<<<<<<<<<<<<<
 *             continue
 *         geom_wkb = bytes(geom.ExportToWkb())
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_current_fid); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_11)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_kp_u_Outflow_feature_s_has_empty_geom, __pyx_t_7};
        __pyx_t_19 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_kp_u_Outflow_feature_s_has_empty_geom, __pyx_t_7};
        __pyx_t_19 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_18 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_Outflow_feature_s_has_empty_geom);
        __Pyx_GIVEREF(__pyx_kp_u_Outflow_feature_s_has_empty_geom);
        PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_9, __pyx_kp_u_Outflow_feature_s_has_empty_geom);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_18, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":762
 *                 'Outflow feature %s has empty geometry.  Skipping.',
 *                 current_fid)
 *             continue             # <<<<<<<<<<<<<<
 *         geom_wkb = bytes(geom.ExportToWkb())
 *         shapely_geom = shapely.wkb.loads(geom_wkb)
 */
      goto __pyx_L16_continue;

      /* "src/geoprocessing/routing/watershed.pyx":758
 * 
 *         geom = feature.GetGeometryRef()
 *         if geom.IsEmpty():             # <<<<<<<<<<<<<<
 *             LOGGER.debug(
 *                 'Outflow feature %s has empty geometry.  Skipping.',
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":763
 *                 current_fid)
 *             continue
 *         geom_wkb = bytes(geom.ExportToWkb())             # <<<<<<<<<<<<<<
 *         shapely_geom = shapely.wkb.loads(geom_wkb)
 * 
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_geom, __pyx_n_s_ExportToWkb); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_19 = (__pyx_t_18) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_18) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_19); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF_SET(__pyx_v_geom_wkb, ((PyObject*)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":764
 *             continue
 *         geom_wkb = bytes(geom.ExportToWkb())
 *         shapely_geom = shapely.wkb.loads(geom_wkb)             # <<<<<<<<<<<<<<
 * 
 *         LOGGER.debug('Testing geometry bbox')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_shapely); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_wkb); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_loads); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_19);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_19, function);
      }
    }
    __pyx_t_11 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_18, __pyx_v_geom_wkb) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_v_geom_wkb);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF_SET(__pyx_v_shapely_geom, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":766
 *         shapely_geom = shapely.wkb.loads(geom_wkb)
 * 
 *         LOGGER.debug('Testing geometry bbox')             # <<<<<<<<<<<<<<
 *         if not flow_dir_bbox.intersects(shapely.geometry.box(*shapely_geom.bounds)):
 *             LOGGER.debug(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_debug); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
      }
    }
    __pyx_t_11 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_19, __pyx_kp_u_Testing_geometry_bbox) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_kp_u_Testing_geometry_bbox);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":767
 * 
 *         LOGGER.debug('Testing geometry bbox')
 *         if not flow_dir_bbox.intersects(shapely.geometry.box(*shapely_geom.bounds)):             # <<<<<<<<<<<<<<
 *             LOGGER.debug(
 *                 'Outflow feature %s does not overlap with the flow '
 */
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_flow_dir_bbox, __pyx_n_s_intersects); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_shapely); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_geometry); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_box); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_shapely_geom, __pyx_n_s_bounds); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __Pyx_PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_12, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
      }
    }
    __pyx_t_11 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_12, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_5 = ((!__pyx_t_4) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/watershed.pyx":768
 *         LOGGER.debug('Testing geometry bbox')
 *         if not flow_dir_bbox.intersects(shapely.geometry.box(*shapely_geom.bounds)):
 *             LOGGER.debug(             # <<<<<<<<<<<<<<
 *                 'Outflow feature %s does not overlap with the flow '
 *                 'direction raster. Skipping.', current_fid)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_debug); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":770
 *             LOGGER.debug(
 *                 'Outflow feature %s does not overlap with the flow '
 *                 'direction raster. Skipping.', current_fid)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_current_fid); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_12 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_kp_u_Outflow_feature_s_does_not_overl, __pyx_t_18};
        __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_kp_u_Outflow_feature_s_does_not_overl, __pyx_t_18};
        __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      } else
      #endif
      {
        __pyx_t_19 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_Outflow_feature_s_does_not_overl);
        __Pyx_GIVEREF(__pyx_kp_u_Outflow_feature_s_does_not_overl);
        PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_9, __pyx_kp_u_Outflow_feature_s_does_not_overl);
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_9, __pyx_t_18);
        __pyx_t_18 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_19, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":771
 *                 'Outflow feature %s does not overlap with the flow '
 *                 'direction raster. Skipping.', current_fid)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         seeds_raster_path = os.path.join(working_dir_path, '%s_rasterized.tif' % ws_id)
 */
      goto __pyx_L16_continue;

      /* "src/geoprocessing/routing/watershed.pyx":767
 * 
 *         LOGGER.debug('Testing geometry bbox')
 *         if not flow_dir_bbox.intersects(shapely.geometry.box(*shapely_geom.bounds)):             # <<<<<<<<<<<<<<
 *             LOGGER.debug(
 *                 'Outflow feature %s does not overlap with the flow '
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":773
 *             continue
 * 
 *         seeds_raster_path = os.path.join(working_dir_path, '%s_rasterized.tif' % ws_id)             # <<<<<<<<<<<<<<
 *         if write_diagnostic_vector:
 *             diagnostic_vector_path = os.path.join(working_dir_path, '%s_seeds.gpkg' % ws_id)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_path); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_join); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = PyUnicode_Format(__pyx_kp_u_s_rasterized_tif, __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_v_working_dir_path, __pyx_t_18};
      __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_v_working_dir_path, __pyx_t_18};
      __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_INCREF(__pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_v_working_dir_path);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_9, __pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_9, __pyx_t_18);
      __pyx_t_18 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_seeds_raster_path, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":774
 * 
 *         seeds_raster_path = os.path.join(working_dir_path, '%s_rasterized.tif' % ws_id)
 *         if write_diagnostic_vector:             # <<<<<<<<<<<<<<
 *             diagnostic_vector_path = os.path.join(working_dir_path, '%s_seeds.gpkg' % ws_id)
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_write_diagnostic_vector); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 774, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/watershed.pyx":775
 *         seeds_raster_path = os.path.join(working_dir_path, '%s_rasterized.tif' % ws_id)
 *         if write_diagnostic_vector:
 *             diagnostic_vector_path = os.path.join(working_dir_path, '%s_seeds.gpkg' % ws_id)             # <<<<<<<<<<<<<<
 *         else:
 *             diagnostic_vector_path = None
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_path); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_join); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_18 = PyUnicode_Format(__pyx_kp_u_s_seeds_gpkg, __pyx_t_12); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_working_dir_path, __pyx_t_18};
        __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_working_dir_path, __pyx_t_18};
        __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      } else
      #endif
      {
        __pyx_t_19 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_v_working_dir_path);
        __Pyx_GIVEREF(__pyx_v_working_dir_path);
        PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_9, __pyx_v_working_dir_path);
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_9, __pyx_t_18);
        __pyx_t_18 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_19, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_diagnostic_vector_path, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":774
 * 
 *         seeds_raster_path = os.path.join(working_dir_path, '%s_rasterized.tif' % ws_id)
 *         if write_diagnostic_vector:             # <<<<<<<<<<<<<<
 *             diagnostic_vector_path = os.path.join(working_dir_path, '%s_seeds.gpkg' % ws_id)
 *         else:
 */
      goto __pyx_L20;
    }

    /* "src/geoprocessing/routing/watershed.pyx":777
 *             diagnostic_vector_path = os.path.join(working_dir_path, '%s_seeds.gpkg' % ws_id)
 *         else:
 *             diagnostic_vector_path = None             # <<<<<<<<<<<<<<
 *         seeds_in_watershed = _c_split_geometry_into_seeds(
 *             geom_wkb,
 */
    /*else*/ {
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_diagnostic_vector_path, Py_None);
    }
    __pyx_L20:;

    /* "src/geoprocessing/routing/watershed.pyx":780
 *         seeds_in_watershed = _c_split_geometry_into_seeds(
 *             geom_wkb,
 *             source_gt,             # <<<<<<<<<<<<<<
 *             flow_dir_srs=flow_dir_srs,
 *             flow_dir_n_cols=flow_dir_n_cols,
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v_source_gt))||((__pyx_v_source_gt) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_source_gt)->tp_name), 0))) __PYX_ERR(0, 780, __pyx_L1_error)

    /* "src/geoprocessing/routing/watershed.pyx":782
 *             source_gt,
 *             flow_dir_srs=flow_dir_srs,
 *             flow_dir_n_cols=flow_dir_n_cols,             # <<<<<<<<<<<<<<
 *             flow_dir_n_rows=flow_dir_n_rows,
 *             target_raster_path=seeds_raster_path,
 */
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_n_cols); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "src/geoprocessing/routing/watershed.pyx":783
 *             flow_dir_srs=flow_dir_srs,
 *             flow_dir_n_cols=flow_dir_n_cols,
 *             flow_dir_n_rows=flow_dir_n_rows,             # <<<<<<<<<<<<<<
 *             target_raster_path=seeds_raster_path,
 *             diagnostic_vector_path=diagnostic_vector_path
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_n_rows); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "src/geoprocessing/routing/watershed.pyx":778
 *         else:
 *             diagnostic_vector_path = None
 *         seeds_in_watershed = _c_split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *             geom_wkb,
 *             source_gt,
 */
    __pyx_t_26.__pyx_n = 1;
    __pyx_t_26.diagnostic_vector_path = __pyx_v_diagnostic_vector_path;
    __pyx_t_25 = __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed__c_split_geometry_into_seeds(__pyx_v_geom_wkb, ((PyObject*)__pyx_v_source_gt), __pyx_v_flow_dir_srs, __pyx_t_11, __pyx_t_7, __pyx_v_seeds_raster_path, &__pyx_t_26); 
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_seeds_in_watershed = __pyx_t_25;

    /* "src/geoprocessing/routing/watershed.pyx":788
 *         )
 * 
 *         seed_iterator = seeds_in_watershed.begin()             # <<<<<<<<<<<<<<
 *         while seed_iterator != seeds_in_watershed.end():
 *             seed = deref(seed_iterator)
 */
    __pyx_v_seed_iterator = __pyx_v_seeds_in_watershed.begin();

    /* "src/geoprocessing/routing/watershed.pyx":789
 * 
 *         seed_iterator = seeds_in_watershed.begin()
 *         while seed_iterator != seeds_in_watershed.end():             # <<<<<<<<<<<<<<
 *             seed = deref(seed_iterator)
 *             inc(seed_iterator)
 */
    while (1) {
      __pyx_t_5 = ((__pyx_v_seed_iterator != __pyx_v_seeds_in_watershed.end()) != 0);
      if (!__pyx_t_5) break;

      /* "src/geoprocessing/routing/watershed.pyx":790
 *         seed_iterator = seeds_in_watershed.begin()
 *         while seed_iterator != seeds_in_watershed.end():
 *             seed = deref(seed_iterator)             # <<<<<<<<<<<<<<
 *             inc(seed_iterator)
 * 
 */
      __pyx_v_seed = (*__pyx_v_seed_iterator);

      /* "src/geoprocessing/routing/watershed.pyx":791
 *         while seed_iterator != seeds_in_watershed.end():
 *             seed = deref(seed_iterator)
 *             inc(seed_iterator)             # <<<<<<<<<<<<<<
 * 
 *             if not 0 <= seed.first < flow_dir_n_cols:
 */
      (void)((++__pyx_v_seed_iterator));

      /* "src/geoprocessing/routing/watershed.pyx":793
 *             inc(seed_iterator)
 * 
 *             if not 0 <= seed.first < flow_dir_n_cols:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_5 = (0 <= __pyx_v_seed.first);
      if (__pyx_t_5) {
        __pyx_t_5 = (__pyx_v_seed.first < __pyx_v_flow_dir_n_cols);
      }
      __pyx_t_4 = ((!(__pyx_t_5 != 0)) != 0);
      if (__pyx_t_4) {

        /* "src/geoprocessing/routing/watershed.pyx":794
 * 
 *             if not 0 <= seed.first < flow_dir_n_cols:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if not 0 <= seed.second < flow_dir_n_rows:
 */
        goto __pyx_L21_continue;

        /* "src/geoprocessing/routing/watershed.pyx":793
 *             inc(seed_iterator)
 * 
 *             if not 0 <= seed.first < flow_dir_n_cols:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":796
 *                 continue
 * 
 *             if not 0 <= seed.second < flow_dir_n_rows:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_4 = (0 <= __pyx_v_seed.second);
      if (__pyx_t_4) {
        __pyx_t_4 = (__pyx_v_seed.second < __pyx_v_flow_dir_n_rows);
      }
      __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":797
 * 
 *             if not 0 <= seed.second < flow_dir_n_rows:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if flow_dir_managed_raster.get(seed.first, seed.second) == flow_dir_nodata:
 */
        goto __pyx_L21_continue;

        /* "src/geoprocessing/routing/watershed.pyx":796
 *                 continue
 * 
 *             if not 0 <= seed.second < flow_dir_n_rows:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":799
 *                 continue
 * 
 *             if flow_dir_managed_raster.get(seed.first, seed.second) == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_5 = ((__pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_seed.first, __pyx_v_seed.second) == __pyx_v_flow_dir_nodata) != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":800
 * 
 *             if flow_dir_managed_raster.get(seed.first, seed.second) == flow_dir_nodata:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             process_queue.push(seed)
 */
        goto __pyx_L21_continue;

        /* "src/geoprocessing/routing/watershed.pyx":799
 *                 continue
 * 
 *             if flow_dir_managed_raster.get(seed.first, seed.second) == flow_dir_nodata:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":802
 *                 continue
 * 
 *             process_queue.push(seed)             # <<<<<<<<<<<<<<
 *             process_queue_set.insert(seed)
 * 
 */
      __pyx_v_process_queue.push(__pyx_v_seed);

      /* "src/geoprocessing/routing/watershed.pyx":803
 * 
 *             process_queue.push(seed)
 *             process_queue_set.insert(seed)             # <<<<<<<<<<<<<<
 * 
 *         if process_queue_set.size() == 0:
 */
      try {
        __pyx_v_process_queue_set.insert(__pyx_v_seed);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 803, __pyx_L1_error)
      }
      __pyx_L21_continue:;
    }

    /* "src/geoprocessing/routing/watershed.pyx":805
 *             process_queue_set.insert(seed)
 * 
 *         if process_queue_set.size() == 0:             # <<<<<<<<<<<<<<
 *             LOGGER.debug(
 *                 'Outflow feature %s does not intersect any pixels with '
 */
    __pyx_t_5 = ((__pyx_v_process_queue_set.size() == 0) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/watershed.pyx":806
 * 
 *         if process_queue_set.size() == 0:
 *             LOGGER.debug(             # <<<<<<<<<<<<<<
 *                 'Outflow feature %s does not intersect any pixels with '
 *                 'valid flow direction. Skipping.', current_fid)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_debug); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":808
 *             LOGGER.debug(
 *                 'Outflow feature %s does not intersect any pixels with '
 *                 'valid flow direction. Skipping.', current_fid)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_current_fid); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_18 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_19);
        if (likely(__pyx_t_18)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_19, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_19)) {
        PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_kp_u_Outflow_feature_s_does_not_inter, __pyx_t_11};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
        PyObject *__pyx_temp[3] = {__pyx_t_18, __pyx_kp_u_Outflow_feature_s_does_not_inter, __pyx_t_11};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_18) {
          __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_18); __pyx_t_18 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_Outflow_feature_s_does_not_inter);
        __Pyx_GIVEREF(__pyx_kp_u_Outflow_feature_s_does_not_inter);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_9, __pyx_kp_u_Outflow_feature_s_does_not_inter);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_9, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_12, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":809
 *                 'Outflow feature %s does not intersect any pixels with '
 *                 'valid flow direction. Skipping.', current_fid)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         scratch_raster_path = os.path.join(working_dir_path,
 */
      goto __pyx_L16_continue;

      /* "src/geoprocessing/routing/watershed.pyx":805
 *             process_queue_set.insert(seed)
 * 
 *         if process_queue_set.size() == 0:             # <<<<<<<<<<<<<<
 *             LOGGER.debug(
 *                 'Outflow feature %s does not intersect any pixels with '
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":811
 *             continue
 * 
 *         scratch_raster_path = os.path.join(working_dir_path,             # <<<<<<<<<<<<<<
 *                                            '%s_scratch.tif' % ws_id)
 *         scratch_raster = gtiff_driver.Create(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_os); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_path); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_join); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":812
 * 
 *         scratch_raster_path = os.path.join(working_dir_path,
 *                                            '%s_scratch.tif' % ws_id)             # <<<<<<<<<<<<<<
 *         scratch_raster = gtiff_driver.Create(
 *             scratch_raster_path,
 */
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = PyUnicode_Format(__pyx_kp_u_s_scratch_tif, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_19);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_19, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_19)) {
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_working_dir_path, __pyx_t_11};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_working_dir_path, __pyx_t_11};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(__pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_v_working_dir_path);
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_9, __pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_9, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_18, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF_SET(__pyx_v_scratch_raster_path, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":813
 *         scratch_raster_path = os.path.join(working_dir_path,
 *                                            '%s_scratch.tif' % ws_id)
 *         scratch_raster = gtiff_driver.Create(             # <<<<<<<<<<<<<<
 *             scratch_raster_path,
 *             flow_dir_n_cols,
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_gtiff_driver, __pyx_n_s_Create); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "src/geoprocessing/routing/watershed.pyx":815
 *         scratch_raster = gtiff_driver.Create(
 *             scratch_raster_path,
 *             flow_dir_n_cols,             # <<<<<<<<<<<<<<
 *             flow_dir_n_rows,
 *             1,  # n bands
 */
    __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_n_cols); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);

    /* "src/geoprocessing/routing/watershed.pyx":816
 *             scratch_raster_path,
 *             flow_dir_n_cols,
 *             flow_dir_n_rows,             # <<<<<<<<<<<<<<
 *             1,  # n bands
 *             gdal.GDT_UInt32,
 */
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_flow_dir_n_rows); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);

    /* "src/geoprocessing/routing/watershed.pyx":818
 *             flow_dir_n_rows,
 *             1,  # n bands
 *             gdal.GDT_UInt32,             # <<<<<<<<<<<<<<
 *             options=GTIFF_CREATION_OPTIONS)
 *         scratch_raster.SetGeoTransform(source_gt)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_gdal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_GDT_UInt32); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":813
 *         scratch_raster_path = os.path.join(working_dir_path,
 *                                            '%s_scratch.tif' % ws_id)
 *         scratch_raster = gtiff_driver.Create(             # <<<<<<<<<<<<<<
 *             scratch_raster_path,
 *             flow_dir_n_cols,
 */
    __pyx_t_11 = PyTuple_New(5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_v_scratch_raster_path);
    __Pyx_GIVEREF(__pyx_v_scratch_raster_path);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_scratch_raster_path);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_18);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_12);
    __pyx_t_19 = 0;
    __pyx_t_18 = 0;
    __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":819
 *             1,  # n bands
 *             gdal.GDT_UInt32,
 *             options=GTIFF_CREATION_OPTIONS)             # <<<<<<<<<<<<<<
 *         scratch_raster.SetGeoTransform(source_gt)
 *         scratch_raster.SetProjection(flow_dir_info['projection_wkt'])
 */
    __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_GTIFF_CREATION_OPTIONS); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_options, __pyx_t_18) < 0) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":813
 *         scratch_raster_path = os.path.join(working_dir_path,
 *                                            '%s_scratch.tif' % ws_id)
 *         scratch_raster = gtiff_driver.Create(             # <<<<<<<<<<<<<<
 *             scratch_raster_path,
 *             flow_dir_n_cols,
 */
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_scratch_raster, __pyx_t_18);
    __pyx_t_18 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":820
 *             gdal.GDT_UInt32,
 *             options=GTIFF_CREATION_OPTIONS)
 *         scratch_raster.SetGeoTransform(source_gt)             # <<<<<<<<<<<<<<
 *         scratch_raster.SetProjection(flow_dir_info['projection_wkt'])
 *         # strictly speaking, there's no need to set the nodata value on the band.
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_scratch_raster, __pyx_n_s_SetGeoTransform); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_18 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, __pyx_v_source_gt) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_source_gt);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":821
 *             options=GTIFF_CREATION_OPTIONS)
 *         scratch_raster.SetGeoTransform(source_gt)
 *         scratch_raster.SetProjection(flow_dir_info['projection_wkt'])             # <<<<<<<<<<<<<<
 *         # strictly speaking, there's no need to set the nodata value on the band.
 *         scratch_raster = None
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_scratch_raster, __pyx_n_s_SetProjection); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_flow_dir_info, __pyx_n_u_projection_wkt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_18 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_7, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":823
 *         scratch_raster.SetProjection(flow_dir_info['projection_wkt'])
 *         # strictly speaking, there's no need to set the nodata value on the band.
 *         scratch_raster = None             # <<<<<<<<<<<<<<
 * 
 *         scratch_managed_raster = _ManagedRaster(scratch_raster_path, 1, 1)
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_scratch_raster, Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":825
 *         scratch_raster = None
 * 
 *         scratch_managed_raster = _ManagedRaster(scratch_raster_path, 1, 1)             # <<<<<<<<<<<<<<
 *         ix_min = flow_dir_n_cols
 *         iy_min = flow_dir_n_rows
 */
    __pyx_t_18 = PyTuple_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_INCREF(__pyx_v_scratch_raster_path);
    __Pyx_GIVEREF(__pyx_v_scratch_raster_path);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_v_scratch_raster_path);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_int_1);
    __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster), __pyx_t_18, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_XDECREF_SET(__pyx_v_scratch_managed_raster, ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":826
 * 
 *         scratch_managed_raster = _ManagedRaster(scratch_raster_path, 1, 1)
 *         ix_min = flow_dir_n_cols             # <<<<<<<<<<<<<<
 *         iy_min = flow_dir_n_rows
 *         ix_max = 0
 */
    __pyx_v_ix_min = __pyx_v_flow_dir_n_cols;

    /* "src/geoprocessing/routing/watershed.pyx":827
 *         scratch_managed_raster = _ManagedRaster(scratch_raster_path, 1, 1)
 *         ix_min = flow_dir_n_cols
 *         iy_min = flow_dir_n_rows             # <<<<<<<<<<<<<<
 *         ix_max = 0
 *         iy_max = 0
 */
    __pyx_v_iy_min = __pyx_v_flow_dir_n_rows;

    /* "src/geoprocessing/routing/watershed.pyx":828
 *         ix_min = flow_dir_n_cols
 *         iy_min = flow_dir_n_rows
 *         ix_max = 0             # <<<<<<<<<<<<<<
 *         iy_max = 0
 *         n_cells_visited = 0
 */
    __pyx_v_ix_max = 0;

    /* "src/geoprocessing/routing/watershed.pyx":829
 *         iy_min = flow_dir_n_rows
 *         ix_max = 0
 *         iy_max = 0             # <<<<<<<<<<<<<<
 *         n_cells_visited = 0
 *         LOGGER.info(
 */
    __pyx_v_iy_max = 0;

    /* "src/geoprocessing/routing/watershed.pyx":830
 *         ix_max = 0
 *         iy_max = 0
 *         n_cells_visited = 0             # <<<<<<<<<<<<<<
 *         LOGGER.info(
 *             'Delineating watershed %s of %s (ws_id %s)',
 */
    __pyx_v_n_cells_visited = 0;

    /* "src/geoprocessing/routing/watershed.pyx":831
 *         iy_max = 0
 *         n_cells_visited = 0
 *         LOGGER.info(             # <<<<<<<<<<<<<<
 *             'Delineating watershed %s of %s (ws_id %s)',
 *             current_fid, outflow_feature_count, ws_id)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_info); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":833
 *         LOGGER.info(
 *             'Delineating watershed %s of %s (ws_id %s)',
 *             current_fid, outflow_feature_count, ws_id)             # <<<<<<<<<<<<<<
 *         last_log_time = ctime(NULL)
 *         while not process_queue.empty():
 */
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_current_fid); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_outflow_feature_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_11)) {
      PyObject *__pyx_temp[5] = {__pyx_t_17, __pyx_kp_u_Delineating_watershed_s_of_s_ws, __pyx_t_18, __pyx_t_7, __pyx_t_19};
      __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_9, 4+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 831, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
      PyObject *__pyx_temp[5] = {__pyx_t_17, __pyx_kp_u_Delineating_watershed_s_of_s_ws, __pyx_t_18, __pyx_t_7, __pyx_t_19};
      __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_9, 4+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 831, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(4+__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_17) {
        __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_17); __pyx_t_17 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_u_Delineating_watershed_s_of_s_ws);
      __Pyx_GIVEREF(__pyx_kp_u_Delineating_watershed_s_of_s_ws);
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_9, __pyx_kp_u_Delineating_watershed_s_of_s_ws);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_9, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_9, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_9, __pyx_t_19);
      __pyx_t_18 = 0;
      __pyx_t_7 = 0;
      __pyx_t_19 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":834
 *             'Delineating watershed %s of %s (ws_id %s)',
 *             current_fid, outflow_feature_count, ws_id)
 *         last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *         while not process_queue.empty():
 *             if ctime(NULL) - last_log_time > 5.0:
 */
    __pyx_v_last_log_time = time(NULL);

    /* "src/geoprocessing/routing/watershed.pyx":835
 *             current_fid, outflow_feature_count, ws_id)
 *         last_log_time = ctime(NULL)
 *         while not process_queue.empty():             # <<<<<<<<<<<<<<
 *             if ctime(NULL) - last_log_time > 5.0:
 *                 last_log_time = ctime(NULL)
 */
    while (1) {
      __pyx_t_5 = ((!(__pyx_v_process_queue.empty() != 0)) != 0);
      if (!__pyx_t_5) break;

      /* "src/geoprocessing/routing/watershed.pyx":836
 *         last_log_time = ctime(NULL)
 *         while not process_queue.empty():
 *             if ctime(NULL) - last_log_time > 5.0:             # <<<<<<<<<<<<<<
 *                 last_log_time = ctime(NULL)
 *                 LOGGER.info(
 */
      __pyx_t_5 = (((time(NULL) - __pyx_v_last_log_time) > 5.0) != 0);
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":837
 *         while not process_queue.empty():
 *             if ctime(NULL) - last_log_time > 5.0:
 *                 last_log_time = ctime(NULL)             # <<<<<<<<<<<<<<
 *                 LOGGER.info(
 *                     'Delineating watershed %s of %s (ws_id %s), %s pixels '
 */
        __pyx_v_last_log_time = time(NULL);

        /* "src/geoprocessing/routing/watershed.pyx":838
 *             if ctime(NULL) - last_log_time > 5.0:
 *                 last_log_time = ctime(NULL)
 *                 LOGGER.info(             # <<<<<<<<<<<<<<
 *                     'Delineating watershed %s of %s (ws_id %s), %s pixels '
 *                     'found so far', current_fid, outflow_feature_count,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_info); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":840
 *                 LOGGER.info(
 *                     'Delineating watershed %s of %s (ws_id %s), %s pixels '
 *                     'found so far', current_fid, outflow_feature_count,             # <<<<<<<<<<<<<<
 *                     ws_id, n_cells_visited)
 * 
 */
        __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_current_fid); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_outflow_feature_count); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);

        /* "src/geoprocessing/routing/watershed.pyx":841
 *                     'Delineating watershed %s of %s (ws_id %s), %s pixels '
 *                     'found so far', current_fid, outflow_feature_count,
 *                     ws_id, n_cells_visited)             # <<<<<<<<<<<<<<
 * 
 *             current_pixel = process_queue.front()
 */
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 841, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_n_cells_visited); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 841, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_17 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_9 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_13)) {
          PyObject *__pyx_temp[6] = {__pyx_t_17, __pyx_kp_u_Delineating_watershed_s_of_s_ws_2, __pyx_t_11, __pyx_t_19, __pyx_t_7, __pyx_t_18};
          __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
          PyObject *__pyx_temp[6] = {__pyx_t_17, __pyx_kp_u_Delineating_watershed_s_of_s_ws_2, __pyx_t_11, __pyx_t_19, __pyx_t_7, __pyx_t_18};
          __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_17); __pyx_t_17 = NULL;
          }
          __Pyx_INCREF(__pyx_kp_u_Delineating_watershed_s_of_s_ws_2);
          __Pyx_GIVEREF(__pyx_kp_u_Delineating_watershed_s_of_s_ws_2);
          PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_kp_u_Delineating_watershed_s_of_s_ws_2);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_19);
          PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_t_19);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_18);
          PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_t_18);
          __pyx_t_11 = 0;
          __pyx_t_19 = 0;
          __pyx_t_7 = 0;
          __pyx_t_18 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_10, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":836
 *         last_log_time = ctime(NULL)
 *         while not process_queue.empty():
 *             if ctime(NULL) - last_log_time > 5.0:             # <<<<<<<<<<<<<<
 *                 last_log_time = ctime(NULL)
 *                 LOGGER.info(
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":843
 *                     ws_id, n_cells_visited)
 * 
 *             current_pixel = process_queue.front()             # <<<<<<<<<<<<<<
 *             process_queue_set.erase(current_pixel)
 *             process_queue.pop()
 */
      __pyx_v_current_pixel = __pyx_v_process_queue.front();

      /* "src/geoprocessing/routing/watershed.pyx":844
 * 
 *             current_pixel = process_queue.front()
 *             process_queue_set.erase(current_pixel)             # <<<<<<<<<<<<<<
 *             process_queue.pop()
 * 
 */
      (void)(__pyx_v_process_queue_set.erase(__pyx_v_current_pixel));

      /* "src/geoprocessing/routing/watershed.pyx":845
 *             current_pixel = process_queue.front()
 *             process_queue_set.erase(current_pixel)
 *             process_queue.pop()             # <<<<<<<<<<<<<<
 * 
 *             scratch_managed_raster.set(current_pixel.first,
 */
      __pyx_v_process_queue.pop();

      /* "src/geoprocessing/routing/watershed.pyx":847
 *             process_queue.pop()
 * 
 *             scratch_managed_raster.set(current_pixel.first,             # <<<<<<<<<<<<<<
 *                                        current_pixel.second, ws_id)
 *             n_cells_visited += 1
 */
      __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_set(__pyx_v_scratch_managed_raster, __pyx_v_current_pixel.first, __pyx_v_current_pixel.second, __pyx_v_ws_id);

      /* "src/geoprocessing/routing/watershed.pyx":849
 *             scratch_managed_raster.set(current_pixel.first,
 *                                        current_pixel.second, ws_id)
 *             n_cells_visited += 1             # <<<<<<<<<<<<<<
 * 
 *             # These are for tracking the extents of the raster so we can build
 */
      __pyx_v_n_cells_visited = (__pyx_v_n_cells_visited + 1);

      /* "src/geoprocessing/routing/watershed.pyx":853
 *             # These are for tracking the extents of the raster so we can build
 *             # a VRT and only polygonize the pixels we need to.
 *             ix_min = min(ix_min, current_pixel.first)             # <<<<<<<<<<<<<<
 *             iy_min = min(iy_min, current_pixel.second)
 *             ix_max = max(ix_max, current_pixel.first)
 */
      __pyx_t_27 = __pyx_v_current_pixel.first;
      __pyx_t_9 = __pyx_v_ix_min;
      if (((__pyx_t_27 < __pyx_t_9) != 0)) {
        __pyx_t_28 = __pyx_t_27;
      } else {
        __pyx_t_28 = __pyx_t_9;
      }
      __pyx_v_ix_min = __pyx_t_28;

      /* "src/geoprocessing/routing/watershed.pyx":854
 *             # a VRT and only polygonize the pixels we need to.
 *             ix_min = min(ix_min, current_pixel.first)
 *             iy_min = min(iy_min, current_pixel.second)             # <<<<<<<<<<<<<<
 *             ix_max = max(ix_max, current_pixel.first)
 *             iy_max = max(iy_max, current_pixel.second)
 */
      __pyx_t_28 = __pyx_v_current_pixel.second;
      __pyx_t_9 = __pyx_v_iy_min;
      if (((__pyx_t_28 < __pyx_t_9) != 0)) {
        __pyx_t_27 = __pyx_t_28;
      } else {
        __pyx_t_27 = __pyx_t_9;
      }
      __pyx_v_iy_min = __pyx_t_27;

      /* "src/geoprocessing/routing/watershed.pyx":855
 *             ix_min = min(ix_min, current_pixel.first)
 *             iy_min = min(iy_min, current_pixel.second)
 *             ix_max = max(ix_max, current_pixel.first)             # <<<<<<<<<<<<<<
 *             iy_max = max(iy_max, current_pixel.second)
 * 
 */
      __pyx_t_27 = __pyx_v_current_pixel.first;
      __pyx_t_9 = __pyx_v_ix_max;
      if (((__pyx_t_27 > __pyx_t_9) != 0)) {
        __pyx_t_28 = __pyx_t_27;
      } else {
        __pyx_t_28 = __pyx_t_9;
      }
      __pyx_v_ix_max = __pyx_t_28;

      /* "src/geoprocessing/routing/watershed.pyx":856
 *             iy_min = min(iy_min, current_pixel.second)
 *             ix_max = max(ix_max, current_pixel.first)
 *             iy_max = max(iy_max, current_pixel.second)             # <<<<<<<<<<<<<<
 * 
 *             for neighbor_index in range(8):
 */
      __pyx_t_28 = __pyx_v_current_pixel.second;
      __pyx_t_9 = __pyx_v_iy_max;
      if (((__pyx_t_28 > __pyx_t_9) != 0)) {
        __pyx_t_27 = __pyx_t_28;
      } else {
        __pyx_t_27 = __pyx_t_9;
      }
      __pyx_v_iy_max = __pyx_t_27;

      /* "src/geoprocessing/routing/watershed.pyx":858
 *             iy_max = max(iy_max, current_pixel.second)
 * 
 *             for neighbor_index in range(8):             # <<<<<<<<<<<<<<
 *                 neighbor_pixel = CoordinatePair(
 *                     current_pixel.first + neighbor_col[neighbor_index],
 */
      for (__pyx_t_27 = 0; __pyx_t_27 < 8; __pyx_t_27+=1) {
        __pyx_v_neighbor_index = __pyx_t_27;

        /* "src/geoprocessing/routing/watershed.pyx":859
 * 
 *             for neighbor_index in range(8):
 *                 neighbor_pixel = CoordinatePair(             # <<<<<<<<<<<<<<
 *                     current_pixel.first + neighbor_col[neighbor_index],
 *                     current_pixel.second + neighbor_row[neighbor_index])
 */
        try {
          __pyx_t_29 = __pyx_t_8ecoshard_13geoprocessing_7routing_9watershed_CoordinatePair((__pyx_v_current_pixel.first + (__pyx_v_neighbor_col[__pyx_v_neighbor_index])), (__pyx_v_current_pixel.second + (__pyx_v_neighbor_row[__pyx_v_neighbor_index])));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 859, __pyx_L1_error)
        }
        __pyx_v_neighbor_pixel = __pyx_t_29;

        /* "src/geoprocessing/routing/watershed.pyx":863
 *                     current_pixel.second + neighbor_row[neighbor_index])
 * 
 *                 if not 0 <= neighbor_pixel.first < flow_dir_n_cols:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_5 = (0 <= __pyx_v_neighbor_pixel.first);
        if (__pyx_t_5) {
          __pyx_t_5 = (__pyx_v_neighbor_pixel.first < __pyx_v_flow_dir_n_cols);
        }
        __pyx_t_4 = ((!(__pyx_t_5 != 0)) != 0);
        if (__pyx_t_4) {

          /* "src/geoprocessing/routing/watershed.pyx":864
 * 
 *                 if not 0 <= neighbor_pixel.first < flow_dir_n_cols:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if not 0 <= neighbor_pixel.second < flow_dir_n_rows:
 */
          goto __pyx_L30_continue;

          /* "src/geoprocessing/routing/watershed.pyx":863
 *                     current_pixel.second + neighbor_row[neighbor_index])
 * 
 *                 if not 0 <= neighbor_pixel.first < flow_dir_n_cols:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":866
 *                     continue
 * 
 *                 if not 0 <= neighbor_pixel.second < flow_dir_n_rows:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_4 = (0 <= __pyx_v_neighbor_pixel.second);
        if (__pyx_t_4) {
          __pyx_t_4 = (__pyx_v_neighbor_pixel.second < __pyx_v_flow_dir_n_rows);
        }
        __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/watershed.pyx":867
 * 
 *                 if not 0 <= neighbor_pixel.second < flow_dir_n_rows:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # If we've already enqueued the neighbor (either it's
 */
          goto __pyx_L30_continue;

          /* "src/geoprocessing/routing/watershed.pyx":866
 *                     continue
 * 
 *                 if not 0 <= neighbor_pixel.second < flow_dir_n_rows:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":872
 *                 # upstream of another pixel or it's a watershed seed), we
 *                 # don't need to re-enqueue it.
 *                 if (process_queue_set.find(neighbor_pixel) !=             # <<<<<<<<<<<<<<
 *                         process_queue_set.end()):
 *                     continue
 */
        __pyx_t_5 = ((__pyx_v_process_queue_set.find(__pyx_v_neighbor_pixel) != __pyx_v_process_queue_set.end()) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/watershed.pyx":874
 *                 if (process_queue_set.find(neighbor_pixel) !=
 *                         process_queue_set.end()):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # If the neighbor is known to be a seed, we don't need to
 */
          goto __pyx_L30_continue;

          /* "src/geoprocessing/routing/watershed.pyx":872
 *                 # upstream of another pixel or it's a watershed seed), we
 *                 # don't need to re-enqueue it.
 *                 if (process_queue_set.find(neighbor_pixel) !=             # <<<<<<<<<<<<<<
 *                         process_queue_set.end()):
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":879
 *                 # re-enqueue it either.  Either it's been visited already (and
 *                 # may have upstream pixels) or it's going to be.
 *                 if (seeds_in_watershed.find(neighbor_pixel) !=             # <<<<<<<<<<<<<<
 *                         seeds_in_watershed.end()):
 *                     continue
 */
        __pyx_t_5 = ((__pyx_v_seeds_in_watershed.find(__pyx_v_neighbor_pixel) != __pyx_v_seeds_in_watershed.end()) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/watershed.pyx":881
 *                 if (seeds_in_watershed.find(neighbor_pixel) !=
 *                         seeds_in_watershed.end()):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # Does the neighbor flow into this pixel?
 */
          goto __pyx_L30_continue;

          /* "src/geoprocessing/routing/watershed.pyx":879
 *                 # re-enqueue it either.  Either it's been visited already (and
 *                 # may have upstream pixels) or it's going to be.
 *                 if (seeds_in_watershed.find(neighbor_pixel) !=             # <<<<<<<<<<<<<<
 *                         seeds_in_watershed.end()):
 *                     continue
 */
        }

        /* "src/geoprocessing/routing/watershed.pyx":885
 *                 # Does the neighbor flow into this pixel?
 *                 # If yes, enqueue it.
 *                 if (reverse_flow[neighbor_index] ==             # <<<<<<<<<<<<<<
 *                         flow_dir_managed_raster.get(
 *                             neighbor_pixel.first, neighbor_pixel.second)):
 */
        __pyx_t_5 = (((__pyx_v_reverse_flow[__pyx_v_neighbor_index]) == __pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_get(__pyx_v_flow_dir_managed_raster, __pyx_v_neighbor_pixel.first, __pyx_v_neighbor_pixel.second)) != 0);
        if (__pyx_t_5) {

          /* "src/geoprocessing/routing/watershed.pyx":888
 *                         flow_dir_managed_raster.get(
 *                             neighbor_pixel.first, neighbor_pixel.second)):
 *                     process_queue.push(neighbor_pixel)             # <<<<<<<<<<<<<<
 *                     process_queue_set.insert(neighbor_pixel)
 * 
 */
          __pyx_v_process_queue.push(__pyx_v_neighbor_pixel);

          /* "src/geoprocessing/routing/watershed.pyx":889
 *                             neighbor_pixel.first, neighbor_pixel.second)):
 *                     process_queue.push(neighbor_pixel)
 *                     process_queue_set.insert(neighbor_pixel)             # <<<<<<<<<<<<<<
 * 
 *         watersheds_created += 1
 */
          try {
            __pyx_v_process_queue_set.insert(__pyx_v_neighbor_pixel);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 889, __pyx_L1_error)
          }

          /* "src/geoprocessing/routing/watershed.pyx":885
 *                 # Does the neighbor flow into this pixel?
 *                 # If yes, enqueue it.
 *                 if (reverse_flow[neighbor_index] ==             # <<<<<<<<<<<<<<
 *                         flow_dir_managed_raster.get(
 *                             neighbor_pixel.first, neighbor_pixel.second)):
 */
        }
        __pyx_L30_continue:;
      }
    }

    /* "src/geoprocessing/routing/watershed.pyx":891
 *                     process_queue_set.insert(neighbor_pixel)
 * 
 *         watersheds_created += 1             # <<<<<<<<<<<<<<
 *         scratch_managed_raster.close()
 * 
 */
    __pyx_v_watersheds_created = (__pyx_v_watersheds_created + 1);

    /* "src/geoprocessing/routing/watershed.pyx":892
 * 
 *         watersheds_created += 1
 *         scratch_managed_raster.close()             # <<<<<<<<<<<<<<
 * 
 *         # Build a VRT from the bounds of the affected pixels before
 */
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scratch_managed_raster), __pyx_n_s_close); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_12 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":898
 *         # raster, this yields a large speedup because we don't have to read in
 *         # the whole scratch raster in order to polygonize.
 *         x1 = (flow_dir_origin_x + (max(ix_min-1, 0)*flow_dir_pixelsize_x))  # minx             # <<<<<<<<<<<<<<
 *         y1 = (flow_dir_origin_y + (max(iy_min-1, 0)*flow_dir_pixelsize_y))  # miny
 *         x2 = (flow_dir_origin_x + (min(ix_max+1, flow_dir_n_cols)*flow_dir_pixelsize_x))  # maxx
 */
    __pyx_t_27 = 0;
    __pyx_t_28 = (__pyx_v_ix_min - 1);
    if (((__pyx_t_27 > __pyx_t_28) != 0)) {
      __pyx_t_30 = __pyx_t_27;
    } else {
      __pyx_t_30 = __pyx_t_28;
    }
    __pyx_v_x1 = (__pyx_v_flow_dir_origin_x + (__pyx_t_30 * __pyx_v_flow_dir_pixelsize_x));

    /* "src/geoprocessing/routing/watershed.pyx":899
 *         # the whole scratch raster in order to polygonize.
 *         x1 = (flow_dir_origin_x + (max(ix_min-1, 0)*flow_dir_pixelsize_x))  # minx
 *         y1 = (flow_dir_origin_y + (max(iy_min-1, 0)*flow_dir_pixelsize_y))  # miny             # <<<<<<<<<<<<<<
 *         x2 = (flow_dir_origin_x + (min(ix_max+1, flow_dir_n_cols)*flow_dir_pixelsize_x))  # maxx
 *         y2 = (flow_dir_origin_y + (min(iy_max+1, flow_dir_n_rows)*flow_dir_pixelsize_y))  # maxy
 */
    __pyx_t_30 = 0;
    __pyx_t_27 = (__pyx_v_iy_min - 1);
    if (((__pyx_t_30 > __pyx_t_27) != 0)) {
      __pyx_t_28 = __pyx_t_30;
    } else {
      __pyx_t_28 = __pyx_t_27;
    }
    __pyx_v_y1 = (__pyx_v_flow_dir_origin_y + (__pyx_t_28 * __pyx_v_flow_dir_pixelsize_y));

    /* "src/geoprocessing/routing/watershed.pyx":900
 *         x1 = (flow_dir_origin_x + (max(ix_min-1, 0)*flow_dir_pixelsize_x))  # minx
 *         y1 = (flow_dir_origin_y + (max(iy_min-1, 0)*flow_dir_pixelsize_y))  # miny
 *         x2 = (flow_dir_origin_x + (min(ix_max+1, flow_dir_n_cols)*flow_dir_pixelsize_x))  # maxx             # <<<<<<<<<<<<<<
 *         y2 = (flow_dir_origin_y + (min(iy_max+1, flow_dir_n_rows)*flow_dir_pixelsize_y))  # maxy
 * 
 */
    __pyx_t_9 = __pyx_v_flow_dir_n_cols;
    __pyx_t_28 = (__pyx_v_ix_max + 1);
    if (((__pyx_t_9 < __pyx_t_28) != 0)) {
      __pyx_t_30 = __pyx_t_9;
    } else {
      __pyx_t_30 = __pyx_t_28;
    }
    __pyx_v_x2 = (__pyx_v_flow_dir_origin_x + (__pyx_t_30 * __pyx_v_flow_dir_pixelsize_x));

    /* "src/geoprocessing/routing/watershed.pyx":901
 *         y1 = (flow_dir_origin_y + (max(iy_min-1, 0)*flow_dir_pixelsize_y))  # miny
 *         x2 = (flow_dir_origin_x + (min(ix_max+1, flow_dir_n_cols)*flow_dir_pixelsize_x))  # maxx
 *         y2 = (flow_dir_origin_y + (min(iy_max+1, flow_dir_n_rows)*flow_dir_pixelsize_y))  # maxy             # <<<<<<<<<<<<<<
 * 
 *         vrt_options = gdal.BuildVRTOptions(
 */
    __pyx_t_9 = __pyx_v_flow_dir_n_rows;
    __pyx_t_30 = (__pyx_v_iy_max + 1);
    if (((__pyx_t_9 < __pyx_t_30) != 0)) {
      __pyx_t_28 = __pyx_t_9;
    } else {
      __pyx_t_28 = __pyx_t_30;
    }
    __pyx_v_y2 = (__pyx_v_flow_dir_origin_y + (__pyx_t_28 * __pyx_v_flow_dir_pixelsize_y));

    /* "src/geoprocessing/routing/watershed.pyx":903
 *         y2 = (flow_dir_origin_y + (min(iy_max+1, flow_dir_n_rows)*flow_dir_pixelsize_y))  # maxy
 * 
 *         vrt_options = gdal.BuildVRTOptions(             # <<<<<<<<<<<<<<
 *             outputBounds=(
 *                 min(x1, x2),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_gdal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_BuildVRTOptions); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":904
 * 
 *         vrt_options = gdal.BuildVRTOptions(
 *             outputBounds=(             # <<<<<<<<<<<<<<
 *                 min(x1, x2),
 *                 min(y1, y2),
 */
    __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);

    /* "src/geoprocessing/routing/watershed.pyx":905
 *         vrt_options = gdal.BuildVRTOptions(
 *             outputBounds=(
 *                 min(x1, x2),             # <<<<<<<<<<<<<<
 *                 min(y1, y2),
 *                 max(x1, x2),
 */
    __pyx_t_15 = __pyx_v_x2;
    __pyx_t_31 = __pyx_v_x1;
    if (((__pyx_t_15 < __pyx_t_31) != 0)) {
      __pyx_t_32 = __pyx_t_15;
    } else {
      __pyx_t_32 = __pyx_t_31;
    }
    __pyx_t_10 = PyFloat_FromDouble(__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "src/geoprocessing/routing/watershed.pyx":906
 *             outputBounds=(
 *                 min(x1, x2),
 *                 min(y1, y2),             # <<<<<<<<<<<<<<
 *                 max(x1, x2),
 *                 max(y1, y2))
 */
    __pyx_t_32 = __pyx_v_y2;
    __pyx_t_15 = __pyx_v_y1;
    if (((__pyx_t_32 < __pyx_t_15) != 0)) {
      __pyx_t_31 = __pyx_t_32;
    } else {
      __pyx_t_31 = __pyx_t_15;
    }
    __pyx_t_18 = PyFloat_FromDouble(__pyx_t_31); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);

    /* "src/geoprocessing/routing/watershed.pyx":907
 *                 min(x1, x2),
 *                 min(y1, y2),
 *                 max(x1, x2),             # <<<<<<<<<<<<<<
 *                 max(y1, y2))
 *         )
 */
    __pyx_t_31 = __pyx_v_x2;
    __pyx_t_32 = __pyx_v_x1;
    if (((__pyx_t_31 > __pyx_t_32) != 0)) {
      __pyx_t_15 = __pyx_t_31;
    } else {
      __pyx_t_15 = __pyx_t_32;
    }
    __pyx_t_7 = PyFloat_FromDouble(__pyx_t_15); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "src/geoprocessing/routing/watershed.pyx":908
 *                 min(y1, y2),
 *                 max(x1, x2),
 *                 max(y1, y2))             # <<<<<<<<<<<<<<
 *         )
 *         vrt_path = os.path.join(working_dir_path, '%s_vrt.vrt' % ws_id)
 */
    __pyx_t_15 = __pyx_v_y2;
    __pyx_t_31 = __pyx_v_y1;
    if (((__pyx_t_15 > __pyx_t_31) != 0)) {
      __pyx_t_32 = __pyx_t_15;
    } else {
      __pyx_t_32 = __pyx_t_31;
    }
    __pyx_t_19 = PyFloat_FromDouble(__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);

    /* "src/geoprocessing/routing/watershed.pyx":905
 *         vrt_options = gdal.BuildVRTOptions(
 *             outputBounds=(
 *                 min(x1, x2),             # <<<<<<<<<<<<<<
 *                 min(y1, y2),
 *                 max(x1, x2),
 */
    __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_19);
    __pyx_t_10 = 0;
    __pyx_t_18 = 0;
    __pyx_t_7 = 0;
    __pyx_t_19 = 0;
    if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_outputBounds, __pyx_t_11) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":903
 *         y2 = (flow_dir_origin_y + (min(iy_max+1, flow_dir_n_rows)*flow_dir_pixelsize_y))  # maxy
 * 
 *         vrt_options = gdal.BuildVRTOptions(             # <<<<<<<<<<<<<<
 *             outputBounds=(
 *                 min(x1, x2),
 */
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vrt_options, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":910
 *                 max(y1, y2))
 *         )
 *         vrt_path = os.path.join(working_dir_path, '%s_vrt.vrt' % ws_id)             # <<<<<<<<<<<<<<
 *         gdal.BuildVRT(vrt_path, [scratch_raster_path], options=vrt_options)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_os); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_path); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_join); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_19 = PyUnicode_Format(__pyx_kp_u_s_vrt_vrt, __pyx_t_13); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_working_dir_path, __pyx_t_19};
      __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_working_dir_path, __pyx_t_19};
      __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_INCREF(__pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_v_working_dir_path);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_working_dir_path);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_19);
      __pyx_t_19 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_7, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vrt_path, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":911
 *         )
 *         vrt_path = os.path.join(working_dir_path, '%s_vrt.vrt' % ws_id)
 *         gdal.BuildVRT(vrt_path, [scratch_raster_path], options=vrt_options)             # <<<<<<<<<<<<<<
 * 
 *         # Polygonize this new watershed from the VRT.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_gdal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_BuildVRT); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyList_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_v_scratch_raster_path);
    __Pyx_GIVEREF(__pyx_v_scratch_raster_path);
    PyList_SET_ITEM(__pyx_t_11, 0, __pyx_v_scratch_raster_path);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_vrt_path);
    __Pyx_GIVEREF(__pyx_v_vrt_path);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_vrt_path);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_options, __pyx_v_vrt_options) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
    __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":914
 * 
 *         # Polygonize this new watershed from the VRT.
 *         vrt_raster = gdal.OpenEx(vrt_path, gdal.OF_RASTER, allowed_drivers=['VRT'])             # <<<<<<<<<<<<<<
 *         vrt_band = vrt_raster.GetRasterBand(1)
 *         _ = gdal.Polygonize(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_gdal); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_gdal); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_OF_RASTER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_INCREF(__pyx_v_vrt_path);
    __Pyx_GIVEREF(__pyx_v_vrt_path);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_v_vrt_path);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = PyList_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_n_u_VRT);
    __Pyx_GIVEREF(__pyx_n_u_VRT);
    PyList_SET_ITEM(__pyx_t_12, 0, __pyx_n_u_VRT);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_allowed_drivers, __pyx_t_12) < 0) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_19, __pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vrt_raster, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":915
 *         # Polygonize this new watershed from the VRT.
 *         vrt_raster = gdal.OpenEx(vrt_path, gdal.OF_RASTER, allowed_drivers=['VRT'])
 *         vrt_band = vrt_raster.GetRasterBand(1)             # <<<<<<<<<<<<<<
 *         _ = gdal.Polygonize(
 *             vrt_band,  # The source band
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_vrt_raster, __pyx_n_s_GetRasterBand); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_12 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_19, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vrt_band, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":916
 *         vrt_raster = gdal.OpenEx(vrt_path, gdal.OF_RASTER, allowed_drivers=['VRT'])
 *         vrt_band = vrt_raster.GetRasterBand(1)
 *         _ = gdal.Polygonize(             # <<<<<<<<<<<<<<
 *             vrt_band,  # The source band
 *             vrt_band,  # The mask. Pixels with 0 are invalid, nonzero are valid
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_gdal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Polygonize); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":921
 *             polygonized_watersheds_layer,
 *             0,  # ws_id field index
 *             [])  # 8connectedness does not always produce valid geometries.             # <<<<<<<<<<<<<<
 *         _ = None
 *         vrt_band = None
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_19);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_19, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_19)) {
      PyObject *__pyx_temp[6] = {__pyx_t_11, __pyx_v_vrt_band, __pyx_v_vrt_band, __pyx_v_polygonized_watersheds_layer, __pyx_int_0, __pyx_t_7};
      __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
      PyObject *__pyx_temp[6] = {__pyx_t_11, __pyx_v_vrt_band, __pyx_v_vrt_band, __pyx_v_polygonized_watersheds_layer, __pyx_int_0, __pyx_t_7};
      __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_v_vrt_band);
      __Pyx_GIVEREF(__pyx_v_vrt_band);
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_9, __pyx_v_vrt_band);
      __Pyx_INCREF(__pyx_v_vrt_band);
      __Pyx_GIVEREF(__pyx_v_vrt_band);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_9, __pyx_v_vrt_band);
      __Pyx_INCREF(__pyx_v_polygonized_watersheds_layer);
      __Pyx_GIVEREF(__pyx_v_polygonized_watersheds_layer);
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_9, __pyx_v_polygonized_watersheds_layer);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_9, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_9, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":922
 *             0,  # ws_id field index
 *             [])  # 8connectedness does not always produce valid geometries.
 *         _ = None             # <<<<<<<<<<<<<<
 *         vrt_band = None
 *         vrt_raster = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v__, Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":923
 *             [])  # 8connectedness does not always produce valid geometries.
 *         _ = None
 *         vrt_band = None             # <<<<<<<<<<<<<<
 *         vrt_raster = None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_vrt_band, Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":924
 *         _ = None
 *         vrt_band = None
 *         vrt_raster = None             # <<<<<<<<<<<<<<
 * 
 *         # Removing files as we go to help manage disk space.
 */
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_vrt_raster, Py_None);

    /* "src/geoprocessing/routing/watershed.pyx":927
 * 
 *         # Removing files as we go to help manage disk space.
 *         if remove_temp_files:             # <<<<<<<<<<<<<<
 *             os.remove(scratch_raster_path)
 *             if os.path.exists(seeds_raster_path):
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_remove_temp_files); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 927, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/watershed.pyx":928
 *         # Removing files as we go to help manage disk space.
 *         if remove_temp_files:
 *             os.remove(scratch_raster_path)             # <<<<<<<<<<<<<<
 *             if os.path.exists(seeds_raster_path):
 *                 os.remove(seeds_raster_path)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_os); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_remove); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_19)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_12 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_19, __pyx_v_scratch_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_scratch_raster_path);
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":929
 *         if remove_temp_files:
 *             os.remove(scratch_raster_path)
 *             if os.path.exists(seeds_raster_path):             # <<<<<<<<<<<<<<
 *                 os.remove(seeds_raster_path)
 *             os.remove(vrt_path)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_os); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_path); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_exists); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_19)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_12 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_19, __pyx_v_seeds_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_seeds_raster_path);
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":930
 *             os.remove(scratch_raster_path)
 *             if os.path.exists(seeds_raster_path):
 *                 os.remove(seeds_raster_path)             # <<<<<<<<<<<<<<
 *             os.remove(vrt_path)
 *             if (diagnostic_vector_path
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_os); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_remove); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
          }
        }
        __pyx_t_12 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_13, __pyx_v_seeds_raster_path) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_v_seeds_raster_path);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":929
 *         if remove_temp_files:
 *             os.remove(scratch_raster_path)
 *             if os.path.exists(seeds_raster_path):             # <<<<<<<<<<<<<<
 *                 os.remove(seeds_raster_path)
 *             os.remove(vrt_path)
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":931
 *             if os.path.exists(seeds_raster_path):
 *                 os.remove(seeds_raster_path)
 *             os.remove(vrt_path)             # <<<<<<<<<<<<<<
 *             if (diagnostic_vector_path
 *                     and os.path.exists(diagnostic_vector_path)):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_os); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_remove); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_19)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_12 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_19, __pyx_v_vrt_path) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_vrt_path);
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":932
 *                 os.remove(seeds_raster_path)
 *             os.remove(vrt_path)
 *             if (diagnostic_vector_path             # <<<<<<<<<<<<<<
 *                     and os.path.exists(diagnostic_vector_path)):
 *                 os.remove(diagnostic_vector_path)
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_diagnostic_vector_path); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 932, __pyx_L1_error)
      if (__pyx_t_4) {
      } else {
        __pyx_t_5 = __pyx_t_4;
        goto __pyx_L40_bool_binop_done;
      }

      /* "src/geoprocessing/routing/watershed.pyx":933
 *             os.remove(vrt_path)
 *             if (diagnostic_vector_path
 *                     and os.path.exists(diagnostic_vector_path)):             # <<<<<<<<<<<<<<
 *                 os.remove(diagnostic_vector_path)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_os); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_path); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_exists); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_19)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_12 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_19, __pyx_v_diagnostic_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_diagnostic_vector_path);
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_5 = __pyx_t_4;
      __pyx_L40_bool_binop_done:;

      /* "src/geoprocessing/routing/watershed.pyx":932
 *                 os.remove(seeds_raster_path)
 *             os.remove(vrt_path)
 *             if (diagnostic_vector_path             # <<<<<<<<<<<<<<
 *                     and os.path.exists(diagnostic_vector_path)):
 *                 os.remove(diagnostic_vector_path)
 */
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":934
 *             if (diagnostic_vector_path
 *                     and os.path.exists(diagnostic_vector_path)):
 *                 os.remove(diagnostic_vector_path)             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info('Finished delineating %s watersheds', watersheds_created)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_os); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_remove); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
          }
        }
        __pyx_t_12 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_13, __pyx_v_diagnostic_vector_path) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_v_diagnostic_vector_path);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":932
 *                 os.remove(seeds_raster_path)
 *             os.remove(vrt_path)
 *             if (diagnostic_vector_path             # <<<<<<<<<<<<<<
 *                     and os.path.exists(diagnostic_vector_path)):
 *                 os.remove(diagnostic_vector_path)
 */
      }

      /* "src/geoprocessing/routing/watershed.pyx":927
 * 
 *         # Removing files as we go to help manage disk space.
 *         if remove_temp_files:             # <<<<<<<<<<<<<<
 *             os.remove(scratch_raster_path)
 *             if os.path.exists(seeds_raster_path):
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":748
 *     flow_dir_srs = osr.SpatialReference()
 *     flow_dir_srs.ImportFromWkt(flow_dir_info['projection_wkt'])
 *     for feature in outflow_layer:             # <<<<<<<<<<<<<<
 *         # Some vectors start indexing their FIDs at 0.
 *         # The mask raster input to polygonization, however, only regards pixels
 */
    __pyx_L16_continue:;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":936
 *                 os.remove(diagnostic_vector_path)
 * 
 *     LOGGER.info('Finished delineating %s watersheds', watersheds_created)             # <<<<<<<<<<<<<<
 * 
 *     # The Polygonization algorithm will sometimes identify regions that
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_watersheds_created); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_19)) {
    PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_kp_u_Finished_delineating_s_watershed, __pyx_t_12};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
    PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_kp_u_Finished_delineating_s_watershed, __pyx_t_12};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_13) {
      __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_13); __pyx_t_13 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_Finished_delineating_s_watershed);
    __Pyx_GIVEREF(__pyx_kp_u_Finished_delineating_s_watershed);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_kp_u_Finished_delineating_s_watershed);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_12);
    __pyx_t_12 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":944
 *     cdef cmap[int, cset[int]] fragments_with_duplicates
 *     cdef int fid
 *     for feature in polygonized_watersheds_layer:             # <<<<<<<<<<<<<<
 *         fid = feature.GetFID()
 *         # ws_id is tracked as 1 more than the FID.  See previous note about why.
 */
  if (likely(PyList_CheckExact(__pyx_v_polygonized_watersheds_layer)) || PyTuple_CheckExact(__pyx_v_polygonized_watersheds_layer)) {
    __pyx_t_8 = __pyx_v_polygonized_watersheds_layer; __Pyx_INCREF(__pyx_t_8); __pyx_t_23 = 0;
    __pyx_t_24 = NULL;
  } else {
    __pyx_t_23 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_polygonized_watersheds_layer); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_24 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 944, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_24)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_23 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_19 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_23); __Pyx_INCREF(__pyx_t_19); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 944, __pyx_L1_error)
        #else
        __pyx_t_19 = PySequence_ITEM(__pyx_t_8, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 944, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        #endif
      } else {
        if (__pyx_t_23 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_19 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_23); __Pyx_INCREF(__pyx_t_19); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 944, __pyx_L1_error)
        #else
        __pyx_t_19 = PySequence_ITEM(__pyx_t_8, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 944, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        #endif
      }
    } else {
      __pyx_t_19 = __pyx_t_24(__pyx_t_8);
      if (unlikely(!__pyx_t_19)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 944, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_19);
    }
    __Pyx_XDECREF_SET(__pyx_v_feature, __pyx_t_19);
    __pyx_t_19 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":945
 *     cdef int fid
 *     for feature in polygonized_watersheds_layer:
 *         fid = feature.GetFID()             # <<<<<<<<<<<<<<
 *         # ws_id is tracked as 1 more than the FID.  See previous note about why.
 *         ws_id = feature.GetField('ws_id') - 1
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature, __pyx_n_s_GetFID); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_19 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_19); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_v_fid = __pyx_t_9;

    /* "src/geoprocessing/routing/watershed.pyx":947
 *         fid = feature.GetFID()
 *         # ws_id is tracked as 1 more than the FID.  See previous note about why.
 *         ws_id = feature.GetField('ws_id') - 1             # <<<<<<<<<<<<<<
 *         if (fragments_with_duplicates.find(ws_id)
 *                 == fragments_with_duplicates.end()):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_feature, __pyx_n_s_GetField); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_19 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_n_u_ws_id) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_ws_id);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_19, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_ws_id = __pyx_t_9;

    /* "src/geoprocessing/routing/watershed.pyx":949
 *         ws_id = feature.GetField('ws_id') - 1
 *         if (fragments_with_duplicates.find(ws_id)
 *                 == fragments_with_duplicates.end()):             # <<<<<<<<<<<<<<
 *             fragments_with_duplicates[ws_id] = cset[int]()
 *         fragments_with_duplicates[ws_id].insert(fid)
 */
    __pyx_t_5 = ((__pyx_v_fragments_with_duplicates.find(__pyx_v_ws_id) == __pyx_v_fragments_with_duplicates.end()) != 0);

    /* "src/geoprocessing/routing/watershed.pyx":948
 *         # ws_id is tracked as 1 more than the FID.  See previous note about why.
 *         ws_id = feature.GetField('ws_id') - 1
 *         if (fragments_with_duplicates.find(ws_id)             # <<<<<<<<<<<<<<
 *                 == fragments_with_duplicates.end()):
 *             fragments_with_duplicates[ws_id] = cset[int]()
 */
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/watershed.pyx":950
 *         if (fragments_with_duplicates.find(ws_id)
 *                 == fragments_with_duplicates.end()):
 *             fragments_with_duplicates[ws_id] = cset[int]()             # <<<<<<<<<<<<<<
 *         fragments_with_duplicates[ws_id].insert(fid)
 *     polygonized_watersheds_layer.ResetReading()
 */
      try {
        __pyx_t_33 = std::set<int> ();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 950, __pyx_L1_error)
      }
      (__pyx_v_fragments_with_duplicates[__pyx_v_ws_id]) = __pyx_t_33;

      /* "src/geoprocessing/routing/watershed.pyx":948
 *         # ws_id is tracked as 1 more than the FID.  See previous note about why.
 *         ws_id = feature.GetField('ws_id') - 1
 *         if (fragments_with_duplicates.find(ws_id)             # <<<<<<<<<<<<<<
 *                 == fragments_with_duplicates.end()):
 *             fragments_with_duplicates[ws_id] = cset[int]()
 */
    }

    /* "src/geoprocessing/routing/watershed.pyx":951
 *                 == fragments_with_duplicates.end()):
 *             fragments_with_duplicates[ws_id] = cset[int]()
 *         fragments_with_duplicates[ws_id].insert(fid)             # <<<<<<<<<<<<<<
 *     polygonized_watersheds_layer.ResetReading()
 * 
 */
    try {
      (__pyx_v_fragments_with_duplicates[__pyx_v_ws_id]).insert(__pyx_v_fid);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 951, __pyx_L1_error)
    }

    /* "src/geoprocessing/routing/watershed.pyx":944
 *     cdef cmap[int, cset[int]] fragments_with_duplicates
 *     cdef int fid
 *     for feature in polygonized_watersheds_layer:             # <<<<<<<<<<<<<<
 *         fid = feature.GetFID()
 *         # ws_id is tracked as 1 more than the FID.  See previous note about why.
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":952
 *             fragments_with_duplicates[ws_id] = cset[int]()
 *         fragments_with_duplicates[ws_id].insert(fid)
 *     polygonized_watersheds_layer.ResetReading()             # <<<<<<<<<<<<<<
 * 
 *     LOGGER.info(
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_polygonized_watersheds_layer, __pyx_n_s_ResetReading); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":954
 *     polygonized_watersheds_layer.ResetReading()
 * 
 *     LOGGER.info(             # <<<<<<<<<<<<<<
 *         'Consolidating %s fragments and copying field values to '
 *         'watersheds layer.', polygonized_watersheds_layer.GetFeatureCount())
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":956
 *     LOGGER.info(
 *         'Consolidating %s fragments and copying field values to '
 *         'watersheds layer.', polygonized_watersheds_layer.GetFeatureCount())             # <<<<<<<<<<<<<<
 *     source_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 *     source_layer = source_vector.GetLayer()
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_polygonized_watersheds_layer, __pyx_n_s_GetFeatureCount); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_19);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_19, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_19)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_kp_u_Consolidating_s_fragments_and_co, __pyx_t_7};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_kp_u_Consolidating_s_fragments_and_co, __pyx_t_7};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_u_Consolidating_s_fragments_and_co);
    __Pyx_GIVEREF(__pyx_kp_u_Consolidating_s_fragments_and_co);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_9, __pyx_kp_u_Consolidating_s_fragments_and_co);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":957
 *         'Consolidating %s fragments and copying field values to '
 *         'watersheds layer.', polygonized_watersheds_layer.GetFeatureCount())
 *     source_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)             # <<<<<<<<<<<<<<
 *     source_layer = source_vector.GetLayer()
 *     watersheds_layer.CreateFields(source_layer.schema)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_gdal); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_OpenEx); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_gdal); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_OF_VECTOR); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_v_outflow_vector_path, __pyx_t_7};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_v_outflow_vector_path, __pyx_t_7};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_19) {
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_19); __pyx_t_19 = NULL;
    }
    __Pyx_INCREF(__pyx_v_outflow_vector_path);
    __Pyx_GIVEREF(__pyx_v_outflow_vector_path);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_9, __pyx_v_outflow_vector_path);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_9, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_v_source_vector = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":958
 *         'watersheds layer.', polygonized_watersheds_layer.GetFeatureCount())
 *     source_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 *     source_layer = source_vector.GetLayer()             # <<<<<<<<<<<<<<
 *     watersheds_layer.CreateFields(source_layer.schema)
 * 
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_vector, __pyx_n_s_GetLayer); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_v_source_layer = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":959
 *     source_vector = gdal.OpenEx(outflow_vector_path, gdal.OF_VECTOR)
 *     source_layer = source_vector.GetLayer()
 *     watersheds_layer.CreateFields(source_layer.schema)             # <<<<<<<<<<<<<<
 * 
 *     watersheds_layer.StartTransaction()
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_layer, __pyx_n_s_CreateFields); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_layer, __pyx_n_s_schema); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_7, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":961
 *     watersheds_layer.CreateFields(source_layer.schema)
 * 
 *     watersheds_layer.StartTransaction()             # <<<<<<<<<<<<<<
 *     cdef int duplicate_fid
 *     cdef cset[int] duplicate_ids_set
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_layer, __pyx_n_s_StartTransaction); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":966
 *     cdef cset[int].iterator duplicate_ids_set_iterator
 *     cdef cmap[int, cset[int]].iterator fragments_with_duplicates_iterator
 *     fragments_with_duplicates_iterator = fragments_with_duplicates.begin()             # <<<<<<<<<<<<<<
 *     while fragments_with_duplicates_iterator != fragments_with_duplicates.end():
 *         ws_id = deref(fragments_with_duplicates_iterator).first
 */
  __pyx_v_fragments_with_duplicates_iterator = __pyx_v_fragments_with_duplicates.begin();

  /* "src/geoprocessing/routing/watershed.pyx":967
 *     cdef cmap[int, cset[int]].iterator fragments_with_duplicates_iterator
 *     fragments_with_duplicates_iterator = fragments_with_duplicates.begin()
 *     while fragments_with_duplicates_iterator != fragments_with_duplicates.end():             # <<<<<<<<<<<<<<
 *         ws_id = deref(fragments_with_duplicates_iterator).first
 *         duplicate_ids_set = deref(fragments_with_duplicates_iterator).second
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_fragments_with_duplicates_iterator != __pyx_v_fragments_with_duplicates.end()) != 0);
    if (!__pyx_t_5) break;

    /* "src/geoprocessing/routing/watershed.pyx":968
 *     fragments_with_duplicates_iterator = fragments_with_duplicates.begin()
 *     while fragments_with_duplicates_iterator != fragments_with_duplicates.end():
 *         ws_id = deref(fragments_with_duplicates_iterator).first             # <<<<<<<<<<<<<<
 *         duplicate_ids_set = deref(fragments_with_duplicates_iterator).second
 *         inc(fragments_with_duplicates_iterator)
 */
    __pyx_t_9 = (*__pyx_v_fragments_with_duplicates_iterator).first;
    __pyx_v_ws_id = __pyx_t_9;

    /* "src/geoprocessing/routing/watershed.pyx":969
 *     while fragments_with_duplicates_iterator != fragments_with_duplicates.end():
 *         ws_id = deref(fragments_with_duplicates_iterator).first
 *         duplicate_ids_set = deref(fragments_with_duplicates_iterator).second             # <<<<<<<<<<<<<<
 *         inc(fragments_with_duplicates_iterator)
 * 
 */
    __pyx_t_33 = (*__pyx_v_fragments_with_duplicates_iterator).second;
    __pyx_v_duplicate_ids_set = __pyx_t_33;

    /* "src/geoprocessing/routing/watershed.pyx":970
 *         ws_id = deref(fragments_with_duplicates_iterator).first
 *         duplicate_ids_set = deref(fragments_with_duplicates_iterator).second
 *         inc(fragments_with_duplicates_iterator)             # <<<<<<<<<<<<<<
 * 
 *         duplicate_ids_set_iterator = duplicate_ids_set.begin()
 */
    (void)((++__pyx_v_fragments_with_duplicates_iterator));

    /* "src/geoprocessing/routing/watershed.pyx":972
 *         inc(fragments_with_duplicates_iterator)
 * 
 *         duplicate_ids_set_iterator = duplicate_ids_set.begin()             # <<<<<<<<<<<<<<
 * 
 *         if duplicate_ids_set.size() == 1:
 */
    __pyx_v_duplicate_ids_set_iterator = __pyx_v_duplicate_ids_set.begin();

    /* "src/geoprocessing/routing/watershed.pyx":974
 *         duplicate_ids_set_iterator = duplicate_ids_set.begin()
 * 
 *         if duplicate_ids_set.size() == 1:             # <<<<<<<<<<<<<<
 *             duplicate_fid = deref(duplicate_ids_set_iterator)
 *             source_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 */
    __pyx_t_5 = ((__pyx_v_duplicate_ids_set.size() == 1) != 0);
    if (__pyx_t_5) {

      /* "src/geoprocessing/routing/watershed.pyx":975
 * 
 *         if duplicate_ids_set.size() == 1:
 *             duplicate_fid = deref(duplicate_ids_set_iterator)             # <<<<<<<<<<<<<<
 *             source_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 *             new_geometry = source_feature.GetGeometryRef()
 */
      __pyx_v_duplicate_fid = (*__pyx_v_duplicate_ids_set_iterator);

      /* "src/geoprocessing/routing/watershed.pyx":976
 *         if duplicate_ids_set.size() == 1:
 *             duplicate_fid = deref(duplicate_ids_set_iterator)
 *             source_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)             # <<<<<<<<<<<<<<
 *             new_geometry = source_feature.GetGeometryRef()
 *         else:
 */
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_polygonized_watersheds_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_duplicate_fid); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_7, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_source_feature, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":977
 *             duplicate_fid = deref(duplicate_ids_set_iterator)
 *             source_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 *             new_geometry = source_feature.GetGeometryRef()             # <<<<<<<<<<<<<<
 *         else:
 *             new_geometry = ogr.Geometry(ogr.wkbMultiPolygon)
 */
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_feature, __pyx_n_s_GetGeometryRef); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_new_geometry, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":974
 *         duplicate_ids_set_iterator = duplicate_ids_set.begin()
 * 
 *         if duplicate_ids_set.size() == 1:             # <<<<<<<<<<<<<<
 *             duplicate_fid = deref(duplicate_ids_set_iterator)
 *             source_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 */
      goto __pyx_L47;
    }

    /* "src/geoprocessing/routing/watershed.pyx":979
 *             new_geometry = source_feature.GetGeometryRef()
 *         else:
 *             new_geometry = ogr.Geometry(ogr.wkbMultiPolygon)             # <<<<<<<<<<<<<<
 *             while duplicate_ids_set_iterator != duplicate_ids_set.end():
 *                 duplicate_fid = deref(duplicate_ids_set_iterator)
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ogr); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_Geometry); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ogr); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_wkbMultiPolygon); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_8 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_13, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_new_geometry, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":980
 *         else:
 *             new_geometry = ogr.Geometry(ogr.wkbMultiPolygon)
 *             while duplicate_ids_set_iterator != duplicate_ids_set.end():             # <<<<<<<<<<<<<<
 *                 duplicate_fid = deref(duplicate_ids_set_iterator)
 *                 inc(duplicate_ids_set_iterator)
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_duplicate_ids_set_iterator != __pyx_v_duplicate_ids_set.end()) != 0);
        if (!__pyx_t_5) break;

        /* "src/geoprocessing/routing/watershed.pyx":981
 *             new_geometry = ogr.Geometry(ogr.wkbMultiPolygon)
 *             while duplicate_ids_set_iterator != duplicate_ids_set.end():
 *                 duplicate_fid = deref(duplicate_ids_set_iterator)             # <<<<<<<<<<<<<<
 *                 inc(duplicate_ids_set_iterator)
 * 
 */
        __pyx_v_duplicate_fid = (*__pyx_v_duplicate_ids_set_iterator);

        /* "src/geoprocessing/routing/watershed.pyx":982
 *             while duplicate_ids_set_iterator != duplicate_ids_set.end():
 *                 duplicate_fid = deref(duplicate_ids_set_iterator)
 *                 inc(duplicate_ids_set_iterator)             # <<<<<<<<<<<<<<
 * 
 *                 duplicate_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 */
        (void)((++__pyx_v_duplicate_ids_set_iterator));

        /* "src/geoprocessing/routing/watershed.pyx":984
 *                 inc(duplicate_ids_set_iterator)
 * 
 *                 duplicate_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)             # <<<<<<<<<<<<<<
 *                 duplicate_geometry = duplicate_feature.GetGeometryRef()
 *                 new_geometry.AddGeometry(duplicate_geometry)
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_polygonized_watersheds_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 984, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_duplicate_fid); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 984, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_8 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_13, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_7);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 984, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_duplicate_feature, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":985
 * 
 *                 duplicate_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 *                 duplicate_geometry = duplicate_feature.GetGeometryRef()             # <<<<<<<<<<<<<<
 *                 new_geometry.AddGeometry(duplicate_geometry)
 * 
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_duplicate_feature, __pyx_n_s_GetGeometryRef); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_duplicate_geometry, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "src/geoprocessing/routing/watershed.pyx":986
 *                 duplicate_feature = polygonized_watersheds_layer.GetFeature(duplicate_fid)
 *                 duplicate_geometry = duplicate_feature.GetGeometryRef()
 *                 new_geometry.AddGeometry(duplicate_geometry)             # <<<<<<<<<<<<<<
 * 
 *         watershed_feature = ogr.Feature(watersheds_layer.GetLayerDefn())
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_geometry, __pyx_n_s_AddGeometry); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 986, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_7, __pyx_v_duplicate_geometry) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_duplicate_geometry);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 986, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __pyx_L47:;

    /* "src/geoprocessing/routing/watershed.pyx":988
 *                 new_geometry.AddGeometry(duplicate_geometry)
 * 
 *         watershed_feature = ogr.Feature(watersheds_layer.GetLayerDefn())             # <<<<<<<<<<<<<<
 *         watershed_feature.SetGeometry(new_geometry)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ogr); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_Feature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_layer, __pyx_n_s_GetLayerDefn); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_12 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_watershed_feature, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":989
 * 
 *         watershed_feature = ogr.Feature(watersheds_layer.GetLayerDefn())
 *         watershed_feature.SetGeometry(new_geometry)             # <<<<<<<<<<<<<<
 * 
 *         source_feature = source_layer.GetFeature(ws_id)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetGeometry); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_v_new_geometry) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_new_geometry);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":991
 *         watershed_feature.SetGeometry(new_geometry)
 * 
 *         source_feature = source_layer.GetFeature(ws_id)             # <<<<<<<<<<<<<<
 *         for field_name, field_value in source_feature.items().items():
 *             watershed_feature.SetField(field_name, field_value)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_layer, __pyx_n_s_GetFeature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_ws_id); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_source_feature, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":992
 * 
 *         source_feature = source_layer.GetFeature(ws_id)
 *         for field_name, field_value in source_feature.items().items():             # <<<<<<<<<<<<<<
 *             watershed_feature.SetField(field_name, field_value)
 *             if field_name == 'ws_id':
 */
    __pyx_t_23 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_feature, __pyx_n_s_items); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 992, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_dict_iterator(__pyx_t_7, 0, __pyx_n_s_items, (&__pyx_t_34), (&__pyx_t_9)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8);
    __pyx_t_8 = __pyx_t_12;
    __pyx_t_12 = 0;
    while (1) {
      __pyx_t_35 = __Pyx_dict_iter_next(__pyx_t_8, __pyx_t_34, &__pyx_t_23, &__pyx_t_12, &__pyx_t_7, NULL, __pyx_t_9);
      if (unlikely(__pyx_t_35 == 0)) break;
      if (unlikely(__pyx_t_35 == -1)) __PYX_ERR(0, 992, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_field_name, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_field_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":993
 *         source_feature = source_layer.GetFeature(ws_id)
 *         for field_name, field_value in source_feature.items().items():
 *             watershed_feature.SetField(field_name, field_value)             # <<<<<<<<<<<<<<
 *             if field_name == 'ws_id':
 *                 continue
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_watershed_feature, __pyx_n_s_SetField); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = NULL;
      __pyx_t_35 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_35 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_field_name, __pyx_v_field_value};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_35, 2+__pyx_t_35); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_7);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_field_name, __pyx_v_field_value};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_35, 2+__pyx_t_35); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_7);
      } else
      #endif
      {
        __pyx_t_19 = PyTuple_New(2+__pyx_t_35); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        if (__pyx_t_13) {
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_13); __pyx_t_13 = NULL;
        }
        __Pyx_INCREF(__pyx_v_field_name);
        __Pyx_GIVEREF(__pyx_v_field_name);
        PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_35, __pyx_v_field_name);
        __Pyx_INCREF(__pyx_v_field_value);
        __Pyx_GIVEREF(__pyx_v_field_value);
        PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_35, __pyx_v_field_value);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_19, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/geoprocessing/routing/watershed.pyx":994
 *         for field_name, field_value in source_feature.items().items():
 *             watershed_feature.SetField(field_name, field_value)
 *             if field_name == 'ws_id':             # <<<<<<<<<<<<<<
 *                 continue
 *         watersheds_layer.CreateFeature(watershed_feature)
 */
      __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_field_name, __pyx_n_u_ws_id, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 994, __pyx_L1_error)
      if (__pyx_t_5) {

        /* "src/geoprocessing/routing/watershed.pyx":995
 *             watershed_feature.SetField(field_name, field_value)
 *             if field_name == 'ws_id':
 *                 continue             # <<<<<<<<<<<<<<
 *         watersheds_layer.CreateFeature(watershed_feature)
 *     watersheds_layer.CommitTransaction()
 */
        goto __pyx_L50_continue;

        /* "src/geoprocessing/routing/watershed.pyx":994
 *         for field_name, field_value in source_feature.items().items():
 *             watershed_feature.SetField(field_name, field_value)
 *             if field_name == 'ws_id':             # <<<<<<<<<<<<<<
 *                 continue
 *         watersheds_layer.CreateFeature(watershed_feature)
 */
      }
      __pyx_L50_continue:;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":996
 *             if field_name == 'ws_id':
 *                 continue
 *         watersheds_layer.CreateFeature(watershed_feature)             # <<<<<<<<<<<<<<
 *     watersheds_layer.CommitTransaction()
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_layer, __pyx_n_s_CreateFeature); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_v_watershed_feature) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_watershed_feature);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "src/geoprocessing/routing/watershed.pyx":997
 *                 continue
 *         watersheds_layer.CreateFeature(watershed_feature)
 *     watersheds_layer.CommitTransaction()             # <<<<<<<<<<<<<<
 * 
 *     polygonized_watersheds_layer = None
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_layer, __pyx_n_s_CommitTransaction); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":999
 *     watersheds_layer.CommitTransaction()
 * 
 *     polygonized_watersheds_layer = None             # <<<<<<<<<<<<<<
 *     if remove_temp_files:
 *         watersheds_vector.DeleteLayer('polygonized_watersheds')
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_polygonized_watersheds_layer, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":1000
 * 
 *     polygonized_watersheds_layer = None
 *     if remove_temp_files:             # <<<<<<<<<<<<<<
 *         watersheds_vector.DeleteLayer('polygonized_watersheds')
 *     LOGGER.info('Finished vector consolidation')
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_remove_temp_files); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1000, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/watershed.pyx":1001
 *     polygonized_watersheds_layer = None
 *     if remove_temp_files:
 *         watersheds_vector.DeleteLayer('polygonized_watersheds')             # <<<<<<<<<<<<<<
 *     LOGGER.info('Finished vector consolidation')
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_watersheds_vector, __pyx_n_s_DeleteLayer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_n_u_polygonized_watersheds) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_polygonized_watersheds);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":1000
 * 
 *     polygonized_watersheds_layer = None
 *     if remove_temp_files:             # <<<<<<<<<<<<<<
 *         watersheds_vector.DeleteLayer('polygonized_watersheds')
 *     LOGGER.info('Finished vector consolidation')
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":1002
 *     if remove_temp_files:
 *         watersheds_vector.DeleteLayer('polygonized_watersheds')
 *     LOGGER.info('Finished vector consolidation')             # <<<<<<<<<<<<<<
 * 
 *     watersheds_layer = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_7, __pyx_kp_u_Finished_vector_consolidation) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_kp_u_Finished_vector_consolidation);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":1004
 *     LOGGER.info('Finished vector consolidation')
 * 
 *     watersheds_layer = None             # <<<<<<<<<<<<<<
 *     watersheds_vector = None
 *     source_layer = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_watersheds_layer, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":1005
 * 
 *     watersheds_layer = None
 *     watersheds_vector = None             # <<<<<<<<<<<<<<
 *     source_layer = None
 *     source_vector = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_watersheds_vector, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":1006
 *     watersheds_layer = None
 *     watersheds_vector = None
 *     source_layer = None             # <<<<<<<<<<<<<<
 *     source_vector = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_source_layer, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":1007
 *     watersheds_vector = None
 *     source_layer = None
 *     source_vector = None             # <<<<<<<<<<<<<<
 * 
 *     if remove_temp_files:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF_SET(__pyx_v_source_vector, Py_None);

  /* "src/geoprocessing/routing/watershed.pyx":1009
 *     source_vector = None
 * 
 *     if remove_temp_files:             # <<<<<<<<<<<<<<
 *         shutil.rmtree(working_dir_path)
 *     LOGGER.info('Watershed delineation complete')
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_remove_temp_files); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1009, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "src/geoprocessing/routing/watershed.pyx":1010
 * 
 *     if remove_temp_files:
 *         shutil.rmtree(working_dir_path)             # <<<<<<<<<<<<<<
 *     LOGGER.info('Watershed delineation complete')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_shutil); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_rmtree); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_8 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_v_working_dir_path) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_working_dir_path);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "src/geoprocessing/routing/watershed.pyx":1009
 *     source_vector = None
 * 
 *     if remove_temp_files:             # <<<<<<<<<<<<<<
 *         shutil.rmtree(working_dir_path)
 *     LOGGER.info('Watershed delineation complete')
 */
  }

  /* "src/geoprocessing/routing/watershed.pyx":1011
 *     if remove_temp_files:
 *         shutil.rmtree(working_dir_path)
 *     LOGGER.info('Watershed delineation complete')             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_LOGGER); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_7, __pyx_kp_u_Watershed_delineation_complete) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_kp_u_Watershed_delineation_complete);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":624
 * 
 * @cython.boundscheck(False)
 * def delineate_watersheds_d8(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("ecoshard.geoprocessing.routing.watershed.delineate_watersheds_d8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_working_dir_path);
  __Pyx_XDECREF(__pyx_v_flow_dir_info);
  __Pyx_XDECREF(__pyx_v_source_gt);
  __Pyx_XDECREF(__pyx_v_bbox_minx);
  __Pyx_XDECREF(__pyx_v_bbox_miny);
  __Pyx_XDECREF(__pyx_v_bbox_maxx);
  __Pyx_XDECREF(__pyx_v_bbox_maxy);
  __Pyx_XDECREF(__pyx_v_flow_dir_bbox);
  __Pyx_XDECREF((PyObject *)__pyx_v_flow_dir_managed_raster);
  __Pyx_XDECREF(__pyx_v_gtiff_driver);
  __Pyx_XDECREF(__pyx_v_flow_dir_srs);
  __Pyx_XDECREF(__pyx_v_outflow_vector);
  __Pyx_XDECREF(__pyx_v_driver);
  __Pyx_XDECREF(__pyx_v_watersheds_srs);
  __Pyx_XDECREF(__pyx_v_watersheds_vector);
  __Pyx_XDECREF(__pyx_v_polygonized_watersheds_layer);
  __Pyx_XDECREF(__pyx_v_watersheds_layer);
  __Pyx_XDECREF(__pyx_v_index_field);
  __Pyx_XDECREF((PyObject *)__pyx_v_scratch_managed_raster);
  __Pyx_XDECREF(__pyx_v_outflow_layer);
  __Pyx_XDECREF(__pyx_v_feature);
  __Pyx_XDECREF(__pyx_v_geom);
  __Pyx_XDECREF(__pyx_v_geom_wkb);
  __Pyx_XDECREF(__pyx_v_shapely_geom);
  __Pyx_XDECREF(__pyx_v_seeds_raster_path);
  __Pyx_XDECREF(__pyx_v_diagnostic_vector_path);
  __Pyx_XDECREF(__pyx_v_scratch_raster_path);
  __Pyx_XDECREF(__pyx_v_scratch_raster);
  __Pyx_XDECREF(__pyx_v_vrt_options);
  __Pyx_XDECREF(__pyx_v_vrt_path);
  __Pyx_XDECREF(__pyx_v_vrt_raster);
  __Pyx_XDECREF(__pyx_v_vrt_band);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_source_vector);
  __Pyx_XDECREF(__pyx_v_source_layer);
  __Pyx_XDECREF(__pyx_v_source_feature);
  __Pyx_XDECREF(__pyx_v_new_geometry);
  __Pyx_XDECREF(__pyx_v_duplicate_feature);
  __Pyx_XDECREF(__pyx_v_duplicate_geometry);
  __Pyx_XDECREF(__pyx_v_watershed_feature);
  __Pyx_XDECREF(__pyx_v_field_name);
  __Pyx_XDECREF(__pyx_v_field_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":933
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":936
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":938
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":939
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":945
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L3_error)

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":946
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 946, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 947, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":951
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 951, __pyx_L3_error)

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":952
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 952, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 953, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":957
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 957, __pyx_L3_error)

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":958
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 958, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":959
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 959, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":981
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":996
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1006
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1013
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1020
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_long____long")
 * cdef object __pyx_convert_pair_to_py_long____long(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_long____long(std::pair<long,long>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_long____long", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_long____long")
 * cdef object __pyx_convert_pair_to_py_long____long(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_long____long")
 * cdef object __pyx_convert_pair_to_py_long____long(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_long____long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_long__and_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_long__and_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<long,long>  __pyx_convert_pair_from_py_long__and_long(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<long,long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  long __pyx_t_5;
  long __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_long__and_long", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_long__and_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_long__and_long(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_long__and_long(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_x); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_v_y); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_r = std::pair<long,long> (((long)__pyx_t_5), ((long)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_long__and_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_long__and_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_long__and_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster __pyx_vtable_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster;

static PyObject *__pyx_tp_new_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)o);
  p->__pyx_vtab = __pyx_vtabptr_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster;
  new((void*)&(p->dirty_blocks)) std::set<int> ();
  p->raster_path = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster(PyObject *o) {
  struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *p = (struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->dirty_blocks);
  Py_CLEAR(p->raster_path);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster[] = {
  {"close", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_7close, METH_NOARGS, __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_6close},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecoshard.geoprocessing.routing.watershed._ManagedRaster", /*tp_name*/
  sizeof(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_watershed(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_watershed},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "watershed",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_ALL_TOUCHED_True, __pyx_k_ALL_TOUCHED_True, sizeof(__pyx_k_ALL_TOUCHED_True), 0, 1, 0, 0},
  {&__pyx_n_s_AddGeometry, __pyx_k_AddGeometry, sizeof(__pyx_k_AddGeometry), 0, 0, 1, 1},
  {&__pyx_kp_u_BIGTIFF_YES, __pyx_k_BIGTIFF_YES, sizeof(__pyx_k_BIGTIFF_YES), 0, 1, 0, 0},
  {&__pyx_kp_u_BLOCKXSIZE_d, __pyx_k_BLOCKXSIZE_d, sizeof(__pyx_k_BLOCKXSIZE_d), 0, 1, 0, 0},
  {&__pyx_kp_u_BLOCKYSIZE_d, __pyx_k_BLOCKYSIZE_d, sizeof(__pyx_k_BLOCKYSIZE_d), 0, 1, 0, 0},
  {&__pyx_n_s_BuildVRT, __pyx_k_BuildVRT, sizeof(__pyx_k_BuildVRT), 0, 0, 1, 1},
  {&__pyx_n_s_BuildVRTOptions, __pyx_k_BuildVRTOptions, sizeof(__pyx_k_BuildVRTOptions), 0, 0, 1, 1},
  {&__pyx_kp_u_COMPRESS_LZW, __pyx_k_COMPRESS_LZW, sizeof(__pyx_k_COMPRESS_LZW), 0, 1, 0, 0},
  {&__pyx_n_s_CommitTransaction, __pyx_k_CommitTransaction, sizeof(__pyx_k_CommitTransaction), 0, 0, 1, 1},
  {&__pyx_kp_u_Consolidating_s_fragments_and_co, __pyx_k_Consolidating_s_fragments_and_co, sizeof(__pyx_k_Consolidating_s_fragments_and_co), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_open_outflow_vector_s, __pyx_k_Could_not_open_outflow_vector_s, sizeof(__pyx_k_Could_not_open_outflow_vector_s), 0, 1, 0, 0},
  {&__pyx_n_s_Create, __pyx_k_Create, sizeof(__pyx_k_Create), 0, 0, 1, 1},
  {&__pyx_n_s_CreateDataSource, __pyx_k_CreateDataSource, sizeof(__pyx_k_CreateDataSource), 0, 0, 1, 1},
  {&__pyx_n_s_CreateFeature, __pyx_k_CreateFeature, sizeof(__pyx_k_CreateFeature), 0, 0, 1, 1},
  {&__pyx_n_s_CreateField, __pyx_k_CreateField, sizeof(__pyx_k_CreateField), 0, 0, 1, 1},
  {&__pyx_n_s_CreateFields, __pyx_k_CreateFields, sizeof(__pyx_k_CreateFields), 0, 0, 1, 1},
  {&__pyx_n_s_CreateGeometryFromWkb, __pyx_k_CreateGeometryFromWkb, sizeof(__pyx_k_CreateGeometryFromWkb), 0, 0, 1, 1},
  {&__pyx_n_s_CreateLayer, __pyx_k_CreateLayer, sizeof(__pyx_k_CreateLayer), 0, 0, 1, 1},
  {&__pyx_kp_u_Creating_flow_dir_bbox, __pyx_k_Creating_flow_dir_bbox, sizeof(__pyx_k_Creating_flow_dir_bbox), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_flow_dir_managed_raster, __pyx_k_Creating_flow_dir_managed_raster, sizeof(__pyx_k_Creating_flow_dir_managed_raster), 0, 1, 0, 0},
  {&__pyx_n_s_DeleteLayer, __pyx_k_DeleteLayer, sizeof(__pyx_k_DeleteLayer), 0, 0, 1, 1},
  {&__pyx_kp_u_Delineating_watershed_s_of_s_ws, __pyx_k_Delineating_watershed_s_of_s_ws, sizeof(__pyx_k_Delineating_watershed_s_of_s_ws), 0, 1, 0, 0},
  {&__pyx_kp_u_Delineating_watershed_s_of_s_ws_2, __pyx_k_Delineating_watershed_s_of_s_ws_2, sizeof(__pyx_k_Delineating_watershed_s_of_s_ws_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Delineating_watersheds, __pyx_k_Delineating_watersheds, sizeof(__pyx_k_Delineating_watersheds), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Block_size_is_not_a_power, __pyx_k_Error_Block_size_is_not_a_power, sizeof(__pyx_k_Error_Block_size_is_not_a_power), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_band_ID_s_is_not_a_valid_b, __pyx_k_Error_band_ID_s_is_not_a_valid_b, sizeof(__pyx_k_Error_band_ID_s_is_not_a_valid_b), 0, 1, 0, 0},
  {&__pyx_n_s_ExportToWkb, __pyx_k_ExportToWkb, sizeof(__pyx_k_ExportToWkb), 0, 0, 1, 1},
  {&__pyx_n_s_ExportToWkt, __pyx_k_ExportToWkt, sizeof(__pyx_k_ExportToWkt), 0, 0, 1, 1},
  {&__pyx_n_s_Feature, __pyx_k_Feature, sizeof(__pyx_k_Feature), 0, 0, 1, 1},
  {&__pyx_n_s_FieldDefn, __pyx_k_FieldDefn, sizeof(__pyx_k_FieldDefn), 0, 0, 1, 1},
  {&__pyx_kp_u_Finished_delineating_s_watershed, __pyx_k_Finished_delineating_s_watershed, sizeof(__pyx_k_Finished_delineating_s_watershed), 0, 1, 0, 0},
  {&__pyx_kp_u_Finished_vector_consolidation, __pyx_k_Finished_vector_consolidation, sizeof(__pyx_k_Finished_vector_consolidation), 0, 1, 0, 0},
  {&__pyx_n_s_FlushCache, __pyx_k_FlushCache, sizeof(__pyx_k_FlushCache), 0, 0, 1, 1},
  {&__pyx_n_s_GA_Update, __pyx_k_GA_Update, sizeof(__pyx_k_GA_Update), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Byte, __pyx_k_GDT_Byte, sizeof(__pyx_k_GDT_Byte), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_UInt32, __pyx_k_GDT_UInt32, sizeof(__pyx_k_GDT_UInt32), 0, 0, 1, 1},
  {&__pyx_n_s_GDT_Unknown, __pyx_k_GDT_Unknown, sizeof(__pyx_k_GDT_Unknown), 0, 0, 1, 1},
  {&__pyx_n_u_GPKG, __pyx_k_GPKG, sizeof(__pyx_k_GPKG), 0, 1, 0, 1},
  {&__pyx_n_s_GTIFF_CREATION_OPTIONS, __pyx_k_GTIFF_CREATION_OPTIONS, sizeof(__pyx_k_GTIFF_CREATION_OPTIONS), 0, 0, 1, 1},
  {&__pyx_n_u_GTiff, __pyx_k_GTiff, sizeof(__pyx_k_GTiff), 0, 1, 0, 1},
  {&__pyx_n_s_Geometry, __pyx_k_Geometry, sizeof(__pyx_k_Geometry), 0, 0, 1, 1},
  {&__pyx_n_s_GetDriverByName, __pyx_k_GetDriverByName, sizeof(__pyx_k_GetDriverByName), 0, 0, 1, 1},
  {&__pyx_n_s_GetFID, __pyx_k_GetFID, sizeof(__pyx_k_GetFID), 0, 0, 1, 1},
  {&__pyx_n_s_GetFeature, __pyx_k_GetFeature, sizeof(__pyx_k_GetFeature), 0, 0, 1, 1},
  {&__pyx_n_s_GetFeatureCount, __pyx_k_GetFeatureCount, sizeof(__pyx_k_GetFeatureCount), 0, 0, 1, 1},
  {&__pyx_n_s_GetField, __pyx_k_GetField, sizeof(__pyx_k_GetField), 0, 0, 1, 1},
  {&__pyx_n_s_GetGeometryRef, __pyx_k_GetGeometryRef, sizeof(__pyx_k_GetGeometryRef), 0, 0, 1, 1},
  {&__pyx_n_s_GetLayer, __pyx_k_GetLayer, sizeof(__pyx_k_GetLayer), 0, 0, 1, 1},
  {&__pyx_n_s_GetLayerDefn, __pyx_k_GetLayerDefn, sizeof(__pyx_k_GetLayerDefn), 0, 0, 1, 1},
  {&__pyx_n_s_GetRasterBand, __pyx_k_GetRasterBand, sizeof(__pyx_k_GetRasterBand), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportFromWkt, __pyx_k_ImportFromWkt, sizeof(__pyx_k_ImportFromWkt), 0, 0, 1, 1},
  {&__pyx_n_s_IsEmpty, __pyx_k_IsEmpty, sizeof(__pyx_k_IsEmpty), 0, 0, 1, 1},
  {&__pyx_n_s_LOGGER, __pyx_k_LOGGER, sizeof(__pyx_k_LOGGER), 0, 0, 1, 1},
  {&__pyx_n_s_ManagedRaster, __pyx_k_ManagedRaster, sizeof(__pyx_k_ManagedRaster), 0, 0, 1, 1},
  {&__pyx_n_u_Memory, __pyx_k_Memory, sizeof(__pyx_k_Memory), 0, 1, 0, 1},
  {&__pyx_n_s_OFTInteger, __pyx_k_OFTInteger, sizeof(__pyx_k_OFTInteger), 0, 0, 1, 1},
  {&__pyx_n_s_OF_RASTER, __pyx_k_OF_RASTER, sizeof(__pyx_k_OF_RASTER), 0, 0, 1, 1},
  {&__pyx_n_s_OF_VECTOR, __pyx_k_OF_VECTOR, sizeof(__pyx_k_OF_VECTOR), 0, 0, 1, 1},
  {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {&__pyx_n_s_OpenEx, __pyx_k_OpenEx, sizeof(__pyx_k_OpenEx), 0, 0, 1, 1},
  {&__pyx_kp_u_Outflow_feature_s_does_not_inter, __pyx_k_Outflow_feature_s_does_not_inter, sizeof(__pyx_k_Outflow_feature_s_does_not_inter), 0, 1, 0, 0},
  {&__pyx_kp_u_Outflow_feature_s_does_not_overl, __pyx_k_Outflow_feature_s_does_not_overl, sizeof(__pyx_k_Outflow_feature_s_does_not_overl), 0, 1, 0, 0},
  {&__pyx_kp_u_Outflow_feature_s_has_empty_geom, __pyx_k_Outflow_feature_s_has_empty_geom, sizeof(__pyx_k_Outflow_feature_s_has_empty_geom), 0, 1, 0, 0},
  {&__pyx_n_s_Point, __pyx_k_Point, sizeof(__pyx_k_Point), 0, 0, 1, 1},
  {&__pyx_n_s_Polygon, __pyx_k_Polygon, sizeof(__pyx_k_Polygon), 0, 0, 1, 1},
  {&__pyx_n_s_Polygonize, __pyx_k_Polygonize, sizeof(__pyx_k_Polygonize), 0, 0, 1, 1},
  {&__pyx_n_s_RasterizeLayer, __pyx_k_RasterizeLayer, sizeof(__pyx_k_RasterizeLayer), 0, 0, 1, 1},
  {&__pyx_n_s_ReadAsArray, __pyx_k_ReadAsArray, sizeof(__pyx_k_ReadAsArray), 0, 0, 1, 1},
  {&__pyx_n_s_ResetReading, __pyx_k_ResetReading, sizeof(__pyx_k_ResetReading), 0, 0, 1, 1},
  {&__pyx_kp_u_SPARSE_OK_TRUE, __pyx_k_SPARSE_OK_TRUE, sizeof(__pyx_k_SPARSE_OK_TRUE), 0, 1, 0, 0},
  {&__pyx_n_s_SetField, __pyx_k_SetField, sizeof(__pyx_k_SetField), 0, 0, 1, 1},
  {&__pyx_n_s_SetGeoTransform, __pyx_k_SetGeoTransform, sizeof(__pyx_k_SetGeoTransform), 0, 0, 1, 1},
  {&__pyx_n_s_SetGeometry, __pyx_k_SetGeometry, sizeof(__pyx_k_SetGeometry), 0, 0, 1, 1},
  {&__pyx_n_s_SetProjection, __pyx_k_SetProjection, sizeof(__pyx_k_SetProjection), 0, 0, 1, 1},
  {&__pyx_n_s_SetWidth, __pyx_k_SetWidth, sizeof(__pyx_k_SetWidth), 0, 0, 1, 1},
  {&__pyx_n_s_SpatialReference, __pyx_k_SpatialReference, sizeof(__pyx_k_SpatialReference), 0, 0, 1, 1},
  {&__pyx_n_s_StartTransaction, __pyx_k_StartTransaction, sizeof(__pyx_k_StartTransaction), 0, 0, 1, 1},
  {&__pyx_kp_u_TILED_YES, __pyx_k_TILED_YES, sizeof(__pyx_k_TILED_YES), 0, 1, 0, 0},
  {&__pyx_kp_u_Testing_geometry_bbox, __pyx_k_Testing_geometry_bbox, sizeof(__pyx_k_Testing_geometry_bbox), 0, 1, 0, 0},
  {&__pyx_kp_u_This_exception_is_happeningin_C, __pyx_k_This_exception_is_happeningin_C, sizeof(__pyx_k_This_exception_is_happeningin_C), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_u_VRT, __pyx_k_VRT, sizeof(__pyx_k_VRT), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_WSID_1, __pyx_k_WSID_1, sizeof(__pyx_k_WSID_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Watershed_delineation_complete, __pyx_k_Watershed_delineation_complete, sizeof(__pyx_k_Watershed_delineation_complete), 0, 1, 0, 0},
  {&__pyx_n_s_WriteArray, __pyx_k_WriteArray, sizeof(__pyx_k_WriteArray), 0, 0, 1, 1},
  {&__pyx_kp_u_Y_m_d__H__M__S, __pyx_k_Y_m_d__H__M__S, sizeof(__pyx_k_Y_m_d__H__M__S), 0, 1, 0, 0},
  {&__pyx_n_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 1},
  {&__pyx_n_s_allowed_drivers, __pyx_k_allowed_drivers, sizeof(__pyx_k_allowed_drivers), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_band_id, __pyx_k_band_id, sizeof(__pyx_k_band_id), 0, 0, 1, 1},
  {&__pyx_n_s_bbox_maxx, __pyx_k_bbox_maxx, sizeof(__pyx_k_bbox_maxx), 0, 0, 1, 1},
  {&__pyx_n_s_bbox_maxy, __pyx_k_bbox_maxy, sizeof(__pyx_k_bbox_maxy), 0, 0, 1, 1},
  {&__pyx_n_s_bbox_minx, __pyx_k_bbox_minx, sizeof(__pyx_k_bbox_minx), 0, 0, 1, 1},
  {&__pyx_n_s_bbox_miny, __pyx_k_bbox_miny, sizeof(__pyx_k_bbox_miny), 0, 0, 1, 1},
  {&__pyx_n_u_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 1, 0, 1},
  {&__pyx_n_u_bounding_box, __pyx_k_bounding_box, sizeof(__pyx_k_bounding_box), 0, 1, 0, 1},
  {&__pyx_n_s_bounds, __pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_box, __pyx_k_box, sizeof(__pyx_k_box), 0, 0, 1, 1},
  {&__pyx_n_s_burn_values, __pyx_k_burn_values, sizeof(__pyx_k_burn_values), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_current_fid, __pyx_k_current_fid, sizeof(__pyx_k_current_fid), 0, 0, 1, 1},
  {&__pyx_n_s_current_pixel, __pyx_k_current_pixel, sizeof(__pyx_k_current_pixel), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_d8_flow_dir_raster_path_band, __pyx_k_d8_flow_dir_raster_path_band, sizeof(__pyx_k_d8_flow_dir_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_delineate_watersheds_d8, __pyx_k_delineate_watersheds_d8, sizeof(__pyx_k_delineate_watersheds_d8), 0, 0, 1, 1},
  {&__pyx_n_s_diagnostic_vector_path, __pyx_k_diagnostic_vector_path, sizeof(__pyx_k_diagnostic_vector_path), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_driver, __pyx_k_driver, sizeof(__pyx_k_driver), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_duplicate_feature, __pyx_k_duplicate_feature, sizeof(__pyx_k_duplicate_feature), 0, 0, 1, 1},
  {&__pyx_n_s_duplicate_fid, __pyx_k_duplicate_fid, sizeof(__pyx_k_duplicate_fid), 0, 0, 1, 1},
  {&__pyx_n_s_duplicate_geometry, __pyx_k_duplicate_geometry, sizeof(__pyx_k_duplicate_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_duplicate_ids_set, __pyx_k_duplicate_ids_set, sizeof(__pyx_k_duplicate_ids_set), 0, 0, 1, 1},
  {&__pyx_n_s_duplicate_ids_set_iterator, __pyx_k_duplicate_ids_set_iterator, sizeof(__pyx_k_duplicate_ids_set_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_ecoshard_geoprocessing_routing_w, __pyx_k_ecoshard_geoprocessing_routing_w, sizeof(__pyx_k_ecoshard_geoprocessing_routing_w), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_feature, __pyx_k_feature, sizeof(__pyx_k_feature), 0, 0, 1, 1},
  {&__pyx_n_s_fid, __pyx_k_fid, sizeof(__pyx_k_fid), 0, 0, 1, 1},
  {&__pyx_n_s_field_name, __pyx_k_field_name, sizeof(__pyx_k_field_name), 0, 0, 1, 1},
  {&__pyx_n_s_field_value, __pyx_k_field_value, sizeof(__pyx_k_field_value), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_bbox, __pyx_k_flow_dir_bbox, sizeof(__pyx_k_flow_dir_bbox), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_info, __pyx_k_flow_dir_info, sizeof(__pyx_k_flow_dir_info), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_managed_raster, __pyx_k_flow_dir_managed_raster, sizeof(__pyx_k_flow_dir_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_n_cols, __pyx_k_flow_dir_n_cols, sizeof(__pyx_k_flow_dir_n_cols), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_n_rows, __pyx_k_flow_dir_n_rows, sizeof(__pyx_k_flow_dir_n_rows), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_nodata, __pyx_k_flow_dir_nodata, sizeof(__pyx_k_flow_dir_nodata), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_origin_x, __pyx_k_flow_dir_origin_x, sizeof(__pyx_k_flow_dir_origin_x), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_origin_y, __pyx_k_flow_dir_origin_y, sizeof(__pyx_k_flow_dir_origin_y), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_pixelsize_x, __pyx_k_flow_dir_pixelsize_x, sizeof(__pyx_k_flow_dir_pixelsize_x), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_pixelsize_y, __pyx_k_flow_dir_pixelsize_y, sizeof(__pyx_k_flow_dir_pixelsize_y), 0, 0, 1, 1},
  {&__pyx_n_s_flow_dir_srs, __pyx_k_flow_dir_srs, sizeof(__pyx_k_flow_dir_srs), 0, 0, 1, 1},
  {&__pyx_n_s_fragments_with_duplicates, __pyx_k_fragments_with_duplicates, sizeof(__pyx_k_fragments_with_duplicates), 0, 0, 1, 1},
  {&__pyx_n_s_fragments_with_duplicates_iterat, __pyx_k_fragments_with_duplicates_iterat, sizeof(__pyx_k_fragments_with_duplicates_iterat), 0, 0, 1, 1},
  {&__pyx_n_s_gdal, __pyx_k_gdal, sizeof(__pyx_k_gdal), 0, 0, 1, 1},
  {&__pyx_n_s_geom, __pyx_k_geom, sizeof(__pyx_k_geom), 0, 0, 1, 1},
  {&__pyx_n_s_geom_wkb, __pyx_k_geom_wkb, sizeof(__pyx_k_geom_wkb), 0, 0, 1, 1},
  {&__pyx_n_s_geometry, __pyx_k_geometry, sizeof(__pyx_k_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_geotransform, __pyx_k_geotransform, sizeof(__pyx_k_geotransform), 0, 0, 1, 1},
  {&__pyx_n_u_geotransform, __pyx_k_geotransform, sizeof(__pyx_k_geotransform), 0, 1, 0, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_raster_info, __pyx_k_get_raster_info, sizeof(__pyx_k_get_raster_info), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gmtime, __pyx_k_gmtime, sizeof(__pyx_k_gmtime), 0, 0, 1, 1},
  {&__pyx_n_s_gtiff_driver, __pyx_k_gtiff_driver, sizeof(__pyx_k_gtiff_driver), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index_field, __pyx_k_index_field, sizeof(__pyx_k_index_field), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_intersects, __pyx_k_intersects, sizeof(__pyx_k_intersects), 0, 0, 1, 1},
  {&__pyx_n_s_is_raster_path_band_formatted, __pyx_k_is_raster_path_band_formatted, sizeof(__pyx_k_is_raster_path_band_formatted), 0, 0, 1, 1},
  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iterblocks, __pyx_k_iterblocks, sizeof(__pyx_k_iterblocks), 0, 0, 1, 1},
  {&__pyx_n_s_ix_max, __pyx_k_ix_max, sizeof(__pyx_k_ix_max), 0, 0, 1, 1},
  {&__pyx_n_s_ix_min, __pyx_k_ix_min, sizeof(__pyx_k_ix_min), 0, 0, 1, 1},
  {&__pyx_n_s_iy_max, __pyx_k_iy_max, sizeof(__pyx_k_iy_max), 0, 0, 1, 1},
  {&__pyx_n_s_iy_min, __pyx_k_iy_min, sizeof(__pyx_k_iy_min), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_last_log_time, __pyx_k_last_log_time, sizeof(__pyx_k_last_log_time), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_log2, __pyx_k_log2, sizeof(__pyx_k_log2), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_makedirs, __pyx_k_makedirs, sizeof(__pyx_k_makedirs), 0, 0, 1, 1},
  {&__pyx_n_u_mem, __pyx_k_mem, sizeof(__pyx_k_mem), 0, 1, 0, 1},
  {&__pyx_n_s_mkdtemp, __pyx_k_mkdtemp, sizeof(__pyx_k_mkdtemp), 0, 0, 1, 1},
  {&__pyx_n_u_n_bands, __pyx_k_n_bands, sizeof(__pyx_k_n_bands), 0, 1, 0, 1},
  {&__pyx_n_s_n_cells_visited, __pyx_k_n_cells_visited, sizeof(__pyx_k_n_cells_visited), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_col, __pyx_k_neighbor_col, sizeof(__pyx_k_neighbor_col), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_index, __pyx_k_neighbor_index, sizeof(__pyx_k_neighbor_index), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_pixel, __pyx_k_neighbor_pixel, sizeof(__pyx_k_neighbor_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_row, __pyx_k_neighbor_row, sizeof(__pyx_k_neighbor_row), 0, 0, 1, 1},
  {&__pyx_n_s_new_geometry, __pyx_k_new_geometry, sizeof(__pyx_k_new_geometry), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_u_nodata, __pyx_k_nodata, sizeof(__pyx_k_nodata), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_ogr, __pyx_k_ogr, sizeof(__pyx_k_ogr), 0, 0, 1, 1},
  {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_osgeo, __pyx_k_osgeo, sizeof(__pyx_k_osgeo), 0, 0, 1, 1},
  {&__pyx_n_s_osr, __pyx_k_osr, sizeof(__pyx_k_osr), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_feature_count, __pyx_k_outflow_feature_count, sizeof(__pyx_k_outflow_feature_count), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_layer, __pyx_k_outflow_layer, sizeof(__pyx_k_outflow_layer), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_vector, __pyx_k_outflow_vector, sizeof(__pyx_k_outflow_vector), 0, 0, 1, 1},
  {&__pyx_n_s_outflow_vector_path, __pyx_k_outflow_vector_path, sizeof(__pyx_k_outflow_vector_path), 0, 0, 1, 1},
  {&__pyx_n_s_outputBounds, __pyx_k_outputBounds, sizeof(__pyx_k_outputBounds), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_u_polygonized_watersheds, __pyx_k_polygonized_watersheds, sizeof(__pyx_k_polygonized_watersheds), 0, 1, 0, 1},
  {&__pyx_n_s_polygonized_watersheds_layer, __pyx_k_polygonized_watersheds_layer, sizeof(__pyx_k_polygonized_watersheds_layer), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_prep, __pyx_k_prep, sizeof(__pyx_k_prep), 0, 0, 1, 1},
  {&__pyx_n_s_prepared, __pyx_k_prepared, sizeof(__pyx_k_prepared), 0, 0, 1, 1},
  {&__pyx_n_s_process_queue, __pyx_k_process_queue, sizeof(__pyx_k_process_queue), 0, 0, 1, 1},
  {&__pyx_n_s_process_queue_set, __pyx_k_process_queue_set, sizeof(__pyx_k_process_queue_set), 0, 0, 1, 1},
  {&__pyx_n_u_projection_wkt, __pyx_k_projection_wkt, sizeof(__pyx_k_projection_wkt), 0, 1, 0, 1},
  {&__pyx_n_s_pygeoprocessing, __pyx_k_pygeoprocessing, sizeof(__pyx_k_pygeoprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raster_path, __pyx_k_raster_path, sizeof(__pyx_k_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_raster_path_band, __pyx_k_raster_path_band, sizeof(__pyx_k_raster_path_band), 0, 0, 1, 1},
  {&__pyx_n_u_raster_size, __pyx_k_raster_size, sizeof(__pyx_k_raster_size), 0, 1, 0, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_remove_temp_files, __pyx_k_remove_temp_files, sizeof(__pyx_k_remove_temp_files), 0, 0, 1, 1},
  {&__pyx_n_s_return_set, __pyx_k_return_set, sizeof(__pyx_k_return_set), 0, 0, 1, 1},
  {&__pyx_n_s_reverse_flow, __pyx_k_reverse_flow, sizeof(__pyx_k_reverse_flow), 0, 0, 1, 1},
  {&__pyx_n_s_rmtree, __pyx_k_rmtree, sizeof(__pyx_k_rmtree), 0, 0, 1, 1},
  {&__pyx_kp_u_s_is_not_a_file, __pyx_k_s_is_not_a_file, sizeof(__pyx_k_s_is_not_a_file), 0, 1, 0, 0},
  {&__pyx_kp_u_s_is_supposed_to_be_a_raster_ba, __pyx_k_s_is_supposed_to_be_a_raster_ba, sizeof(__pyx_k_s_is_supposed_to_be_a_raster_ba), 0, 1, 0, 0},
  {&__pyx_kp_u_s_rasterized_tif, __pyx_k_s_rasterized_tif, sizeof(__pyx_k_s_rasterized_tif), 0, 1, 0, 0},
  {&__pyx_kp_u_s_scratch_tif, __pyx_k_s_scratch_tif, sizeof(__pyx_k_s_scratch_tif), 0, 1, 0, 0},
  {&__pyx_kp_u_s_seeds_gpkg, __pyx_k_s_seeds_gpkg, sizeof(__pyx_k_s_seeds_gpkg), 0, 1, 0, 0},
  {&__pyx_kp_u_s_vrt_vrt, __pyx_k_s_vrt_vrt, sizeof(__pyx_k_s_vrt_vrt), 0, 1, 0, 0},
  {&__pyx_n_s_schema, __pyx_k_schema, sizeof(__pyx_k_schema), 0, 0, 1, 1},
  {&__pyx_n_s_scratch_managed_raster, __pyx_k_scratch_managed_raster, sizeof(__pyx_k_scratch_managed_raster), 0, 0, 1, 1},
  {&__pyx_n_s_scratch_raster, __pyx_k_scratch_raster, sizeof(__pyx_k_scratch_raster), 0, 0, 1, 1},
  {&__pyx_n_s_scratch_raster_path, __pyx_k_scratch_raster_path, sizeof(__pyx_k_scratch_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_seed_iterator, __pyx_k_seed_iterator, sizeof(__pyx_k_seed_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_seeds, __pyx_k_seeds, sizeof(__pyx_k_seeds), 0, 0, 1, 1},
  {&__pyx_n_u_seeds, __pyx_k_seeds, sizeof(__pyx_k_seeds), 0, 1, 0, 1},
  {&__pyx_n_s_seeds_in_watershed, __pyx_k_seeds_in_watershed, sizeof(__pyx_k_seeds_in_watershed), 0, 0, 1, 1},
  {&__pyx_n_s_seeds_iterator, __pyx_k_seeds_iterator, sizeof(__pyx_k_seeds_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_seeds_raster_path, __pyx_k_seeds_raster_path, sizeof(__pyx_k_seeds_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shapely, __pyx_k_shapely, sizeof(__pyx_k_shapely), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_geom, __pyx_k_shapely_geom, sizeof(__pyx_k_shapely_geom), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_geometry, __pyx_k_shapely_geometry, sizeof(__pyx_k_shapely_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_prepared, __pyx_k_shapely_prepared, sizeof(__pyx_k_shapely_prepared), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_wkb, __pyx_k_shapely_wkb, sizeof(__pyx_k_shapely_wkb), 0, 0, 1, 1},
  {&__pyx_n_s_shutil, __pyx_k_shutil, sizeof(__pyx_k_shutil), 0, 0, 1, 1},
  {&__pyx_n_s_source_feature, __pyx_k_source_feature, sizeof(__pyx_k_source_feature), 0, 0, 1, 1},
  {&__pyx_n_s_source_geom_wkb, __pyx_k_source_geom_wkb, sizeof(__pyx_k_source_geom_wkb), 0, 0, 1, 1},
  {&__pyx_n_s_source_gt, __pyx_k_source_gt, sizeof(__pyx_k_source_gt), 0, 0, 1, 1},
  {&__pyx_n_s_source_layer, __pyx_k_source_layer, sizeof(__pyx_k_source_layer), 0, 0, 1, 1},
  {&__pyx_n_s_source_vector, __pyx_k_source_vector, sizeof(__pyx_k_source_vector), 0, 0, 1, 1},
  {&__pyx_n_s_split_geometry_into_seeds, __pyx_k_split_geometry_into_seeds, sizeof(__pyx_k_split_geometry_into_seeds), 0, 0, 1, 1},
  {&__pyx_kp_s_src_geoprocessing_routing_waters, __pyx_k_src_geoprocessing_routing_waters, sizeof(__pyx_k_src_geoprocessing_routing_waters), 0, 0, 1, 0},
  {&__pyx_n_s_strftime, __pyx_k_strftime, sizeof(__pyx_k_strftime), 0, 0, 1, 1},
  {&__pyx_n_s_target_layer_name, __pyx_k_target_layer_name, sizeof(__pyx_k_target_layer_name), 0, 0, 1, 1},
  {&__pyx_n_s_target_raster_path, __pyx_k_target_raster_path, sizeof(__pyx_k_target_raster_path), 0, 0, 1, 1},
  {&__pyx_n_s_target_watersheds_vector_path, __pyx_k_target_watersheds_vector_path, sizeof(__pyx_k_target_watersheds_vector_path), 0, 0, 1, 1},
  {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_u_user_geometry, __pyx_k_user_geometry, sizeof(__pyx_k_user_geometry), 0, 1, 0, 1},
  {&__pyx_n_s_vrt_band, __pyx_k_vrt_band, sizeof(__pyx_k_vrt_band), 0, 0, 1, 1},
  {&__pyx_n_s_vrt_options, __pyx_k_vrt_options, sizeof(__pyx_k_vrt_options), 0, 0, 1, 1},
  {&__pyx_n_s_vrt_path, __pyx_k_vrt_path, sizeof(__pyx_k_vrt_path), 0, 0, 1, 1},
  {&__pyx_n_s_vrt_raster, __pyx_k_vrt_raster, sizeof(__pyx_k_vrt_raster), 0, 0, 1, 1},
  {&__pyx_kp_u_watershed_delineation_trivial__s, __pyx_k_watershed_delineation_trivial__s, sizeof(__pyx_k_watershed_delineation_trivial__s), 0, 1, 0, 0},
  {&__pyx_n_s_watershed_feature, __pyx_k_watershed_feature, sizeof(__pyx_k_watershed_feature), 0, 0, 1, 1},
  {&__pyx_n_u_watersheds, __pyx_k_watersheds, sizeof(__pyx_k_watersheds), 0, 1, 0, 1},
  {&__pyx_n_s_watersheds_created, __pyx_k_watersheds_created, sizeof(__pyx_k_watersheds_created), 0, 0, 1, 1},
  {&__pyx_n_s_watersheds_layer, __pyx_k_watersheds_layer, sizeof(__pyx_k_watersheds_layer), 0, 0, 1, 1},
  {&__pyx_n_s_watersheds_srs, __pyx_k_watersheds_srs, sizeof(__pyx_k_watersheds_srs), 0, 0, 1, 1},
  {&__pyx_n_s_watersheds_vector, __pyx_k_watersheds_vector, sizeof(__pyx_k_watersheds_vector), 0, 0, 1, 1},
  {&__pyx_n_s_win_xsize, __pyx_k_win_xsize, sizeof(__pyx_k_win_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_win_ysize, __pyx_k_win_ysize, sizeof(__pyx_k_win_ysize), 0, 0, 1, 1},
  {&__pyx_n_s_wkb, __pyx_k_wkb, sizeof(__pyx_k_wkb), 0, 0, 1, 1},
  {&__pyx_n_s_wkbMultiPolygon, __pyx_k_wkbMultiPolygon, sizeof(__pyx_k_wkbMultiPolygon), 0, 0, 1, 1},
  {&__pyx_n_s_wkbPoint, __pyx_k_wkbPoint, sizeof(__pyx_k_wkbPoint), 0, 0, 1, 1},
  {&__pyx_n_s_wkbPolygon, __pyx_k_wkbPolygon, sizeof(__pyx_k_wkbPolygon), 0, 0, 1, 1},
  {&__pyx_n_s_wkbUnknown, __pyx_k_wkbUnknown, sizeof(__pyx_k_wkbUnknown), 0, 0, 1, 1},
  {&__pyx_n_s_working_dir, __pyx_k_working_dir, sizeof(__pyx_k_working_dir), 0, 0, 1, 1},
  {&__pyx_n_s_working_dir_path, __pyx_k_working_dir_path, sizeof(__pyx_k_working_dir_path), 0, 0, 1, 1},
  {&__pyx_n_s_write_diagnostic_vector, __pyx_k_write_diagnostic_vector, sizeof(__pyx_k_write_diagnostic_vector), 0, 0, 1, 1},
  {&__pyx_n_s_write_mode, __pyx_k_write_mode, sizeof(__pyx_k_write_mode), 0, 0, 1, 1},
  {&__pyx_n_s_ws_id, __pyx_k_ws_id, sizeof(__pyx_k_ws_id), 0, 0, 1, 1},
  {&__pyx_n_u_ws_id, __pyx_k_ws_id, sizeof(__pyx_k_ws_id), 0, 1, 0, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_xoff, __pyx_k_xoff, sizeof(__pyx_k_xoff), 0, 0, 1, 1},
  {&__pyx_n_u_xoff, __pyx_k_xoff, sizeof(__pyx_k_xoff), 0, 1, 0, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_yoff, __pyx_k_yoff, sizeof(__pyx_k_yoff), 0, 0, 1, 1},
  {&__pyx_n_u_yoff, __pyx_k_yoff, sizeof(__pyx_k_yoff), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 114, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 244, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 244, __pyx_L1_error)
  #endif
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 947, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "C:/Users/richp/miniconda3/envs/py39/lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "src/geoprocessing/routing/watershed.pyx":388
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_raster_path_band); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_waters, __pyx_n_s_is_raster_path_band_formatted, 388, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 388, __pyx_L1_error)

  /* "src/geoprocessing/routing/watershed.pyx":571
 * 
 * 
 * def _split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows, target_raster_path,
 */
  __pyx_tuple__8 = PyTuple_Pack(11, __pyx_n_s_source_geom_wkb, __pyx_n_s_geotransform, __pyx_n_s_flow_dir_srs, __pyx_n_s_flow_dir_n_cols, __pyx_n_s_flow_dir_n_rows, __pyx_n_s_target_raster_path, __pyx_n_s_diagnostic_vector_path, __pyx_n_s_return_set, __pyx_n_s_seeds, __pyx_n_s_seed, __pyx_n_s_seeds_iterator); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(7, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_waters, __pyx_n_s_split_geometry_into_seeds, 571, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 571, __pyx_L1_error)

  /* "src/geoprocessing/routing/watershed.pyx":624
 * 
 * @cython.boundscheck(False)
 * def delineate_watersheds_d8(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,
 */
  __pyx_tuple__11 = PyTuple_Pack(87, __pyx_n_s_d8_flow_dir_raster_path_band, __pyx_n_s_outflow_vector_path, __pyx_n_s_target_watersheds_vector_path, __pyx_n_s_working_dir, __pyx_n_s_write_diagnostic_vector, __pyx_n_s_remove_temp_files, __pyx_n_s_target_layer_name, __pyx_n_s_working_dir_path, __pyx_n_s_flow_dir_info, __pyx_n_s_flow_dir_nodata, __pyx_n_s_source_gt, __pyx_n_s_flow_dir_origin_x, __pyx_n_s_flow_dir_origin_y, __pyx_n_s_flow_dir_pixelsize_x, __pyx_n_s_flow_dir_pixelsize_y, __pyx_n_s_flow_dir_n_cols, __pyx_n_s_flow_dir_n_rows, __pyx_n_s_ws_id, __pyx_n_s_bbox_minx, __pyx_n_s_bbox_miny, __pyx_n_s_bbox_maxx, __pyx_n_s_bbox_maxy, __pyx_n_s_flow_dir_bbox, __pyx_n_s_flow_dir_managed_raster, __pyx_n_s_gtiff_driver, __pyx_n_s_flow_dir_srs, __pyx_n_s_outflow_vector, __pyx_n_s_driver, __pyx_n_s_watersheds_srs, __pyx_n_s_watersheds_vector, __pyx_n_s_polygonized_watersheds_layer, __pyx_n_s_watersheds_layer, __pyx_n_s_index_field, __pyx_n_s_reverse_flow, __pyx_n_s_neighbor_col, __pyx_n_s_neighbor_row, __pyx_n_s_process_queue, __pyx_n_s_process_queue_set, __pyx_n_s_neighbor_pixel, __pyx_n_s_ix_min, __pyx_n_s_iy_min, __pyx_n_s_ix_max, __pyx_n_s_iy_max, __pyx_n_s_scratch_managed_raster, __pyx_n_s_watersheds_created, __pyx_n_s_current_fid, __pyx_n_s_outflow_feature_count, __pyx_n_s_seed_iterator, __pyx_n_s_seeds_in_watershed, __pyx_n_s_last_log_time, __pyx_n_s_n_cells_visited, __pyx_n_s_outflow_layer, __pyx_n_s_feature, __pyx_n_s_geom, __pyx_n_s_geom_wkb, __pyx_n_s_shapely_geom, __pyx_n_s_seeds_raster_path, __pyx_n_s_diagnostic_vector_path, __pyx_n_s_seed, __pyx_n_s_scratch_raster_path, __pyx_n_s_scratch_raster, __pyx_n_s_current_pixel, __pyx_n_s_neighbor_index, __pyx_n_s_x1, __pyx_n_s_y1, __pyx_n_s_x2, __pyx_n_s_y2, __pyx_n_s_vrt_options, __pyx_n_s_vrt_path, __pyx_n_s_vrt_raster, __pyx_n_s_vrt_band, __pyx_n_s__10, __pyx_n_s_fragments_with_duplicates, __pyx_n_s_fid, __pyx_n_s_source_vector, __pyx_n_s_source_layer, __pyx_n_s_duplicate_fid, __pyx_n_s_duplicate_ids_set, __pyx_n_s_duplicate_ids_set_iterator, __pyx_n_s_fragments_with_duplicates_iterat, __pyx_n_s_source_feature, __pyx_n_s_new_geometry, __pyx_n_s_duplicate_feature, __pyx_n_s_duplicate_geometry, __pyx_n_s_watershed_feature, __pyx_n_s_field_name, __pyx_n_s_field_value); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(7, 0, 87, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_geoprocessing_routing_waters, __pyx_n_s_delineate_watersheds_d8, 624, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_24 = PyInt_FromLong(24); if (unlikely(!__pyx_int_24)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster = &__pyx_vtable_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.set = (void (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int, int, int))__pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_set;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.get = (int (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int, int))__pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster_get;
  __pyx_vtable_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster._load_block = (void (*)(struct __pyx_obj_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster *, int))__pyx_f_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster__load_block;
  if (PyType_Ready(&__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.tp_dictoffset && __pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 69, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__.doc = __pyx_doc_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8ecoshard_13geoprocessing_7routing_9watershed_14_ManagedRaster___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster.tp_dict, __pyx_vtabptr_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ManagedRaster, (PyObject *)&__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_ptype_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster = &__pyx_type_8ecoshard_13geoprocessing_7routing_9watershed__ManagedRaster;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initwatershed(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initwatershed(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_watershed(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_watershed(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_watershed(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static int __pyx_t_4[8];
  static int __pyx_t_5[8];
  static int __pyx_t_6[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'watershed' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_watershed(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("watershed", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ecoshard__geoprocessing__routing__watershed) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ecoshard.geoprocessing.routing.watershed")) {
      if (unlikely(PyDict_SetItemString(modules, "ecoshard.geoprocessing.routing.watershed", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "src/geoprocessing/routing/watershed.pyx":3
 * # coding=UTF-8
 * # cython: language_level=3
 * import logging             # <<<<<<<<<<<<<<
 * import os
 * import shutil
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":4
 * # cython: language_level=3
 * import logging
 * import os             # <<<<<<<<<<<<<<
 * import shutil
 * import tempfile
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":5
 * import logging
 * import os
 * import shutil             # <<<<<<<<<<<<<<
 * import tempfile
 * import time
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_shutil, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shutil, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":6
 * import os
 * import shutil
 * import tempfile             # <<<<<<<<<<<<<<
 * import time
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_tempfile, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":7
 * import shutil
 * import tempfile
 * import time             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":21
 * from libcpp.queue cimport queue
 * from libcpp.set cimport set as cset
 * from osgeo import gdal             # <<<<<<<<<<<<<<
 * from osgeo import ogr
 * from osgeo import osr
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_gdal);
  __Pyx_GIVEREF(__pyx_n_s_gdal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_gdal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_gdal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gdal, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":22
 * from libcpp.set cimport set as cset
 * from osgeo import gdal
 * from osgeo import ogr             # <<<<<<<<<<<<<<
 * from osgeo import osr
 * import numpy
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ogr);
  __Pyx_GIVEREF(__pyx_n_s_ogr);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ogr);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ogr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ogr, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":23
 * from osgeo import gdal
 * from osgeo import ogr
 * from osgeo import osr             # <<<<<<<<<<<<<<
 * import numpy
 * import shapely.geometry
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_osr);
  __Pyx_GIVEREF(__pyx_n_s_osr);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_osr);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_osgeo, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_osr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_osr, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":24
 * from osgeo import ogr
 * from osgeo import osr
 * import numpy             # <<<<<<<<<<<<<<
 * import shapely.geometry
 * import shapely.prepared
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":25
 * from osgeo import osr
 * import numpy
 * import shapely.geometry             # <<<<<<<<<<<<<<
 * import shapely.prepared
 * import shapely.wkb
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_shapely_geometry, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shapely, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":26
 * import numpy
 * import shapely.geometry
 * import shapely.prepared             # <<<<<<<<<<<<<<
 * import shapely.wkb
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_shapely_prepared, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shapely, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":27
 * import shapely.geometry
 * import shapely.prepared
 * import shapely.wkb             # <<<<<<<<<<<<<<
 * 
 * import pygeoprocessing
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_shapely_wkb, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shapely, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":29
 * import shapely.wkb
 * 
 * import pygeoprocessing             # <<<<<<<<<<<<<<
 * 
 * LOGGER = logging.getLogger(__name__)
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pygeoprocessing, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pygeoprocessing, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":31
 * import pygeoprocessing
 * 
 * LOGGER = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 * 
 * # This module creates rasters with a memory xy block size of 2**BLOCK_BITS
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOGGER, __pyx_t_3) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":34
 * 
 * # This module creates rasters with a memory xy block size of 2**BLOCK_BITS
 * cdef int BLOCK_BITS = 8             # <<<<<<<<<<<<<<
 * 
 * # Number of raster blocks to hold in memory at once per Managed Raster
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_BLOCK_BITS = 8;

  /* "src/geoprocessing/routing/watershed.pyx":37
 * 
 * # Number of raster blocks to hold in memory at once per Managed Raster
 * cdef int MANAGED_RASTER_N_BLOCKS = 2**7             # <<<<<<<<<<<<<<
 * 
 * # these are the creation options that'll be used for all the rasters
 */
  __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_MANAGED_RASTER_N_BLOCKS = 0x80;

  /* "src/geoprocessing/routing/watershed.pyx":43
 *     'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',
 *     'SPARSE_OK=TRUE',
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),             # <<<<<<<<<<<<<<
 *     'BLOCKYSIZE=%d' % (1 << BLOCK_BITS))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((1 << __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_BLOCK_BITS)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_BLOCKXSIZE_d, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":44
 *     'SPARSE_OK=TRUE',
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 *     'BLOCKYSIZE=%d' % (1 << BLOCK_BITS))             # <<<<<<<<<<<<<<
 * 
 * # this is used to calculate the opposite D8 direction interpreting the index
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((1 << __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_BLOCK_BITS)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_BLOCKYSIZE_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":41
 * # these are the creation options that'll be used for all the rasters
 * GTIFF_CREATION_OPTIONS = (
 *     'TILED=YES', 'BIGTIFF=YES', 'COMPRESS=LZW',             # <<<<<<<<<<<<<<
 *     'SPARSE_OK=TRUE',
 *     'BLOCKXSIZE=%d' % (1 << BLOCK_BITS),
 */
  __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_u_TILED_YES);
  __Pyx_GIVEREF(__pyx_kp_u_TILED_YES);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_TILED_YES);
  __Pyx_INCREF(__pyx_kp_u_BIGTIFF_YES);
  __Pyx_GIVEREF(__pyx_kp_u_BIGTIFF_YES);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u_BIGTIFF_YES);
  __Pyx_INCREF(__pyx_kp_u_COMPRESS_LZW);
  __Pyx_GIVEREF(__pyx_kp_u_COMPRESS_LZW);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_COMPRESS_LZW);
  __Pyx_INCREF(__pyx_kp_u_SPARSE_OK_TRUE);
  __Pyx_GIVEREF(__pyx_kp_u_SPARSE_OK_TRUE);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_kp_u_SPARSE_OK_TRUE);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GTIFF_CREATION_OPTIONS, __pyx_t_3) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":48
 * # this is used to calculate the opposite D8 direction interpreting the index
 * # as a D8 direction
 * cdef int* D8_REVERSE_DIRECTION = [4, 5, 6, 7, 0, 1, 2, 3]             # <<<<<<<<<<<<<<
 * cdef int* NEIGHBOR_COL = [1, 1, 0, -1, -1, -1, 0, 1]
 * cdef int* NEIGHBOR_ROW = [0, -1, -1, -1, 0, 1, 1, 1]
 */
  __pyx_t_4[0] = 4;
  __pyx_t_4[1] = 5;
  __pyx_t_4[2] = 6;
  __pyx_t_4[3] = 7;
  __pyx_t_4[4] = 0;
  __pyx_t_4[5] = 1;
  __pyx_t_4[6] = 2;
  __pyx_t_4[7] = 3;
  __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_D8_REVERSE_DIRECTION = __pyx_t_4;

  /* "src/geoprocessing/routing/watershed.pyx":49
 * # as a D8 direction
 * cdef int* D8_REVERSE_DIRECTION = [4, 5, 6, 7, 0, 1, 2, 3]
 * cdef int* NEIGHBOR_COL = [1, 1, 0, -1, -1, -1, 0, 1]             # <<<<<<<<<<<<<<
 * cdef int* NEIGHBOR_ROW = [0, -1, -1, -1, 0, 1, 1, 1]
 * 
 */
  __pyx_t_5[0] = 1;
  __pyx_t_5[1] = 1;
  __pyx_t_5[2] = 0;
  __pyx_t_5[3] = -1;
  __pyx_t_5[4] = -1;
  __pyx_t_5[5] = -1;
  __pyx_t_5[6] = 0;
  __pyx_t_5[7] = 1;
  __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_NEIGHBOR_COL = __pyx_t_5;

  /* "src/geoprocessing/routing/watershed.pyx":50
 * cdef int* D8_REVERSE_DIRECTION = [4, 5, 6, 7, 0, 1, 2, 3]
 * cdef int* NEIGHBOR_COL = [1, 1, 0, -1, -1, -1, 0, 1]
 * cdef int* NEIGHBOR_ROW = [0, -1, -1, -1, 0, 1, 1, 1]             # <<<<<<<<<<<<<<
 * 
 * # this is a least recently used cache written in C++ in an external file,
 */
  __pyx_t_6[0] = 0;
  __pyx_t_6[1] = -1;
  __pyx_t_6[2] = -1;
  __pyx_t_6[3] = -1;
  __pyx_t_6[4] = 0;
  __pyx_t_6[5] = 1;
  __pyx_t_6[6] = 1;
  __pyx_t_6[7] = 1;
  __pyx_v_8ecoshard_13geoprocessing_7routing_9watershed_NEIGHBOR_ROW = __pyx_t_6;

  /* "src/geoprocessing/routing/watershed.pyx":388
 * 
 * 
 * def _is_raster_path_band_formatted(raster_path_band):             # <<<<<<<<<<<<<<
 *     """Return true if raster path band is a (str, int) tuple/list."""
 *     if not isinstance(raster_path_band, (list, tuple)):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_9watershed_1_is_raster_path_band_formatted, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_raster_path_band_formatted, __pyx_t_3) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":571
 * 
 * 
 * def _split_geometry_into_seeds(             # <<<<<<<<<<<<<<
 *         source_geom_wkb, geotransform, flow_dir_srs,
 *         flow_dir_n_cols, flow_dir_n_rows, target_raster_path,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_9watershed_3_split_geometry_into_seeds, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_split_geometry_into_seeds, __pyx_t_3) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":624
 * 
 * @cython.boundscheck(False)
 * def delineate_watersheds_d8(             # <<<<<<<<<<<<<<
 *         d8_flow_dir_raster_path_band, outflow_vector_path,
 *         target_watersheds_vector_path, working_dir=None,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_8ecoshard_13geoprocessing_7routing_9watershed_5delineate_watersheds_d8, NULL, __pyx_n_s_ecoshard_geoprocessing_routing_w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_delineate_watersheds_d8, __pyx_t_3) < 0) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/geoprocessing/routing/watershed.pyx":1
 * # coding=UTF-8             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * import logging
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_long__and_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_long__and_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ecoshard.geoprocessing.routing.watershed", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ecoshard.geoprocessing.routing.watershed");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* None */
  static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* None */
  static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* PyIntFromDouble */
  #if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
  static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
  static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
  static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
